var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// asset-input/node_modules/shimmer/index.js
var require_shimmer = __commonJS({
  "asset-input/node_modules/shimmer/index.js"(exports2, module2) {
    "use strict";
    function isFunction(funktion) {
      return typeof funktion === "function";
    }
    var logger = console.error.bind(console);
    function defineProperty(obj, name, value) {
      var enumerable = !!obj[name] && obj.propertyIsEnumerable(name);
      Object.defineProperty(obj, name, {
        configurable: true,
        enumerable,
        writable: true,
        value
      });
    }
    function shimmer(options) {
      if (options && options.logger) {
        if (!isFunction(options.logger))
          logger("new logger isn't a function, not replacing");
        else
          logger = options.logger;
      }
    }
    function wrap(nodule, name, wrapper) {
      if (!nodule || !nodule[name]) {
        logger("no original function " + name + " to wrap");
        return;
      }
      if (!wrapper) {
        logger("no wrapper function");
        logger(new Error().stack);
        return;
      }
      if (!isFunction(nodule[name]) || !isFunction(wrapper)) {
        logger("original object and wrapper must be functions");
        return;
      }
      var original = nodule[name];
      var wrapped = wrapper(original, name);
      defineProperty(wrapped, "__original", original);
      defineProperty(wrapped, "__unwrap", function() {
        if (nodule[name] === wrapped)
          defineProperty(nodule, name, original);
      });
      defineProperty(wrapped, "__wrapped", true);
      defineProperty(nodule, name, wrapped);
      return wrapped;
    }
    function massWrap(nodules, names, wrapper) {
      if (!nodules) {
        logger("must provide one or more modules to patch");
        logger(new Error().stack);
        return;
      } else if (!Array.isArray(nodules)) {
        nodules = [nodules];
      }
      if (!(names && Array.isArray(names))) {
        logger("must provide one or more functions to wrap on modules");
        return;
      }
      nodules.forEach(function(nodule) {
        names.forEach(function(name) {
          wrap(nodule, name, wrapper);
        });
      });
    }
    function unwrap(nodule, name) {
      if (!nodule || !nodule[name]) {
        logger("no function to unwrap.");
        logger(new Error().stack);
        return;
      }
      if (!nodule[name].__unwrap) {
        logger("no original to unwrap to -- has " + name + " already been unwrapped?");
      } else {
        return nodule[name].__unwrap();
      }
    }
    function massUnwrap(nodules, names) {
      if (!nodules) {
        logger("must provide one or more modules to patch");
        logger(new Error().stack);
        return;
      } else if (!Array.isArray(nodules)) {
        nodules = [nodules];
      }
      if (!(names && Array.isArray(names))) {
        logger("must provide one or more functions to unwrap on modules");
        return;
      }
      nodules.forEach(function(nodule) {
        names.forEach(function(name) {
          unwrap(nodule, name);
        });
      });
    }
    shimmer.wrap = wrap;
    shimmer.massWrap = massWrap;
    shimmer.unwrap = unwrap;
    shimmer.massUnwrap = massUnwrap;
    module2.exports = shimmer;
  }
});

// asset-input/node_modules/emitter-listener/listener.js
var require_listener = __commonJS({
  "asset-input/node_modules/emitter-listener/listener.js"(exports2, module2) {
    "use strict";
    var shimmer = require_shimmer();
    var wrap = shimmer.wrap;
    var unwrap = shimmer.unwrap;
    var SYMBOL = "wrap@before";
    function defineProperty(obj, name, value) {
      var enumerable = !!obj[name] && obj.propertyIsEnumerable(name);
      Object.defineProperty(obj, name, {
        configurable: true,
        enumerable,
        writable: true,
        value
      });
    }
    function _process(self, listeners) {
      var l = listeners.length;
      for (var p = 0; p < l; p++) {
        var listener = listeners[p];
        var before = self[SYMBOL];
        if (typeof before === "function") {
          before(listener);
        } else if (Array.isArray(before)) {
          var length = before.length;
          for (var i = 0; i < length; i++)
            before[i](listener);
        }
      }
    }
    function _listeners(self, event) {
      var listeners;
      listeners = self._events && self._events[event];
      if (!Array.isArray(listeners)) {
        if (listeners) {
          listeners = [listeners];
        } else {
          listeners = [];
        }
      }
      return listeners;
    }
    function _findAndProcess(self, event, before) {
      var after = _listeners(self, event);
      var unprocessed = after.filter(function(fn) {
        return before.indexOf(fn) === -1;
      });
      if (unprocessed.length > 0)
        _process(self, unprocessed);
    }
    function _wrap(unwrapped, visit) {
      if (!unwrapped)
        return;
      var wrapped = unwrapped;
      if (typeof unwrapped === "function") {
        wrapped = visit(unwrapped);
      } else if (Array.isArray(unwrapped)) {
        wrapped = [];
        for (var i = 0; i < unwrapped.length; i++) {
          wrapped[i] = visit(unwrapped[i]);
        }
      }
      return wrapped;
    }
    module2.exports = function wrapEmitter(emitter, onAddListener, onEmit) {
      if (!emitter || !emitter.on || !emitter.addListener || !emitter.removeListener || !emitter.emit) {
        throw new Error("can only wrap real EEs");
      }
      if (!onAddListener)
        throw new Error("must have function to run on listener addition");
      if (!onEmit)
        throw new Error("must have function to wrap listeners when emitting");
      function adding(on) {
        return function added(event, listener) {
          var existing = _listeners(this, event).slice();
          try {
            var returned = on.call(this, event, listener);
            _findAndProcess(this, event, existing);
            return returned;
          } finally {
            if (!this.on.__wrapped)
              wrap(this, "on", adding);
            if (!this.addListener.__wrapped)
              wrap(this, "addListener", adding);
          }
        };
      }
      function emitting(emit) {
        return function emitted(event) {
          if (!this._events || !this._events[event])
            return emit.apply(this, arguments);
          var unwrapped = this._events[event];
          function remover(removeListener) {
            return function removed() {
              this._events[event] = unwrapped;
              try {
                return removeListener.apply(this, arguments);
              } finally {
                unwrapped = this._events[event];
                this._events[event] = _wrap(unwrapped, onEmit);
              }
            };
          }
          wrap(this, "removeListener", remover);
          try {
            this._events[event] = _wrap(unwrapped, onEmit);
            return emit.apply(this, arguments);
          } finally {
            unwrap(this, "removeListener");
            this._events[event] = unwrapped;
          }
        };
      }
      if (!emitter[SYMBOL]) {
        defineProperty(emitter, SYMBOL, onAddListener);
      } else if (typeof emitter[SYMBOL] === "function") {
        defineProperty(emitter, SYMBOL, [emitter[SYMBOL], onAddListener]);
      } else if (Array.isArray(emitter[SYMBOL])) {
        emitter[SYMBOL].push(onAddListener);
      }
      if (!emitter.__wrapped) {
        wrap(emitter, "addListener", adding);
        wrap(emitter, "on", adding);
        wrap(emitter, "emit", emitting);
        defineProperty(emitter, "__unwrap", function() {
          unwrap(emitter, "addListener");
          unwrap(emitter, "on");
          unwrap(emitter, "emit");
          delete emitter[SYMBOL];
          delete emitter.__wrapped;
        });
        defineProperty(emitter, "__wrapped", true);
      }
    };
  }
});

// asset-input/node_modules/cls-hooked/context.js
var require_context = __commonJS({
  "asset-input/node_modules/cls-hooked/context.js"(exports2, module2) {
    "use strict";
    var util = require("util");
    var assert = require("assert");
    var wrapEmitter = require_listener();
    var async_hooks = require("async_hooks");
    var CONTEXTS_SYMBOL = "cls@contexts";
    var ERROR_SYMBOL = "error@context";
    var DEBUG_CLS_HOOKED = process.env.DEBUG_CLS_HOOKED;
    var currentUid = -1;
    module2.exports = {
      getNamespace,
      createNamespace,
      destroyNamespace,
      reset,
      ERROR_SYMBOL
    };
    function Namespace(name) {
      this.name = name;
      this.active = null;
      this._set = [];
      this.id = null;
      this._contexts = new Map();
      this._indent = 0;
    }
    Namespace.prototype.set = function set(key, value) {
      if (!this.active) {
        throw new Error("No context available. ns.run() or ns.bind() must be called first.");
      }
      this.active[key] = value;
      if (DEBUG_CLS_HOOKED) {
        const indentStr = " ".repeat(this._indent < 0 ? 0 : this._indent);
        debug2(indentStr + "CONTEXT-SET KEY:" + key + "=" + value + " in ns:" + this.name + " currentUid:" + currentUid + " active:" + util.inspect(this.active, { showHidden: true, depth: 2, colors: true }));
      }
      return value;
    };
    Namespace.prototype.get = function get(key) {
      if (!this.active) {
        if (DEBUG_CLS_HOOKED) {
          const asyncHooksCurrentId = async_hooks.currentId();
          const triggerId = async_hooks.triggerAsyncId();
          const indentStr = " ".repeat(this._indent < 0 ? 0 : this._indent);
          debug2(`${indentStr}CONTEXT-GETTING KEY NO ACTIVE NS: (${this.name}) ${key}=undefined currentUid:${currentUid} asyncHooksCurrentId:${asyncHooksCurrentId} triggerId:${triggerId} len:${this._set.length}`);
        }
        return void 0;
      }
      if (DEBUG_CLS_HOOKED) {
        const asyncHooksCurrentId = async_hooks.executionAsyncId();
        const triggerId = async_hooks.triggerAsyncId();
        const indentStr = " ".repeat(this._indent < 0 ? 0 : this._indent);
        debug2(indentStr + "CONTEXT-GETTING KEY:" + key + "=" + this.active[key] + " (" + this.name + ") currentUid:" + currentUid + " active:" + util.inspect(this.active, { showHidden: true, depth: 2, colors: true }));
        debug2(`${indentStr}CONTEXT-GETTING KEY: (${this.name}) ${key}=${this.active[key]} currentUid:${currentUid} asyncHooksCurrentId:${asyncHooksCurrentId} triggerId:${triggerId} len:${this._set.length} active:${util.inspect(this.active)}`);
      }
      return this.active[key];
    };
    Namespace.prototype.createContext = function createContext() {
      let context = Object.create(this.active ? this.active : Object.prototype);
      context._ns_name = this.name;
      context.id = currentUid;
      if (DEBUG_CLS_HOOKED) {
        const asyncHooksCurrentId = async_hooks.executionAsyncId();
        const triggerId = async_hooks.triggerAsyncId();
        const indentStr = " ".repeat(this._indent < 0 ? 0 : this._indent);
        debug2(`${indentStr}CONTEXT-CREATED Context: (${this.name}) currentUid:${currentUid} asyncHooksCurrentId:${asyncHooksCurrentId} triggerId:${triggerId} len:${this._set.length} context:${util.inspect(context, { showHidden: true, depth: 2, colors: true })}`);
      }
      return context;
    };
    Namespace.prototype.run = function run(fn) {
      let context = this.createContext();
      this.enter(context);
      try {
        if (DEBUG_CLS_HOOKED) {
          const triggerId = async_hooks.triggerAsyncId();
          const asyncHooksCurrentId = async_hooks.executionAsyncId();
          const indentStr = " ".repeat(this._indent < 0 ? 0 : this._indent);
          debug2(`${indentStr}CONTEXT-RUN BEGIN: (${this.name}) currentUid:${currentUid} triggerId:${triggerId} asyncHooksCurrentId:${asyncHooksCurrentId} len:${this._set.length} context:${util.inspect(context)}`);
        }
        fn(context);
        return context;
      } catch (exception) {
        if (exception) {
          exception[ERROR_SYMBOL] = context;
        }
        throw exception;
      } finally {
        if (DEBUG_CLS_HOOKED) {
          const triggerId = async_hooks.triggerAsyncId();
          const asyncHooksCurrentId = async_hooks.executionAsyncId();
          const indentStr = " ".repeat(this._indent < 0 ? 0 : this._indent);
          debug2(`${indentStr}CONTEXT-RUN END: (${this.name}) currentUid:${currentUid} triggerId:${triggerId} asyncHooksCurrentId:${asyncHooksCurrentId} len:${this._set.length} ${util.inspect(context)}`);
        }
        this.exit(context);
      }
    };
    Namespace.prototype.runAndReturn = function runAndReturn(fn) {
      let value;
      this.run(function(context) {
        value = fn(context);
      });
      return value;
    };
    Namespace.prototype.runPromise = function runPromise(fn) {
      let context = this.createContext();
      this.enter(context);
      let promise = fn(context);
      if (!promise || !promise.then || !promise.catch) {
        throw new Error("fn must return a promise.");
      }
      if (DEBUG_CLS_HOOKED) {
        debug2("CONTEXT-runPromise BEFORE: (" + this.name + ") currentUid:" + currentUid + " len:" + this._set.length + " " + util.inspect(context));
      }
      return promise.then((result) => {
        if (DEBUG_CLS_HOOKED) {
          debug2("CONTEXT-runPromise AFTER then: (" + this.name + ") currentUid:" + currentUid + " len:" + this._set.length + " " + util.inspect(context));
        }
        this.exit(context);
        return result;
      }).catch((err) => {
        err[ERROR_SYMBOL] = context;
        if (DEBUG_CLS_HOOKED) {
          debug2("CONTEXT-runPromise AFTER catch: (" + this.name + ") currentUid:" + currentUid + " len:" + this._set.length + " " + util.inspect(context));
        }
        this.exit(context);
        throw err;
      });
    };
    Namespace.prototype.bind = function bindFactory(fn, context) {
      if (!context) {
        if (!this.active) {
          context = this.createContext();
        } else {
          context = this.active;
        }
      }
      let self = this;
      return function clsBind() {
        self.enter(context);
        try {
          return fn.apply(this, arguments);
        } catch (exception) {
          if (exception) {
            exception[ERROR_SYMBOL] = context;
          }
          throw exception;
        } finally {
          self.exit(context);
        }
      };
    };
    Namespace.prototype.enter = function enter(context) {
      assert.ok(context, "context must be provided for entering");
      if (DEBUG_CLS_HOOKED) {
        const asyncHooksCurrentId = async_hooks.executionAsyncId();
        const triggerId = async_hooks.triggerAsyncId();
        const indentStr = " ".repeat(this._indent < 0 ? 0 : this._indent);
        debug2(`${indentStr}CONTEXT-ENTER: (${this.name}) currentUid:${currentUid} triggerId:${triggerId} asyncHooksCurrentId:${asyncHooksCurrentId} len:${this._set.length} ${util.inspect(context)}`);
      }
      this._set.push(this.active);
      this.active = context;
    };
    Namespace.prototype.exit = function exit(context) {
      assert.ok(context, "context must be provided for exiting");
      if (DEBUG_CLS_HOOKED) {
        const asyncHooksCurrentId = async_hooks.executionAsyncId();
        const triggerId = async_hooks.triggerAsyncId();
        const indentStr = " ".repeat(this._indent < 0 ? 0 : this._indent);
        debug2(`${indentStr}CONTEXT-EXIT: (${this.name}) currentUid:${currentUid} triggerId:${triggerId} asyncHooksCurrentId:${asyncHooksCurrentId} len:${this._set.length} ${util.inspect(context)}`);
      }
      if (this.active === context) {
        assert.ok(this._set.length, "can't remove top context");
        this.active = this._set.pop();
        return;
      }
      let index = this._set.lastIndexOf(context);
      if (index < 0) {
        if (DEBUG_CLS_HOOKED) {
          debug2("??ERROR?? context exiting but not entered - ignoring: " + util.inspect(context));
        }
        assert.ok(index >= 0, "context not currently entered; can't exit. \n" + util.inspect(this) + "\n" + util.inspect(context));
      } else {
        assert.ok(index, "can't remove top context");
        this._set.splice(index, 1);
      }
    };
    Namespace.prototype.bindEmitter = function bindEmitter(emitter) {
      assert.ok(emitter.on && emitter.addListener && emitter.emit, "can only bind real EEs");
      let namespace = this;
      let thisSymbol = "context@" + this.name;
      function attach(listener) {
        if (!listener) {
          return;
        }
        if (!listener[CONTEXTS_SYMBOL]) {
          listener[CONTEXTS_SYMBOL] = Object.create(null);
        }
        listener[CONTEXTS_SYMBOL][thisSymbol] = {
          namespace,
          context: namespace.active
        };
      }
      function bind(unwrapped) {
        if (!(unwrapped && unwrapped[CONTEXTS_SYMBOL])) {
          return unwrapped;
        }
        let wrapped = unwrapped;
        let unwrappedContexts = unwrapped[CONTEXTS_SYMBOL];
        Object.keys(unwrappedContexts).forEach(function(name) {
          let thunk = unwrappedContexts[name];
          wrapped = thunk.namespace.bind(wrapped, thunk.context);
        });
        return wrapped;
      }
      wrapEmitter(emitter, attach, bind);
    };
    Namespace.prototype.fromException = function fromException(exception) {
      return exception[ERROR_SYMBOL];
    };
    function getNamespace(name) {
      return process.namespaces[name];
    }
    function createNamespace(name) {
      assert.ok(name, "namespace must be given a name.");
      if (DEBUG_CLS_HOOKED) {
        debug2(`NS-CREATING NAMESPACE (${name})`);
      }
      let namespace = new Namespace(name);
      namespace.id = currentUid;
      const hook = async_hooks.createHook({
        init(asyncId, type, triggerId, resource) {
          currentUid = async_hooks.executionAsyncId();
          if (namespace.active) {
            namespace._contexts.set(asyncId, namespace.active);
            if (DEBUG_CLS_HOOKED) {
              const indentStr = " ".repeat(namespace._indent < 0 ? 0 : namespace._indent);
              debug2(`${indentStr}INIT [${type}] (${name}) asyncId:${asyncId} currentUid:${currentUid} triggerId:${triggerId} active:${util.inspect(namespace.active, { showHidden: true, depth: 2, colors: true })} resource:${resource}`);
            }
          } else if (currentUid === 0) {
            const triggerId2 = async_hooks.triggerAsyncId();
            const triggerIdContext = namespace._contexts.get(triggerId2);
            if (triggerIdContext) {
              namespace._contexts.set(asyncId, triggerIdContext);
              if (DEBUG_CLS_HOOKED) {
                const indentStr = " ".repeat(namespace._indent < 0 ? 0 : namespace._indent);
                debug2(`${indentStr}INIT USING CONTEXT FROM TRIGGERID [${type}] (${name}) asyncId:${asyncId} currentUid:${currentUid} triggerId:${triggerId2} active:${util.inspect(namespace.active, { showHidden: true, depth: 2, colors: true })} resource:${resource}`);
              }
            } else if (DEBUG_CLS_HOOKED) {
              const indentStr = " ".repeat(namespace._indent < 0 ? 0 : namespace._indent);
              debug2(`${indentStr}INIT MISSING CONTEXT [${type}] (${name}) asyncId:${asyncId} currentUid:${currentUid} triggerId:${triggerId2} active:${util.inspect(namespace.active, { showHidden: true, depth: 2, colors: true })} resource:${resource}`);
            }
          }
          if (DEBUG_CLS_HOOKED && type === "PROMISE") {
            debug2(util.inspect(resource, { showHidden: true }));
            const parentId = resource.parentId;
            const indentStr = " ".repeat(namespace._indent < 0 ? 0 : namespace._indent);
            debug2(`${indentStr}INIT RESOURCE-PROMISE [${type}] (${name}) parentId:${parentId} asyncId:${asyncId} currentUid:${currentUid} triggerId:${triggerId} active:${util.inspect(namespace.active, { showHidden: true, depth: 2, colors: true })} resource:${resource}`);
          }
        },
        before(asyncId) {
          currentUid = async_hooks.executionAsyncId();
          let context;
          context = namespace._contexts.get(asyncId) || namespace._contexts.get(currentUid);
          if (context) {
            if (DEBUG_CLS_HOOKED) {
              const triggerId = async_hooks.triggerAsyncId();
              const indentStr = " ".repeat(namespace._indent < 0 ? 0 : namespace._indent);
              debug2(`${indentStr}BEFORE (${name}) asyncId:${asyncId} currentUid:${currentUid} triggerId:${triggerId} active:${util.inspect(namespace.active, { showHidden: true, depth: 2, colors: true })} context:${util.inspect(context)}`);
              namespace._indent += 2;
            }
            namespace.enter(context);
          } else if (DEBUG_CLS_HOOKED) {
            const triggerId = async_hooks.triggerAsyncId();
            const indentStr = " ".repeat(namespace._indent < 0 ? 0 : namespace._indent);
            debug2(`${indentStr}BEFORE MISSING CONTEXT (${name}) asyncId:${asyncId} currentUid:${currentUid} triggerId:${triggerId} active:${util.inspect(namespace.active, { showHidden: true, depth: 2, colors: true })} namespace._contexts:${util.inspect(namespace._contexts, { showHidden: true, depth: 2, colors: true })}`);
            namespace._indent += 2;
          }
        },
        after(asyncId) {
          currentUid = async_hooks.executionAsyncId();
          let context;
          context = namespace._contexts.get(asyncId) || namespace._contexts.get(currentUid);
          if (context) {
            if (DEBUG_CLS_HOOKED) {
              const triggerId = async_hooks.triggerAsyncId();
              namespace._indent -= 2;
              const indentStr = " ".repeat(namespace._indent < 0 ? 0 : namespace._indent);
              debug2(`${indentStr}AFTER (${name}) asyncId:${asyncId} currentUid:${currentUid} triggerId:${triggerId} active:${util.inspect(namespace.active, { showHidden: true, depth: 2, colors: true })} context:${util.inspect(context)}`);
            }
            namespace.exit(context);
          } else if (DEBUG_CLS_HOOKED) {
            const triggerId = async_hooks.triggerAsyncId();
            namespace._indent -= 2;
            const indentStr = " ".repeat(namespace._indent < 0 ? 0 : namespace._indent);
            debug2(`${indentStr}AFTER MISSING CONTEXT (${name}) asyncId:${asyncId} currentUid:${currentUid} triggerId:${triggerId} active:${util.inspect(namespace.active, { showHidden: true, depth: 2, colors: true })} context:${util.inspect(context)}`);
          }
        },
        destroy(asyncId) {
          currentUid = async_hooks.executionAsyncId();
          if (DEBUG_CLS_HOOKED) {
            const triggerId = async_hooks.triggerAsyncId();
            const indentStr = " ".repeat(namespace._indent < 0 ? 0 : namespace._indent);
            debug2(`${indentStr}DESTROY (${name}) currentUid:${currentUid} asyncId:${asyncId} triggerId:${triggerId} active:${util.inspect(namespace.active, { showHidden: true, depth: 2, colors: true })} context:${util.inspect(namespace._contexts.get(currentUid))}`);
          }
          namespace._contexts.delete(asyncId);
        }
      });
      hook.enable();
      process.namespaces[name] = namespace;
      return namespace;
    }
    function destroyNamespace(name) {
      let namespace = getNamespace(name);
      assert.ok(namespace, `can't delete nonexistent namespace! "` + name + '"');
      assert.ok(namespace.id, "don't assign to process.namespaces directly! " + util.inspect(namespace));
      process.namespaces[name] = null;
    }
    function reset() {
      if (process.namespaces) {
        Object.keys(process.namespaces).forEach(function(name) {
          destroyNamespace(name);
        });
      }
      process.namespaces = Object.create(null);
    }
    process.namespaces = {};
    function debug2(...args) {
      if (DEBUG_CLS_HOOKED) {
        process._rawDebug(`${util.format(...args)}`);
      }
    }
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/logger.js
var require_logger = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/logger.js"(exports2, module2) {
    "use strict";
    var validLogLevels = ["debug", "info", "warn", "error", "silent"];
    var defaultLogLevel = validLogLevels.indexOf("error");
    var logLevel = calculateLogLevel(process.env.AWS_XRAY_DEBUG_MODE ? "debug" : process.env.AWS_XRAY_LOG_LEVEL);
    var logger = {
      error: createLoggerForLevel("error"),
      info: createLoggerForLevel("info"),
      warn: createLoggerForLevel("warn"),
      debug: createLoggerForLevel("debug")
    };
    function createLoggerForLevel(level) {
      var loggerLevel = validLogLevels.indexOf(level);
      var consoleMethod = console[level] || console.log || (() => {
      });
      if (loggerLevel >= logLevel) {
        return (message, meta) => {
          if (message || meta) {
            consoleMethod(formatLogMessage(level, message, meta));
          }
        };
      } else {
        return () => {
        };
      }
    }
    function calculateLogLevel(level) {
      if (level) {
        var normalisedLevel = level.toLowerCase();
        var index = validLogLevels.indexOf(normalisedLevel);
        return index >= 0 ? index : defaultLogLevel;
      }
      return defaultLogLevel;
    }
    function createTimestamp(date2) {
      var tzo = -date2.getTimezoneOffset(), dif = tzo >= 0 ? "+" : "-", pad = function(num) {
        var norm = Math.floor(Math.abs(num));
        return (norm < 10 ? "0" : "") + norm;
      };
      return new Date(date2.getTime() + tzo * 60 * 1e3).toISOString().replace(/T/, " ").replace(/Z/, " ") + dif + pad(tzo / 60) + ":" + pad(tzo % 60);
    }
    function isLambdaFunction() {
      return process.env.LAMBDA_TASK_ROOT !== void 0;
    }
    function formatLogMessage(level, message, meta) {
      var messageParts = [];
      if (!isLambdaFunction()) {
        messageParts.push(createTimestamp(new Date()));
        messageParts.push(`[${level.toUpperCase()}]`);
      }
      if (message) {
        messageParts.push(message);
      }
      var logString = messageParts.join(" ");
      var metaDataString = formatMetaData(meta);
      return [logString, metaDataString].filter((str) => str.length > 0).join("\n  ");
    }
    function formatMetaData(meta) {
      if (!meta) {
        return "";
      }
      return typeof meta === "string" ? meta : JSON.stringify(meta);
    }
    var logging = {
      setLogger: function setLogger(logObj) {
        logger = logObj;
      },
      getLogger: function getLogger() {
        return logger;
      }
    };
    module2.exports = logging;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/captured_exception.js
var require_captured_exception = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/captured_exception.js"(exports2, module2) {
    "use strict";
    function CapturedException(err, remote) {
      this.init(err, remote);
    }
    CapturedException.prototype.init = function init(err, remote) {
      var e = typeof err === "string" || err instanceof String ? { message: err, name: "" } : err;
      this.message = e.message;
      this.type = e.name;
      this.stack = [];
      this.remote = !!remote;
      if (e.stack) {
        var stack = e.stack.split("\n");
        stack.shift();
        stack.forEach((stackline) => {
          var line = stackline.trim().replace(/\(|\)/g, "");
          line = line.substring(line.indexOf(" ") + 1);
          var label = line.lastIndexOf(" ") >= 0 ? line.slice(0, line.lastIndexOf(" ")) : null;
          var path = Array.isArray(label) && !label.length ? line : line.slice(line.lastIndexOf(" ") + 1);
          path = path.split(":");
          var entry = {
            path: path[0],
            line: parseInt(path[1]),
            label: label || "anonymous"
          };
          this.stack.push(entry);
        }, this);
      }
    };
    module2.exports = CapturedException;
  }
});

// asset-input/node_modules/atomic-batcher/index.js
var require_atomic_batcher = __commonJS({
  "asset-input/node_modules/atomic-batcher/index.js"(exports2, module2) {
    module2.exports = batcher;
    function batcher(run) {
      var running = false;
      var pendingBatch = null;
      var pendingCallbacks = null;
      var callbacks = null;
      return append;
      function done(err) {
        if (callbacks)
          callAll(callbacks, err);
        running = false;
        callbacks = pendingCallbacks;
        var nextBatch = pendingBatch;
        pendingBatch = null;
        pendingCallbacks = null;
        if (!nextBatch || !nextBatch.length) {
          if (!callbacks || !callbacks.length) {
            callbacks = null;
            return;
          }
          if (!nextBatch)
            nextBatch = [];
        }
        running = true;
        run(nextBatch, done);
      }
      function append(val, cb) {
        if (running) {
          if (!pendingBatch) {
            pendingBatch = [];
            pendingCallbacks = [];
          }
          pushAll(pendingBatch, val);
          if (cb)
            pendingCallbacks.push(cb);
        } else {
          if (cb)
            callbacks = [cb];
          running = true;
          run(Array.isArray(val) ? val : [val], done);
        }
      }
    }
    function pushAll(list, val) {
      if (Array.isArray(val))
        pushArray(list, val);
      else
        list.push(val);
    }
    function pushArray(list, val) {
      for (var i = 0; i < val.length; i++)
        list.push(val[i]);
    }
    function callAll(list, err) {
      for (var i = 0; i < list.length; i++)
        list[i](err);
    }
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/daemon_config.js
var require_daemon_config = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/daemon_config.js"(exports2, module2) {
    "use strict";
    var logger = require_logger();
    var DaemonConfig = {
      udp_ip: "127.0.0.1",
      udp_port: 2e3,
      tcp_ip: "127.0.0.1",
      tcp_port: 2e3,
      setDaemonAddress: function setDaemonAddress(address) {
        if (!process.env.AWS_XRAY_DAEMON_ADDRESS) {
          processAddress(address);
          logger.getLogger().info("Configured daemon address to " + address + ".");
        } else {
          logger.getLogger().warn("Ignoring call to setDaemonAddress as AWS_XRAY_DAEMON_ADDRESS is set. The current daemon address will not be changed.");
        }
      }
    };
    var processAddress = function processAddress2(address) {
      if (address.indexOf(":") === -1) {
        throw new Error("Invalid Daemon Address. You must specify an ip and port.");
      } else {
        var splitAddress = address.split(" ");
        if (splitAddress.length === 1) {
          if (address.indexOf("udp") > -1 || address.indexOf("tcp") > -1) {
            throw new Error("Invalid Daemon Address. You must specify both tcp and udp addresses.");
          }
          var addr = address.split(":");
          if (!addr[0]) {
            throw new Error("Invalid Daemon Address. You must specify an ip.");
          }
          DaemonConfig.udp_ip = addr[0];
          DaemonConfig.tcp_ip = addr[0];
          DaemonConfig.udp_port = addr[1];
          DaemonConfig.tcp_port = addr[1];
        } else if (splitAddress.length === 2) {
          var part_1 = splitAddress[0].split(":");
          var part_2 = splitAddress[1].split(":");
          var addr_map = {};
          addr_map[part_1[0]] = part_1;
          addr_map[part_2[0]] = part_2;
          DaemonConfig.udp_ip = addr_map["udp"][1];
          DaemonConfig.udp_port = parseInt(addr_map["udp"][2]);
          DaemonConfig.tcp_ip = addr_map["tcp"][1];
          DaemonConfig.tcp_port = parseInt(addr_map["tcp"][2]);
          if (!DaemonConfig.udp_port || !DaemonConfig.tcp_port) {
            throw new Error("Invalid Daemon Address. You must specify port number.");
          }
        }
      }
    };
    if (process.env.AWS_XRAY_DAEMON_ADDRESS) {
      processAddress(process.env.AWS_XRAY_DAEMON_ADDRESS);
    }
    module2.exports = DaemonConfig;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/segment_emitter.js
var require_segment_emitter = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/segment_emitter.js"(exports2, module2) {
    "use strict";
    var dgram = require("dgram");
    var batcher = require_atomic_batcher();
    var logger = require_logger();
    var PROTOCOL_HEADER = '{"format":"json","version":1}';
    var PROTOCOL_DELIMITER = "\n";
    function batchSendData(ops, callback) {
      var client = dgram.createSocket("udp4");
      executeSendData(client, ops, 0, function() {
        try {
          client.close();
        } finally {
          callback();
        }
      });
    }
    function executeSendData(client, ops, index, callback) {
      if (index >= ops.length) {
        callback();
        return;
      }
      sendMessage(client, ops[index], function() {
        executeSendData(client, ops, index + 1, callback);
      });
    }
    function sendMessage(client, data, batchCallback) {
      var msg = data.msg;
      var offset = data.offset;
      var length = data.length;
      var port = data.port;
      var address = data.address;
      var callback = data.callback;
      client.send(msg, offset, length, port, address, function(err) {
        try {
          callback(err);
        } finally {
          batchCallback();
        }
      });
    }
    function BatchingTemporarySocket() {
      this.batchSend = batcher(batchSendData);
    }
    BatchingTemporarySocket.prototype.send = function(msg, offset, length, port, address, callback) {
      var work = {
        msg,
        offset,
        length,
        port,
        address,
        callback
      };
      this.batchSend(work);
    };
    var SegmentEmitter = {
      daemonConfig: require_daemon_config(),
      format: function format(segment) {
        return PROTOCOL_HEADER + PROTOCOL_DELIMITER + segment.toString();
      },
      send: function send(segment) {
        if (!this.socket) {
          if (this.useBatchingTemporarySocket) {
            this.socket = new BatchingTemporarySocket();
          } else {
            this.socket = dgram.createSocket("udp4").unref();
          }
        }
        var client = this.socket;
        var formatted = segment.format();
        var data = PROTOCOL_HEADER + PROTOCOL_DELIMITER + formatted;
        var message = Buffer.from(data);
        var short = '{"trace_id:"' + segment.trace_id + '","id":"' + segment.id + '"}';
        var type = segment.type === "subsegment" ? "Subsegment" : "Segment";
        client.send(message, 0, message.length, this.daemonConfig.udp_port, this.daemonConfig.udp_ip, function(err) {
          if (err) {
            if (err.code === "EMSGSIZE") {
              logger.getLogger().error(type + " too large to send: " + short + " (" + message.length + " bytes).");
            } else {
              logger.getLogger().error("Error occured sending segment: ", err);
            }
          } else {
            logger.getLogger().debug(type + ' sent: {"trace_id:"' + segment.trace_id + '","id":"' + segment.id + '"}');
            logger.getLogger().debug("UDP message sent: " + segment);
          }
        });
      },
      setDaemonAddress: function setDaemonAddress(address) {
        this.daemonConfig.setDaemonAddress(address);
      },
      getIp: function getIp() {
        return this.daemonConfig.udp_ip;
      },
      getPort: function getPort() {
        return this.daemonConfig.udp_port;
      },
      disableReusableSocket: function() {
        this.useBatchingTemporarySocket = true;
      }
    };
    module2.exports = SegmentEmitter;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/trace_id.js
var require_trace_id = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/trace_id.js"(exports2, module2) {
    "use strict";
    var crypto = require("crypto");
    var logger = require_logger();
    var TraceID = class {
      constructor(tsHex, numberhex) {
        this.version = 1;
        this.timestamp = tsHex || Math.round(new Date().getTime() / 1e3).toString(16);
        this.id = numberhex || crypto.randomBytes(12).toString("hex");
      }
      static Invalid() {
        return new TraceID("00000000", "000000000000000000000000");
      }
      static FromString(rawID) {
        const DELIMITER = "-";
        var traceID = new TraceID();
        var version, timestamp;
        if (!rawID || typeof rawID !== "string") {
          logger.getLogger().error("Empty or non-string trace ID provided");
          return traceID;
        }
        const parts = rawID.trim().split(DELIMITER);
        if (parts.length !== 3) {
          logger.getLogger().error("Unrecognized trace ID format");
          return traceID;
        }
        version = parseInt(parts[0]);
        if (isNaN(version) || version < 1) {
          logger.getLogger().error("Trace ID version must be positive integer");
          return traceID;
        }
        timestamp = parseInt(parts[1], 16).toString(16);
        if (timestamp === "NaN") {
          logger.getLogger().error("Trace ID timestamp must be a hex-encoded value");
          return traceID;
        }
        traceID.version = version;
        traceID.timestamp = timestamp;
        traceID.id = parts[2];
        return traceID;
      }
      toString() {
        return `${this.version.toString()}-${this.timestamp}-${this.id}`;
      }
    };
    module2.exports = TraceID;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/utils.js
var require_utils = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/utils.js"(exports2, module2) {
    "use strict";
    var crypto = require("crypto");
    var logger = require_logger();
    var TraceID = require_trace_id();
    var utils = {
      getCauseTypeFromHttpStatus: function getCauseTypeFromHttpStatus(status) {
        var stat = status.toString();
        if (stat.match(/^[4][0-9]{2}$/) !== null) {
          return "error";
        } else if (stat.match(/^[5][0-9]{2}$/) !== null) {
          return "fault";
        }
      },
      stripQueryStringFromPath: function stripQueryStringFromPath(path) {
        return path ? path.split("?")[0] : "";
      },
      wildcardMatch: function wildcardMatch(pattern, text) {
        if (pattern === void 0 || text === void 0) {
          return false;
        }
        if (pattern.length === 1 && pattern.charAt(0) === "*") {
          return true;
        }
        var patternLength = pattern.length;
        var textLength = text.length;
        var indexOfGlob = pattern.indexOf("*");
        pattern = pattern.toLowerCase();
        text = text.toLowerCase();
        if (indexOfGlob === -1 || indexOfGlob === patternLength - 1) {
          var match = function simpleWildcardMatch() {
            var j2 = 0;
            for (var i2 = 0; i2 < patternLength; i2++) {
              var patternChar2 = pattern.charAt(i2);
              if (patternChar2 === "*") {
                return true;
              } else if (patternChar2 === "?") {
                if (j2 === textLength) {
                  return false;
                }
                j2++;
              } else {
                if (j2 >= textLength || patternChar2 != text.charAt(j2)) {
                  return false;
                }
                j2++;
              }
            }
            return j2 === textLength;
          };
          return match();
        }
        var matchArray = [];
        matchArray[0] = true;
        for (var j = 0; j < patternLength; j++) {
          var i;
          var patternChar = pattern.charAt(j);
          if (patternChar != "*") {
            for (i = textLength - 1; i >= 0; i--) {
              matchArray[i + 1] = !!matchArray[i] && (patternChar === "?" || patternChar === text.charAt(i));
            }
          } else {
            i = 0;
            while (i <= textLength && !matchArray[i]) {
              i++;
            }
            for (i; i <= textLength; i++) {
              matchArray[i] = true;
            }
          }
          matchArray[0] = matchArray[0] && patternChar === "*";
        }
        return matchArray[textLength];
      },
      LambdaUtils: {
        validTraceData: function(xAmznTraceId) {
          var valid = false;
          if (xAmznTraceId) {
            var data = utils.processTraceData(xAmznTraceId);
            valid = !!(data && data.root && data.parent && data.sampled);
          }
          return valid;
        },
        populateTraceData: function(segment, xAmznTraceId) {
          logger.getLogger().debug("Lambda trace data found: " + xAmznTraceId);
          var data = utils.processTraceData(xAmznTraceId);
          var valid = false;
          if (!data) {
            data = {};
            logger.getLogger().error("_X_AMZN_TRACE_ID is empty or has an invalid format");
          } else if (!data.root || !data.parent || !data.sampled) {
            logger.getLogger().error("_X_AMZN_TRACE_ID is missing required information");
          } else {
            valid = true;
          }
          segment.trace_id = TraceID.FromString(data.root).toString();
          segment.id = data.parent || crypto.randomBytes(8).toString("hex");
          if (data.root && segment.trace_id !== data.root) {
            logger.getLogger().error("_X_AMZN_TRACE_ID contains invalid trace ID");
            valid = false;
          }
          if (!parseInt(data.sampled)) {
            segment.notTraced = true;
          } else {
            delete segment.notTraced;
          }
          logger.getLogger().debug("Segment started: " + JSON.stringify(data));
          return valid;
        }
      },
      processTraceData: function processTraceData(traceData) {
        var amznTraceData = {};
        var reservedKeywords = ["root", "parent", "sampled", "self"];
        var remainingBytes = 256;
        if (!(typeof traceData === "string" && traceData)) {
          return amznTraceData;
        }
        traceData.split(";").forEach(function(header) {
          if (!header) {
            return;
          }
          var pair = header.split("=");
          if (pair[0] && pair[1]) {
            var key = pair[0].trim().toLowerCase();
            var value = pair[1].trim().toLowerCase();
            var reserved = reservedKeywords.indexOf(key) !== -1;
            if (reserved) {
              amznTraceData[key] = value;
            } else if (!reserved && remainingBytes - (key.length + value.length) >= 0) {
              amznTraceData[key] = value;
              remainingBytes -= key.length + value.length;
            }
          }
        });
        return amznTraceData;
      },
      objectWithoutProperties: function objectWithoutProperties(obj, keys, preservePrototype) {
        keys = Array.isArray(keys) ? keys : [];
        preservePrototype = typeof preservePrototype === "boolean" ? preservePrototype : false;
        var target = preservePrototype ? Object.create(Object.getPrototypeOf(obj)) : {};
        for (var property in obj) {
          if (keys.indexOf(property) >= 0) {
            continue;
          }
          if (!Object.prototype.hasOwnProperty.call(obj, property)) {
            continue;
          }
          target[property] = obj[property];
        }
        return target;
      },
      safeParseInt: (val) => {
        if (!val || isNaN(val)) {
          return 0;
        }
        return parseInt(val);
      }
    };
    module2.exports = utils;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/segments/segment_utils.js
var require_segment_utils = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/segments/segment_utils.js"(exports2, module2) {
    "use strict";
    var { safeParseInt } = require_utils();
    var logger = require_logger();
    var DEFAULT_STREAMING_THRESHOLD = 100;
    var utils = {
      streamingThreshold: DEFAULT_STREAMING_THRESHOLD,
      getCurrentTime: function getCurrentTime() {
        return Date.now() / 1e3;
      },
      setOrigin: function setOrigin(origin) {
        this.origin = origin;
      },
      setPluginData: function setPluginData(pluginData) {
        this.pluginData = pluginData;
      },
      setSDKData: function setSDKData(sdkData) {
        this.sdkData = sdkData;
      },
      setServiceData: function setServiceData(serviceData) {
        this.serviceData = serviceData;
      },
      setStreamingThreshold: function setStreamingThreshold(threshold) {
        if (isFinite(threshold) && threshold >= 0) {
          utils.streamingThreshold = threshold;
          logger.getLogger().debug("Subsegment streaming threshold set to: " + threshold);
        } else {
          logger.getLogger().error("Invalid threshold: " + threshold + ". Must be a whole number >= 0.");
        }
      },
      getStreamingThreshold: function getStreamingThreshold() {
        return utils.streamingThreshold;
      },
      getHttpResponseData: (res) => {
        const ret = {};
        if (!res) {
          return ret;
        }
        const status = safeParseInt(res.statusCode);
        if (status !== 0) {
          ret.status = status;
        }
        if (res.headers && res.headers["content-length"]) {
          ret.content_length = safeParseInt(res.headers["content-length"]);
        }
        return ret;
      }
    };
    module2.exports = utils;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/remote_request_data.js
var require_remote_request_data = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/remote_request_data.js"(exports2, module2) {
    "use strict";
    var { getHttpResponseData } = require_segment_utils();
    var { stripQueryStringFromPath } = require_utils();
    function RemoteRequestData(req, res, downstreamXRayEnabled) {
      this.init(req, res, downstreamXRayEnabled);
    }
    RemoteRequestData.prototype.init = function init(req, res, downstreamXRayEnabled) {
      this.request = {
        url: req.agent && req.agent.protocol ? req.agent.protocol + "//" + (req.host || req.getHeader("host")) + stripQueryStringFromPath(req.path) : "",
        method: req.method || ""
      };
      if (downstreamXRayEnabled) {
        this.request.traced = true;
      }
      if (res) {
        this.response = getHttpResponseData(res);
      }
    };
    module2.exports = RemoteRequestData;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/subsegment.js
var require_subsegment = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/subsegment.js"(exports2, module2) {
    "use strict";
    var crypto = require("crypto");
    var CapturedException = require_captured_exception();
    var RemoteRequestData = require_remote_request_data();
    var SegmentEmitter = require_segment_emitter();
    var SegmentUtils = require_segment_utils();
    var Utils = require_utils();
    var logger = require_logger();
    function Subsegment(name) {
      this.init(name);
    }
    Subsegment.prototype.init = function init(name) {
      if (typeof name != "string") {
        throw new Error("Subsegment name must be of type string.");
      }
      this.id = crypto.randomBytes(8).toString("hex");
      this.name = name;
      this.start_time = SegmentUtils.getCurrentTime();
      this.in_progress = true;
      this.counter = 0;
    };
    Subsegment.prototype.addNewSubsegment = function addNewSubsegment(name) {
      var subsegment = new Subsegment(name);
      this.addSubsegment(subsegment);
      return subsegment;
    };
    Subsegment.prototype.addSubsegment = function(subsegment) {
      if (!(subsegment instanceof Subsegment)) {
        throw new Error("Failed to add subsegment:" + subsegment + ' to subsegment "' + this.name + '".  Not a subsegment.');
      }
      if (this.subsegments === void 0) {
        this.subsegments = [];
      }
      subsegment.segment = this.segment;
      subsegment.parent = this;
      if (subsegment.end_time === void 0) {
        this.incrementCounter(subsegment.counter);
      }
      this.subsegments.push(subsegment);
    };
    Subsegment.prototype.removeSubsegment = function removeSubsegment(subsegment) {
      if (!(subsegment instanceof Subsegment)) {
        throw new Error("Failed to remove subsegment:" + subsegment + ' from subsegment "' + this.name + '".  Not a subsegment.');
      }
      if (this.subsegments !== void 0) {
        var index = this.subsegments.indexOf(subsegment);
        if (index >= 0) {
          this.subsegments.splice(index, 1);
        }
      }
    };
    Subsegment.prototype.addAttribute = function addAttribute(name, data) {
      this[name] = data;
    };
    Subsegment.prototype.addPrecursorId = function(id) {
      if (typeof id !== "string") {
        logger.getLogger().error("Failed to add id:" + id + " to subsegment " + this.name + ".  Precursor Ids must be of type string.");
      }
      if (this.precursor_ids === void 0) {
        this.precursor_ids = [];
      }
      this.precursor_ids.push(id);
    };
    Subsegment.prototype.addAnnotation = function(key, value) {
      if (!(typeof value === "boolean" || typeof value === "string" || typeof value === "number" && isFinite(value))) {
        throw new Error("Failed to add annotation key: " + key + " value: " + value + " to subsegment " + this.name + ". Value must be of type string, number or boolean.");
      } else if (typeof key !== "string") {
        throw new Error("Failed to add annotation key: " + key + " value: " + value + " to subsegment " + this.name + ". Key must be of type string.");
      }
      if (this.annotations === void 0) {
        this.annotations = {};
      }
      this.annotations[key] = value;
    };
    Subsegment.prototype.addMetadata = function(key, value, namespace) {
      if (typeof key !== "string") {
        throw new Error("Failed to add annotation key: " + key + " value: " + value + " to subsegment " + this.name + ". Key must be of type string.");
      } else if (namespace && typeof namespace !== "string") {
        throw new Error("Failed to add annotation key: " + key + " value: " + value + "namespace: " + namespace + " to subsegment " + this.name + ". Namespace must be of type string.");
      }
      var ns = namespace || "default";
      if (!this.metadata) {
        this.metadata = {};
      }
      if (!this.metadata[ns]) {
        this.metadata[ns] = {};
      }
      this.metadata[ns][key] = value;
    };
    Subsegment.prototype.addSqlData = function addSqlData(sqlData) {
      this.sql = sqlData;
    };
    Subsegment.prototype.addError = function addError(err, remote) {
      if (err == null || typeof err !== "object" && typeof err !== "string") {
        throw new Error("Failed to add error:" + err + ' to subsegment "' + this.name + '".  Not an object or string literal.');
      }
      this.addFaultFlag();
      if (this.segment && this.segment.exception) {
        if (err === this.segment.exception.ex) {
          this.fault = true;
          this.cause = { id: this.segment.exception.cause };
          return;
        }
        delete this.segment.exception;
      }
      if (this.segment) {
        this.segment.exception = {
          ex: err,
          cause: this.id
        };
      } else {
      }
      if (this.cause === void 0) {
        this.cause = {
          working_directory: process.cwd(),
          exceptions: []
        };
      }
      this.cause.exceptions.unshift(new CapturedException(err, remote));
    };
    Subsegment.prototype.addRemoteRequestData = function addRemoteRequestData(req, res, downstreamXRayEnabled) {
      this.http = new RemoteRequestData(req, res, downstreamXRayEnabled);
      if ("traced" in this.http.request) {
        this.traced = this.http.request.traced;
        delete this.http.request.traced;
      }
    };
    Subsegment.prototype.addFaultFlag = function addFaultFlag() {
      this.fault = true;
    };
    Subsegment.prototype.addErrorFlag = function addErrorFlag() {
      this.error = true;
    };
    Subsegment.prototype.addThrottleFlag = function addThrottleFlag() {
      this.throttle = true;
    };
    Subsegment.prototype.close = function close(err, remote) {
      var root = this.segment;
      this.end_time = SegmentUtils.getCurrentTime();
      delete this.in_progress;
      if (err) {
        this.addError(err, remote);
      }
      if (this.parent) {
        this.parent.decrementCounter();
      }
      if (root && root.counter > SegmentUtils.getStreamingThreshold()) {
        if (this.streamSubsegments() && this.parent) {
          this.parent.removeSubsegment(this);
        }
      }
    };
    Subsegment.prototype.incrementCounter = function incrementCounter(additional) {
      this.counter = additional ? this.counter + additional + 1 : this.counter + 1;
      if (this.parent) {
        this.parent.incrementCounter(additional);
      }
    };
    Subsegment.prototype.decrementCounter = function decrementCounter() {
      this.counter--;
      if (this.parent) {
        this.parent.decrementCounter();
      }
    };
    Subsegment.prototype.isClosed = function isClosed() {
      return !this.in_progress;
    };
    Subsegment.prototype.flush = function flush() {
      if (!this.parent || !this.segment) {
        throw new Error("Failed to flush subsegment: " + this.name + ". Subsegment must be added to a segment chain to flush.");
      }
      if (this.segment.trace_id) {
        if (this.segment.notTraced !== true) {
          SegmentEmitter.send(this);
        } else {
          logger.getLogger().debug("Ignoring flush on subsegment " + this.id + ". Associated segment is marked as not sampled.");
        }
      } else {
        logger.getLogger().debug("Ignoring flush on subsegment " + this.id + ". Associated segment is missing a trace ID.");
      }
    };
    Subsegment.prototype.streamSubsegments = function streamSubsegments() {
      if (this.isClosed() && this.counter <= 0) {
        this.flush();
        return true;
      } else if (this.subsegments && this.subsegments.length > 0) {
        var open = [];
        this.subsegments.forEach(function(child) {
          if (!child.streamSubsegments()) {
            open.push(child);
          }
        });
        this.subsegments = open;
      }
    };
    Subsegment.prototype.format = function format() {
      this.type = "subsegment";
      if (this.parent) {
        this.parent_id = this.parent.id;
      }
      if (this.segment) {
        this.trace_id = this.segment.trace_id;
      }
      return JSON.stringify(this);
    };
    Subsegment.prototype.toString = function toString() {
      return JSON.stringify(this);
    };
    Subsegment.prototype.toJSON = function toJSON() {
      var ignore = ["segment", "parent", "counter"];
      if (this.subsegments == null || this.subsegments.length === 0) {
        ignore.push("subsegments");
      }
      var thisCopy = Utils.objectWithoutProperties(this, ignore, false);
      return thisCopy;
    };
    module2.exports = Subsegment;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/segments/segment.js
var require_segment = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/segments/segment.js"(exports2, module2) {
    "use strict";
    var crypto = require("crypto");
    var CapturedException = require_captured_exception();
    var SegmentEmitter = require_segment_emitter();
    var SegmentUtils = require_segment_utils();
    var Subsegment = require_subsegment();
    var TraceID = require_trace_id();
    var Utils = require_utils();
    var logger = require_logger();
    function Segment(name, rootId, parentId) {
      this.init(name, rootId, parentId);
    }
    Segment.prototype.init = function init(name, rootId, parentId) {
      if (typeof name != "string") {
        throw new Error("Segment name must be of type string.");
      }
      var traceId;
      if (rootId && typeof rootId == "string") {
        traceId = TraceID.FromString(rootId);
      } else {
        traceId = new TraceID();
      }
      var id = crypto.randomBytes(8).toString("hex");
      var startTime = SegmentUtils.getCurrentTime();
      this.trace_id = traceId.toString();
      this.id = id;
      this.start_time = startTime;
      this.name = name || "";
      this.in_progress = true;
      this.counter = 0;
      if (parentId) {
        this.parent_id = parentId;
      }
      if (SegmentUtils.serviceData) {
        this.setServiceData(SegmentUtils.serviceData);
      }
      if (SegmentUtils.pluginData) {
        this.addPluginData(SegmentUtils.pluginData);
      }
      if (SegmentUtils.origin) {
        this.origin = SegmentUtils.origin;
      }
      if (SegmentUtils.sdkData) {
        this.setSDKData(SegmentUtils.sdkData);
      }
    };
    Segment.prototype.addIncomingRequestData = function addIncomingRequestData(data) {
      this.http = data;
    };
    Segment.prototype.addAnnotation = function addAnnotation(key, value) {
      if (typeof value !== "boolean" && typeof value !== "string" && !isFinite(value)) {
        logger.getLogger().error("Add annotation key: " + key + " value: " + value + " failed. Annotations must be of type string, number or boolean.");
        return;
      }
      if (this.annotations === void 0) {
        this.annotations = {};
      }
      this.annotations[key] = value;
    };
    Segment.prototype.setUser = function(user) {
      if (typeof user !== "string") {
        logger.getLogger().error("Set user: " + user + " failed. User IDs must be of type string.");
      }
      this.user = user;
    };
    Segment.prototype.addMetadata = function(key, value, namespace) {
      if (typeof key !== "string") {
        throw new Error("Failed to add annotation key: " + key + " value: " + value + " to subsegment " + this.name + ". Key must be of type string.");
      } else if (namespace && typeof namespace !== "string") {
        throw new Error("Failed to add annotation key: " + key + " value: " + value + "namespace: " + namespace + " to subsegment " + this.name + ". Namespace must be of type string.");
      }
      var ns = namespace || "default";
      if (!this.metadata) {
        this.metadata = {};
      }
      if (!this.metadata[ns]) {
        this.metadata[ns] = {};
      }
      this.metadata[ns][key] = value;
    };
    Segment.prototype.setSDKData = function setSDKData(data) {
      if (!data) {
        logger.getLogger().error("Add SDK data: " + data + " failed.Must not be empty.");
        return;
      }
      if (!this.aws) {
        this.aws = {};
      }
      this.aws.xray = data;
    };
    Segment.prototype.setMatchedSamplingRule = function setMatchedSamplingRule(ruleName) {
      if (this.aws) {
        this.aws = JSON.parse(JSON.stringify(this.aws));
      }
      if (this.aws && this.aws["xray"]) {
        this.aws.xray["rule_name"] = ruleName;
      } else {
        this.aws = { xray: { "rule_name": ruleName } };
      }
    };
    Segment.prototype.setServiceData = function setServiceData(data) {
      if (!data) {
        logger.getLogger().error("Add service data: " + data + " failed.Must not be empty.");
        return;
      }
      this.service = data;
    };
    Segment.prototype.addPluginData = function addPluginData(data) {
      if (this.aws === void 0) {
        this.aws = {};
      }
      Object.assign(this.aws, data);
    };
    Segment.prototype.addNewSubsegment = function addNewSubsegment(name) {
      var subsegment = new Subsegment(name);
      this.addSubsegment(subsegment);
      return subsegment;
    };
    Segment.prototype.addSubsegment = function addSubsegment(subsegment) {
      if (!(subsegment instanceof Subsegment)) {
        throw new Error("Cannot add subsegment: " + subsegment + ". Not a subsegment.");
      }
      if (this.subsegments === void 0) {
        this.subsegments = [];
      }
      subsegment.segment = this;
      subsegment.parent = this;
      this.subsegments.push(subsegment);
      if (!subsegment.end_time) {
        this.incrementCounter(subsegment.counter);
      }
    };
    Segment.prototype.removeSubsegment = function removeSubsegment(subsegment) {
      if (!(subsegment instanceof Subsegment)) {
        throw new Error("Failed to remove subsegment:" + subsegment + ' from subsegment "' + this.name + '".  Not a subsegment.');
      }
      if (this.subsegments !== void 0) {
        var index = this.subsegments.indexOf(subsegment);
        if (index >= 0) {
          this.subsegments.splice(index, 1);
        }
      }
    };
    Segment.prototype.addError = function addError(err, remote) {
      if (err == null || typeof err !== "object" && typeof err !== "string") {
        throw new Error("Failed to add error:" + err + ' to subsegment "' + this.name + '".  Not an object or string literal.');
      }
      this.addFaultFlag();
      if (this.exception) {
        if (err === this.exception.ex) {
          this.cause = { id: this.exception.cause };
          delete this.exception;
          return;
        }
        delete this.exception;
      }
      if (this.cause === void 0) {
        this.cause = {
          working_directory: process.cwd(),
          exceptions: []
        };
      }
      this.cause.exceptions.push(new CapturedException(err, remote));
    };
    Segment.prototype.addFaultFlag = function addFaultFlag() {
      this.fault = true;
    };
    Segment.prototype.addErrorFlag = function addErrorFlag() {
      this.error = true;
    };
    Segment.prototype.addThrottleFlag = function addThrottleFlag() {
      this.throttle = true;
    };
    Segment.prototype.isClosed = function isClosed() {
      return !this.in_progress;
    };
    Segment.prototype.incrementCounter = function incrementCounter(additional) {
      this.counter = additional ? this.counter + additional + 1 : this.counter + 1;
      if (this.counter > SegmentUtils.streamingThreshold && this.subsegments && this.subsegments.length > 0) {
        var open = [];
        this.subsegments.forEach(function(child) {
          if (!child.streamSubsegments()) {
            open.push(child);
          }
        });
        this.subsegments = open;
      }
    };
    Segment.prototype.decrementCounter = function decrementCounter() {
      this.counter--;
      if (this.counter <= 0 && this.isClosed()) {
        this.flush();
      }
    };
    Segment.prototype.close = function(err, remote) {
      if (!this.end_time) {
        this.end_time = SegmentUtils.getCurrentTime();
      }
      if (err !== void 0) {
        this.addError(err, remote);
      }
      delete this.in_progress;
      delete this.exception;
      if (this.counter <= 0) {
        this.flush();
      }
    };
    Segment.prototype.flush = function flush() {
      if (this.notTraced !== true) {
        delete this.exception;
        var thisCopy = Utils.objectWithoutProperties(this, ["counter", "notTraced"], true);
        SegmentEmitter.send(thisCopy);
      }
    };
    Segment.prototype.format = function format() {
      var ignore = ["segment", "parent", "counter"];
      if (this.subsegments == null || this.subsegments.length === 0) {
        ignore.push("subsegments");
      }
      var thisCopy = Utils.objectWithoutProperties(this, ignore, false);
      return JSON.stringify(thisCopy);
    };
    Segment.prototype.toString = function toString() {
      return JSON.stringify(this);
    };
    module2.exports = Segment;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/context_utils.js
var require_context_utils = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/context_utils.js"(exports2, module2) {
    "use strict";
    var cls = require_context();
    var logger = require_logger();
    var Segment = require_segment();
    var Subsegment = require_subsegment();
    var cls_mode = true;
    var NAMESPACE = "AWSXRay";
    var SEGMENT = "segment";
    var contextOverride = false;
    var contextUtils = {
      CONTEXT_MISSING_STRATEGY: {
        RUNTIME_ERROR: {
          contextMissing: function contextMissingRuntimeError(message) {
            throw new Error(message);
          }
        },
        LOG_ERROR: {
          contextMissing: function contextMissingLogError(message) {
            var err = new Error(message);
            logger.getLogger().error(err.stack);
          }
        },
        IGNORE_ERROR: {
          contextMissing: function contextMissingIgnoreError() {
          }
        }
      },
      contextMissingStrategy: {},
      resolveManualSegmentParams: function resolveManualSegmentParams(params) {
        if (params && !contextUtils.isAutomaticMode()) {
          var xraySegment = params.XRaySegment || params.XraySegment;
          var segment = params.Segment;
          var found = null;
          if (xraySegment && (xraySegment instanceof Segment || xraySegment instanceof Subsegment)) {
            found = xraySegment;
            delete params.XRaySegment;
            delete params.XraySegment;
          } else if (segment && (segment instanceof Segment || segment instanceof Subsegment)) {
            found = segment;
            delete params.Segment;
          }
          return found;
        }
      },
      getNamespace: function getNamespace() {
        return cls.getNamespace(NAMESPACE) || cls.createNamespace(NAMESPACE);
      },
      resolveSegment: function resolveSegment(segment) {
        if (cls_mode) {
          return this.getSegment();
        } else if (segment && !cls_mode) {
          return segment;
        } else if (!segment && !cls_mode) {
          contextUtils.contextMissingStrategy.contextMissing("No sub/segment specified. A sub/segment must be provided for manual mode.");
        }
      },
      getSegment: function getSegment() {
        if (cls_mode) {
          var segment = contextUtils.getNamespace(NAMESPACE).get(SEGMENT);
          if (!segment) {
            contextUtils.contextMissingStrategy.contextMissing("Failed to get the current sub/segment from the context.");
          } else if (segment instanceof Segment && process.env.LAMBDA_TASK_ROOT && segment.facade == true) {
            segment.resolveLambdaTraceData();
          }
          return segment;
        } else {
          contextUtils.contextMissingStrategy.contextMissing("Cannot get sub/segment from context. Not supported in manual mode.");
        }
      },
      setSegment: function setSegment(segment) {
        if (cls_mode) {
          if (!contextUtils.getNamespace(NAMESPACE).set(SEGMENT, segment)) {
            logger.getLogger().warn("Failed to set the current sub/segment on the context.");
          }
        } else {
          contextUtils.contextMissingStrategy.contextMissing("Cannot set sub/segment on context. Not supported in manual mode.");
        }
      },
      isAutomaticMode: function isAutomaticMode() {
        return cls_mode;
      },
      enableAutomaticMode: function enableAutomaticMode() {
        cls_mode = true;
        contextUtils.getNamespace(NAMESPACE);
        logger.getLogger().debug("Overriding AWS X-Ray SDK mode. Set to automatic mode.");
      },
      enableManualMode: function enableManualMode() {
        cls_mode = false;
        if (cls.getNamespace(NAMESPACE)) {
          cls.destroyNamespace(NAMESPACE);
        }
        logger.getLogger().debug("Overriding AWS X-Ray SDK mode. Set to manual mode.");
      },
      setContextMissingStrategy: function setContextMissingStrategy(strategy) {
        if (!contextOverride) {
          if (typeof strategy === "string") {
            var lookupStrategy = contextUtils.CONTEXT_MISSING_STRATEGY[strategy.toUpperCase()];
            if (lookupStrategy) {
              contextUtils.contextMissingStrategy.contextMissing = lookupStrategy.contextMissing;
              if (process.env.AWS_XRAY_CONTEXT_MISSING) {
                logger.getLogger().debug("AWS_XRAY_CONTEXT_MISSING is set. Configured context missing strategy to " + process.env.AWS_XRAY_CONTEXT_MISSING + ".");
              } else {
                logger.getLogger().debug("Configured context missing strategy to: " + strategy);
              }
            } else {
              throw new Error("Invalid context missing strategy: " + strategy + ". Valid values are " + Object.keys(contextUtils.CONTEXT_MISSING_STRATEGY) + ".");
            }
          } else if (typeof strategy === "function") {
            contextUtils.contextMissingStrategy.contextMissing = strategy;
            logger.getLogger().info("Configured custom context missing strategy to function: " + strategy.name);
          } else {
            throw new Error("Context missing strategy must be either a string or a custom function.");
          }
        } else {
          logger.getLogger().warn("Ignoring call to setContextMissingStrategy as AWS_XRAY_CONTEXT_MISSING is set. The current context missing strategy will not be changed.");
        }
      }
    };
    cls.createNamespace(NAMESPACE);
    logger.getLogger().debug("Starting the AWS X-Ray SDK in automatic mode (default).");
    if (process.env.AWS_XRAY_CONTEXT_MISSING) {
      contextUtils.setContextMissingStrategy(process.env.AWS_XRAY_CONTEXT_MISSING);
      contextOverride = true;
    } else {
      contextUtils.contextMissingStrategy.contextMissing = contextUtils.CONTEXT_MISSING_STRATEGY.RUNTIME_ERROR.contextMissing;
      logger.getLogger().debug("Using default context missing strategy: RUNTIME_ERROR");
    }
    module2.exports = contextUtils;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/middleware/incoming_request_data.js
var require_incoming_request_data = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/middleware/incoming_request_data.js"(exports2, module2) {
    "use strict";
    var { getHttpResponseData } = require_segment_utils();
    function IncomingRequestData(req) {
      this.init(req);
    }
    IncomingRequestData.prototype.init = function init(req) {
      var forwarded = !!req.headers["x-forwarded-for"];
      var url;
      if (req.connection) {
        url = (req.connection.secure || req.connection.encrypted ? "https://" : "http://") + ((req.headers["host"] || "") + (req.url || ""));
      }
      this.request = {
        method: req.method || "",
        user_agent: req.headers["user-agent"] || "",
        client_ip: getClientIp(req) || "",
        url: url || ""
      };
      if (forwarded) {
        this.request.x_forwarded_for = forwarded;
      }
    };
    var getClientIp = function getClientIp2(req) {
      var clientIp;
      if (req.headers["x-forwarded-for"]) {
        clientIp = (req.headers["x-forwarded-for"] || "").split(",")[0];
      } else if (req.connection && req.connection.remoteAddress) {
        clientIp = req.connection.remoteAddress;
      } else if (req.socket && req.socket.remoteAddress) {
        clientIp = req.socket.remoteAddress;
      } else if (req.connection && req.connection.socket && req.connection.socket.remoteAddress) {
        clientIp = req.connection.socket.remoteAddress;
      }
      return clientIp;
    };
    IncomingRequestData.prototype.close = function close(res) {
      this.response = getHttpResponseData(res);
    };
    module2.exports = IncomingRequestData;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/local_reservoir.js
var require_local_reservoir = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/local_reservoir.js"(exports2, module2) {
    "use strict";
    function LocalReservoir(fixedTarget, fallbackRate) {
      this.init(fixedTarget, fallbackRate);
    }
    LocalReservoir.prototype.init = function init(fixedTarget, fallbackRate) {
      this.usedThisSecond = 0;
      if (typeof fixedTarget === "number" && fixedTarget % 1 === 0 && fixedTarget >= 0) {
        this.fixedTarget = fixedTarget;
      } else {
        throw new Error('Error in sampling file. Rule attribute "fixed_target" must be a non-negative integer.');
      }
      if (typeof fallbackRate === "number" && fallbackRate >= 0 && fallbackRate <= 1) {
        this.fallbackRate = fallbackRate;
      } else {
        throw new Error('Error in sampling file. Rule attribute "rate" must be a number between 0 and 1 inclusive.');
      }
    };
    LocalReservoir.prototype.isSampled = function isSampled() {
      var now = Math.round(new Date().getTime() / 1e3);
      if (now !== this.thisSecond) {
        this.usedThisSecond = 0;
        this.thisSecond = now;
      }
      if (this.usedThisSecond >= this.fixedTarget) {
        return Math.random() < this.fallbackRate;
      }
      this.usedThisSecond++;
      return true;
    };
    module2.exports = LocalReservoir;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/resources/default_sampling_rules.json
var require_default_sampling_rules = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/resources/default_sampling_rules.json"(exports2, module2) {
    module2.exports = {
      default: {
        fixed_target: 1,
        rate: 0.05
      },
      version: 2
    };
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/local_sampler.js
var require_local_sampler = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/local_sampler.js"(exports2, module2) {
    "use strict";
    var fs = require("fs");
    var LocalReservoir = require_local_reservoir();
    var Utils = require_utils();
    var defaultRules = require_default_sampling_rules();
    var logger = require_logger();
    var LocalSampler = {
      shouldSample: function shouldSample(sampleRequest) {
        var host = sampleRequest.host;
        var httpMethod = sampleRequest.httpMethod;
        var urlPath = sampleRequest.urlPath;
        var formatted = "{ http_method: " + httpMethod + ", host: " + host + ", url_path: " + urlPath + " }";
        var matched;
        this.rules.some(function(rule) {
          if (rule.default || (host == null || Utils.wildcardMatch(rule.host, host) && (httpMethod == null || Utils.wildcardMatch(rule.http_method, httpMethod)) && (urlPath == null || Utils.wildcardMatch(rule.url_path, urlPath)))) {
            matched = rule.reservoir;
            logger.getLogger().debug("Local sampling rule match found for " + formatted + ". Matched " + (rule.default ? "default" : "{ http_method: " + rule.http_method + ", host: " + rule.host + ", url_path: " + rule.url_path + " }") + ". Using fixed_target: " + matched.fixedTarget + " and rate: " + matched.fallbackRate + ".");
            return true;
          }
        });
        if (matched) {
          return matched.isSampled();
        } else {
          logger.getLogger().debug("No sampling rule matched for " + formatted);
          return false;
        }
      },
      setLocalRules: function setLocalRules(source) {
        if (source) {
          if (typeof source === "string") {
            logger.getLogger().info("Using custom sampling rules file: " + source);
            this.rules = loadRulesConfig(JSON.parse(fs.readFileSync(source, "utf8")));
          } else {
            logger.getLogger().info("Using custom sampling rules source.");
            this.rules = loadRulesConfig(source);
          }
        } else {
          this.rules = parseRulesConfig(defaultRules);
        }
      }
    };
    var loadRulesConfig = function loadRulesConfig2(config) {
      if (!config.version) {
        throw new Error('Error in sampling file. Missing "version" attribute.');
      }
      if (config.version === 1 || config.version === 2) {
        return parseRulesConfig(config);
      } else {
        throw new Error('Error in sampling file. Unknown version "' + config.version + '".');
      }
    };
    var parseRulesConfig = function parseRulesConfig2(config) {
      var defaultRule;
      var rules = [];
      if (config.default) {
        var missing = [];
        for (var key in config.default) {
          if (key !== "fixed_target" && key !== "rate") {
            throw new Error("Error in sampling file. Invalid attribute for default: " + key + '. Valid attributes for default are "fixed_target" and "rate".');
          } else if (typeof config.default[key] !== "number") {
            throw new Error("Error in sampling file. Default " + key + " must be a number.");
          }
        }
        if (typeof config.default.fixed_target === "undefined") {
          missing.push("fixed_target");
        }
        if (typeof config.default.rate === "undefined") {
          missing.push("rate");
        }
        if (missing.length !== 0) {
          throw new Error("Error in sampling file. Missing required attributes for default: " + missing + ".");
        }
        defaultRule = { default: true, reservoir: new LocalReservoir(config.default.fixed_target, config.default.rate) };
      } else {
        throw new Error('Error in sampling file. Expecting "default" object to be defined with attributes "fixed_target" and "rate".');
      }
      if (Array.isArray(config.rules)) {
        config.rules.forEach(function(rawRule) {
          var params = {};
          var required;
          if (config.version === 2) {
            required = { host: 1, http_method: 1, url_path: 1, fixed_target: 1, rate: 1 };
          }
          if (config.version === 1) {
            required = { service_name: 1, http_method: 1, url_path: 1, fixed_target: 1, rate: 1 };
          }
          for (var key2 in rawRule) {
            var value = rawRule[key2];
            if (!required[key2] && key2 != "description") {
              throw new Error("Error in sampling file. Rule " + JSON.stringify(rawRule) + " has invalid attribute: " + key2 + ".");
            } else if (key2 != "description" && !value && value !== 0) {
              throw new Error("Error in sampling file. Rule " + JSON.stringify(rawRule) + ' attribute "' + key2 + '" has invalid value: ' + value + ".");
            } else {
              if (config.version === 2) {
                params[key2] = value;
              }
              if (config.version === 1 && key2 === "service_name") {
                params["host"] = value;
              } else {
                params[key2] = value;
              }
              delete required[key2];
            }
          }
          if (Object.keys(required).length !== 0 && required.constructor === Object) {
            throw new Error("Error in sampling file. Rule " + JSON.stringify(rawRule) + " is missing required attributes: " + Object.keys(required) + ".");
          }
          var rule = params;
          rule.reservoir = new LocalReservoir(rawRule.fixed_target, rawRule.rate);
          rules.push(rule);
        });
      }
      rules.push(defaultRule);
      return rules;
    };
    LocalSampler.setLocalRules();
    module2.exports = LocalSampler;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/reservoir.js
var require_reservoir = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/reservoir.js"(exports2, module2) {
    "use strict";
    function Reservoir() {
      this.init();
    }
    Reservoir.prototype.init = function init() {
      this.quota = null;
      this.TTL = null;
      this.takenThisSec = 0;
      this.borrowedThisSec = 0;
      this.reportInterval = 1;
      this.reportElapsed = 0;
    };
    Reservoir.prototype.borrowOrTake = function borrowOrTake(now, canBorrow) {
      this.adjustThisSec(now);
      if (this.quota >= 0 && this.TTL >= now) {
        if (this.takenThisSec >= this.quota) {
          return false;
        }
        this.takenThisSec++;
        return "take";
      }
      if (canBorrow) {
        if (this.borrowedThisSec >= 1) {
          return false;
        }
        this.borrowedThisSec++;
        return "borrow";
      }
    };
    Reservoir.prototype.adjustThisSec = function adjustThisSec(now) {
      if (now !== this.thisSec) {
        this.takenThisSec = 0;
        this.borrowedThisSec = 0;
        this.thisSec = now;
      }
    };
    Reservoir.prototype.loadNewQuota = function loadNewQuota(quota, TTL, interval) {
      if (quota) {
        this.quota = quota;
      }
      if (TTL) {
        this.TTL = TTL;
      }
      if (interval) {
        this.reportInterval = interval / 10;
      }
    };
    Reservoir.prototype.timeToReport = function timeToReport() {
      if (this.reportElapsed + 1 >= this.reportInterval) {
        this.reportElapsed = 0;
        return true;
      } else {
        this.reportElapsed += 1;
        return false;
      }
    };
    module2.exports = Reservoir;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/sampling_rule.js
var require_sampling_rule = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/sampling_rule.js"(exports2, module2) {
    "use strict";
    var Utils = require_utils();
    var Reservoir = require_reservoir();
    function SamplingRule(name, priority, rate, reservoirSize, host, httpMethod, urlPath, serviceName, serviceType) {
      this.init(name, priority, rate, reservoirSize, host, httpMethod, urlPath, serviceName, serviceType);
    }
    SamplingRule.prototype.init = function init(name, priority, rate, reservoirSize, host, httpMethod, urlPath, serviceName, serviceType) {
      this.name = name;
      this.priority = priority;
      this.rate = rate;
      this.host = host;
      this.httpMethod = httpMethod;
      this.urlPath = urlPath;
      this.serviceName = serviceName;
      this.serviceType = serviceType;
      this.reservoir = new Reservoir();
      this.borrow = !!reservoirSize;
      this.resetStatistics();
    };
    SamplingRule.prototype.match = function match(sampleRequest) {
      var host = sampleRequest.host;
      var httpMethod = sampleRequest.httpMethod;
      var serviceName = sampleRequest.serviceName;
      var urlPath = sampleRequest.urlPath;
      var serviceType = sampleRequest.serviceType;
      return this.isDefault() || (!host || Utils.wildcardMatch(this.host, host)) && (!httpMethod || Utils.wildcardMatch(this.httpMethod, httpMethod)) && (!serviceName || Utils.wildcardMatch(this.serviceName, serviceName)) && (!urlPath || Utils.wildcardMatch(this.urlPath, urlPath)) && (!serviceType || Utils.wildcardMatch(this.serviceType, serviceType));
    };
    SamplingRule.prototype.snapshotStatistics = function snapshotStatistics() {
      var statistics = {
        requestCount: this.requestCount,
        borrowCount: this.borrowCount,
        sampledCount: this.sampledCount
      };
      this.resetStatistics();
      return statistics;
    };
    SamplingRule.prototype.merge = function merge(rule) {
      this.reservoir = rule.reservoir;
      this.requestCount = rule.requestCount;
      this.borrowCount = rule.borrowCount;
      this.sampledCount = rule.sampledCount;
      rule = null;
    };
    SamplingRule.prototype.isDefault = function isDefault() {
      return this.name === "Default";
    };
    SamplingRule.prototype.incrementRequestCount = function incrementRequestCount() {
      this.requestCount++;
    };
    SamplingRule.prototype.incrementBorrowCount = function incrementBorrowCount() {
      this.borrowCount++;
    };
    SamplingRule.prototype.incrementSampledCount = function incrementSampledCount() {
      this.sampledCount++;
    };
    SamplingRule.prototype.setRate = function setRate(rate) {
      this.rate = rate;
    };
    SamplingRule.prototype.getRate = function getRate() {
      return this.rate;
    };
    SamplingRule.prototype.getName = function getName() {
      return this.name;
    };
    SamplingRule.prototype.getPriority = function getPriority() {
      return this.priority;
    };
    SamplingRule.prototype.getReservoir = function getReservoir() {
      return this.reservoir;
    };
    SamplingRule.prototype.resetStatistics = function resetStatistics() {
      this.requestCount = 0;
      this.borrowCount = 0;
      this.sampledCount = 0;
    };
    SamplingRule.prototype.canBorrow = function canBorrow() {
      return this.borrow;
    };
    SamplingRule.prototype.everMatched = function everMatched() {
      return this.requestCount > 0;
    };
    SamplingRule.prototype.timeToReport = function timeToReport() {
      return this.reservoir.timeToReport();
    };
    module2.exports = SamplingRule;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/service_connector.js
var require_service_connector = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/service_connector.js"(exports2, module2) {
    "use strict";
    var crypto = require("crypto");
    var logger = require_logger();
    var SamplingRule = require_sampling_rule();
    var DaemonConfig = require_daemon_config();
    var util = require("util");
    var http = require("http");
    var ServiceConnector = {
      clientId: crypto.randomBytes(12).toString("hex"),
      samplingRulesPath: "/GetSamplingRules",
      samplingTargetsPath: "/SamplingTargets",
      logger,
      httpClient: http,
      fetchSamplingRules: function fetchSamplingRules(callback) {
        const body = "{}";
        const options = getOptions(this.samplingRulesPath, body.length);
        const httpReq = this.httpClient.__request ? this.httpClient.__request : this.httpClient.request;
        const req = httpReq(options, (res) => {
          var data = "";
          res.on("data", (d) => {
            data += d;
          });
          res.on("error", (error) => {
            callback(error);
          });
          res.on("end", () => {
            var dataObj;
            try {
              dataObj = JSON.parse(data);
            } catch (err) {
              callback(err);
              return;
            }
            if (!dataObj) {
              callback(new Error("AWS X-Ray GetSamplingRules API returned empty response"));
              return;
            }
            var newRules = assembleRules(dataObj);
            callback(null, newRules);
          });
        });
        req.on("error", () => {
          callback(new Error(`Failed to connect to X-Ray daemon at ${options.hostname}:${options.port} to get sampling rules.`));
        });
        req.write(body);
        req.end();
      },
      fetchTargets: function fetchTargets(rules, callback) {
        const body = JSON.stringify(constructStatisticsDocs(rules));
        const options = getOptions(this.samplingTargetsPath, body.length);
        const httpReq = this.httpClient.__request ? this.httpClient.__request : this.httpClient.request;
        const req = httpReq(options, (res) => {
          var data = "";
          res.on("data", (d) => {
            data += d;
          });
          res.on("error", (error) => {
            callback(error);
          });
          res.on("end", () => {
            var dataObj;
            try {
              dataObj = JSON.parse(data);
            } catch (err) {
              callback(err);
              return;
            }
            if (!dataObj || typeof dataObj["LastRuleModification"] != "number") {
              callback(new Error("AWS X-Ray SamplingTargets API returned invalid response"));
              return;
            }
            var targetsMapping = assembleTargets(dataObj);
            var ruleFreshness = dateToEpoch(dataObj["LastRuleModification"]);
            callback(null, targetsMapping, ruleFreshness);
          });
        });
        req.on("error", () => {
          callback(new Error(`Failed to connect to X-Ray daemon at ${options.hostname}:${options.port} to get sampling targets.`));
        });
        req.write(body);
        req.end();
      }
    };
    var constructStatisticsDocs = function constructStatisticsDocs2(rules) {
      var documents = [];
      var now = Math.floor(new Date().getTime() / 1e3);
      rules.forEach(function(rule) {
        var statistics = rule.snapshotStatistics();
        var doc = {
          "RuleName": rule.getName(),
          "ClientID": ServiceConnector.clientId,
          "RequestCount": statistics.requestCount,
          "BorrowCount": statistics.borrowCount,
          "SampledCount": statistics.sampledCount,
          "Timestamp": now
        };
        documents.push(doc);
      });
      return { SamplingStatisticsDocuments: documents };
    };
    var assembleRules = function assembleRules2(data) {
      var newRules = [];
      var ruleList = data["SamplingRuleRecords"] || [];
      ruleList.forEach(function(ruleRecord) {
        ruleRecord = ruleRecord["SamplingRule"];
        if (isRuleValid(ruleRecord)) {
          var newRule = new SamplingRule(ruleRecord["RuleName"], ruleRecord["Priority"], ruleRecord["FixedRate"], ruleRecord["ReservoirSize"], ruleRecord["Host"], ruleRecord["HTTPMethod"], ruleRecord["URLPath"], ruleRecord["ServiceName"], ruleRecord["ServiceType"]);
          newRules.push(newRule);
        }
      });
      return newRules;
    };
    var assembleTargets = function assembleTargets2(data) {
      var docs = data["SamplingTargetDocuments"] || [];
      var targetsMapping = {};
      docs.forEach(function(doc) {
        var newTarget = {
          rate: doc["FixedRate"],
          quota: doc["ReservoirQuota"],
          TTL: dateToEpoch(doc["ReservoirQuotaTTL"]),
          interval: doc["Interval"]
        };
        targetsMapping[doc["RuleName"]] = newTarget;
      });
      return targetsMapping;
    };
    var isRuleValid = function isRuleValid2(record) {
      return record["Version"] === 1 && record["ResourceARN"] === "*" && record["Attributes"] && Object.keys(record["Attributes"]).length === 0 && record["ServiceType"] && record["RuleName"] && record["Priority"] && typeof record["FixedRate"] == "number";
    };
    var dateToEpoch = function dateToEpoch2(date2) {
      return new Date(date2).getTime() / 1e3;
    };
    var getOptions = function getOptions2(path, contentLength) {
      const options = {
        hostname: DaemonConfig.tcp_ip,
        port: DaemonConfig.tcp_port,
        method: "POST",
        path,
        headers: {
          "Content-Type": "application/json",
          "Content-Length": contentLength,
          "Host": util.format("%s:%d", DaemonConfig.tcp_ip, DaemonConfig.tcp_port)
        }
      };
      return options;
    };
    module2.exports = ServiceConnector;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/rule_cache.js
var require_rule_cache = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/rule_cache.js"(exports2, module2) {
    "use strict";
    var TTL = 60 * 60;
    var RuleCache = {
      rules: [],
      lastUpdated: null,
      getMatchedRule: function getMatchedRule(sampleRequest, now) {
        if (isExpired(now)) {
          return null;
        }
        var matchedRule;
        this.rules.forEach(function(rule) {
          if (!matchedRule && rule.match(sampleRequest)) {
            matchedRule = rule;
          }
          if (rule.isDefault() && !matchedRule) {
            matchedRule = rule;
          }
        });
        return matchedRule;
      },
      loadRules: function loadRules(rules) {
        var oldRules = {};
        this.rules.forEach(function(rule) {
          oldRules[rule.getName()] = rule;
        });
        this.rules = rules;
        this.rules.forEach(function(rule) {
          var oldRule = oldRules[rule.getName()];
          if (oldRule) {
            rule.merge(oldRule);
          }
        });
        this.rules.sort(function(a, b) {
          var v = a.getPriority() - b.getPriority();
          if (v !== 0) {
            return v;
          }
          if (a.getName() > b.getName()) {
            return 1;
          } else {
            return -1;
          }
        });
      },
      loadTargets: function loadTargets(targetsMapping) {
        this.rules.forEach(function(rule) {
          var target = targetsMapping[rule.getName()];
          if (target) {
            rule.getReservoir().loadNewQuota(target.quota, target.TTL, target.interval);
            rule.setRate(target.rate);
          }
        });
      },
      getRules: function getRules() {
        return this.rules;
      },
      timestamp: function timestamp(now) {
        this.lastUpdated = now;
      },
      getLastUpdated: function getLastUpdated() {
        return this.lastUpdated;
      }
    };
    var isExpired = function isExpired2(now) {
      if (!RuleCache.getLastUpdated()) {
        return true;
      }
      return now > RuleCache.getLastUpdated() + TTL;
    };
    module2.exports = RuleCache;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/rule_poller.js
var require_rule_poller = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/rule_poller.js"(exports2, module2) {
    "use strict";
    var logger = require_logger();
    var ServiceConnector = require_service_connector();
    var ruleCache = require_rule_cache();
    var DEFAULT_INTERVAL = 5 * 60 * 1e3;
    var RulePoller = {
      start: function start() {
        if (this.poller) {
          clearInterval(this.poller);
        }
        refresh(false);
        this.poller = setInterval(refresh, DEFAULT_INTERVAL);
        this.poller.unref();
      }
    };
    var refresh = function refresh2(jitter) {
      jitter = typeof jitter === "undefined" ? true : jitter;
      if (jitter) {
        var delay = getJitter();
        setTimeout(refreshWithFirewall, delay);
      } else {
        refreshWithFirewall();
      }
    };
    var refreshWithFirewall = function refreshWithFirewall2() {
      try {
        refreshCache();
      } catch (e) {
        logger.getLogger().warn("Encountered unexpected exception when fetching sampling rules: " + e);
      }
    };
    var refreshCache = function refreshCache2() {
      var now = Math.floor(new Date().getTime() / 1e3);
      ServiceConnector.fetchSamplingRules(function(err, newRules) {
        if (err) {
          logger.getLogger().warn("Failed to retrieve sampling rules from X-Ray service:", err);
        } else if (newRules.length !== 0) {
          ruleCache.loadRules(newRules);
          ruleCache.timestamp(now);
          logger.getLogger().info("Successfully refreshed centralized sampling rule cache.");
        }
      });
    };
    var getJitter = function getJitter2() {
      return Math.random() * 5;
    };
    module2.exports = RulePoller;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/target_poller.js
var require_target_poller = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/target_poller.js"(exports2, module2) {
    "use strict";
    var rulePoller = require_rule_poller();
    var serviceConnector = require_service_connector();
    var ruleCache = require_rule_cache();
    var logger = require_logger();
    var DEFAULT_INTERVAL = 10 * 1e3;
    var TargetPoller = {
      interval: DEFAULT_INTERVAL,
      start: function start() {
        this.poller = setInterval(refreshWithFirewall, DEFAULT_INTERVAL + getJitter());
        this.poller.unref();
      }
    };
    var refreshWithFirewall = function refreshWithFirewall2() {
      try {
        refresh();
      } catch (e) {
        logger.getLogger().warn("Encountered unexpected exception when fetching sampling targets: " + e);
      }
    };
    var refresh = function refresh2() {
      var candidates = getCandidates();
      if (candidates && candidates.length > 0) {
        serviceConnector.fetchTargets(candidates, function(err, targetsMapping, ruleFreshness) {
          if (err) {
            logger.getLogger().warn("Failed to retrieve sampling targets from X-Ray service:", err);
            return;
          }
          ruleCache.loadTargets(targetsMapping);
          if (ruleFreshness > ruleCache.getLastUpdated()) {
            logger.getLogger().info("Performing out-of-band sampling rule polling to fetch updated rules.");
            rulePoller.start();
          }
          logger.getLogger().info("Successfully reported rule statistics to get new sampling quota.");
        });
      }
    };
    var getCandidates = function getCandidates2() {
      var rules = ruleCache.getRules();
      var candidates = [];
      rules.forEach(function(rule) {
        if (rule.everMatched() && rule.timeToReport()) {
          candidates.push(rule);
        }
      });
      return candidates;
    };
    var getJitter = function getJitter2() {
      return Math.random() / TargetPoller.interval;
    };
    module2.exports = TargetPoller;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/default_sampler.js
var require_default_sampler = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/default_sampler.js"(exports2, module2) {
    "use strict";
    var logger = require_logger();
    var util = require("util");
    var SegmentUtils = require_segment_utils();
    var DefaultSampler = {
      localSampler: require_local_sampler(),
      rulePoller: require_rule_poller(),
      targetPoller: require_target_poller(),
      ruleCache: require_rule_cache(),
      started: false,
      shouldSample: function shouldSample(sampleRequest) {
        try {
          if (!this.started) {
            this.start();
          }
          if (!sampleRequest.serviceType) {
            sampleRequest.serviceType = SegmentUtils.origin;
          }
          var now = Math.floor(new Date().getTime() / 1e3);
          var matchedRule = this.ruleCache.getMatchedRule(sampleRequest, now);
          if (matchedRule) {
            logger.getLogger().debug(util.format("Rule %s is matched.", matchedRule.getName()));
            return processMatchedRule(matchedRule, now);
          } else {
            logger.getLogger().info("No effective centralized sampling rule match. Fallback to local rules.");
            return this.localSampler.shouldSample(sampleRequest);
          }
        } catch (err) {
          logger.getLogger().error("Unhandled exception by the SDK during making sampling decisions: " + err);
        }
      },
      setLocalRules: function setLocalRules(source) {
        this.localSampler.setLocalRules(source);
      },
      start: function start() {
        if (!this.started) {
          this.rulePoller.start();
          this.targetPoller.start();
          this.started = true;
        }
      }
    };
    var processMatchedRule = function processMatchedRule2(rule, now) {
      rule.incrementRequestCount();
      var reservoir = rule.getReservoir();
      var sample = true;
      var decision = reservoir.borrowOrTake(now, rule.canBorrow());
      if (decision === "borrow") {
        rule.incrementBorrowCount();
      } else if (decision === "take") {
        rule.incrementSampledCount();
      } else if (Math.random() <= rule.getRate()) {
        rule.incrementSampledCount();
      } else {
        sample = false;
      }
      if (sample) {
        return rule.getName();
      } else {
        return false;
      }
    };
    module2.exports = DefaultSampler;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/middleware/mw_utils.js
var require_mw_utils = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/middleware/mw_utils.js"(exports2, module2) {
    "use strict";
    var Segment = require_segment();
    var IncomingRequestData = require_incoming_request_data();
    var logger = require_logger();
    var coreUtils = require_utils();
    var wildcardMatch = require_utils().wildcardMatch;
    var processTraceData = require_utils().processTraceData;
    var XRAY_HEADER = "x-amzn-trace-id";
    var overrideFlag = !!process.env.AWS_XRAY_TRACING_NAME;
    var utils = {
      defaultName: process.env.AWS_XRAY_TRACING_NAME,
      dynamicNaming: false,
      hostPattern: null,
      sampler: require_default_sampler(),
      enableDynamicNaming: function(hostPattern) {
        this.dynamicNaming = true;
        if (hostPattern && typeof hostPattern !== "string") {
          throw new Error("Host pattern must be a string.");
        }
        this.hostPattern = hostPattern || null;
      },
      processHeaders: function processHeaders(req) {
        var amznTraceHeader = {};
        if (req && req.headers && req.headers[XRAY_HEADER]) {
          amznTraceHeader = processTraceData(req.headers[XRAY_HEADER]);
        }
        return amznTraceHeader;
      },
      resolveName: function resolveName(hostHeader) {
        var name;
        if (this.dynamicNaming && hostHeader) {
          name = this.hostPattern ? wildcardMatch(this.hostPattern, hostHeader) ? hostHeader : this.defaultName : hostHeader;
        } else {
          name = this.defaultName;
        }
        return name;
      },
      resolveSampling: function resolveSampling(amznTraceHeader, segment, res) {
        var isSampled;
        if (amznTraceHeader.sampled === "1") {
          isSampled = true;
        } else if (amznTraceHeader.sampled === "0") {
          isSampled = false;
        } else {
          var sampleRequest = {
            host: res.req.headers.host,
            httpMethod: res.req.method,
            urlPath: res.req.url,
            serviceName: segment.name
          };
          isSampled = this.sampler.shouldSample(sampleRequest);
          if (isSampled instanceof String || typeof isSampled === "string") {
            segment.setMatchedSamplingRule(isSampled);
            isSampled = true;
          }
        }
        if (amznTraceHeader.sampled === "?") {
          res.header[XRAY_HEADER] = "Root=" + amznTraceHeader.root + ";Sampled=" + (isSampled ? "1" : "0");
        }
        if (!isSampled) {
          segment.notTraced = true;
        }
      },
      setDefaultName: function setDefaultName(name) {
        if (!overrideFlag) {
          this.defaultName = name;
        }
      },
      disableCentralizedSampling: function disableCentralizedSampling() {
        this.sampler = require_local_sampler();
      },
      setSamplingRules: function setSamplingRules(source) {
        if (!source || source instanceof String || !(typeof source === "string" || source instanceof Object)) {
          throw new Error("Please specify a path to the local sampling rules file, or supply an object containing the rules.");
        }
        this.sampler.setLocalRules(source);
      },
      middlewareLog: function middlewareLog(message, url, segment) {
        logger.getLogger().debug(message + ": { url: " + url + ", name: " + segment.name + ", trace_id: " + segment.trace_id + ", id: " + segment.id + ", sampled: " + !segment.notTraced + " }");
      },
      traceRequestResponseCycle: function traceRequestResponseCycle(req, res) {
        var amznTraceHeader = this.processHeaders(req);
        var name = this.resolveName(req.headers.host);
        var segment = new Segment(name, amznTraceHeader.root, amznTraceHeader.parent);
        var responseWithEmbeddedRequest = Object.assign({}, res, { req });
        this.resolveSampling(amznTraceHeader, segment, responseWithEmbeddedRequest);
        segment.addIncomingRequestData(new IncomingRequestData(req));
        this.middlewareLog("Starting middleware segment", req.url, segment);
        var middlewareLog = this.middlewareLog;
        var didEnd = false;
        var endSegment = function() {
          if (didEnd) {
            return;
          }
          didEnd = true;
          if (res.statusCode === 429) {
            segment.addThrottleFlag();
          }
          const cause = coreUtils.getCauseTypeFromHttpStatus(res.statusCode);
          if (cause) {
            segment[cause] = true;
          }
          segment.http.close(res);
          segment.close();
          middlewareLog("Closed middleware segment successfully", req.url, segment);
        };
        res.on("finish", endSegment);
        res.on("close", endSegment);
        return segment;
      }
    };
    module2.exports = utils;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/env/aws_lambda.js
var require_aws_lambda = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/env/aws_lambda.js"(exports2, module2) {
    "use strict";
    var contextUtils = require_context_utils();
    var mwUtils = require_mw_utils();
    var LambdaUtils = require_utils().LambdaUtils;
    var Segment = require_segment();
    var SegmentEmitter = require_segment_emitter();
    var SegmentUtils = require_segment_utils();
    var logger = require_logger();
    var TraceID = require_trace_id();
    var xAmznTraceIdPrev = null;
    module2.exports.init = function init() {
      contextUtils.enableManualMode = function() {
        logger.getLogger().warn("AWS Lambda does not support AWS X-Ray manual mode.");
      };
      SegmentEmitter.disableReusableSocket();
      SegmentUtils.setStreamingThreshold(0);
      logger.getLogger().info("Disabling centralized sampling in Lambda environment.");
      mwUtils.disableCentralizedSampling();
      var namespace = contextUtils.getNamespace();
      namespace.enter(namespace.createContext());
      contextUtils.setSegment(facadeSegment());
    };
    var facadeSegment = function facadeSegment2() {
      var segment = new Segment("facade");
      var whitelistFcn = ["addNewSubsegment", "addSubsegment", "removeSubsegment", "toString"];
      var silentFcn = ["incrementCounter", "decrementCounter", "isClosed", "close", "format", "flush"];
      var xAmznTraceId = process.env._X_AMZN_TRACE_ID;
      for (var key in segment) {
        if (typeof segment[key] === "function" && whitelistFcn.indexOf(key) === -1) {
          if (silentFcn.indexOf(key) === -1) {
            segment[key] = function() {
              var func = key;
              return function facade() {
                logger.getLogger().warn('Function "' + func + '" cannot be called on an AWS Lambda segment. Please use a subsegment to record data.');
                return;
              };
            }();
          } else {
            segment[key] = function facade() {
              return;
            };
          }
        }
      }
      segment.trace_id = TraceID.Invalid().toString();
      segment.isClosed = function() {
        return true;
      };
      segment.in_progress = false;
      segment.counter = 1;
      segment.notTraced = true;
      segment.facade = true;
      segment.reset = function reset() {
        this.trace_id = TraceID.Invalid().toString();
        this.id = "00000000";
        delete this.subsegments;
        this.notTraced = true;
      };
      segment.resolveLambdaTraceData = function resolveLambdaTraceData() {
        var xAmznLambda = process.env._X_AMZN_TRACE_ID;
        if (xAmznLambda) {
          if (xAmznLambda != xAmznTraceIdPrev) {
            this.reset();
            if (LambdaUtils.populateTraceData(segment, xAmznLambda)) {
              xAmznTraceIdPrev = xAmznLambda;
            }
          }
        } else {
          this.reset();
          contextUtils.contextMissingStrategy.contextMissing("Missing AWS Lambda trace data for X-Ray. Ensure Active Tracing is enabled and no subsegments are created outside the function handler.");
        }
      };
      if (LambdaUtils.validTraceData(xAmznTraceId)) {
        if (LambdaUtils.populateTraceData(segment, xAmznTraceId)) {
          xAmznTraceIdPrev = xAmznTraceId;
        }
      }
      return segment;
    };
  }
});

// asset-input/node_modules/aws-xray-sdk-core/package.json
var require_package = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/package.json"(exports2, module2) {
    module2.exports = {
      name: "aws-xray-sdk-core",
      version: "3.3.4",
      description: "AWS X-Ray SDK for Javascript",
      author: "Amazon Web Services",
      contributors: [
        "Sandra McMullen <mcmuls@amazon.com>",
        "William Armiros <armiros@amazon.com>",
        "Moritz Onken <onken@netcubed.de>"
      ],
      files: [
        "dist/lib/**/*",
        "LICENSE",
        "README.md"
      ],
      main: "dist/lib/index.js",
      types: "dist/lib/index.d.ts",
      engines: {
        node: ">= 10.x"
      },
      directories: {
        test: "test"
      },
      "//": "@types/cls-hooked is exposed in API so must be in dependencies, not devDependencies",
      dependencies: {
        "@aws-sdk/service-error-classification": "^3.4.1",
        "@aws-sdk/types": "^3.4.1",
        "@types/cls-hooked": "^4.3.3",
        "atomic-batcher": "^1.0.2",
        "cls-hooked": "^4.2.2",
        semver: "^5.3.0"
      },
      scripts: {
        prepare: "npm run compile",
        compile: "tsc && npm run copy-lib && npm run copy-test",
        "copy-lib": "find lib -type f \\( -name '*.d.ts' -o -name '*.json' \\) | xargs -I % ../../scripts/cp-with-structure.sh % dist",
        "copy-test": "find test -name '*.json' | xargs -I % ../../scripts/cp-with-structure.sh % dist",
        lint: "eslint .",
        "lint:fix": "eslint . --fix",
        test: "npm run compile && mocha --recursive ./dist/test/ -R spec && tsd && mocha --recursive ./dist/test_async/ -R spec",
        "test-d": "tsd",
        "test-async": "npm run compile && mocha --recursive ./dist/test_async/ -R spec",
        clean: "rm -rf dist && rm -rf node_modules",
        testcov: "nyc npm run test",
        reportcov: "nyc report --reporter=text-lcov > coverage.lcov && codecov"
      },
      keywords: [
        "amazon",
        "api",
        "aws",
        "core",
        "xray",
        "x-ray",
        "x ray"
      ],
      license: "Apache-2.0",
      repository: "https://github.com/aws/aws-xray-sdk-node/tree/master/packages/core",
      gitHead: "c74bc4a3aa7aa349f2c3e970135664d689ba717b"
    };
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/segments/plugins/plugin.js
var require_plugin = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/segments/plugins/plugin.js"(exports2, module2) {
    "use strict";
    var http = require("http");
    var Plugin = {
      METADATA_TIMEOUT: 1e3,
      getPluginMetadata: function(options, callback) {
        const METADATA_RETRY_TIMEOUT = 250;
        const METADATA_RETRIES = 5;
        var retries = METADATA_RETRIES;
        var getMetadata = function() {
          var httpReq = http.__request ? http.__request : http.request;
          var req = httpReq(options, function(res) {
            var body = "";
            res.on("data", function(chunk) {
              body += chunk;
            });
            res.on("end", function() {
              if (this.statusCode === 200 || this.statusCode === 300) {
                try {
                  body = JSON.parse(body);
                } catch (e) {
                  callback(e);
                  return;
                }
                callback(null, body);
              } else if (retries > 0 && Math.floor(this.statusCode / 100) === 5) {
                retries--;
                setTimeout(getMetadata, METADATA_RETRY_TIMEOUT);
              } else {
                callback(new Error(`Failed to retrieve metadata with options: ${options}`));
              }
            });
          });
          req.on("error", function(err) {
            callback(err);
          });
          req.on("timeout", function() {
            req.abort();
          });
          req.setTimeout(Plugin.METADATA_TIMEOUT);
          req.end();
        };
        getMetadata();
      }
    };
    module2.exports = Plugin;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/segments/plugins/ec2_plugin.js
var require_ec2_plugin = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/segments/plugins/ec2_plugin.js"(exports2, module2) {
    "use strict";
    var Plugin = require_plugin();
    var logger = require_logger();
    var http = require("http");
    var EC2Plugin = {
      getData: function(callback) {
        const METADATA_PATH = "/latest/dynamic/instance-identity/document";
        function populateMetadata(token) {
          const options = getOptions(METADATA_PATH, "GET", token ? { "X-aws-ec2-metadata-token": token } : {});
          Plugin.getPluginMetadata(options, function(err, data) {
            if (err || !data) {
              logger.getLogger().error("Error loading EC2 plugin metadata: ", err ? err.toString() : "Could not retrieve data from IMDS.");
              callback();
              return;
            }
            const metadata = {
              ec2: {
                instance_id: data.instanceId,
                availability_zone: data.availabilityZone,
                instance_size: data.instanceType,
                ami_id: data.imageId
              }
            };
            callback(metadata);
          });
        }
        getToken(function(token) {
          if (token === null) {
            logger.getLogger().debug("EC2Plugin failed to get token from IMDSv2. Falling back to IMDSv1.");
          }
          populateMetadata(token);
        });
      },
      originName: "AWS::EC2::Instance"
    };
    function getToken(callback) {
      const httpReq = http.__request ? http.__request : http.request;
      const TTL = 60;
      const TOKEN_PATH = "/latest/api/token";
      const options = getOptions(TOKEN_PATH, "PUT", {
        "X-aws-ec2-metadata-token-ttl-seconds": TTL
      });
      let req = httpReq(options, function(res) {
        let body = "";
        res.on("data", function(chunk) {
          body += chunk;
        });
        res.on("end", function() {
          if (this.statusCode === 200 || this.statusCode === 300) {
            callback(body);
          } else {
            callback(null);
          }
        });
      });
      req.on("error", function() {
        callback(null);
      });
      req.on("timeout", function() {
        req.abort();
        callback(null);
      });
      req.setTimeout(Plugin.METADATA_TIMEOUT);
      req.end();
    }
    function getOptions(path, method, headers) {
      if (!method) {
        method = "GET";
      }
      if (!headers) {
        headers = {};
      }
      return {
        host: "169.254.169.254",
        path,
        method,
        headers
      };
    }
    module2.exports = EC2Plugin;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/segments/plugins/ecs_plugin.js
var require_ecs_plugin = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/segments/plugins/ecs_plugin.js"(exports2, module2) {
    "use strict";
    var os = require("os");
    var ECSPlugin = {
      getData: function(callback) {
        callback({ ecs: { container: os.hostname() } });
      },
      originName: "AWS::ECS::Container"
    };
    module2.exports = ECSPlugin;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/segments/plugins/elastic_beanstalk_plugin.js
var require_elastic_beanstalk_plugin = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/segments/plugins/elastic_beanstalk_plugin.js"(exports2, module2) {
    "use strict";
    var fs = require("fs");
    var logger = require_logger();
    var ENV_CONFIG_LOCATION = "/var/elasticbeanstalk/xray/environment.conf";
    var ElasticBeanstalkPlugin = {
      getData: function(callback) {
        fs.readFile(ENV_CONFIG_LOCATION, "utf8", function(err, rawData) {
          if (err) {
            logger.getLogger().error("Error loading Elastic Beanstalk plugin:", err.stack);
            callback();
          } else {
            var data = JSON.parse(rawData);
            var metadata = {
              elastic_beanstalk: {
                environment: data.environment_name,
                version_label: data.version_label,
                deployment_id: data.deployment_id
              }
            };
            callback(metadata);
          }
        });
      },
      originName: "AWS::ElasticBeanstalk::Environment"
    };
    module2.exports = ElasticBeanstalkPlugin;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/resources/aws_whitelist.json
var require_aws_whitelist = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/resources/aws_whitelist.json"(exports2, module2) {
    module2.exports = {
      services: {
        dynamodb: {
          operations: {
            batchGetItem: {
              request_descriptors: {
                RequestItems: {
                  get_keys: true,
                  rename_to: "table_names"
                }
              },
              response_parameters: [
                "ConsumedCapacity"
              ]
            },
            batchWriteItem: {
              request_descriptors: {
                RequestItems: {
                  get_keys: true,
                  rename_to: "table_names"
                }
              },
              response_parameters: [
                "ConsumedCapacity",
                "ItemCollectionMetrics"
              ]
            },
            createTable: {
              request_parameters: [
                "GlobalSecondaryIndexes",
                "LocalSecondaryIndexes",
                "ProvisionedThroughput",
                "TableName"
              ]
            },
            deleteItem: {
              request_parameters: [
                "TableName"
              ],
              response_parameters: [
                "ConsumedCapacity",
                "ItemCollectionMetrics"
              ]
            },
            deleteTable: {
              request_parameters: [
                "TableName"
              ]
            },
            describeTable: {
              request_parameters: [
                "TableName"
              ]
            },
            getItem: {
              request_parameters: [
                "ConsistentRead",
                "ProjectionExpression",
                "TableName"
              ],
              response_parameters: [
                "ConsumedCapacity"
              ]
            },
            listTables: {
              request_parameters: [
                "ExclusiveStartTableName",
                "Limit"
              ],
              response_descriptors: {
                TableNames: {
                  list: true,
                  get_count: true,
                  rename_to: "table_count"
                }
              }
            },
            putItem: {
              request_parameters: [
                "TableName"
              ],
              response_parameters: [
                "ConsumedCapacity",
                "ItemCollectionMetrics"
              ]
            },
            query: {
              request_parameters: [
                "AttributesToGet",
                "ConsistentRead",
                "IndexName",
                "Limit",
                "ProjectionExpression",
                "ScanIndexForward",
                "Select",
                "TableName"
              ],
              response_parameters: [
                "ConsumedCapacity"
              ]
            },
            scan: {
              request_parameters: [
                "AttributesToGet",
                "ConsistentRead",
                "IndexName",
                "Limit",
                "ProjectionExpression",
                "Segment",
                "Select",
                "TableName",
                "TotalSegments"
              ],
              response_parameters: [
                "ConsumedCapacity",
                "Count",
                "ScannedCount"
              ]
            },
            updateItem: {
              request_parameters: [
                "TableName"
              ],
              response_parameters: [
                "ConsumedCapacity",
                "ItemCollectionMetrics"
              ]
            },
            updateTable: {
              request_parameters: [
                "AttributeDefinitions",
                "GlobalSecondaryIndexUpdates",
                "ProvisionedThroughput",
                "TableName"
              ]
            }
          }
        },
        sqs: {
          operations: {
            addPermission: {
              request_parameters: [
                "Label",
                "QueueUrl"
              ]
            },
            changeMessageVisibility: {
              request_parameters: [
                "QueueUrl",
                "VisibilityTimeout"
              ]
            },
            changeMessageVisibilityBatch: {
              request_parameters: [
                "QueueUrl"
              ],
              response_parameters: [
                "Failed"
              ]
            },
            createQueue: {
              request_parameters: [
                "Attributes",
                "QueueName"
              ]
            },
            deleteMessage: {
              request_parameters: [
                "QueueUrl"
              ]
            },
            deleteMessageBatch: {
              request_parameters: [
                "QueueUrl"
              ],
              response_parameters: [
                "Failed"
              ]
            },
            deleteQueue: {
              request_parameters: [
                "QueueUrl"
              ]
            },
            getQueueAttributes: {
              request_parameters: [
                "QueueUrl"
              ],
              response_parameters: [
                "Attributes"
              ]
            },
            getQueueUrl: {
              request_parameters: [
                "QueueName",
                "QueueOwnerAWSAccountId"
              ],
              response_parameters: [
                "QueueUrl"
              ]
            },
            listDeadLetterSourceQueues: {
              request_parameters: [
                "QueueUrl"
              ],
              response_parameters: [
                "QueueUrls"
              ]
            },
            listQueues: {
              request_parameters: [
                "QueueNamePrefix"
              ],
              response_descriptors: {
                QueueUrls: {
                  list: true,
                  get_count: true,
                  rename_to: "queue_count"
                }
              }
            },
            purgeQueue: {
              request_parameters: [
                "QueueUrl"
              ]
            },
            receiveMessage: {
              request_parameters: [
                "AttributeNames",
                "MaxNumberOfMessages",
                "MessageAttributeNames",
                "QueueUrl",
                "VisibilityTimeout",
                "WaitTimeSeconds"
              ],
              response_descriptors: {
                Messages: {
                  list: true,
                  get_count: true,
                  rename_to: "message_count"
                }
              }
            },
            removePermission: {
              request_parameters: [
                "QueueUrl"
              ]
            },
            sendMessage: {
              request_parameters: [
                "DelaySeconds",
                "QueueUrl"
              ],
              request_descriptors: {
                MessageAttributes: {
                  get_keys: true,
                  rename_to: "message_attribute_names"
                }
              },
              response_parameters: [
                "MessageId"
              ]
            },
            sendMessageBatch: {
              request_parameters: [
                "QueueUrl"
              ],
              request_descriptors: {
                Entries: {
                  list: true,
                  get_count: true,
                  rename_to: "message_count"
                }
              },
              response_descriptors: {
                Failed: {
                  list: true,
                  get_count: true,
                  rename_to: "failed_count"
                },
                Successful: {
                  list: true,
                  get_count: true,
                  rename_to: "successful_count"
                }
              }
            },
            setQueueAttributes: {
              request_parameters: [
                "QueueUrl"
              ],
              request_descriptors: {
                Attributes: {
                  get_keys: true,
                  rename_to: "attribute_names"
                }
              }
            }
          }
        },
        sns: {
          operations: {
            publish: {
              request_parameters: [
                "TopicArn"
              ]
            }
          }
        },
        lambda: {
          operations: {
            invoke: {
              request_parameters: [
                "FunctionName",
                "InvocationType",
                "LogType",
                "Qualifier"
              ],
              response_parameters: [
                "FunctionError",
                "StatusCode"
              ]
            },
            invokeAsync: {
              request_parameters: [
                "FunctionName"
              ],
              response_parameters: [
                "Status"
              ]
            }
          }
        },
        s3: {
          operations: {
            abortMultipartUpload: {
              request_parameters: [
                "Key"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            completeMultipartUpload: {
              request_parameters: [
                "Key"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            copyObject: {
              request_parameters: [
                "CopySource",
                "Key"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            createBucket: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            createMultipartUpload: {
              request_parameters: [
                "Key"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucket: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketAnalyticsConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketCors: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketEncryption: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketInventoryConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketLifecycle: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketMetricsConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketPolicy: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketReplication: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketTagging: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketWebsite: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteObject: {
              request_parameters: [
                "Key",
                "VersionId"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteObjectTagging: {
              request_parameters: [
                "Key",
                "VersionId"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteObjects: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketAccelerateConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketAcl: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketAnalyticsConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketCors: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketEncryption: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketInventoryConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketLifecycle: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketLifecycleConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketLocation: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketLogging: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketMetricsConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketNotification: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketNotificationConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketPolicy: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketReplication: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketRequestPayment: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketTagging: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketVersioning: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketWebsite: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getObject: {
              request_parameters: [
                "Key",
                "VersionId"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getObjectAcl: {
              request_parameters: [
                "Key",
                "VersionId"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getObjectTagging: {
              request_parameters: [
                "Key",
                "VersionId"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getObjectTorrent: {
              request_parameters: [
                "Key"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            headBucket: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            headObject: {
              request_parameters: [
                "Key",
                "VersionId"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            listBucketAnalyticsConfigurations: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            listBucketInventoryConfigurations: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            listBucketMetricsConfigurations: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            listMultipartUploads: {
              request_parameters: [
                "Prefix"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            listObjectVersions: {
              request_parameters: [
                "Prefix"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            listObjects: {
              request_parameters: [
                "Prefix"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            listObjectsV2: {
              request_parameters: [
                "Prefix"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            listParts: {
              request_parameters: [
                "Key"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketAccelerateConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketAcl: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketAnalyticsConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketCors: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketEncryption: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketInventoryConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketLifecycle: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketLifecycleConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketLogging: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketMetricsConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketNotification: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketNotificationConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketPolicy: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketReplication: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketRequestPayment: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketTagging: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketVersioning: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketWebsite: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putObject: {
              request_parameters: [
                "Key"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putObjectAcl: {
              request_parameters: [
                "Key",
                "VersionId"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putObjectTagging: {
              request_parameters: [
                "Key",
                "VersionId"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            restoreObject: {
              request_parameters: [
                "Key",
                "VersionId"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            uploadPart: {
              request_parameters: [
                "Key"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            uploadPartCopy: {
              request_parameters: [
                "CopySource",
                "Key"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            }
          }
        },
        sagemakerruntime: {
          operations: {
            invokeEndpoint: {
              request_parameters: [
                "EndpointName"
              ]
            }
          }
        }
      }
    };
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/patchers/call_capturer.js
var require_call_capturer = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/patchers/call_capturer.js"(exports2, module2) {
    "use strict";
    var fs = require("fs");
    var logger = require_logger();
    var whitelist = require_aws_whitelist();
    var paramTypes = {
      REQ_DESC: "request_descriptors",
      REQ_PARAMS: "request_parameters",
      RES_DESC: "response_descriptors",
      RES_PARAMS: "response_parameters"
    };
    function CallCapturer(source) {
      this.init(source);
    }
    CallCapturer.prototype.init = function init(source) {
      if (source) {
        if (typeof source === "string") {
          logger.getLogger().info("Using custom AWS whitelist file: " + source);
          this.services = loadWhitelist(JSON.parse(fs.readFileSync(source, "utf8")));
        } else {
          logger.getLogger().info("Using custom AWS whitelist source.");
          this.services = loadWhitelist(source);
        }
      } else {
        this.services = whitelist.services;
      }
    };
    CallCapturer.prototype.append = function append(source) {
      var newServices = {};
      if (typeof source === "string") {
        logger.getLogger().info("Appending AWS whitelist with custom file: " + source);
        newServices = loadWhitelist(JSON.parse(fs.readFileSync(source, "utf8")));
      } else {
        logger.getLogger().info("Appending AWS whitelist with a custom source.");
        newServices = loadWhitelist(source);
      }
      for (var attribute in newServices) {
        this.services[attribute] = newServices[attribute];
      }
    };
    CallCapturer.prototype.capture = function capture(serviceName, response) {
      var operation = response.request.operation;
      var call = this.services[serviceName] !== void 0 ? this.services[serviceName].operations[operation] : null;
      if (call === null) {
        logger.getLogger().debug('Call "' + serviceName + "." + operation + '" is not whitelisted for additional data capturing. Ignoring.');
        return;
      }
      var dataCaptured = {};
      for (var paramType in call) {
        var params = call[paramType];
        if (paramType === paramTypes.REQ_PARAMS) {
          captureCallParams(params, response.request.params, dataCaptured);
        } else if (paramType === paramTypes.REQ_DESC) {
          captureDescriptors(params, response.request.params, dataCaptured);
        } else if (paramType === paramTypes.RES_PARAMS) {
          if (response.data) {
            captureCallParams(params, response.data, dataCaptured);
          }
        } else if (paramType === paramTypes.RES_DESC) {
          if (response.data) {
            captureDescriptors(params, response.data, dataCaptured);
          }
        } else {
          logger.getLogger().error('Unknown parameter type "' + paramType + '". Must be "request_descriptors", "response_descriptors", "request_parameters" or "response_parameters".');
        }
      }
      return dataCaptured;
    };
    function captureCallParams(params, call, data) {
      params.forEach(function(param) {
        if (typeof call[param] !== "undefined") {
          var formatted = toSnakeCase(param);
          this[formatted] = call[param];
        }
      }, data);
    }
    function captureDescriptors(descriptors, params, data) {
      for (var paramName in descriptors) {
        var attributes = descriptors[paramName];
        if (typeof params[paramName] !== "undefined") {
          var paramData;
          if (attributes.list && attributes.get_count) {
            paramData = params[paramName] ? params[paramName].length : 0;
          } else {
            paramData = attributes.get_keys === true ? Object.keys(params[paramName]) : params[paramName];
          }
          if (typeof attributes.rename_to === "string") {
            data[attributes.rename_to] = paramData;
          } else {
            var formatted = toSnakeCase(paramName);
            data[formatted] = paramData;
          }
        }
      }
    }
    function toSnakeCase(param) {
      if (param === "IPAddress") {
        return "ip_address";
      } else {
        return param.split(/(?=[A-Z])/).join("_").toLowerCase();
      }
    }
    function loadWhitelist(source) {
      var doc = source;
      if (doc.services === void 0) {
        throw new Error('Document formatting is incorrect. Expecting "services" param.');
      }
      return doc.services;
    }
    module2.exports = CallCapturer;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/aws.js
var require_aws = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/aws.js"(exports2, module2) {
    "use strict";
    var CallCapturer = require_call_capturer();
    var capturer = new CallCapturer();
    function Aws(res, serviceName) {
      this.init(res, serviceName);
    }
    Aws.prototype.init = function init(res, serviceName) {
      this.operation = formatOperation(res.request.operation) || "";
      if (res && res.request && res.request.httpRequest && res.request.httpRequest.region) {
        this.region = res.request.httpRequest.region;
      }
      if (res && res.requestId) {
        this.request_id = res.requestId;
      }
      this.retries = res.retryCount || 0;
      if (res.extendedRequestId && serviceName && serviceName.toLowerCase() === "s3") {
        this.id_2 = res.extendedRequestId;
      }
      this.addData(capturer.capture(serviceName.toLowerCase(), res));
    };
    Aws.prototype.addData = function addData(data) {
      for (var attribute in data) {
        this[attribute] = data[attribute];
      }
    };
    var setAWSWhitelist = function setAWSWhitelist2(source) {
      if (!source || source instanceof String || !(typeof source === "string" || source instanceof Object)) {
        throw new Error("Please specify a path to the local whitelist file, or supply a whitelist source object.");
      }
      capturer = new CallCapturer(source);
    };
    var appendAWSWhitelist = function appendAWSWhitelist2(source) {
      if (!source || source instanceof String || !(typeof source === "string" || source instanceof Object)) {
        throw new Error("Please specify a path to the local whitelist file, or supply a whitelist source object.");
      }
      capturer.append(source);
    };
    function formatOperation(operation) {
      if (!operation) {
        return;
      }
      return operation.charAt(0).toUpperCase() + operation.slice(1);
    }
    module2.exports = Aws;
    module2.exports.appendAWSWhitelist = appendAWSWhitelist;
    module2.exports.setAWSWhitelist = setAWSWhitelist;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/capture.js
var require_capture = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/capture.js"(exports2, module2) {
    "use strict";
    var contextUtils = require_context_utils();
    var logger = require_logger();
    var captureFunc = function captureFunc2(name, fcn, parent) {
      validate(name, fcn);
      var current, executeFcn;
      var parentSeg = contextUtils.resolveSegment(parent);
      if (!parentSeg) {
        logger.getLogger().warn("Failed to capture function.");
        return fcn();
      }
      current = parentSeg.addNewSubsegment(name);
      executeFcn = captureFcn(fcn, current);
      try {
        const response = executeFcn(current);
        current.close();
        return response;
      } catch (e) {
        current.close(e);
        throw e;
      }
    };
    var captureAsyncFunc = function captureAsyncFunc2(name, fcn, parent) {
      validate(name, fcn);
      var current, executeFcn;
      var parentSeg = contextUtils.resolveSegment(parent);
      if (!parentSeg) {
        logger.getLogger().warn("Failed to capture async function.");
        return fcn();
      }
      current = parentSeg.addNewSubsegment(name);
      executeFcn = captureFcn(fcn, current);
      try {
        return executeFcn(current);
      } catch (e) {
        current.close(e);
        throw e;
      }
    };
    var captureCallbackFunc = function captureCallbackFunc2(name, fcn, parent) {
      validate(name, fcn);
      var base = contextUtils.resolveSegment(parent);
      if (!base) {
        logger.getLogger().warn("Failed to capture callback function.");
        return fcn;
      }
      base.incrementCounter();
      return function() {
        var parentSeg = contextUtils.resolveSegment(parent);
        var args = Array.prototype.slice.call(arguments);
        captureFunc(name, fcn.bind.apply(fcn, [null].concat(args)), parentSeg);
        base.decrementCounter();
      }.bind(this);
    };
    function captureFcn(fcn, current) {
      var executeFcn;
      if (contextUtils.isAutomaticMode()) {
        var session = contextUtils.getNamespace();
        var contextFcn = function() {
          var value;
          session.run(function() {
            contextUtils.setSegment(current);
            value = fcn(current);
          });
          return value;
        };
        executeFcn = contextFcn;
      } else {
        executeFcn = fcn;
      }
      return executeFcn;
    }
    function validate(name, fcn) {
      var error;
      if (!name || typeof name !== "string") {
        error = 'Param "name" must be a non-empty string.';
        logger.getLogger().error(error);
        throw new Error(error);
      } else if (typeof fcn !== "function") {
        error = 'Param "fcn" must be a function.';
        logger.getLogger().error(error);
        throw new Error(error);
      }
    }
    module2.exports.captureFunc = captureFunc;
    module2.exports.captureAsyncFunc = captureAsyncFunc;
    module2.exports.captureCallbackFunc = captureCallbackFunc;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/node_modules/semver/semver.js
var require_semver = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/node_modules/semver/semver.js"(exports2, module2) {
    exports2 = module2.exports = SemVer;
    var debug;
    if (typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
      debug = function() {
        var args = Array.prototype.slice.call(arguments, 0);
        args.unshift("SEMVER");
        console.log.apply(console, args);
      };
    } else {
      debug = function() {
      };
    }
    exports2.SEMVER_SPEC_VERSION = "2.0.0";
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    var re = exports2.re = [];
    var src = exports2.src = [];
    var R = 0;
    var NUMERICIDENTIFIER = R++;
    src[NUMERICIDENTIFIER] = "0|[1-9]\\d*";
    var NUMERICIDENTIFIERLOOSE = R++;
    src[NUMERICIDENTIFIERLOOSE] = "[0-9]+";
    var NONNUMERICIDENTIFIER = R++;
    src[NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*";
    var MAINVERSION = R++;
    src[MAINVERSION] = "(" + src[NUMERICIDENTIFIER] + ")\\.(" + src[NUMERICIDENTIFIER] + ")\\.(" + src[NUMERICIDENTIFIER] + ")";
    var MAINVERSIONLOOSE = R++;
    src[MAINVERSIONLOOSE] = "(" + src[NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[NUMERICIDENTIFIERLOOSE] + ")";
    var PRERELEASEIDENTIFIER = R++;
    src[PRERELEASEIDENTIFIER] = "(?:" + src[NUMERICIDENTIFIER] + "|" + src[NONNUMERICIDENTIFIER] + ")";
    var PRERELEASEIDENTIFIERLOOSE = R++;
    src[PRERELEASEIDENTIFIERLOOSE] = "(?:" + src[NUMERICIDENTIFIERLOOSE] + "|" + src[NONNUMERICIDENTIFIER] + ")";
    var PRERELEASE = R++;
    src[PRERELEASE] = "(?:-(" + src[PRERELEASEIDENTIFIER] + "(?:\\." + src[PRERELEASEIDENTIFIER] + ")*))";
    var PRERELEASELOOSE = R++;
    src[PRERELEASELOOSE] = "(?:-?(" + src[PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + src[PRERELEASEIDENTIFIERLOOSE] + ")*))";
    var BUILDIDENTIFIER = R++;
    src[BUILDIDENTIFIER] = "[0-9A-Za-z-]+";
    var BUILD = R++;
    src[BUILD] = "(?:\\+(" + src[BUILDIDENTIFIER] + "(?:\\." + src[BUILDIDENTIFIER] + ")*))";
    var FULL = R++;
    var FULLPLAIN = "v?" + src[MAINVERSION] + src[PRERELEASE] + "?" + src[BUILD] + "?";
    src[FULL] = "^" + FULLPLAIN + "$";
    var LOOSEPLAIN = "[v=\\s]*" + src[MAINVERSIONLOOSE] + src[PRERELEASELOOSE] + "?" + src[BUILD] + "?";
    var LOOSE = R++;
    src[LOOSE] = "^" + LOOSEPLAIN + "$";
    var GTLT = R++;
    src[GTLT] = "((?:<|>)?=?)";
    var XRANGEIDENTIFIERLOOSE = R++;
    src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + "|x|X|\\*";
    var XRANGEIDENTIFIER = R++;
    src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + "|x|X|\\*";
    var XRANGEPLAIN = R++;
    src[XRANGEPLAIN] = "[v=\\s]*(" + src[XRANGEIDENTIFIER] + ")(?:\\.(" + src[XRANGEIDENTIFIER] + ")(?:\\.(" + src[XRANGEIDENTIFIER] + ")(?:" + src[PRERELEASE] + ")?" + src[BUILD] + "?)?)?";
    var XRANGEPLAINLOOSE = R++;
    src[XRANGEPLAINLOOSE] = "[v=\\s]*(" + src[XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[XRANGEIDENTIFIERLOOSE] + ")(?:" + src[PRERELEASELOOSE] + ")?" + src[BUILD] + "?)?)?";
    var XRANGE = R++;
    src[XRANGE] = "^" + src[GTLT] + "\\s*" + src[XRANGEPLAIN] + "$";
    var XRANGELOOSE = R++;
    src[XRANGELOOSE] = "^" + src[GTLT] + "\\s*" + src[XRANGEPLAINLOOSE] + "$";
    var COERCE = R++;
    src[COERCE] = "(?:^|[^\\d])(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "})(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:$|[^\\d])";
    var LONETILDE = R++;
    src[LONETILDE] = "(?:~>?)";
    var TILDETRIM = R++;
    src[TILDETRIM] = "(\\s*)" + src[LONETILDE] + "\\s+";
    re[TILDETRIM] = new RegExp(src[TILDETRIM], "g");
    var tildeTrimReplace = "$1~";
    var TILDE = R++;
    src[TILDE] = "^" + src[LONETILDE] + src[XRANGEPLAIN] + "$";
    var TILDELOOSE = R++;
    src[TILDELOOSE] = "^" + src[LONETILDE] + src[XRANGEPLAINLOOSE] + "$";
    var LONECARET = R++;
    src[LONECARET] = "(?:\\^)";
    var CARETTRIM = R++;
    src[CARETTRIM] = "(\\s*)" + src[LONECARET] + "\\s+";
    re[CARETTRIM] = new RegExp(src[CARETTRIM], "g");
    var caretTrimReplace = "$1^";
    var CARET = R++;
    src[CARET] = "^" + src[LONECARET] + src[XRANGEPLAIN] + "$";
    var CARETLOOSE = R++;
    src[CARETLOOSE] = "^" + src[LONECARET] + src[XRANGEPLAINLOOSE] + "$";
    var COMPARATORLOOSE = R++;
    src[COMPARATORLOOSE] = "^" + src[GTLT] + "\\s*(" + LOOSEPLAIN + ")$|^$";
    var COMPARATOR = R++;
    src[COMPARATOR] = "^" + src[GTLT] + "\\s*(" + FULLPLAIN + ")$|^$";
    var COMPARATORTRIM = R++;
    src[COMPARATORTRIM] = "(\\s*)" + src[GTLT] + "\\s*(" + LOOSEPLAIN + "|" + src[XRANGEPLAIN] + ")";
    re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], "g");
    var comparatorTrimReplace = "$1$2$3";
    var HYPHENRANGE = R++;
    src[HYPHENRANGE] = "^\\s*(" + src[XRANGEPLAIN] + ")\\s+-\\s+(" + src[XRANGEPLAIN] + ")\\s*$";
    var HYPHENRANGELOOSE = R++;
    src[HYPHENRANGELOOSE] = "^\\s*(" + src[XRANGEPLAINLOOSE] + ")\\s+-\\s+(" + src[XRANGEPLAINLOOSE] + ")\\s*$";
    var STAR = R++;
    src[STAR] = "(<|>)?=?\\s*\\*";
    for (i = 0; i < R; i++) {
      debug(i, src[i]);
      if (!re[i]) {
        re[i] = new RegExp(src[i]);
      }
    }
    var i;
    exports2.parse = parse;
    function parse(version, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (version instanceof SemVer) {
        return version;
      }
      if (typeof version !== "string") {
        return null;
      }
      if (version.length > MAX_LENGTH) {
        return null;
      }
      var r = options.loose ? re[LOOSE] : re[FULL];
      if (!r.test(version)) {
        return null;
      }
      try {
        return new SemVer(version, options);
      } catch (er) {
        return null;
      }
    }
    exports2.valid = valid;
    function valid(version, options) {
      var v = parse(version, options);
      return v ? v.version : null;
    }
    exports2.clean = clean;
    function clean(version, options) {
      var s = parse(version.trim().replace(/^[=v]+/, ""), options);
      return s ? s.version : null;
    }
    exports2.SemVer = SemVer;
    function SemVer(version, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (version instanceof SemVer) {
        if (version.loose === options.loose) {
          return version;
        } else {
          version = version.version;
        }
      } else if (typeof version !== "string") {
        throw new TypeError("Invalid Version: " + version);
      }
      if (version.length > MAX_LENGTH) {
        throw new TypeError("version is longer than " + MAX_LENGTH + " characters");
      }
      if (!(this instanceof SemVer)) {
        return new SemVer(version, options);
      }
      debug("SemVer", version, options);
      this.options = options;
      this.loose = !!options.loose;
      var m = version.trim().match(options.loose ? re[LOOSE] : re[FULL]);
      if (!m) {
        throw new TypeError("Invalid Version: " + version);
      }
      this.raw = version;
      this.major = +m[1];
      this.minor = +m[2];
      this.patch = +m[3];
      if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
        throw new TypeError("Invalid major version");
      }
      if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
        throw new TypeError("Invalid minor version");
      }
      if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
        throw new TypeError("Invalid patch version");
      }
      if (!m[4]) {
        this.prerelease = [];
      } else {
        this.prerelease = m[4].split(".").map(function(id) {
          if (/^[0-9]+$/.test(id)) {
            var num = +id;
            if (num >= 0 && num < MAX_SAFE_INTEGER) {
              return num;
            }
          }
          return id;
        });
      }
      this.build = m[5] ? m[5].split(".") : [];
      this.format();
    }
    SemVer.prototype.format = function() {
      this.version = this.major + "." + this.minor + "." + this.patch;
      if (this.prerelease.length) {
        this.version += "-" + this.prerelease.join(".");
      }
      return this.version;
    };
    SemVer.prototype.toString = function() {
      return this.version;
    };
    SemVer.prototype.compare = function(other) {
      debug("SemVer.compare", this.version, this.options, other);
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      return this.compareMain(other) || this.comparePre(other);
    };
    SemVer.prototype.compareMain = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
    };
    SemVer.prototype.comparePre = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      if (this.prerelease.length && !other.prerelease.length) {
        return -1;
      } else if (!this.prerelease.length && other.prerelease.length) {
        return 1;
      } else if (!this.prerelease.length && !other.prerelease.length) {
        return 0;
      }
      var i2 = 0;
      do {
        var a = this.prerelease[i2];
        var b = other.prerelease[i2];
        debug("prerelease compare", i2, a, b);
        if (a === void 0 && b === void 0) {
          return 0;
        } else if (b === void 0) {
          return 1;
        } else if (a === void 0) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i2);
    };
    SemVer.prototype.inc = function(release, identifier) {
      switch (release) {
        case "premajor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor = 0;
          this.major++;
          this.inc("pre", identifier);
          break;
        case "preminor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor++;
          this.inc("pre", identifier);
          break;
        case "prepatch":
          this.prerelease.length = 0;
          this.inc("patch", identifier);
          this.inc("pre", identifier);
          break;
        case "prerelease":
          if (this.prerelease.length === 0) {
            this.inc("patch", identifier);
          }
          this.inc("pre", identifier);
          break;
        case "major":
          if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
            this.major++;
          }
          this.minor = 0;
          this.patch = 0;
          this.prerelease = [];
          break;
        case "minor":
          if (this.patch !== 0 || this.prerelease.length === 0) {
            this.minor++;
          }
          this.patch = 0;
          this.prerelease = [];
          break;
        case "patch":
          if (this.prerelease.length === 0) {
            this.patch++;
          }
          this.prerelease = [];
          break;
        case "pre":
          if (this.prerelease.length === 0) {
            this.prerelease = [0];
          } else {
            var i2 = this.prerelease.length;
            while (--i2 >= 0) {
              if (typeof this.prerelease[i2] === "number") {
                this.prerelease[i2]++;
                i2 = -2;
              }
            }
            if (i2 === -1) {
              this.prerelease.push(0);
            }
          }
          if (identifier) {
            if (this.prerelease[0] === identifier) {
              if (isNaN(this.prerelease[1])) {
                this.prerelease = [identifier, 0];
              }
            } else {
              this.prerelease = [identifier, 0];
            }
          }
          break;
        default:
          throw new Error("invalid increment argument: " + release);
      }
      this.format();
      this.raw = this.version;
      return this;
    };
    exports2.inc = inc;
    function inc(version, release, loose, identifier) {
      if (typeof loose === "string") {
        identifier = loose;
        loose = void 0;
      }
      try {
        return new SemVer(version, loose).inc(release, identifier).version;
      } catch (er) {
        return null;
      }
    }
    exports2.diff = diff;
    function diff(version1, version2) {
      if (eq(version1, version2)) {
        return null;
      } else {
        var v1 = parse(version1);
        var v2 = parse(version2);
        var prefix = "";
        if (v1.prerelease.length || v2.prerelease.length) {
          prefix = "pre";
          var defaultResult = "prerelease";
        }
        for (var key in v1) {
          if (key === "major" || key === "minor" || key === "patch") {
            if (v1[key] !== v2[key]) {
              return prefix + key;
            }
          }
        }
        return defaultResult;
      }
    }
    exports2.compareIdentifiers = compareIdentifiers;
    var numeric = /^[0-9]+$/;
    function compareIdentifiers(a, b) {
      var anum = numeric.test(a);
      var bnum = numeric.test(b);
      if (anum && bnum) {
        a = +a;
        b = +b;
      }
      return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
    }
    exports2.rcompareIdentifiers = rcompareIdentifiers;
    function rcompareIdentifiers(a, b) {
      return compareIdentifiers(b, a);
    }
    exports2.major = major;
    function major(a, loose) {
      return new SemVer(a, loose).major;
    }
    exports2.minor = minor;
    function minor(a, loose) {
      return new SemVer(a, loose).minor;
    }
    exports2.patch = patch;
    function patch(a, loose) {
      return new SemVer(a, loose).patch;
    }
    exports2.compare = compare;
    function compare(a, b, loose) {
      return new SemVer(a, loose).compare(new SemVer(b, loose));
    }
    exports2.compareLoose = compareLoose;
    function compareLoose(a, b) {
      return compare(a, b, true);
    }
    exports2.rcompare = rcompare;
    function rcompare(a, b, loose) {
      return compare(b, a, loose);
    }
    exports2.sort = sort;
    function sort(list, loose) {
      return list.sort(function(a, b) {
        return exports2.compare(a, b, loose);
      });
    }
    exports2.rsort = rsort;
    function rsort(list, loose) {
      return list.sort(function(a, b) {
        return exports2.rcompare(a, b, loose);
      });
    }
    exports2.gt = gt;
    function gt(a, b, loose) {
      return compare(a, b, loose) > 0;
    }
    exports2.lt = lt;
    function lt(a, b, loose) {
      return compare(a, b, loose) < 0;
    }
    exports2.eq = eq;
    function eq(a, b, loose) {
      return compare(a, b, loose) === 0;
    }
    exports2.neq = neq;
    function neq(a, b, loose) {
      return compare(a, b, loose) !== 0;
    }
    exports2.gte = gte;
    function gte(a, b, loose) {
      return compare(a, b, loose) >= 0;
    }
    exports2.lte = lte;
    function lte(a, b, loose) {
      return compare(a, b, loose) <= 0;
    }
    exports2.cmp = cmp;
    function cmp(a, op, b, loose) {
      switch (op) {
        case "===":
          if (typeof a === "object")
            a = a.version;
          if (typeof b === "object")
            b = b.version;
          return a === b;
        case "!==":
          if (typeof a === "object")
            a = a.version;
          if (typeof b === "object")
            b = b.version;
          return a !== b;
        case "":
        case "=":
        case "==":
          return eq(a, b, loose);
        case "!=":
          return neq(a, b, loose);
        case ">":
          return gt(a, b, loose);
        case ">=":
          return gte(a, b, loose);
        case "<":
          return lt(a, b, loose);
        case "<=":
          return lte(a, b, loose);
        default:
          throw new TypeError("Invalid operator: " + op);
      }
    }
    exports2.Comparator = Comparator;
    function Comparator(comp, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (comp instanceof Comparator) {
        if (comp.loose === !!options.loose) {
          return comp;
        } else {
          comp = comp.value;
        }
      }
      if (!(this instanceof Comparator)) {
        return new Comparator(comp, options);
      }
      debug("comparator", comp, options);
      this.options = options;
      this.loose = !!options.loose;
      this.parse(comp);
      if (this.semver === ANY) {
        this.value = "";
      } else {
        this.value = this.operator + this.semver.version;
      }
      debug("comp", this);
    }
    var ANY = {};
    Comparator.prototype.parse = function(comp) {
      var r = this.options.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
      var m = comp.match(r);
      if (!m) {
        throw new TypeError("Invalid comparator: " + comp);
      }
      this.operator = m[1];
      if (this.operator === "=") {
        this.operator = "";
      }
      if (!m[2]) {
        this.semver = ANY;
      } else {
        this.semver = new SemVer(m[2], this.options.loose);
      }
    };
    Comparator.prototype.toString = function() {
      return this.value;
    };
    Comparator.prototype.test = function(version) {
      debug("Comparator.test", version, this.options.loose);
      if (this.semver === ANY) {
        return true;
      }
      if (typeof version === "string") {
        version = new SemVer(version, this.options);
      }
      return cmp(version, this.operator, this.semver, this.options);
    };
    Comparator.prototype.intersects = function(comp, options) {
      if (!(comp instanceof Comparator)) {
        throw new TypeError("a Comparator is required");
      }
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      var rangeTmp;
      if (this.operator === "") {
        rangeTmp = new Range(comp.value, options);
        return satisfies(this.value, rangeTmp, options);
      } else if (comp.operator === "") {
        rangeTmp = new Range(this.value, options);
        return satisfies(comp.semver, rangeTmp, options);
      }
      var sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">");
      var sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<");
      var sameSemVer = this.semver.version === comp.semver.version;
      var differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<=");
      var oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && ((this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<"));
      var oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && ((this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">"));
      return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
    };
    exports2.Range = Range;
    function Range(range, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (range instanceof Range) {
        if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
          return range;
        } else {
          return new Range(range.raw, options);
        }
      }
      if (range instanceof Comparator) {
        return new Range(range.value, options);
      }
      if (!(this instanceof Range)) {
        return new Range(range, options);
      }
      this.options = options;
      this.loose = !!options.loose;
      this.includePrerelease = !!options.includePrerelease;
      this.raw = range;
      this.set = range.split(/\s*\|\|\s*/).map(function(range2) {
        return this.parseRange(range2.trim());
      }, this).filter(function(c) {
        return c.length;
      });
      if (!this.set.length) {
        throw new TypeError("Invalid SemVer Range: " + range);
      }
      this.format();
    }
    Range.prototype.format = function() {
      this.range = this.set.map(function(comps) {
        return comps.join(" ").trim();
      }).join("||").trim();
      return this.range;
    };
    Range.prototype.toString = function() {
      return this.range;
    };
    Range.prototype.parseRange = function(range) {
      var loose = this.options.loose;
      range = range.trim();
      var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
      range = range.replace(hr, hyphenReplace);
      debug("hyphen replace", range);
      range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
      debug("comparator trim", range, re[COMPARATORTRIM]);
      range = range.replace(re[TILDETRIM], tildeTrimReplace);
      range = range.replace(re[CARETTRIM], caretTrimReplace);
      range = range.split(/\s+/).join(" ");
      var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
      var set = range.split(" ").map(function(comp) {
        return parseComparator(comp, this.options);
      }, this).join(" ").split(/\s+/);
      if (this.options.loose) {
        set = set.filter(function(comp) {
          return !!comp.match(compRe);
        });
      }
      set = set.map(function(comp) {
        return new Comparator(comp, this.options);
      }, this);
      return set;
    };
    Range.prototype.intersects = function(range, options) {
      if (!(range instanceof Range)) {
        throw new TypeError("a Range is required");
      }
      return this.set.some(function(thisComparators) {
        return thisComparators.every(function(thisComparator) {
          return range.set.some(function(rangeComparators) {
            return rangeComparators.every(function(rangeComparator) {
              return thisComparator.intersects(rangeComparator, options);
            });
          });
        });
      });
    };
    exports2.toComparators = toComparators;
    function toComparators(range, options) {
      return new Range(range, options).set.map(function(comp) {
        return comp.map(function(c) {
          return c.value;
        }).join(" ").trim().split(" ");
      });
    }
    function parseComparator(comp, options) {
      debug("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug("caret", comp);
      comp = replaceTildes(comp, options);
      debug("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug("xrange", comp);
      comp = replaceStars(comp, options);
      debug("stars", comp);
      return comp;
    }
    function isX(id) {
      return !id || id.toLowerCase() === "x" || id === "*";
    }
    function replaceTildes(comp, options) {
      return comp.trim().split(/\s+/).map(function(comp2) {
        return replaceTilde(comp2, options);
      }).join(" ");
    }
    function replaceTilde(comp, options) {
      var r = options.loose ? re[TILDELOOSE] : re[TILDE];
      return comp.replace(r, function(_, M, m, p, pr) {
        debug("tilde", comp, _, M, m, p, pr);
        var ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
        } else if (isX(p)) {
          ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
        } else if (pr) {
          debug("replaceTilde pr", pr);
          ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
        } else {
          ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
        }
        debug("tilde return", ret);
        return ret;
      });
    }
    function replaceCarets(comp, options) {
      return comp.trim().split(/\s+/).map(function(comp2) {
        return replaceCaret(comp2, options);
      }).join(" ");
    }
    function replaceCaret(comp, options) {
      debug("caret", comp, options);
      var r = options.loose ? re[CARETLOOSE] : re[CARET];
      return comp.replace(r, function(_, M, m, p, pr) {
        debug("caret", comp, _, M, m, p, pr);
        var ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
        } else if (isX(p)) {
          if (M === "0") {
            ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
          } else {
            ret = ">=" + M + "." + m + ".0 <" + (+M + 1) + ".0.0";
          }
        } else if (pr) {
          debug("replaceCaret pr", pr);
          if (M === "0") {
            if (m === "0") {
              ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + m + "." + (+p + 1);
            } else {
              ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
            }
          } else {
            ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + (+M + 1) + ".0.0";
          }
        } else {
          debug("no pr");
          if (M === "0") {
            if (m === "0") {
              ret = ">=" + M + "." + m + "." + p + " <" + M + "." + m + "." + (+p + 1);
            } else {
              ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
            }
          } else {
            ret = ">=" + M + "." + m + "." + p + " <" + (+M + 1) + ".0.0";
          }
        }
        debug("caret return", ret);
        return ret;
      });
    }
    function replaceXRanges(comp, options) {
      debug("replaceXRanges", comp, options);
      return comp.split(/\s+/).map(function(comp2) {
        return replaceXRange(comp2, options);
      }).join(" ");
    }
    function replaceXRange(comp, options) {
      comp = comp.trim();
      var r = options.loose ? re[XRANGELOOSE] : re[XRANGE];
      return comp.replace(r, function(ret, gtlt, M, m, p, pr) {
        debug("xRange", comp, ret, gtlt, M, m, p, pr);
        var xM = isX(M);
        var xm = xM || isX(m);
        var xp = xm || isX(p);
        var anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }
          ret = gtlt + M + "." + m + "." + p;
        } else if (xm) {
          ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
        } else if (xp) {
          ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
        }
        debug("xRange return", ret);
        return ret;
      });
    }
    function replaceStars(comp, options) {
      debug("replaceStars", comp, options);
      return comp.trim().replace(re[STAR], "");
    }
    function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = ">=" + fM + ".0.0";
      } else if (isX(fp)) {
        from = ">=" + fM + "." + fm + ".0";
      } else {
        from = ">=" + from;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = "<" + (+tM + 1) + ".0.0";
      } else if (isX(tp)) {
        to = "<" + tM + "." + (+tm + 1) + ".0";
      } else if (tpr) {
        to = "<=" + tM + "." + tm + "." + tp + "-" + tpr;
      } else {
        to = "<=" + to;
      }
      return (from + " " + to).trim();
    }
    Range.prototype.test = function(version) {
      if (!version) {
        return false;
      }
      if (typeof version === "string") {
        version = new SemVer(version, this.options);
      }
      for (var i2 = 0; i2 < this.set.length; i2++) {
        if (testSet(this.set[i2], version, this.options)) {
          return true;
        }
      }
      return false;
    };
    function testSet(set, version, options) {
      for (var i2 = 0; i2 < set.length; i2++) {
        if (!set[i2].test(version)) {
          return false;
        }
      }
      if (version.prerelease.length && !options.includePrerelease) {
        for (i2 = 0; i2 < set.length; i2++) {
          debug(set[i2].semver);
          if (set[i2].semver === ANY) {
            continue;
          }
          if (set[i2].semver.prerelease.length > 0) {
            var allowed = set[i2].semver;
            if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    }
    exports2.satisfies = satisfies;
    function satisfies(version, range, options) {
      try {
        range = new Range(range, options);
      } catch (er) {
        return false;
      }
      return range.test(version);
    }
    exports2.maxSatisfying = maxSatisfying;
    function maxSatisfying(versions, range, options) {
      var max = null;
      var maxSV = null;
      try {
        var rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach(function(v) {
        if (rangeObj.test(v)) {
          if (!max || maxSV.compare(v) === -1) {
            max = v;
            maxSV = new SemVer(max, options);
          }
        }
      });
      return max;
    }
    exports2.minSatisfying = minSatisfying;
    function minSatisfying(versions, range, options) {
      var min = null;
      var minSV = null;
      try {
        var rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach(function(v) {
        if (rangeObj.test(v)) {
          if (!min || minSV.compare(v) === 1) {
            min = v;
            minSV = new SemVer(min, options);
          }
        }
      });
      return min;
    }
    exports2.minVersion = minVersion;
    function minVersion(range, loose) {
      range = new Range(range, loose);
      var minver = new SemVer("0.0.0");
      if (range.test(minver)) {
        return minver;
      }
      minver = new SemVer("0.0.0-0");
      if (range.test(minver)) {
        return minver;
      }
      minver = null;
      for (var i2 = 0; i2 < range.set.length; ++i2) {
        var comparators = range.set[i2];
        comparators.forEach(function(comparator) {
          var compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case ">":
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
            case "":
            case ">=":
              if (!minver || gt(minver, compver)) {
                minver = compver;
              }
              break;
            case "<":
            case "<=":
              break;
            default:
              throw new Error("Unexpected operation: " + comparator.operator);
          }
        });
      }
      if (minver && range.test(minver)) {
        return minver;
      }
      return null;
    }
    exports2.validRange = validRange;
    function validRange(range, options) {
      try {
        return new Range(range, options).range || "*";
      } catch (er) {
        return null;
      }
    }
    exports2.ltr = ltr;
    function ltr(version, range, options) {
      return outside(version, range, "<", options);
    }
    exports2.gtr = gtr;
    function gtr(version, range, options) {
      return outside(version, range, ">", options);
    }
    exports2.outside = outside;
    function outside(version, range, hilo, options) {
      version = new SemVer(version, options);
      range = new Range(range, options);
      var gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case ">":
          gtfn = gt;
          ltefn = lte;
          ltfn = lt;
          comp = ">";
          ecomp = ">=";
          break;
        case "<":
          gtfn = lt;
          ltefn = gte;
          ltfn = gt;
          comp = "<";
          ecomp = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies(version, range, options)) {
        return false;
      }
      for (var i2 = 0; i2 < range.set.length; ++i2) {
        var comparators = range.set[i2];
        var high = null;
        var low = null;
        comparators.forEach(function(comparator) {
          if (comparator.semver === ANY) {
            comparator = new Comparator(">=0.0.0");
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        });
        if (high.operator === comp || high.operator === ecomp) {
          return false;
        }
        if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version, low.semver)) {
          return false;
        }
      }
      return true;
    }
    exports2.prerelease = prerelease;
    function prerelease(version, options) {
      var parsed = parse(version, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    }
    exports2.intersects = intersects;
    function intersects(r1, r2, options) {
      r1 = new Range(r1, options);
      r2 = new Range(r2, options);
      return r1.intersects(r2);
    }
    exports2.coerce = coerce;
    function coerce(version) {
      if (version instanceof SemVer) {
        return version;
      }
      if (typeof version !== "string") {
        return null;
      }
      var match = version.match(re[COERCE]);
      if (match == null) {
        return null;
      }
      return parse(match[1] + "." + (match[2] || "0") + "." + (match[3] || "0"));
    }
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/patchers/aws_p.js
var require_aws_p = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/patchers/aws_p.js"(exports2, module2) {
    "use strict";
    var semver = require_semver();
    var Aws = require_aws();
    var contextUtils = require_context_utils();
    var Utils = require_utils();
    var logger = require_logger();
    var minVersion = "2.7.15";
    var throttledErrorDefault = function throttledErrorDefault2() {
      return false;
    };
    var captureAWS = function captureAWS2(awssdk) {
      if (!semver.gte(awssdk.VERSION, minVersion)) {
        throw new Error("AWS SDK version " + minVersion + " or greater required.");
      }
      for (var prop in awssdk) {
        if (awssdk[prop].serviceIdentifier) {
          var Service = awssdk[prop];
          Service.prototype.customizeRequests(captureAWSRequest);
        }
      }
      return awssdk;
    };
    var captureAWSClient = function captureAWSClient2(service) {
      service.customizeRequests(captureAWSRequest);
      return service;
    };
    function captureAWSRequest(req) {
      var parent = contextUtils.resolveSegment(contextUtils.resolveManualSegmentParams(req.params));
      if (!parent) {
        var output = this.serviceIdentifier + "." + req.operation;
        if (!contextUtils.isAutomaticMode()) {
          logger.getLogger().info("Call " + output + ' requires a segment object on the request params as "XRaySegment" for tracing in manual mode. Ignoring.');
        } else {
          logger.getLogger().info("Call " + output + " is missing the sub/segment context for automatic mode. Ignoring.");
        }
        return req;
      }
      var throttledError = this.throttledError || throttledErrorDefault;
      var stack = new Error().stack;
      var subsegment = parent.addNewSubsegment(this.serviceIdentifier);
      var traceId = parent.segment ? parent.segment.trace_id : parent.trace_id;
      var buildListener = function(req2) {
        req2.httpRequest.headers["X-Amzn-Trace-Id"] = "Root=" + traceId + ";Parent=" + subsegment.id + ";Sampled=" + (subsegment.segment.notTraced ? "0" : "1");
      };
      var completeListener = function(res) {
        subsegment.addAttribute("namespace", "aws");
        subsegment.addAttribute("aws", new Aws(res, subsegment.name));
        var httpRes = res.httpResponse;
        if (httpRes) {
          subsegment.addAttribute("http", new HttpResponse(httpRes));
          if (httpRes.statusCode === 429 || res.error && throttledError(res.error)) {
            subsegment.addThrottleFlag();
          }
        }
        if (res.error) {
          var err = { message: res.error.message, name: res.error.code, stack };
          if (httpRes && httpRes.statusCode) {
            if (Utils.getCauseTypeFromHttpStatus(httpRes.statusCode) == "error") {
              subsegment.addErrorFlag();
            }
            subsegment.close(err, true);
          } else {
            subsegment.close(err);
          }
        } else {
          if (httpRes && httpRes.statusCode) {
            var cause = Utils.getCauseTypeFromHttpStatus(httpRes.statusCode);
            if (cause) {
              subsegment[cause] = true;
            }
          }
          subsegment.close();
        }
      };
      req.on("beforePresign", function(req2) {
        parent.removeSubsegment(subsegment);
        parent.decrementCounter();
        req2.removeListener("build", buildListener);
        req2.removeListener("complete", completeListener);
      });
      req.on("build", buildListener).on("complete", completeListener);
      if (!req.__send) {
        req.__send = req.send;
        req.send = function(callback) {
          if (contextUtils.isAutomaticMode()) {
            var session = contextUtils.getNamespace();
            session.run(function() {
              contextUtils.setSegment(subsegment);
              req.__send(callback);
            });
          } else {
            req.__send(callback);
          }
        };
      }
    }
    function HttpResponse(res) {
      this.init(res);
    }
    HttpResponse.prototype.init = function init(res) {
      this.response = {
        status: res.statusCode || ""
      };
      if (res.headers && res.headers["content-length"]) {
        this.response.content_length = res.headers["content-length"];
      }
    };
    module2.exports.captureAWSClient = captureAWSClient;
    module2.exports.captureAWS = captureAWS;
  }
});

// asset-input/node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js
var require_constants = __commonJS({
  "asset-input/node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TRANSIENT_ERROR_STATUS_CODES = exports2.TRANSIENT_ERROR_CODES = exports2.THROTTLING_ERROR_CODES = exports2.CLOCK_SKEW_ERROR_CODES = void 0;
    exports2.CLOCK_SKEW_ERROR_CODES = [
      "AuthFailure",
      "InvalidSignatureException",
      "RequestExpired",
      "RequestInTheFuture",
      "RequestTimeTooSkewed",
      "SignatureDoesNotMatch"
    ];
    exports2.THROTTLING_ERROR_CODES = [
      "BandwidthLimitExceeded",
      "EC2ThrottledException",
      "LimitExceededException",
      "PriorRequestNotComplete",
      "ProvisionedThroughputExceededException",
      "RequestLimitExceeded",
      "RequestThrottled",
      "RequestThrottledException",
      "SlowDown",
      "ThrottledException",
      "Throttling",
      "ThrottlingException",
      "TooManyRequestsException",
      "TransactionInProgressException"
    ];
    exports2.TRANSIENT_ERROR_CODES = ["AbortError", "TimeoutError", "RequestTimeout", "RequestTimeoutException"];
    exports2.TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
  }
});

// asset-input/node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js
var require_dist_cjs = __commonJS({
  "asset-input/node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isTransientError = exports2.isThrottlingError = exports2.isClockSkewError = exports2.isRetryableByTrait = void 0;
    var constants_1 = require_constants();
    var isRetryableByTrait = (error) => error.$retryable !== void 0;
    exports2.isRetryableByTrait = isRetryableByTrait;
    var isClockSkewError = (error) => constants_1.CLOCK_SKEW_ERROR_CODES.includes(error.name);
    exports2.isClockSkewError = isClockSkewError;
    var isThrottlingError = (error) => {
      var _a, _b;
      return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || constants_1.THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
    };
    exports2.isThrottlingError = isThrottlingError;
    var isTransientError = (error) => {
      var _a;
      return constants_1.TRANSIENT_ERROR_CODES.includes(error.name) || constants_1.TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
    };
    exports2.isTransientError = isTransientError;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/patchers/aws3_p.js
var require_aws3_p = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/patchers/aws3_p.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.captureAWSClient = void 0;
    var service_error_classification_1 = require_dist_cjs();
    var aws_1 = __importDefault(require_aws());
    var querystring_1 = require("querystring");
    var subsegment_1 = __importDefault(require_subsegment());
    var contextUtils = require_context_utils();
    var logger = require_logger();
    var { safeParseInt } = require_utils();
    var utils_1 = require_utils();
    var XRAY_PLUGIN_NAME = "XRaySDKInstrumentation";
    var buildAttributesFromMetadata = async (service, operation, region, res, error) => {
      var _a, _b, _c;
      const { extendedRequestId, requestId, httpStatusCode: statusCode, attempts } = ((_a = res === null || res === void 0 ? void 0 : res.output) === null || _a === void 0 ? void 0 : _a.$metadata) || (error === null || error === void 0 ? void 0 : error.$metadata);
      const aws = new aws_1.default({
        extendedRequestId,
        requestId,
        retryCount: attempts,
        request: {
          operation,
          httpRequest: {
            region,
            statusCode
          }
        }
      }, service);
      const http = {};
      if (statusCode) {
        http.response = {};
        http.response.status = statusCode;
      }
      if (((_b = res === null || res === void 0 ? void 0 : res.response) === null || _b === void 0 ? void 0 : _b.headers) && ((_c = res === null || res === void 0 ? void 0 : res.response) === null || _c === void 0 ? void 0 : _c.headers["content-length"]) !== void 0) {
        if (!http.response) {
          http.response = {};
        }
        http.response.content_length = safeParseInt(res.response.headers["content-length"]);
      }
      return [aws, http];
    };
    function addFlags(http, subsegment, err) {
      var _a, _b, _c;
      if (err && (0, service_error_classification_1.isThrottlingError)(err)) {
        subsegment.addThrottleFlag();
      } else if (safeParseInt((_a = http.response) === null || _a === void 0 ? void 0 : _a.status) === 429 || safeParseInt((_b = err === null || err === void 0 ? void 0 : err.$metadata) === null || _b === void 0 ? void 0 : _b.httpStatusCode) === 429) {
        subsegment.addThrottleFlag();
      }
      const cause = (0, utils_1.getCauseTypeFromHttpStatus)(safeParseInt((_c = http.response) === null || _c === void 0 ? void 0 : _c.status));
      if (cause === "fault") {
        subsegment.addFaultFlag();
      } else if (cause === "error") {
        subsegment.addErrorFlag();
      }
    }
    var getXRayMiddleware = (config, manualSegment) => (next, context) => async (args) => {
      const segment = contextUtils.isAutomaticMode() ? contextUtils.resolveSegment() : manualSegment;
      const { clientName, commandName } = context;
      const operation = commandName.slice(0, -7);
      const service = clientName.slice(0, -6);
      if (!segment) {
        const output = service + "." + operation.charAt(0).toLowerCase() + operation.slice(1);
        if (!contextUtils.isAutomaticMode()) {
          logger.getLogger().info("Call " + output + " requires a segment object passed to captureAWSv3Client for tracing in manual mode. Ignoring.");
        } else {
          logger.getLogger().info("Call " + output + " is missing the sub/segment context for automatic mode. Ignoring.");
        }
        return next(args);
      }
      const subsegment = segment.addNewSubsegment(service);
      subsegment.addAttribute("namespace", "aws");
      const parent = segment instanceof subsegment_1.default ? segment.segment : segment;
      args.request.headers["X-Amzn-Trace-Id"] = (0, querystring_1.stringify)({
        Root: parent.trace_id,
        Parent: subsegment.id,
        Sampled: parent.notTraced ? "0" : "1"
      }, ";");
      let res;
      try {
        res = await next(args);
        if (!res) {
          throw new Error("Failed to get response from instrumented AWS Client.");
        }
        const [aws, http] = await buildAttributesFromMetadata(service, operation, await config.region(), res, null);
        subsegment.addAttribute("aws", aws);
        subsegment.addAttribute("http", http);
        addFlags(http, subsegment);
        subsegment.close();
        return res;
      } catch (err) {
        if (err.$metadata) {
          const [aws, http] = await buildAttributesFromMetadata(service, operation, await config.region(), null, err);
          subsegment.addAttribute("aws", aws);
          subsegment.addAttribute("http", http);
          addFlags(http, subsegment, err);
        }
        const errObj = { message: err.message, name: err.name, stack: err.stack || new Error().stack };
        subsegment.close(errObj, true);
        throw err;
      }
    };
    var xRayMiddlewareOptions = {
      name: XRAY_PLUGIN_NAME,
      step: "build"
    };
    var getXRayPlugin = (config, manualSegment) => ({
      applyToStack: (stack) => {
        stack.add(getXRayMiddleware(config, manualSegment), xRayMiddlewareOptions);
      }
    });
    function captureAWSClient(client, manualSegment) {
      client.middlewareStack.remove(XRAY_PLUGIN_NAME);
      client.middlewareStack.use(getXRayPlugin(client.config, manualSegment));
      return client;
    }
    exports2.captureAWSClient = captureAWSClient;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/patchers/http_p.js
var require_http_p = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/patchers/http_p.js"(exports2, module2) {
    "use strict";
    var url = require("url");
    var contextUtils = require_context_utils();
    var Utils = require_utils();
    var logger = require_logger();
    var events = require("events");
    var captureHTTPsGlobal = function captureHTTPsGlobal2(module3, downstreamXRayEnabled, subsegmentCallback) {
      if (!module3.__request) {
        enableCapture(module3, downstreamXRayEnabled, subsegmentCallback);
      }
    };
    var captureHTTPs = function captureHTTPs2(module3, downstreamXRayEnabled, subsegmentCallback) {
      if (module3.__request) {
        return module3;
      }
      var tracedModule = {};
      Object.keys(module3).forEach(function(val) {
        tracedModule[val] = module3[val];
      });
      enableCapture(tracedModule, downstreamXRayEnabled, subsegmentCallback);
      return tracedModule;
    };
    function enableCapture(module3, downstreamXRayEnabled, subsegmentCallback) {
      function captureOutgoingHTTPs(baseFunc, ...args) {
        let options;
        let callback;
        let hasUrl;
        let urlObj;
        let arg0 = args[0];
        if (typeof args[1] === "object") {
          hasUrl = true;
          urlObj = typeof arg0 === "string" ? new url.URL(arg0) : arg0;
          options = args[1], callback = args[2];
        } else {
          hasUrl = false;
          options = arg0;
          callback = args[1];
        }
        if (!options || options.headers && options.headers["X-Amzn-Trace-Id"]) {
          return baseFunc(...args);
        }
        if (typeof options === "string") {
          options = new url.URL(options);
        }
        if (!hasUrl) {
          urlObj = options;
        }
        const parent = contextUtils.resolveSegment(contextUtils.resolveManualSegmentParams(options));
        const hostname = options.hostname || options.host || urlObj.hostname || urlObj.host || "Unknown host";
        if (!parent) {
          let output = "[ host: " + hostname;
          output = options.method ? output + ", method: " + options.method : output;
          output += ", path: " + (urlObj.pathname || Utils.stripQueryStringFromPath(options.path)) + " ]";
          if (!contextUtils.isAutomaticMode()) {
            logger.getLogger().info("Options for request " + output + ' requires a segment object on the options params as "XRaySegment" for tracing in manual mode. Ignoring.');
          } else {
            logger.getLogger().info("Options for request " + output + " is missing the sub/segment context for automatic mode. Ignoring.");
          }
          return baseFunc(...args);
        }
        const subsegment = parent.addNewSubsegment(hostname);
        const root = parent.segment ? parent.segment : parent;
        subsegment.namespace = "remote";
        if (!options.headers) {
          options.headers = {};
        }
        options.headers["X-Amzn-Trace-Id"] = "Root=" + root.trace_id + ";Parent=" + subsegment.id + ";Sampled=" + (!root.notTraced ? "1" : "0");
        const errorCapturer = function errorCapturer2(e) {
          if (subsegmentCallback) {
            subsegmentCallback(subsegment, this, null, e);
          }
          if (subsegment.http && subsegment.http.response) {
            if (Utils.getCauseTypeFromHttpStatus(subsegment.http.response.status) === "error") {
              subsegment.addErrorFlag();
            }
            subsegment.close(e, true);
          } else {
            const madeItToDownstream = e.code !== "ECONNREFUSED";
            subsegment.addRemoteRequestData(this, null, madeItToDownstream && downstreamXRayEnabled);
            subsegment.close(e);
          }
          if (!events.errorMonitor && this.listenerCount("error") <= 1) {
            this.removeListener("error", errorCapturer2);
            this.emit("error", e);
          }
        };
        const optionsCopy = Utils.objectWithoutProperties(options, ["Segment"], true);
        let req = baseFunc(...hasUrl ? [arg0, optionsCopy] : [options], function(res) {
          res.on("end", function() {
            if (subsegmentCallback) {
              subsegmentCallback(subsegment, this.req, res);
            }
            if (res.statusCode === 429) {
              subsegment.addThrottleFlag();
            }
            const cause = Utils.getCauseTypeFromHttpStatus(res.statusCode);
            if (cause) {
              subsegment[cause] = true;
            }
            subsegment.addRemoteRequestData(res.req, res, !!downstreamXRayEnabled);
            subsegment.close();
          });
          if (typeof callback === "function") {
            if (contextUtils.isAutomaticMode()) {
              const session = contextUtils.getNamespace();
              session.run(function() {
                contextUtils.setSegment(subsegment);
                callback(res);
              });
            } else {
              callback(res);
            }
          } else if (res.req && res.req.listenerCount("response") === 0) {
            res.resume();
          }
        });
        req.on(events.errorMonitor || "error", errorCapturer);
        return req;
      }
      module3.__request = module3.request;
      function captureHTTPsRequest(...args) {
        return captureOutgoingHTTPs(module3.__request, ...args);
      }
      module3.__get = module3.get;
      function captureHTTPsGet(...args) {
        return captureOutgoingHTTPs(module3.__get, ...args);
      }
      Object.defineProperties(module3, {
        request: { value: captureHTTPsRequest, configurable: true, enumerable: true, writable: true },
        get: { value: captureHTTPsGet, configurable: true, enumerable: true, writable: true }
      });
    }
    module2.exports.captureHTTPsGlobal = captureHTTPsGlobal;
    module2.exports.captureHTTPs = captureHTTPs;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/patchers/promise_p.js
var require_promise_p = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/patchers/promise_p.js"(exports2, module2) {
    "use strict";
    var contextUtils = require_context_utils();
    var originalThen = Symbol("original then");
    var originalCatch = Symbol("original catch");
    function patchPromise(Promise2) {
      const then = Promise2.prototype.then;
      if (!then[originalThen]) {
        Promise2.prototype.then = function(onFulfilled, onRejected) {
          if (contextUtils.isAutomaticMode() && tryGetCurrentSegment()) {
            const ns = contextUtils.getNamespace();
            onFulfilled = onFulfilled && ns.bind(onFulfilled);
            onRejected = onRejected && ns.bind(onRejected);
          }
          return then.call(this, onFulfilled, onRejected);
        };
        Promise2.prototype.then[originalThen] = then;
      }
      const origCatch = Promise2.prototype.catch;
      if (origCatch && !origCatch[originalCatch]) {
        Promise2.prototype.catch = function(onRejected) {
          if (contextUtils.isAutomaticMode() && tryGetCurrentSegment()) {
            const ns = contextUtils.getNamespace();
            onRejected = onRejected && ns.bind(onRejected);
          }
          return origCatch.call(this, onRejected);
        };
        Promise2.prototype.catch[originalCatch] = origCatch;
      }
    }
    function unpatchPromise(Promise2) {
      const then = Promise2.prototype.then;
      if (then[originalThen]) {
        Promise2.prototype.then = then[originalThen];
      }
      const origCatch = Promise2.prototype.catch;
      if (origCatch && origCatch[originalCatch]) {
        Promise2.prototype.catch = origCatch[originalCatch];
      }
    }
    function tryGetCurrentSegment() {
      try {
        return contextUtils.getSegment();
      } catch (e) {
        return void 0;
      }
    }
    function capturePromise() {
      patchPromise(Promise);
    }
    function uncapturePromise() {
      unpatchPromise(Promise);
    }
    capturePromise.patchThirdPartyPromise = patchPromise;
    module2.exports.capturePromise = capturePromise;
    module2.exports.uncapturePromise = uncapturePromise;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/database/sql_data.js
var require_sql_data = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/database/sql_data.js"(exports2, module2) {
    "use strict";
    function SqlData(databaseVer, driverVer, user, url, queryType) {
      this.init(databaseVer, driverVer, user, url, queryType);
    }
    SqlData.prototype.init = function init(databaseVer, driverVer, user, url, queryType) {
      if (databaseVer) {
        this.database_version = databaseVer;
      }
      if (driverVer) {
        this.driver_version = driverVer;
      }
      if (queryType) {
        this.preparation = queryType;
      }
      this.url = url;
      this.user = user;
    };
    module2.exports = SqlData;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/aws-xray.js
var require_aws_xray = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/aws-xray.js"(exports2, module2) {
    "use strict";
    var contextUtils = require_context_utils();
    var logging = require_logger();
    var segmentUtils = require_segment_utils();
    var utils = require_utils();
    var LambdaEnv = require_aws_lambda();
    var pkginfo = {};
    try {
      pkginfo = require_package();
    } catch (err) {
      logging.getLogger().debug("Failed to load SDK data:", err);
    }
    var UNKNOWN = "unknown";
    var AWSXRay2 = {
      plugins: {
        EC2Plugin: require_ec2_plugin(),
        ECSPlugin: require_ecs_plugin(),
        ElasticBeanstalkPlugin: require_elastic_beanstalk_plugin()
      },
      config: function(plugins) {
        var pluginData = {};
        plugins.forEach(function(plugin) {
          plugin.getData(function(data) {
            if (data) {
              for (var attribute in data) {
                pluginData[attribute] = data[attribute];
              }
            }
          });
          segmentUtils.setOrigin(plugin.originName);
          segmentUtils.setPluginData(pluginData);
        });
      },
      setAWSWhitelist: require_aws().setAWSWhitelist,
      appendAWSWhitelist: require_aws().appendAWSWhitelist,
      setStreamingThreshold: segmentUtils.setStreamingThreshold,
      setLogger: logging.setLogger,
      getLogger: logging.getLogger,
      setDaemonAddress: require_daemon_config().setDaemonAddress,
      captureFunc: require_capture().captureFunc,
      captureAsyncFunc: require_capture().captureAsyncFunc,
      captureCallbackFunc: require_capture().captureCallbackFunc,
      captureAWS: require_aws_p().captureAWS,
      captureAWSClient: require_aws_p().captureAWSClient,
      captureAWSv3Client: require_aws3_p().captureAWSClient,
      captureHTTPs: require_http_p().captureHTTPs,
      captureHTTPsGlobal: require_http_p().captureHTTPsGlobal,
      capturePromise: require_promise_p().capturePromise,
      utils,
      database: {
        SqlData: require_sql_data()
      },
      middleware: require_mw_utils(),
      getNamespace: contextUtils.getNamespace,
      resolveSegment: contextUtils.resolveSegment,
      getSegment: contextUtils.getSegment,
      setSegment: contextUtils.setSegment,
      isAutomaticMode: contextUtils.isAutomaticMode,
      enableAutomaticMode: contextUtils.enableAutomaticMode,
      enableManualMode: contextUtils.enableManualMode,
      setContextMissingStrategy: contextUtils.setContextMissingStrategy,
      Segment: require_segment(),
      Subsegment: require_subsegment(),
      SegmentUtils: segmentUtils
    };
    AWSXRay2.middleware.IncomingRequestData = require_incoming_request_data(), function() {
      var data = {
        runtime: process.release && process.release.name ? process.release.name : UNKNOWN,
        runtime_version: process.version,
        version: process.env.npm_package_version || UNKNOWN,
        name: process.env.npm_package_name || UNKNOWN
      };
      var sdkData = {
        sdk: "X-Ray for Node.js",
        sdk_version: pkginfo.version ? pkginfo.version : UNKNOWN,
        package: pkginfo.name ? pkginfo.name : UNKNOWN
      };
      segmentUtils.setSDKData(sdkData);
      segmentUtils.setServiceData(data);
      if (process.env.LAMBDA_TASK_ROOT) {
        LambdaEnv.init();
      }
    }();
    module2.exports = AWSXRay2;
  }
});

// asset-input/node_modules/aws-xray-sdk-core/dist/lib/index.js
var require_lib = __commonJS({
  "asset-input/node_modules/aws-xray-sdk-core/dist/lib/index.js"(exports2, module2) {
    "use strict";
    module2.exports = require_aws_xray();
  }
});

// asset-input/node_modules/uuid/dist/rng.js
var require_rng = __commonJS({
  "asset-input/node_modules/uuid/dist/rng.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = rng;
    var _crypto = _interopRequireDefault(require("crypto"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var rnds8Pool = new Uint8Array(256);
    var poolPtr = rnds8Pool.length;
    function rng() {
      if (poolPtr > rnds8Pool.length - 16) {
        _crypto.default.randomFillSync(rnds8Pool);
        poolPtr = 0;
      }
      return rnds8Pool.slice(poolPtr, poolPtr += 16);
    }
  }
});

// asset-input/node_modules/uuid/dist/regex.js
var require_regex = __commonJS({
  "asset-input/node_modules/uuid/dist/regex.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    exports2.default = _default;
  }
});

// asset-input/node_modules/uuid/dist/validate.js
var require_validate = __commonJS({
  "asset-input/node_modules/uuid/dist/validate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _regex = _interopRequireDefault(require_regex());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function validate(uuid2) {
      return typeof uuid2 === "string" && _regex.default.test(uuid2);
    }
    var _default = validate;
    exports2.default = _default;
  }
});

// asset-input/node_modules/uuid/dist/stringify.js
var require_stringify = __commonJS({
  "asset-input/node_modules/uuid/dist/stringify.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    function stringify(arr, offset = 0) {
      const uuid2 = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
      if (!(0, _validate.default)(uuid2)) {
        throw TypeError("Stringified UUID is invalid");
      }
      return uuid2;
    }
    var _default = stringify;
    exports2.default = _default;
  }
});

// asset-input/node_modules/uuid/dist/v1.js
var require_v1 = __commonJS({
  "asset-input/node_modules/uuid/dist/v1.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = _interopRequireDefault(require_stringify());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _nodeId;
    var _clockseq;
    var _lastMSecs = 0;
    var _lastNSecs = 0;
    function v1(options, buf, offset) {
      let i = buf && offset || 0;
      const b = buf || new Array(16);
      options = options || {};
      let node = options.node || _nodeId;
      let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
      if (node == null || clockseq == null) {
        const seedBytes = options.random || (options.rng || _rng.default)();
        if (node == null) {
          node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
        }
        if (clockseq == null) {
          clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
        }
      }
      let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
      let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
      const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
      if (dt < 0 && options.clockseq === void 0) {
        clockseq = clockseq + 1 & 16383;
      }
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
        nsecs = 0;
      }
      if (nsecs >= 1e4) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
      }
      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;
      msecs += 122192928e5;
      const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
      b[i++] = tl >>> 24 & 255;
      b[i++] = tl >>> 16 & 255;
      b[i++] = tl >>> 8 & 255;
      b[i++] = tl & 255;
      const tmh = msecs / 4294967296 * 1e4 & 268435455;
      b[i++] = tmh >>> 8 & 255;
      b[i++] = tmh & 255;
      b[i++] = tmh >>> 24 & 15 | 16;
      b[i++] = tmh >>> 16 & 255;
      b[i++] = clockseq >>> 8 | 128;
      b[i++] = clockseq & 255;
      for (let n = 0; n < 6; ++n) {
        b[i + n] = node[n];
      }
      return buf || (0, _stringify.default)(b);
    }
    var _default = v1;
    exports2.default = _default;
  }
});

// asset-input/node_modules/uuid/dist/parse.js
var require_parse = __commonJS({
  "asset-input/node_modules/uuid/dist/parse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function parse(uuid2) {
      if (!(0, _validate.default)(uuid2)) {
        throw TypeError("Invalid UUID");
      }
      let v;
      const arr = new Uint8Array(16);
      arr[0] = (v = parseInt(uuid2.slice(0, 8), 16)) >>> 24;
      arr[1] = v >>> 16 & 255;
      arr[2] = v >>> 8 & 255;
      arr[3] = v & 255;
      arr[4] = (v = parseInt(uuid2.slice(9, 13), 16)) >>> 8;
      arr[5] = v & 255;
      arr[6] = (v = parseInt(uuid2.slice(14, 18), 16)) >>> 8;
      arr[7] = v & 255;
      arr[8] = (v = parseInt(uuid2.slice(19, 23), 16)) >>> 8;
      arr[9] = v & 255;
      arr[10] = (v = parseInt(uuid2.slice(24, 36), 16)) / 1099511627776 & 255;
      arr[11] = v / 4294967296 & 255;
      arr[12] = v >>> 24 & 255;
      arr[13] = v >>> 16 & 255;
      arr[14] = v >>> 8 & 255;
      arr[15] = v & 255;
      return arr;
    }
    var _default = parse;
    exports2.default = _default;
  }
});

// asset-input/node_modules/uuid/dist/v35.js
var require_v35 = __commonJS({
  "asset-input/node_modules/uuid/dist/v35.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _default;
    exports2.URL = exports2.DNS = void 0;
    var _stringify = _interopRequireDefault(require_stringify());
    var _parse = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function stringToBytes(str) {
      str = unescape(encodeURIComponent(str));
      const bytes = [];
      for (let i = 0; i < str.length; ++i) {
        bytes.push(str.charCodeAt(i));
      }
      return bytes;
    }
    var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    exports2.DNS = DNS;
    var URL = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
    exports2.URL = URL;
    function _default(name, version, hashfunc) {
      function generateUUID(value, namespace, buf, offset) {
        if (typeof value === "string") {
          value = stringToBytes(value);
        }
        if (typeof namespace === "string") {
          namespace = (0, _parse.default)(namespace);
        }
        if (namespace.length !== 16) {
          throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
        }
        let bytes = new Uint8Array(16 + value.length);
        bytes.set(namespace);
        bytes.set(value, namespace.length);
        bytes = hashfunc(bytes);
        bytes[6] = bytes[6] & 15 | version;
        bytes[8] = bytes[8] & 63 | 128;
        if (buf) {
          offset = offset || 0;
          for (let i = 0; i < 16; ++i) {
            buf[offset + i] = bytes[i];
          }
          return buf;
        }
        return (0, _stringify.default)(bytes);
      }
      try {
        generateUUID.name = name;
      } catch (err) {
      }
      generateUUID.DNS = DNS;
      generateUUID.URL = URL;
      return generateUUID;
    }
  }
});

// asset-input/node_modules/uuid/dist/md5.js
var require_md5 = __commonJS({
  "asset-input/node_modules/uuid/dist/md5.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _crypto = _interopRequireDefault(require("crypto"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function md5(bytes) {
      if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
      } else if (typeof bytes === "string") {
        bytes = Buffer.from(bytes, "utf8");
      }
      return _crypto.default.createHash("md5").update(bytes).digest();
    }
    var _default = md5;
    exports2.default = _default;
  }
});

// asset-input/node_modules/uuid/dist/v3.js
var require_v3 = __commonJS({
  "asset-input/node_modules/uuid/dist/v3.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _md = _interopRequireDefault(require_md5());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v3 = (0, _v.default)("v3", 48, _md.default);
    var _default = v3;
    exports2.default = _default;
  }
});

// asset-input/node_modules/uuid/dist/v4.js
var require_v4 = __commonJS({
  "asset-input/node_modules/uuid/dist/v4.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = _interopRequireDefault(require_stringify());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function v4(options, buf, offset) {
      options = options || {};
      const rnds = options.random || (options.rng || _rng.default)();
      rnds[6] = rnds[6] & 15 | 64;
      rnds[8] = rnds[8] & 63 | 128;
      if (buf) {
        offset = offset || 0;
        for (let i = 0; i < 16; ++i) {
          buf[offset + i] = rnds[i];
        }
        return buf;
      }
      return (0, _stringify.default)(rnds);
    }
    var _default = v4;
    exports2.default = _default;
  }
});

// asset-input/node_modules/uuid/dist/sha1.js
var require_sha1 = __commonJS({
  "asset-input/node_modules/uuid/dist/sha1.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _crypto = _interopRequireDefault(require("crypto"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function sha1(bytes) {
      if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
      } else if (typeof bytes === "string") {
        bytes = Buffer.from(bytes, "utf8");
      }
      return _crypto.default.createHash("sha1").update(bytes).digest();
    }
    var _default = sha1;
    exports2.default = _default;
  }
});

// asset-input/node_modules/uuid/dist/v5.js
var require_v5 = __commonJS({
  "asset-input/node_modules/uuid/dist/v5.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _sha = _interopRequireDefault(require_sha1());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v5 = (0, _v.default)("v5", 80, _sha.default);
    var _default = v5;
    exports2.default = _default;
  }
});

// asset-input/node_modules/uuid/dist/nil.js
var require_nil = __commonJS({
  "asset-input/node_modules/uuid/dist/nil.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _default = "00000000-0000-0000-0000-000000000000";
    exports2.default = _default;
  }
});

// asset-input/node_modules/uuid/dist/version.js
var require_version = __commonJS({
  "asset-input/node_modules/uuid/dist/version.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function version(uuid2) {
      if (!(0, _validate.default)(uuid2)) {
        throw TypeError("Invalid UUID");
      }
      return parseInt(uuid2.substr(14, 1), 16);
    }
    var _default = version;
    exports2.default = _default;
  }
});

// asset-input/node_modules/uuid/dist/index.js
var require_dist = __commonJS({
  "asset-input/node_modules/uuid/dist/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "v1", {
      enumerable: true,
      get: function() {
        return _v.default;
      }
    });
    Object.defineProperty(exports2, "v3", {
      enumerable: true,
      get: function() {
        return _v2.default;
      }
    });
    Object.defineProperty(exports2, "v4", {
      enumerable: true,
      get: function() {
        return _v3.default;
      }
    });
    Object.defineProperty(exports2, "v5", {
      enumerable: true,
      get: function() {
        return _v4.default;
      }
    });
    Object.defineProperty(exports2, "NIL", {
      enumerable: true,
      get: function() {
        return _nil.default;
      }
    });
    Object.defineProperty(exports2, "version", {
      enumerable: true,
      get: function() {
        return _version.default;
      }
    });
    Object.defineProperty(exports2, "validate", {
      enumerable: true,
      get: function() {
        return _validate.default;
      }
    });
    Object.defineProperty(exports2, "stringify", {
      enumerable: true,
      get: function() {
        return _stringify.default;
      }
    });
    Object.defineProperty(exports2, "parse", {
      enumerable: true,
      get: function() {
        return _parse.default;
      }
    });
    var _v = _interopRequireDefault(require_v1());
    var _v2 = _interopRequireDefault(require_v3());
    var _v3 = _interopRequireDefault(require_v4());
    var _v4 = _interopRequireDefault(require_v5());
    var _nil = _interopRequireDefault(require_nil());
    var _version = _interopRequireDefault(require_version());
    var _validate = _interopRequireDefault(require_validate());
    var _stringify = _interopRequireDefault(require_stringify());
    var _parse = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/aspect.js
var require_aspect = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/aspect.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Aspects = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var ASPECTS_SYMBOL = Symbol("cdk-aspects");
    var Aspects = class {
      constructor(scope) {
        this.scope = scope;
      }
      static of(scope) {
        let aspects = scope[ASPECTS_SYMBOL];
        if (!aspects) {
          aspects = new Aspects(scope);
          Object.defineProperty(scope, ASPECTS_SYMBOL, {
            value: aspects,
            configurable: false,
            enumerable: false
          });
        }
        return aspects;
      }
      add(aspect) {
        this.scope.node._actualNode.applyAspect(aspect);
      }
      get aspects() {
        return [...this.scope.node._actualNode._aspects];
      }
    };
    exports2.Aspects = Aspects;
    _a = JSII_RTTI_SYMBOL_1;
    Aspects[_a] = { fqn: "@aws-cdk/core.Aspects", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/lib/cloud-assembly/schema.js
var require_schema = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/lib/cloud-assembly/schema.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ArtifactType = void 0;
    var ArtifactType;
    (function(ArtifactType2) {
      ArtifactType2["NONE"] = "none";
      ArtifactType2["AWS_CLOUDFORMATION_STACK"] = "aws:cloudformation:stack";
      ArtifactType2["CDK_TREE"] = "cdk:tree";
      ArtifactType2["ASSET_MANIFEST"] = "cdk:asset-manifest";
      ArtifactType2["NESTED_CLOUD_ASSEMBLY"] = "cdk:cloud-assembly";
    })(ArtifactType = exports2.ArtifactType || (exports2.ArtifactType = {}));
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/lib/cloud-assembly/metadata-schema.js
var require_metadata_schema = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/lib/cloud-assembly/metadata-schema.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ArtifactMetadataEntryType = void 0;
    var ArtifactMetadataEntryType;
    (function(ArtifactMetadataEntryType2) {
      ArtifactMetadataEntryType2["ASSET"] = "aws:cdk:asset";
      ArtifactMetadataEntryType2["INFO"] = "aws:cdk:info";
      ArtifactMetadataEntryType2["WARN"] = "aws:cdk:warning";
      ArtifactMetadataEntryType2["ERROR"] = "aws:cdk:error";
      ArtifactMetadataEntryType2["LOGICAL_ID"] = "aws:cdk:logicalId";
      ArtifactMetadataEntryType2["STACK_TAGS"] = "aws:cdk:stack-tags";
    })(ArtifactMetadataEntryType = exports2.ArtifactMetadataEntryType || (exports2.ArtifactMetadataEntryType = {}));
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/lib/cloud-assembly/artifact-schema.js
var require_artifact_schema = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/lib/cloud-assembly/artifact-schema.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/lib/cloud-assembly/context-queries.js
var require_context_queries = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/lib/cloud-assembly/context-queries.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LoadBalancerListenerProtocol = exports2.LoadBalancerType = exports2.ContextProvider = void 0;
    var ContextProvider;
    (function(ContextProvider2) {
      ContextProvider2["AMI_PROVIDER"] = "ami";
      ContextProvider2["AVAILABILITY_ZONE_PROVIDER"] = "availability-zones";
      ContextProvider2["HOSTED_ZONE_PROVIDER"] = "hosted-zone";
      ContextProvider2["SSM_PARAMETER_PROVIDER"] = "ssm";
      ContextProvider2["VPC_PROVIDER"] = "vpc-provider";
      ContextProvider2["ENDPOINT_SERVICE_AVAILABILITY_ZONE_PROVIDER"] = "endpoint-service-availability-zones";
      ContextProvider2["LOAD_BALANCER_PROVIDER"] = "load-balancer";
      ContextProvider2["LOAD_BALANCER_LISTENER_PROVIDER"] = "load-balancer-listener";
      ContextProvider2["SECURITY_GROUP_PROVIDER"] = "security-group";
      ContextProvider2["KEY_PROVIDER"] = "key-provider";
    })(ContextProvider = exports2.ContextProvider || (exports2.ContextProvider = {}));
    var LoadBalancerType;
    (function(LoadBalancerType2) {
      LoadBalancerType2["NETWORK"] = "network";
      LoadBalancerType2["APPLICATION"] = "application";
    })(LoadBalancerType = exports2.LoadBalancerType || (exports2.LoadBalancerType = {}));
    var LoadBalancerListenerProtocol;
    (function(LoadBalancerListenerProtocol2) {
      LoadBalancerListenerProtocol2["HTTP"] = "HTTP";
      LoadBalancerListenerProtocol2["HTTPS"] = "HTTPS";
      LoadBalancerListenerProtocol2["TCP"] = "TCP";
      LoadBalancerListenerProtocol2["TLS"] = "TLS";
      LoadBalancerListenerProtocol2["UDP"] = "UDP";
      LoadBalancerListenerProtocol2["TCP_UDP"] = "TCP_UDP";
    })(LoadBalancerListenerProtocol = exports2.LoadBalancerListenerProtocol || (exports2.LoadBalancerListenerProtocol = {}));
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/lib/cloud-assembly/index.js
var require_cloud_assembly = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/lib/cloud-assembly/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_schema(), exports2);
    __exportStar(require_metadata_schema(), exports2);
    __exportStar(require_artifact_schema(), exports2);
    __exportStar(require_context_queries(), exports2);
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/lib/assets/schema.js
var require_schema2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/lib/assets/schema.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/lib/assets/docker-image-asset.js
var require_docker_image_asset = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/lib/assets/docker-image-asset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/lib/assets/file-asset.js
var require_file_asset = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/lib/assets/file-asset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FileAssetPackaging = void 0;
    var FileAssetPackaging;
    (function(FileAssetPackaging2) {
      FileAssetPackaging2["FILE"] = "file";
      FileAssetPackaging2["ZIP_DIRECTORY"] = "zip";
    })(FileAssetPackaging = exports2.FileAssetPackaging || (exports2.FileAssetPackaging = {}));
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/lib/assets/aws-destination.js
var require_aws_destination = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/lib/assets/aws-destination.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/lib/assets/index.js
var require_assets = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/lib/assets/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_schema2(), exports2);
    __exportStar(require_docker_image_asset(), exports2);
    __exportStar(require_file_asset(), exports2);
    __exportStar(require_aws_destination(), exports2);
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/jsonschema/lib/helpers.js
var require_helpers = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/jsonschema/lib/helpers.js"(exports2, module2) {
    "use strict";
    var uri = require("url");
    var ValidationError = exports2.ValidationError = function ValidationError2(message, instance, schema, path, name, argument) {
      if (Array.isArray(path)) {
        this.path = path;
        this.property = path.reduce(function(sum, item) {
          return sum + makeSuffix(item);
        }, "instance");
      } else if (path !== void 0) {
        this.property = path;
      }
      if (message) {
        this.message = message;
      }
      if (schema) {
        var id = schema.$id || schema.id;
        this.schema = id || schema;
      }
      if (instance !== void 0) {
        this.instance = instance;
      }
      this.name = name;
      this.argument = argument;
      this.stack = this.toString();
    };
    ValidationError.prototype.toString = function toString() {
      return this.property + " " + this.message;
    };
    var ValidatorResult = exports2.ValidatorResult = function ValidatorResult2(instance, schema, options, ctx) {
      this.instance = instance;
      this.schema = schema;
      this.options = options;
      this.path = ctx.path;
      this.propertyPath = ctx.propertyPath;
      this.errors = [];
      this.throwError = options && options.throwError;
      this.throwFirst = options && options.throwFirst;
      this.throwAll = options && options.throwAll;
      this.disableFormat = options && options.disableFormat === true;
    };
    ValidatorResult.prototype.addError = function addError(detail) {
      var err;
      if (typeof detail == "string") {
        err = new ValidationError(detail, this.instance, this.schema, this.path);
      } else {
        if (!detail)
          throw new Error("Missing error detail");
        if (!detail.message)
          throw new Error("Missing error message");
        if (!detail.name)
          throw new Error("Missing validator type");
        err = new ValidationError(detail.message, this.instance, this.schema, this.path, detail.name, detail.argument);
      }
      this.errors.push(err);
      if (this.throwFirst) {
        throw new ValidatorResultError(this);
      } else if (this.throwError) {
        throw err;
      }
      return err;
    };
    ValidatorResult.prototype.importErrors = function importErrors(res) {
      if (typeof res == "string" || res && res.validatorType) {
        this.addError(res);
      } else if (res && res.errors) {
        Array.prototype.push.apply(this.errors, res.errors);
      }
    };
    function stringizer(v, i) {
      return i + ": " + v.toString() + "\n";
    }
    ValidatorResult.prototype.toString = function toString(res) {
      return this.errors.map(stringizer).join("");
    };
    Object.defineProperty(ValidatorResult.prototype, "valid", { get: function() {
      return !this.errors.length;
    } });
    module2.exports.ValidatorResultError = ValidatorResultError;
    function ValidatorResultError(result) {
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, ValidatorResultError);
      }
      this.instance = result.instance;
      this.schema = result.schema;
      this.options = result.options;
      this.errors = result.errors;
    }
    ValidatorResultError.prototype = new Error();
    ValidatorResultError.prototype.constructor = ValidatorResultError;
    ValidatorResultError.prototype.name = "Validation Error";
    var SchemaError = exports2.SchemaError = function SchemaError2(msg, schema) {
      this.message = msg;
      this.schema = schema;
      Error.call(this, msg);
      Error.captureStackTrace(this, SchemaError2);
    };
    SchemaError.prototype = Object.create(Error.prototype, {
      constructor: { value: SchemaError, enumerable: false },
      name: { value: "SchemaError", enumerable: false }
    });
    var SchemaContext = exports2.SchemaContext = function SchemaContext2(schema, options, path, base, schemas) {
      this.schema = schema;
      this.options = options;
      if (Array.isArray(path)) {
        this.path = path;
        this.propertyPath = path.reduce(function(sum, item) {
          return sum + makeSuffix(item);
        }, "instance");
      } else {
        this.propertyPath = path;
      }
      this.base = base;
      this.schemas = schemas;
    };
    SchemaContext.prototype.resolve = function resolve(target) {
      return uri.resolve(this.base, target);
    };
    SchemaContext.prototype.makeChild = function makeChild(schema, propertyName) {
      var path = propertyName === void 0 ? this.path : this.path.concat([propertyName]);
      var id = schema.$id || schema.id;
      var base = uri.resolve(this.base, id || "");
      var ctx = new SchemaContext(schema, this.options, path, base, Object.create(this.schemas));
      if (id && !ctx.schemas[base]) {
        ctx.schemas[base] = schema;
      }
      return ctx;
    };
    var FORMAT_REGEXPS = exports2.FORMAT_REGEXPS = {
      "date-time": /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])[tT ](2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])(\.\d+)?([zZ]|[+-]([0-5][0-9]):(60|[0-5][0-9]))$/,
      "date": /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])$/,
      "time": /^(2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])$/,
      "email": /^(?:[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+\.)*[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!\.)){0,61}[a-zA-Z0-9]?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\[(?:(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\.){3}(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\]))$/,
      "ip-address": /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,
      "ipv6": /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/,
      "uri": /^[a-zA-Z][a-zA-Z0-9+-.]*:[^\s]*$/,
      "uri-reference": /^(((([A-Za-z][+\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~]|[/?])|\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|([A-Za-z][+\-.0-9A-Za-z]*:?)?)|([A-Za-z][+\-.0-9A-Za-z]*:)?\/((%[0-9A-Fa-f]{2}|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?[/?]|[!$&-.0-;=?-Z_a-z~])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|(\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?)?))#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|(([A-Za-z][+\-.0-9A-Za-z]*)?%[0-9A-Fa-f]{2}|[!$&-.0-9;=@_~]|[A-Za-z][+\-.0-9A-Za-z]*[!$&-*,;=@_~])(%[0-9A-Fa-f]{2}|[!$&-.0-9;=@-Z_a-z~])*((([/?](%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*)?#|[/?])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*)?|([A-Za-z][+\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~]|[/?])|\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|([A-Za-z][+\-.0-9A-Za-z]*:)?\/((%[0-9A-Fa-f]{2}|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?[/?]|[!$&-.0-;=?-Z_a-z~])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+(:\d*)?|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?:\d*|\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)?|[A-Za-z][+\-.0-9A-Za-z]*:?)?$/,
      "color": /^(#?([0-9A-Fa-f]{3}){1,2}\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\(\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*\))|(rgb\(\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*\)))$/,
      "hostname": /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,
      "host-name": /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,
      "alpha": /^[a-zA-Z]+$/,
      "alphanumeric": /^[a-zA-Z0-9]+$/,
      "utc-millisec": function(input) {
        return typeof input === "string" && parseFloat(input) === parseInt(input, 10) && !isNaN(input);
      },
      "regex": function(input) {
        var result = true;
        try {
          new RegExp(input);
        } catch (e) {
          result = false;
        }
        return result;
      },
      "style": /\s*(.+?):\s*([^;]+);?/,
      "phone": /^\+(?:[0-9] ?){6,14}[0-9]$/
    };
    FORMAT_REGEXPS.regexp = FORMAT_REGEXPS.regex;
    FORMAT_REGEXPS.pattern = FORMAT_REGEXPS.regex;
    FORMAT_REGEXPS.ipv4 = FORMAT_REGEXPS["ip-address"];
    exports2.isFormat = function isFormat(input, format, validator) {
      if (typeof input === "string" && FORMAT_REGEXPS[format] !== void 0) {
        if (FORMAT_REGEXPS[format] instanceof RegExp) {
          return FORMAT_REGEXPS[format].test(input);
        }
        if (typeof FORMAT_REGEXPS[format] === "function") {
          return FORMAT_REGEXPS[format](input);
        }
      } else if (validator && validator.customFormats && typeof validator.customFormats[format] === "function") {
        return validator.customFormats[format](input);
      }
      return true;
    };
    var makeSuffix = exports2.makeSuffix = function makeSuffix2(key) {
      key = key.toString();
      if (!key.match(/[.\s\[\]]/) && !key.match(/^[\d]/)) {
        return "." + key;
      }
      if (key.match(/^\d+$/)) {
        return "[" + key + "]";
      }
      return "[" + JSON.stringify(key) + "]";
    };
    exports2.deepCompareStrict = function deepCompareStrict(a, b) {
      if (typeof a !== typeof b) {
        return false;
      }
      if (Array.isArray(a)) {
        if (!Array.isArray(b)) {
          return false;
        }
        if (a.length !== b.length) {
          return false;
        }
        return a.every(function(v, i) {
          return deepCompareStrict(a[i], b[i]);
        });
      }
      if (typeof a === "object") {
        if (!a || !b) {
          return a === b;
        }
        var aKeys = Object.keys(a);
        var bKeys = Object.keys(b);
        if (aKeys.length !== bKeys.length) {
          return false;
        }
        return aKeys.every(function(v) {
          return deepCompareStrict(a[v], b[v]);
        });
      }
      return a === b;
    };
    function deepMerger(target, dst, e, i) {
      if (typeof e === "object") {
        dst[i] = deepMerge(target[i], e);
      } else {
        if (target.indexOf(e) === -1) {
          dst.push(e);
        }
      }
    }
    function copyist(src, dst, key) {
      dst[key] = src[key];
    }
    function copyistWithDeepMerge(target, src, dst, key) {
      if (typeof src[key] !== "object" || !src[key]) {
        dst[key] = src[key];
      } else {
        if (!target[key]) {
          dst[key] = src[key];
        } else {
          dst[key] = deepMerge(target[key], src[key]);
        }
      }
    }
    function deepMerge(target, src) {
      var array = Array.isArray(src);
      var dst = array && [] || {};
      if (array) {
        target = target || [];
        dst = dst.concat(target);
        src.forEach(deepMerger.bind(null, target, dst));
      } else {
        if (target && typeof target === "object") {
          Object.keys(target).forEach(copyist.bind(null, target, dst));
        }
        Object.keys(src).forEach(copyistWithDeepMerge.bind(null, target, src, dst));
      }
      return dst;
    }
    module2.exports.deepMerge = deepMerge;
    exports2.objectGetPath = function objectGetPath(o, s) {
      var parts = s.split("/").slice(1);
      var k;
      while (typeof (k = parts.shift()) == "string") {
        var n = decodeURIComponent(k.replace(/~0/, "~").replace(/~1/g, "/"));
        if (!(n in o))
          return;
        o = o[n];
      }
      return o;
    };
    function pathEncoder(v) {
      return "/" + encodeURIComponent(v).replace(/~/g, "%7E");
    }
    exports2.encodePath = function encodePointer(a) {
      return a.map(pathEncoder).join("");
    };
    exports2.getDecimalPlaces = function getDecimalPlaces(number) {
      var decimalPlaces = 0;
      if (isNaN(number))
        return decimalPlaces;
      if (typeof number !== "number") {
        number = Number(number);
      }
      var parts = number.toString().split("e");
      if (parts.length === 2) {
        if (parts[1][0] !== "-") {
          return decimalPlaces;
        } else {
          decimalPlaces = Number(parts[1].slice(1));
        }
      }
      var decimalParts = parts[0].split(".");
      if (decimalParts.length === 2) {
        decimalPlaces += decimalParts[1].length;
      }
      return decimalPlaces;
    };
    exports2.isSchema = function isSchema(val) {
      return typeof val === "object" && val || typeof val === "boolean";
    };
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/jsonschema/lib/attribute.js
var require_attribute = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/jsonschema/lib/attribute.js"(exports2, module2) {
    "use strict";
    var helpers = require_helpers();
    var ValidatorResult = helpers.ValidatorResult;
    var SchemaError = helpers.SchemaError;
    var attribute = {};
    attribute.ignoreProperties = {
      "id": true,
      "default": true,
      "description": true,
      "title": true,
      "additionalItems": true,
      "then": true,
      "else": true,
      "$schema": true,
      "$ref": true,
      "extends": true
    };
    var validators = attribute.validators = {};
    validators.type = function validateType(instance, schema, options, ctx) {
      if (instance === void 0) {
        return null;
      }
      var result = new ValidatorResult(instance, schema, options, ctx);
      var types = Array.isArray(schema.type) ? schema.type : [schema.type];
      if (!types.some(this.testType.bind(this, instance, schema, options, ctx))) {
        var list = types.map(function(v) {
          if (!v)
            return;
          var id = v.$id || v.id;
          return id ? "<" + id + ">" : v + "";
        });
        result.addError({
          name: "type",
          argument: list,
          message: "is not of a type(s) " + list
        });
      }
      return result;
    };
    function testSchemaNoThrow(instance, options, ctx, callback, schema) {
      var throwError = options.throwError;
      var throwAll = options.throwAll;
      options.throwError = false;
      options.throwAll = false;
      var res = this.validateSchema(instance, schema, options, ctx);
      options.throwError = throwError;
      options.throwAll = throwAll;
      if (!res.valid && callback instanceof Function) {
        callback(res);
      }
      return res.valid;
    }
    validators.anyOf = function validateAnyOf(instance, schema, options, ctx) {
      if (instance === void 0) {
        return null;
      }
      var result = new ValidatorResult(instance, schema, options, ctx);
      var inner = new ValidatorResult(instance, schema, options, ctx);
      if (!Array.isArray(schema.anyOf)) {
        throw new SchemaError("anyOf must be an array");
      }
      if (!schema.anyOf.some(testSchemaNoThrow.bind(this, instance, options, ctx, function(res) {
        inner.importErrors(res);
      }))) {
        var list = schema.anyOf.map(function(v, i) {
          var id = v.$id || v.id;
          if (id)
            return "<" + id + ">";
          return v.title && JSON.stringify(v.title) || v["$ref"] && "<" + v["$ref"] + ">" || "[subschema " + i + "]";
        });
        if (options.nestedErrors) {
          result.importErrors(inner);
        }
        result.addError({
          name: "anyOf",
          argument: list,
          message: "is not any of " + list.join(",")
        });
      }
      return result;
    };
    validators.allOf = function validateAllOf(instance, schema, options, ctx) {
      if (instance === void 0) {
        return null;
      }
      if (!Array.isArray(schema.allOf)) {
        throw new SchemaError("allOf must be an array");
      }
      var result = new ValidatorResult(instance, schema, options, ctx);
      var self = this;
      schema.allOf.forEach(function(v, i) {
        var valid = self.validateSchema(instance, v, options, ctx);
        if (!valid.valid) {
          var id = v.$id || v.id;
          var msg = id || v.title && JSON.stringify(v.title) || v["$ref"] && "<" + v["$ref"] + ">" || "[subschema " + i + "]";
          result.addError({
            name: "allOf",
            argument: { id: msg, length: valid.errors.length, valid },
            message: "does not match allOf schema " + msg + " with " + valid.errors.length + " error[s]:"
          });
          result.importErrors(valid);
        }
      });
      return result;
    };
    validators.oneOf = function validateOneOf(instance, schema, options, ctx) {
      if (instance === void 0) {
        return null;
      }
      if (!Array.isArray(schema.oneOf)) {
        throw new SchemaError("oneOf must be an array");
      }
      var result = new ValidatorResult(instance, schema, options, ctx);
      var inner = new ValidatorResult(instance, schema, options, ctx);
      var count = schema.oneOf.filter(testSchemaNoThrow.bind(this, instance, options, ctx, function(res) {
        inner.importErrors(res);
      })).length;
      var list = schema.oneOf.map(function(v, i) {
        var id = v.$id || v.id;
        return id || v.title && JSON.stringify(v.title) || v["$ref"] && "<" + v["$ref"] + ">" || "[subschema " + i + "]";
      });
      if (count !== 1) {
        if (options.nestedErrors) {
          result.importErrors(inner);
        }
        result.addError({
          name: "oneOf",
          argument: list,
          message: "is not exactly one from " + list.join(",")
        });
      }
      return result;
    };
    validators.if = function validateIf(instance, schema, options, ctx) {
      if (instance === void 0)
        return null;
      if (!helpers.isSchema(schema.if))
        throw new Error('Expected "if" keyword to be a schema');
      var ifValid = testSchemaNoThrow.call(this, instance, options, ctx, null, schema.if);
      var result = new ValidatorResult(instance, schema, options, ctx);
      var res;
      if (ifValid) {
        if (schema.then === void 0)
          return;
        if (!helpers.isSchema(schema.then))
          throw new Error('Expected "then" keyword to be a schema');
        res = this.validateSchema(instance, schema.then, options, ctx.makeChild(schema.then));
        result.importErrors(res);
      } else {
        if (schema.else === void 0)
          return;
        if (!helpers.isSchema(schema.else))
          throw new Error('Expected "else" keyword to be a schema');
        res = this.validateSchema(instance, schema.else, options, ctx.makeChild(schema.else));
        result.importErrors(res);
      }
      return result;
    };
    function getEnumerableProperty(object, key) {
      if (Object.hasOwnProperty.call(object, key))
        return object[key];
      if (!(key in object))
        return;
      while (object = Object.getPrototypeOf(object)) {
        if (Object.propertyIsEnumerable.call(object, key))
          return object[key];
      }
    }
    validators.propertyNames = function validatePropertyNames(instance, schema, options, ctx) {
      if (!this.types.object(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var subschema = schema.propertyNames !== void 0 ? schema.propertyNames : {};
      if (!helpers.isSchema(subschema))
        throw new SchemaError('Expected "propertyNames" to be a schema (object or boolean)');
      for (var property in instance) {
        if (getEnumerableProperty(instance, property) !== void 0) {
          var res = this.validateSchema(property, subschema, options, ctx.makeChild(subschema));
          result.importErrors(res);
        }
      }
      return result;
    };
    validators.properties = function validateProperties(instance, schema, options, ctx) {
      if (!this.types.object(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var properties = schema.properties || {};
      for (var property in properties) {
        var subschema = properties[property];
        if (subschema === void 0) {
          continue;
        } else if (subschema === null) {
          throw new SchemaError('Unexpected null, expected schema in "properties"');
        }
        if (typeof options.preValidateProperty == "function") {
          options.preValidateProperty(instance, property, subschema, options, ctx);
        }
        var prop = getEnumerableProperty(instance, property);
        var res = this.validateSchema(prop, subschema, options, ctx.makeChild(subschema, property));
        if (res.instance !== result.instance[property])
          result.instance[property] = res.instance;
        result.importErrors(res);
      }
      return result;
    };
    function testAdditionalProperty(instance, schema, options, ctx, property, result) {
      if (!this.types.object(instance))
        return;
      if (schema.properties && schema.properties[property] !== void 0) {
        return;
      }
      if (schema.additionalProperties === false) {
        result.addError({
          name: "additionalProperties",
          argument: property,
          message: "is not allowed to have the additional property " + JSON.stringify(property)
        });
      } else {
        var additionalProperties = schema.additionalProperties || {};
        if (typeof options.preValidateProperty == "function") {
          options.preValidateProperty(instance, property, additionalProperties, options, ctx);
        }
        var res = this.validateSchema(instance[property], additionalProperties, options, ctx.makeChild(additionalProperties, property));
        if (res.instance !== result.instance[property])
          result.instance[property] = res.instance;
        result.importErrors(res);
      }
    }
    validators.patternProperties = function validatePatternProperties(instance, schema, options, ctx) {
      if (!this.types.object(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var patternProperties = schema.patternProperties || {};
      for (var property in instance) {
        var test = true;
        for (var pattern in patternProperties) {
          var subschema = patternProperties[pattern];
          if (subschema === void 0) {
            continue;
          } else if (subschema === null) {
            throw new SchemaError('Unexpected null, expected schema in "patternProperties"');
          }
          try {
            var regexp = new RegExp(pattern, "u");
          } catch (_e) {
            regexp = new RegExp(pattern);
          }
          if (!regexp.test(property)) {
            continue;
          }
          test = false;
          if (typeof options.preValidateProperty == "function") {
            options.preValidateProperty(instance, property, subschema, options, ctx);
          }
          var res = this.validateSchema(instance[property], subschema, options, ctx.makeChild(subschema, property));
          if (res.instance !== result.instance[property])
            result.instance[property] = res.instance;
          result.importErrors(res);
        }
        if (test) {
          testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);
        }
      }
      return result;
    };
    validators.additionalProperties = function validateAdditionalProperties(instance, schema, options, ctx) {
      if (!this.types.object(instance))
        return;
      if (schema.patternProperties) {
        return null;
      }
      var result = new ValidatorResult(instance, schema, options, ctx);
      for (var property in instance) {
        testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);
      }
      return result;
    };
    validators.minProperties = function validateMinProperties(instance, schema, options, ctx) {
      if (!this.types.object(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var keys = Object.keys(instance);
      if (!(keys.length >= schema.minProperties)) {
        result.addError({
          name: "minProperties",
          argument: schema.minProperties,
          message: "does not meet minimum property length of " + schema.minProperties
        });
      }
      return result;
    };
    validators.maxProperties = function validateMaxProperties(instance, schema, options, ctx) {
      if (!this.types.object(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var keys = Object.keys(instance);
      if (!(keys.length <= schema.maxProperties)) {
        result.addError({
          name: "maxProperties",
          argument: schema.maxProperties,
          message: "does not meet maximum property length of " + schema.maxProperties
        });
      }
      return result;
    };
    validators.items = function validateItems(instance, schema, options, ctx) {
      var self = this;
      if (!this.types.array(instance))
        return;
      if (!schema.items)
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      instance.every(function(value, i) {
        var items = Array.isArray(schema.items) ? schema.items[i] || schema.additionalItems : schema.items;
        if (items === void 0) {
          return true;
        }
        if (items === false) {
          result.addError({
            name: "items",
            message: "additionalItems not permitted"
          });
          return false;
        }
        var res = self.validateSchema(value, items, options, ctx.makeChild(items, i));
        if (res.instance !== result.instance[i])
          result.instance[i] = res.instance;
        result.importErrors(res);
        return true;
      });
      return result;
    };
    validators.minimum = function validateMinimum(instance, schema, options, ctx) {
      if (!this.types.number(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (schema.exclusiveMinimum && schema.exclusiveMinimum === true) {
        if (!(instance > schema.minimum)) {
          result.addError({
            name: "minimum",
            argument: schema.minimum,
            message: "must be greater than " + schema.minimum
          });
        }
      } else {
        if (!(instance >= schema.minimum)) {
          result.addError({
            name: "minimum",
            argument: schema.minimum,
            message: "must be greater than or equal to " + schema.minimum
          });
        }
      }
      return result;
    };
    validators.maximum = function validateMaximum(instance, schema, options, ctx) {
      if (!this.types.number(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (schema.exclusiveMaximum && schema.exclusiveMaximum === true) {
        if (!(instance < schema.maximum)) {
          result.addError({
            name: "maximum",
            argument: schema.maximum,
            message: "must be less than " + schema.maximum
          });
        }
      } else {
        if (!(instance <= schema.maximum)) {
          result.addError({
            name: "maximum",
            argument: schema.maximum,
            message: "must be less than or equal to " + schema.maximum
          });
        }
      }
      return result;
    };
    validators.exclusiveMinimum = function validateExclusiveMinimum(instance, schema, options, ctx) {
      if (typeof schema.exclusiveMaximum === "boolean")
        return;
      if (!this.types.number(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var valid = instance > schema.exclusiveMinimum;
      if (!valid) {
        result.addError({
          name: "exclusiveMinimum",
          argument: schema.exclusiveMinimum,
          message: "must be strictly greater than " + schema.exclusiveMinimum
        });
      }
      return result;
    };
    validators.exclusiveMaximum = function validateExclusiveMaximum(instance, schema, options, ctx) {
      if (typeof schema.exclusiveMaximum === "boolean")
        return;
      if (!this.types.number(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var valid = instance < schema.exclusiveMaximum;
      if (!valid) {
        result.addError({
          name: "exclusiveMaximum",
          argument: schema.exclusiveMaximum,
          message: "must be strictly less than " + schema.exclusiveMaximum
        });
      }
      return result;
    };
    var validateMultipleOfOrDivisbleBy = function validateMultipleOfOrDivisbleBy2(instance, schema, options, ctx, validationType, errorMessage) {
      if (!this.types.number(instance))
        return;
      var validationArgument = schema[validationType];
      if (validationArgument == 0) {
        throw new SchemaError(validationType + " cannot be zero");
      }
      var result = new ValidatorResult(instance, schema, options, ctx);
      var instanceDecimals = helpers.getDecimalPlaces(instance);
      var divisorDecimals = helpers.getDecimalPlaces(validationArgument);
      var maxDecimals = Math.max(instanceDecimals, divisorDecimals);
      var multiplier = Math.pow(10, maxDecimals);
      if (Math.round(instance * multiplier) % Math.round(validationArgument * multiplier) !== 0) {
        result.addError({
          name: validationType,
          argument: validationArgument,
          message: errorMessage + JSON.stringify(validationArgument)
        });
      }
      return result;
    };
    validators.multipleOf = function validateMultipleOf(instance, schema, options, ctx) {
      return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options, ctx, "multipleOf", "is not a multiple of (divisible by) ");
    };
    validators.divisibleBy = function validateDivisibleBy(instance, schema, options, ctx) {
      return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options, ctx, "divisibleBy", "is not divisible by (multiple of) ");
    };
    validators.required = function validateRequired(instance, schema, options, ctx) {
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (instance === void 0 && schema.required === true) {
        result.addError({
          name: "required",
          message: "is required"
        });
      } else if (this.types.object(instance) && Array.isArray(schema.required)) {
        schema.required.forEach(function(n) {
          if (getEnumerableProperty(instance, n) === void 0) {
            result.addError({
              name: "required",
              argument: n,
              message: "requires property " + JSON.stringify(n)
            });
          }
        });
      }
      return result;
    };
    validators.pattern = function validatePattern(instance, schema, options, ctx) {
      if (!this.types.string(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var pattern = schema.pattern;
      try {
        var regexp = new RegExp(pattern, "u");
      } catch (_e) {
        regexp = new RegExp(pattern);
      }
      if (!instance.match(regexp)) {
        result.addError({
          name: "pattern",
          argument: schema.pattern,
          message: "does not match pattern " + JSON.stringify(schema.pattern.toString())
        });
      }
      return result;
    };
    validators.format = function validateFormat(instance, schema, options, ctx) {
      if (instance === void 0)
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (!result.disableFormat && !helpers.isFormat(instance, schema.format, this)) {
        result.addError({
          name: "format",
          argument: schema.format,
          message: "does not conform to the " + JSON.stringify(schema.format) + " format"
        });
      }
      return result;
    };
    validators.minLength = function validateMinLength(instance, schema, options, ctx) {
      if (!this.types.string(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var hsp = instance.match(/[\uDC00-\uDFFF]/g);
      var length = instance.length - (hsp ? hsp.length : 0);
      if (!(length >= schema.minLength)) {
        result.addError({
          name: "minLength",
          argument: schema.minLength,
          message: "does not meet minimum length of " + schema.minLength
        });
      }
      return result;
    };
    validators.maxLength = function validateMaxLength(instance, schema, options, ctx) {
      if (!this.types.string(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var hsp = instance.match(/[\uDC00-\uDFFF]/g);
      var length = instance.length - (hsp ? hsp.length : 0);
      if (!(length <= schema.maxLength)) {
        result.addError({
          name: "maxLength",
          argument: schema.maxLength,
          message: "does not meet maximum length of " + schema.maxLength
        });
      }
      return result;
    };
    validators.minItems = function validateMinItems(instance, schema, options, ctx) {
      if (!this.types.array(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (!(instance.length >= schema.minItems)) {
        result.addError({
          name: "minItems",
          argument: schema.minItems,
          message: "does not meet minimum length of " + schema.minItems
        });
      }
      return result;
    };
    validators.maxItems = function validateMaxItems(instance, schema, options, ctx) {
      if (!this.types.array(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (!(instance.length <= schema.maxItems)) {
        result.addError({
          name: "maxItems",
          argument: schema.maxItems,
          message: "does not meet maximum length of " + schema.maxItems
        });
      }
      return result;
    };
    function testArrays(v, i, a) {
      var j, len = a.length;
      for (j = i + 1, len; j < len; j++) {
        if (helpers.deepCompareStrict(v, a[j])) {
          return false;
        }
      }
      return true;
    }
    validators.uniqueItems = function validateUniqueItems(instance, schema, options, ctx) {
      if (schema.uniqueItems !== true)
        return;
      if (!this.types.array(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (!instance.every(testArrays)) {
        result.addError({
          name: "uniqueItems",
          message: "contains duplicate item"
        });
      }
      return result;
    };
    validators.dependencies = function validateDependencies(instance, schema, options, ctx) {
      if (!this.types.object(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      for (var property in schema.dependencies) {
        if (instance[property] === void 0) {
          continue;
        }
        var dep = schema.dependencies[property];
        var childContext = ctx.makeChild(dep, property);
        if (typeof dep == "string") {
          dep = [dep];
        }
        if (Array.isArray(dep)) {
          dep.forEach(function(prop) {
            if (instance[prop] === void 0) {
              result.addError({
                name: "dependencies",
                argument: childContext.propertyPath,
                message: "property " + prop + " not found, required by " + childContext.propertyPath
              });
            }
          });
        } else {
          var res = this.validateSchema(instance, dep, options, childContext);
          if (result.instance !== res.instance)
            result.instance = res.instance;
          if (res && res.errors.length) {
            result.addError({
              name: "dependencies",
              argument: childContext.propertyPath,
              message: "does not meet dependency required by " + childContext.propertyPath
            });
            result.importErrors(res);
          }
        }
      }
      return result;
    };
    validators["enum"] = function validateEnum(instance, schema, options, ctx) {
      if (instance === void 0) {
        return null;
      }
      if (!Array.isArray(schema["enum"])) {
        throw new SchemaError("enum expects an array", schema);
      }
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (!schema["enum"].some(helpers.deepCompareStrict.bind(null, instance))) {
        result.addError({
          name: "enum",
          argument: schema["enum"],
          message: "is not one of enum values: " + schema["enum"].map(String).join(",")
        });
      }
      return result;
    };
    validators["const"] = function validateEnum(instance, schema, options, ctx) {
      if (instance === void 0) {
        return null;
      }
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (!helpers.deepCompareStrict(schema["const"], instance)) {
        result.addError({
          name: "const",
          argument: schema["const"],
          message: "does not exactly match expected constant: " + schema["const"]
        });
      }
      return result;
    };
    validators.not = validators.disallow = function validateNot(instance, schema, options, ctx) {
      var self = this;
      if (instance === void 0)
        return null;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var notTypes = schema.not || schema.disallow;
      if (!notTypes)
        return null;
      if (!Array.isArray(notTypes))
        notTypes = [notTypes];
      notTypes.forEach(function(type) {
        if (self.testType(instance, schema, options, ctx, type)) {
          var id = type && (type.$id || type.id);
          var schemaId = id || type;
          result.addError({
            name: "not",
            argument: schemaId,
            message: "is of prohibited type " + schemaId
          });
        }
      });
      return result;
    };
    module2.exports = attribute;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/jsonschema/lib/scan.js
var require_scan = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/jsonschema/lib/scan.js"(exports2, module2) {
    "use strict";
    var urilib = require("url");
    var helpers = require_helpers();
    module2.exports.SchemaScanResult = SchemaScanResult;
    function SchemaScanResult(found, ref) {
      this.id = found;
      this.ref = ref;
    }
    module2.exports.scan = function scan(base, schema) {
      function scanSchema(baseuri, schema2) {
        if (!schema2 || typeof schema2 != "object")
          return;
        if (schema2.$ref) {
          var resolvedUri = urilib.resolve(baseuri, schema2.$ref);
          ref[resolvedUri] = ref[resolvedUri] ? ref[resolvedUri] + 1 : 0;
          return;
        }
        var id = schema2.$id || schema2.id;
        var ourBase = id ? urilib.resolve(baseuri, id) : baseuri;
        if (ourBase) {
          if (ourBase.indexOf("#") < 0)
            ourBase += "#";
          if (found[ourBase]) {
            if (!helpers.deepCompareStrict(found[ourBase], schema2)) {
              throw new Error("Schema <" + ourBase + "> already exists with different definition");
            }
            return found[ourBase];
          }
          found[ourBase] = schema2;
          if (ourBase[ourBase.length - 1] == "#") {
            found[ourBase.substring(0, ourBase.length - 1)] = schema2;
          }
        }
        scanArray(ourBase + "/items", Array.isArray(schema2.items) ? schema2.items : [schema2.items]);
        scanArray(ourBase + "/extends", Array.isArray(schema2.extends) ? schema2.extends : [schema2.extends]);
        scanSchema(ourBase + "/additionalItems", schema2.additionalItems);
        scanObject(ourBase + "/properties", schema2.properties);
        scanSchema(ourBase + "/additionalProperties", schema2.additionalProperties);
        scanObject(ourBase + "/definitions", schema2.definitions);
        scanObject(ourBase + "/patternProperties", schema2.patternProperties);
        scanObject(ourBase + "/dependencies", schema2.dependencies);
        scanArray(ourBase + "/disallow", schema2.disallow);
        scanArray(ourBase + "/allOf", schema2.allOf);
        scanArray(ourBase + "/anyOf", schema2.anyOf);
        scanArray(ourBase + "/oneOf", schema2.oneOf);
        scanSchema(ourBase + "/not", schema2.not);
      }
      function scanArray(baseuri, schemas) {
        if (!Array.isArray(schemas))
          return;
        for (var i = 0; i < schemas.length; i++) {
          scanSchema(baseuri + "/" + i, schemas[i]);
        }
      }
      function scanObject(baseuri, schemas) {
        if (!schemas || typeof schemas != "object")
          return;
        for (var p in schemas) {
          scanSchema(baseuri + "/" + p, schemas[p]);
        }
      }
      var found = {};
      var ref = {};
      scanSchema(base, schema);
      return new SchemaScanResult(found, ref);
    };
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/jsonschema/lib/validator.js
var require_validator = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/jsonschema/lib/validator.js"(exports2, module2) {
    "use strict";
    var urilib = require("url");
    var attribute = require_attribute();
    var helpers = require_helpers();
    var scanSchema = require_scan().scan;
    var ValidatorResult = helpers.ValidatorResult;
    var ValidatorResultError = helpers.ValidatorResultError;
    var SchemaError = helpers.SchemaError;
    var SchemaContext = helpers.SchemaContext;
    var anonymousBase = "/";
    var Validator = function Validator2() {
      this.customFormats = Object.create(Validator2.prototype.customFormats);
      this.schemas = {};
      this.unresolvedRefs = [];
      this.types = Object.create(types);
      this.attributes = Object.create(attribute.validators);
    };
    Validator.prototype.customFormats = {};
    Validator.prototype.schemas = null;
    Validator.prototype.types = null;
    Validator.prototype.attributes = null;
    Validator.prototype.unresolvedRefs = null;
    Validator.prototype.addSchema = function addSchema(schema, base) {
      var self = this;
      if (!schema) {
        return null;
      }
      var scan = scanSchema(base || anonymousBase, schema);
      var ourUri = base || schema.$id || schema.id;
      for (var uri in scan.id) {
        this.schemas[uri] = scan.id[uri];
      }
      for (var uri in scan.ref) {
        this.unresolvedRefs.push(uri);
      }
      this.unresolvedRefs = this.unresolvedRefs.filter(function(uri2) {
        return typeof self.schemas[uri2] === "undefined";
      });
      return this.schemas[ourUri];
    };
    Validator.prototype.addSubSchemaArray = function addSubSchemaArray(baseuri, schemas) {
      if (!Array.isArray(schemas))
        return;
      for (var i = 0; i < schemas.length; i++) {
        this.addSubSchema(baseuri, schemas[i]);
      }
    };
    Validator.prototype.addSubSchemaObject = function addSubSchemaArray(baseuri, schemas) {
      if (!schemas || typeof schemas != "object")
        return;
      for (var p in schemas) {
        this.addSubSchema(baseuri, schemas[p]);
      }
    };
    Validator.prototype.setSchemas = function setSchemas(schemas) {
      this.schemas = schemas;
    };
    Validator.prototype.getSchema = function getSchema(urn) {
      return this.schemas[urn];
    };
    Validator.prototype.validate = function validate(instance, schema, options, ctx) {
      if (typeof schema !== "boolean" && typeof schema !== "object" || schema === null) {
        throw new SchemaError("Expected `schema` to be an object or boolean");
      }
      if (!options) {
        options = {};
      }
      var id = schema.$id || schema.id;
      var base = urilib.resolve(options.base || anonymousBase, id || "");
      if (!ctx) {
        ctx = new SchemaContext(schema, options, [], base, Object.create(this.schemas));
        if (!ctx.schemas[base]) {
          ctx.schemas[base] = schema;
        }
        var found = scanSchema(base, schema);
        for (var n in found.id) {
          var sch = found.id[n];
          ctx.schemas[n] = sch;
        }
      }
      if (options.required && instance === void 0) {
        var result = new ValidatorResult(instance, schema, options, ctx);
        result.addError("is required, but is undefined");
        return result;
      }
      var result = this.validateSchema(instance, schema, options, ctx);
      if (!result) {
        throw new Error("Result undefined");
      } else if (options.throwAll && result.errors.length) {
        throw new ValidatorResultError(result);
      }
      return result;
    };
    function shouldResolve(schema) {
      var ref = typeof schema === "string" ? schema : schema.$ref;
      if (typeof ref == "string")
        return ref;
      return false;
    }
    Validator.prototype.validateSchema = function validateSchema(instance, schema, options, ctx) {
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (typeof schema === "boolean") {
        if (schema === true) {
          schema = {};
        } else if (schema === false) {
          schema = { type: [] };
        }
      } else if (!schema) {
        throw new Error("schema is undefined");
      }
      if (schema["extends"]) {
        if (Array.isArray(schema["extends"])) {
          var schemaobj = { schema, ctx };
          schema["extends"].forEach(this.schemaTraverser.bind(this, schemaobj));
          schema = schemaobj.schema;
          schemaobj.schema = null;
          schemaobj.ctx = null;
          schemaobj = null;
        } else {
          schema = helpers.deepMerge(schema, this.superResolve(schema["extends"], ctx));
        }
      }
      var switchSchema = shouldResolve(schema);
      if (switchSchema) {
        var resolved = this.resolve(schema, switchSchema, ctx);
        var subctx = new SchemaContext(resolved.subschema, options, ctx.path, resolved.switchSchema, ctx.schemas);
        return this.validateSchema(instance, resolved.subschema, options, subctx);
      }
      var skipAttributes = options && options.skipAttributes || [];
      for (var key in schema) {
        if (!attribute.ignoreProperties[key] && skipAttributes.indexOf(key) < 0) {
          var validatorErr = null;
          var validator = this.attributes[key];
          if (validator) {
            validatorErr = validator.call(this, instance, schema, options, ctx);
          } else if (options.allowUnknownAttributes === false) {
            throw new SchemaError("Unsupported attribute: " + key, schema);
          }
          if (validatorErr) {
            result.importErrors(validatorErr);
          }
        }
      }
      if (typeof options.rewrite == "function") {
        var value = options.rewrite.call(this, instance, schema, options, ctx);
        result.instance = value;
      }
      return result;
    };
    Validator.prototype.schemaTraverser = function schemaTraverser(schemaobj, s) {
      schemaobj.schema = helpers.deepMerge(schemaobj.schema, this.superResolve(s, schemaobj.ctx));
    };
    Validator.prototype.superResolve = function superResolve(schema, ctx) {
      var ref = shouldResolve(schema);
      if (ref) {
        return this.resolve(schema, ref, ctx).subschema;
      }
      return schema;
    };
    Validator.prototype.resolve = function resolve(schema, switchSchema, ctx) {
      switchSchema = ctx.resolve(switchSchema);
      if (ctx.schemas[switchSchema]) {
        return { subschema: ctx.schemas[switchSchema], switchSchema };
      }
      var parsed = urilib.parse(switchSchema);
      var fragment = parsed && parsed.hash;
      var document = fragment && fragment.length && switchSchema.substr(0, switchSchema.length - fragment.length);
      if (!document || !ctx.schemas[document]) {
        throw new SchemaError("no such schema <" + switchSchema + ">", schema);
      }
      var subschema = helpers.objectGetPath(ctx.schemas[document], fragment.substr(1));
      if (subschema === void 0) {
        throw new SchemaError("no such schema " + fragment + " located in <" + document + ">", schema);
      }
      return { subschema, switchSchema };
    };
    Validator.prototype.testType = function validateType(instance, schema, options, ctx, type) {
      if (type === void 0) {
        return;
      } else if (type === null) {
        throw new SchemaError('Unexpected null in "type" keyword');
      }
      if (typeof this.types[type] == "function") {
        return this.types[type].call(this, instance);
      }
      if (type && typeof type == "object") {
        var res = this.validateSchema(instance, type, options, ctx);
        return res === void 0 || !(res && res.errors.length);
      }
      return true;
    };
    var types = Validator.prototype.types = {};
    types.string = function testString(instance) {
      return typeof instance == "string";
    };
    types.number = function testNumber(instance) {
      return typeof instance == "number" && isFinite(instance);
    };
    types.integer = function testInteger(instance) {
      return typeof instance == "number" && instance % 1 === 0;
    };
    types.boolean = function testBoolean(instance) {
      return typeof instance == "boolean";
    };
    types.array = function testArray(instance) {
      return Array.isArray(instance);
    };
    types["null"] = function testNull(instance) {
      return instance === null;
    };
    types.date = function testDate(instance) {
      return instance instanceof Date;
    };
    types.any = function testAny(instance) {
      return true;
    };
    types.object = function testObject(instance) {
      return instance && typeof instance === "object" && !Array.isArray(instance) && !(instance instanceof Date);
    };
    module2.exports = Validator;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/jsonschema/lib/index.js
var require_lib2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/jsonschema/lib/index.js"(exports2, module2) {
    "use strict";
    var Validator = module2.exports.Validator = require_validator();
    module2.exports.ValidatorResult = require_helpers().ValidatorResult;
    module2.exports.ValidatorResultError = require_helpers().ValidatorResultError;
    module2.exports.ValidationError = require_helpers().ValidationError;
    module2.exports.SchemaError = require_helpers().SchemaError;
    module2.exports.SchemaScanResult = require_scan().SchemaScanResult;
    module2.exports.scan = require_scan().scan;
    module2.exports.validate = function(instance, schema, options) {
      var v = new Validator();
      return v.validate(instance, schema, options);
    };
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/internal/constants.js
var require_constants2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/internal/constants.js"(exports2, module2) {
    var SEMVER_SPEC_VERSION = "2.0.0";
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    module2.exports = {
      SEMVER_SPEC_VERSION,
      MAX_LENGTH,
      MAX_SAFE_INTEGER,
      MAX_SAFE_COMPONENT_LENGTH
    };
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/internal/debug.js
var require_debug = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/internal/debug.js"(exports2, module2) {
    var debug = typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
    };
    module2.exports = debug;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/internal/re.js
var require_re = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/internal/re.js"(exports2, module2) {
    var { MAX_SAFE_COMPONENT_LENGTH } = require_constants2();
    var debug = require_debug();
    exports2 = module2.exports = {};
    var re = exports2.re = [];
    var src = exports2.src = [];
    var t = exports2.t = {};
    var R = 0;
    var createToken = (name, value, isGlobal) => {
      const index = R++;
      debug(index, value);
      t[name] = index;
      src[index] = value;
      re[index] = new RegExp(value, isGlobal ? "g" : void 0);
    };
    createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
    createToken("NUMERICIDENTIFIERLOOSE", "[0-9]+");
    createToken("NONNUMERICIDENTIFIER", "\\d*[a-zA-Z-][a-zA-Z0-9-]*");
    createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})`);
    createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`);
    createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
    createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
    createToken("BUILDIDENTIFIER", "[0-9A-Za-z-]+");
    createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
    createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
    createToken("FULL", `^${src[t.FULLPLAIN]}$`);
    createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
    createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
    createToken("GTLT", "((?:<|>)?=?)");
    createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
    createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
    createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?)?)?`);
    createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?)?)?`);
    createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
    createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("COERCE", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:$|[^\\d])`);
    createToken("COERCERTL", src[t.COERCE], true);
    createToken("LONETILDE", "(?:~>?)");
    createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true);
    exports2.tildeTrimReplace = "$1~";
    createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
    createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("LONECARET", "(?:\\^)");
    createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true);
    exports2.caretTrimReplace = "$1^";
    createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
    createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
    createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
    createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
    exports2.comparatorTrimReplace = "$1$2$3";
    createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})\\s+-\\s+(${src[t.XRANGEPLAIN]})\\s*$`);
    createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t.XRANGEPLAINLOOSE]})\\s*$`);
    createToken("STAR", "(<|>)?=?\\s*\\*");
    createToken("GTE0", "^\\s*>=\\s*0.0.0\\s*$");
    createToken("GTE0PRE", "^\\s*>=\\s*0.0.0-0\\s*$");
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/internal/parse-options.js
var require_parse_options = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/internal/parse-options.js"(exports2, module2) {
    var opts = ["includePrerelease", "loose", "rtl"];
    var parseOptions = (options) => !options ? {} : typeof options !== "object" ? { loose: true } : opts.filter((k) => options[k]).reduce((options2, k) => {
      options2[k] = true;
      return options2;
    }, {});
    module2.exports = parseOptions;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/internal/identifiers.js
var require_identifiers = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/internal/identifiers.js"(exports2, module2) {
    var numeric = /^[0-9]+$/;
    var compareIdentifiers = (a, b) => {
      const anum = numeric.test(a);
      const bnum = numeric.test(b);
      if (anum && bnum) {
        a = +a;
        b = +b;
      }
      return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
    };
    var rcompareIdentifiers = (a, b) => compareIdentifiers(b, a);
    module2.exports = {
      compareIdentifiers,
      rcompareIdentifiers
    };
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/classes/semver.js
var require_semver2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/classes/semver.js"(exports2, module2) {
    var debug = require_debug();
    var { MAX_LENGTH, MAX_SAFE_INTEGER } = require_constants2();
    var { re, t } = require_re();
    var parseOptions = require_parse_options();
    var { compareIdentifiers } = require_identifiers();
    var SemVer = class {
      constructor(version, options) {
        options = parseOptions(options);
        if (version instanceof SemVer) {
          if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) {
            return version;
          } else {
            version = version.version;
          }
        } else if (typeof version !== "string") {
          throw new TypeError(`Invalid Version: ${version}`);
        }
        if (version.length > MAX_LENGTH) {
          throw new TypeError(`version is longer than ${MAX_LENGTH} characters`);
        }
        debug("SemVer", version, options);
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
        if (!m) {
          throw new TypeError(`Invalid Version: ${version}`);
        }
        this.raw = version;
        this.major = +m[1];
        this.minor = +m[2];
        this.patch = +m[3];
        if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
          throw new TypeError("Invalid major version");
        }
        if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
          throw new TypeError("Invalid minor version");
        }
        if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
          throw new TypeError("Invalid patch version");
        }
        if (!m[4]) {
          this.prerelease = [];
        } else {
          this.prerelease = m[4].split(".").map((id) => {
            if (/^[0-9]+$/.test(id)) {
              const num = +id;
              if (num >= 0 && num < MAX_SAFE_INTEGER) {
                return num;
              }
            }
            return id;
          });
        }
        this.build = m[5] ? m[5].split(".") : [];
        this.format();
      }
      format() {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) {
          this.version += `-${this.prerelease.join(".")}`;
        }
        return this.version;
      }
      toString() {
        return this.version;
      }
      compare(other) {
        debug("SemVer.compare", this.version, this.options, other);
        if (!(other instanceof SemVer)) {
          if (typeof other === "string" && other === this.version) {
            return 0;
          }
          other = new SemVer(other, this.options);
        }
        if (other.version === this.version) {
          return 0;
        }
        return this.compareMain(other) || this.comparePre(other);
      }
      compareMain(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
      }
      comparePre(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        if (this.prerelease.length && !other.prerelease.length) {
          return -1;
        } else if (!this.prerelease.length && other.prerelease.length) {
          return 1;
        } else if (!this.prerelease.length && !other.prerelease.length) {
          return 0;
        }
        let i = 0;
        do {
          const a = this.prerelease[i];
          const b = other.prerelease[i];
          debug("prerelease compare", i, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i);
      }
      compareBuild(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        let i = 0;
        do {
          const a = this.build[i];
          const b = other.build[i];
          debug("prerelease compare", i, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i);
      }
      inc(release, identifier) {
        switch (release) {
          case "premajor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor = 0;
            this.major++;
            this.inc("pre", identifier);
            break;
          case "preminor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor++;
            this.inc("pre", identifier);
            break;
          case "prepatch":
            this.prerelease.length = 0;
            this.inc("patch", identifier);
            this.inc("pre", identifier);
            break;
          case "prerelease":
            if (this.prerelease.length === 0) {
              this.inc("patch", identifier);
            }
            this.inc("pre", identifier);
            break;
          case "major":
            if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
              this.major++;
            }
            this.minor = 0;
            this.patch = 0;
            this.prerelease = [];
            break;
          case "minor":
            if (this.patch !== 0 || this.prerelease.length === 0) {
              this.minor++;
            }
            this.patch = 0;
            this.prerelease = [];
            break;
          case "patch":
            if (this.prerelease.length === 0) {
              this.patch++;
            }
            this.prerelease = [];
            break;
          case "pre":
            if (this.prerelease.length === 0) {
              this.prerelease = [0];
            } else {
              let i = this.prerelease.length;
              while (--i >= 0) {
                if (typeof this.prerelease[i] === "number") {
                  this.prerelease[i]++;
                  i = -2;
                }
              }
              if (i === -1) {
                this.prerelease.push(0);
              }
            }
            if (identifier) {
              if (this.prerelease[0] === identifier) {
                if (isNaN(this.prerelease[1])) {
                  this.prerelease = [identifier, 0];
                }
              } else {
                this.prerelease = [identifier, 0];
              }
            }
            break;
          default:
            throw new Error(`invalid increment argument: ${release}`);
        }
        this.format();
        this.raw = this.version;
        return this;
      }
    };
    module2.exports = SemVer;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/parse.js
var require_parse2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/parse.js"(exports2, module2) {
    var { MAX_LENGTH } = require_constants2();
    var { re, t } = require_re();
    var SemVer = require_semver2();
    var parseOptions = require_parse_options();
    var parse = (version, options) => {
      options = parseOptions(options);
      if (version instanceof SemVer) {
        return version;
      }
      if (typeof version !== "string") {
        return null;
      }
      if (version.length > MAX_LENGTH) {
        return null;
      }
      const r = options.loose ? re[t.LOOSE] : re[t.FULL];
      if (!r.test(version)) {
        return null;
      }
      try {
        return new SemVer(version, options);
      } catch (er) {
        return null;
      }
    };
    module2.exports = parse;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/valid.js
var require_valid = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/valid.js"(exports2, module2) {
    var parse = require_parse2();
    var valid = (version, options) => {
      const v = parse(version, options);
      return v ? v.version : null;
    };
    module2.exports = valid;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/clean.js
var require_clean = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/clean.js"(exports2, module2) {
    var parse = require_parse2();
    var clean = (version, options) => {
      const s = parse(version.trim().replace(/^[=v]+/, ""), options);
      return s ? s.version : null;
    };
    module2.exports = clean;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/inc.js
var require_inc = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/inc.js"(exports2, module2) {
    var SemVer = require_semver2();
    var inc = (version, release, options, identifier) => {
      if (typeof options === "string") {
        identifier = options;
        options = void 0;
      }
      try {
        return new SemVer(version, options).inc(release, identifier).version;
      } catch (er) {
        return null;
      }
    };
    module2.exports = inc;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/compare.js
var require_compare = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/compare.js"(exports2, module2) {
    var SemVer = require_semver2();
    var compare = (a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose));
    module2.exports = compare;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/eq.js
var require_eq = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/eq.js"(exports2, module2) {
    var compare = require_compare();
    var eq = (a, b, loose) => compare(a, b, loose) === 0;
    module2.exports = eq;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/diff.js
var require_diff = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/diff.js"(exports2, module2) {
    var parse = require_parse2();
    var eq = require_eq();
    var diff = (version1, version2) => {
      if (eq(version1, version2)) {
        return null;
      } else {
        const v1 = parse(version1);
        const v2 = parse(version2);
        const hasPre = v1.prerelease.length || v2.prerelease.length;
        const prefix = hasPre ? "pre" : "";
        const defaultResult = hasPre ? "prerelease" : "";
        for (const key in v1) {
          if (key === "major" || key === "minor" || key === "patch") {
            if (v1[key] !== v2[key]) {
              return prefix + key;
            }
          }
        }
        return defaultResult;
      }
    };
    module2.exports = diff;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/major.js
var require_major = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/major.js"(exports2, module2) {
    var SemVer = require_semver2();
    var major = (a, loose) => new SemVer(a, loose).major;
    module2.exports = major;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/minor.js
var require_minor = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/minor.js"(exports2, module2) {
    var SemVer = require_semver2();
    var minor = (a, loose) => new SemVer(a, loose).minor;
    module2.exports = minor;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/patch.js
var require_patch = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/patch.js"(exports2, module2) {
    var SemVer = require_semver2();
    var patch = (a, loose) => new SemVer(a, loose).patch;
    module2.exports = patch;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/prerelease.js
var require_prerelease = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/prerelease.js"(exports2, module2) {
    var parse = require_parse2();
    var prerelease = (version, options) => {
      const parsed = parse(version, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    };
    module2.exports = prerelease;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/rcompare.js
var require_rcompare = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/rcompare.js"(exports2, module2) {
    var compare = require_compare();
    var rcompare = (a, b, loose) => compare(b, a, loose);
    module2.exports = rcompare;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/compare-loose.js
var require_compare_loose = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/compare-loose.js"(exports2, module2) {
    var compare = require_compare();
    var compareLoose = (a, b) => compare(a, b, true);
    module2.exports = compareLoose;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/compare-build.js
var require_compare_build = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/compare-build.js"(exports2, module2) {
    var SemVer = require_semver2();
    var compareBuild = (a, b, loose) => {
      const versionA = new SemVer(a, loose);
      const versionB = new SemVer(b, loose);
      return versionA.compare(versionB) || versionA.compareBuild(versionB);
    };
    module2.exports = compareBuild;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/sort.js
var require_sort = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/sort.js"(exports2, module2) {
    var compareBuild = require_compare_build();
    var sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose));
    module2.exports = sort;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/rsort.js
var require_rsort = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/rsort.js"(exports2, module2) {
    var compareBuild = require_compare_build();
    var rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));
    module2.exports = rsort;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/gt.js
var require_gt = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/gt.js"(exports2, module2) {
    var compare = require_compare();
    var gt = (a, b, loose) => compare(a, b, loose) > 0;
    module2.exports = gt;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/lt.js
var require_lt = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/lt.js"(exports2, module2) {
    var compare = require_compare();
    var lt = (a, b, loose) => compare(a, b, loose) < 0;
    module2.exports = lt;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/neq.js
var require_neq = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/neq.js"(exports2, module2) {
    var compare = require_compare();
    var neq = (a, b, loose) => compare(a, b, loose) !== 0;
    module2.exports = neq;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/gte.js
var require_gte = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/gte.js"(exports2, module2) {
    var compare = require_compare();
    var gte = (a, b, loose) => compare(a, b, loose) >= 0;
    module2.exports = gte;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/lte.js
var require_lte = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/lte.js"(exports2, module2) {
    var compare = require_compare();
    var lte = (a, b, loose) => compare(a, b, loose) <= 0;
    module2.exports = lte;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/cmp.js
var require_cmp = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/cmp.js"(exports2, module2) {
    var eq = require_eq();
    var neq = require_neq();
    var gt = require_gt();
    var gte = require_gte();
    var lt = require_lt();
    var lte = require_lte();
    var cmp = (a, op, b, loose) => {
      switch (op) {
        case "===":
          if (typeof a === "object")
            a = a.version;
          if (typeof b === "object")
            b = b.version;
          return a === b;
        case "!==":
          if (typeof a === "object")
            a = a.version;
          if (typeof b === "object")
            b = b.version;
          return a !== b;
        case "":
        case "=":
        case "==":
          return eq(a, b, loose);
        case "!=":
          return neq(a, b, loose);
        case ">":
          return gt(a, b, loose);
        case ">=":
          return gte(a, b, loose);
        case "<":
          return lt(a, b, loose);
        case "<=":
          return lte(a, b, loose);
        default:
          throw new TypeError(`Invalid operator: ${op}`);
      }
    };
    module2.exports = cmp;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/coerce.js
var require_coerce = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/coerce.js"(exports2, module2) {
    var SemVer = require_semver2();
    var parse = require_parse2();
    var { re, t } = require_re();
    var coerce = (version, options) => {
      if (version instanceof SemVer) {
        return version;
      }
      if (typeof version === "number") {
        version = String(version);
      }
      if (typeof version !== "string") {
        return null;
      }
      options = options || {};
      let match = null;
      if (!options.rtl) {
        match = version.match(re[t.COERCE]);
      } else {
        let next;
        while ((next = re[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length)) {
          if (!match || next.index + next[0].length !== match.index + match[0].length) {
            match = next;
          }
          re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
        }
        re[t.COERCERTL].lastIndex = -1;
      }
      if (match === null)
        return null;
      return parse(`${match[2]}.${match[3] || "0"}.${match[4] || "0"}`, options);
    };
    module2.exports = coerce;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/yallist/iterator.js
var require_iterator = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/yallist/iterator.js"(exports2, module2) {
    "use strict";
    module2.exports = function(Yallist) {
      Yallist.prototype[Symbol.iterator] = function* () {
        for (let walker = this.head; walker; walker = walker.next) {
          yield walker.value;
        }
      };
    };
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/yallist/yallist.js
var require_yallist = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/yallist/yallist.js"(exports2, module2) {
    "use strict";
    module2.exports = Yallist;
    Yallist.Node = Node;
    Yallist.create = Yallist;
    function Yallist(list) {
      var self = this;
      if (!(self instanceof Yallist)) {
        self = new Yallist();
      }
      self.tail = null;
      self.head = null;
      self.length = 0;
      if (list && typeof list.forEach === "function") {
        list.forEach(function(item) {
          self.push(item);
        });
      } else if (arguments.length > 0) {
        for (var i = 0, l = arguments.length; i < l; i++) {
          self.push(arguments[i]);
        }
      }
      return self;
    }
    Yallist.prototype.removeNode = function(node) {
      if (node.list !== this) {
        throw new Error("removing node which does not belong to this list");
      }
      var next = node.next;
      var prev = node.prev;
      if (next) {
        next.prev = prev;
      }
      if (prev) {
        prev.next = next;
      }
      if (node === this.head) {
        this.head = next;
      }
      if (node === this.tail) {
        this.tail = prev;
      }
      node.list.length--;
      node.next = null;
      node.prev = null;
      node.list = null;
      return next;
    };
    Yallist.prototype.unshiftNode = function(node) {
      if (node === this.head) {
        return;
      }
      if (node.list) {
        node.list.removeNode(node);
      }
      var head = this.head;
      node.list = this;
      node.next = head;
      if (head) {
        head.prev = node;
      }
      this.head = node;
      if (!this.tail) {
        this.tail = node;
      }
      this.length++;
    };
    Yallist.prototype.pushNode = function(node) {
      if (node === this.tail) {
        return;
      }
      if (node.list) {
        node.list.removeNode(node);
      }
      var tail = this.tail;
      node.list = this;
      node.prev = tail;
      if (tail) {
        tail.next = node;
      }
      this.tail = node;
      if (!this.head) {
        this.head = node;
      }
      this.length++;
    };
    Yallist.prototype.push = function() {
      for (var i = 0, l = arguments.length; i < l; i++) {
        push(this, arguments[i]);
      }
      return this.length;
    };
    Yallist.prototype.unshift = function() {
      for (var i = 0, l = arguments.length; i < l; i++) {
        unshift(this, arguments[i]);
      }
      return this.length;
    };
    Yallist.prototype.pop = function() {
      if (!this.tail) {
        return void 0;
      }
      var res = this.tail.value;
      this.tail = this.tail.prev;
      if (this.tail) {
        this.tail.next = null;
      } else {
        this.head = null;
      }
      this.length--;
      return res;
    };
    Yallist.prototype.shift = function() {
      if (!this.head) {
        return void 0;
      }
      var res = this.head.value;
      this.head = this.head.next;
      if (this.head) {
        this.head.prev = null;
      } else {
        this.tail = null;
      }
      this.length--;
      return res;
    };
    Yallist.prototype.forEach = function(fn, thisp) {
      thisp = thisp || this;
      for (var walker = this.head, i = 0; walker !== null; i++) {
        fn.call(thisp, walker.value, i, this);
        walker = walker.next;
      }
    };
    Yallist.prototype.forEachReverse = function(fn, thisp) {
      thisp = thisp || this;
      for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
        fn.call(thisp, walker.value, i, this);
        walker = walker.prev;
      }
    };
    Yallist.prototype.get = function(n) {
      for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
        walker = walker.next;
      }
      if (i === n && walker !== null) {
        return walker.value;
      }
    };
    Yallist.prototype.getReverse = function(n) {
      for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
        walker = walker.prev;
      }
      if (i === n && walker !== null) {
        return walker.value;
      }
    };
    Yallist.prototype.map = function(fn, thisp) {
      thisp = thisp || this;
      var res = new Yallist();
      for (var walker = this.head; walker !== null; ) {
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.next;
      }
      return res;
    };
    Yallist.prototype.mapReverse = function(fn, thisp) {
      thisp = thisp || this;
      var res = new Yallist();
      for (var walker = this.tail; walker !== null; ) {
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.prev;
      }
      return res;
    };
    Yallist.prototype.reduce = function(fn, initial) {
      var acc;
      var walker = this.head;
      if (arguments.length > 1) {
        acc = initial;
      } else if (this.head) {
        walker = this.head.next;
        acc = this.head.value;
      } else {
        throw new TypeError("Reduce of empty list with no initial value");
      }
      for (var i = 0; walker !== null; i++) {
        acc = fn(acc, walker.value, i);
        walker = walker.next;
      }
      return acc;
    };
    Yallist.prototype.reduceReverse = function(fn, initial) {
      var acc;
      var walker = this.tail;
      if (arguments.length > 1) {
        acc = initial;
      } else if (this.tail) {
        walker = this.tail.prev;
        acc = this.tail.value;
      } else {
        throw new TypeError("Reduce of empty list with no initial value");
      }
      for (var i = this.length - 1; walker !== null; i--) {
        acc = fn(acc, walker.value, i);
        walker = walker.prev;
      }
      return acc;
    };
    Yallist.prototype.toArray = function() {
      var arr = new Array(this.length);
      for (var i = 0, walker = this.head; walker !== null; i++) {
        arr[i] = walker.value;
        walker = walker.next;
      }
      return arr;
    };
    Yallist.prototype.toArrayReverse = function() {
      var arr = new Array(this.length);
      for (var i = 0, walker = this.tail; walker !== null; i++) {
        arr[i] = walker.value;
        walker = walker.prev;
      }
      return arr;
    };
    Yallist.prototype.slice = function(from, to) {
      to = to || this.length;
      if (to < 0) {
        to += this.length;
      }
      from = from || 0;
      if (from < 0) {
        from += this.length;
      }
      var ret = new Yallist();
      if (to < from || to < 0) {
        return ret;
      }
      if (from < 0) {
        from = 0;
      }
      if (to > this.length) {
        to = this.length;
      }
      for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
        walker = walker.next;
      }
      for (; walker !== null && i < to; i++, walker = walker.next) {
        ret.push(walker.value);
      }
      return ret;
    };
    Yallist.prototype.sliceReverse = function(from, to) {
      to = to || this.length;
      if (to < 0) {
        to += this.length;
      }
      from = from || 0;
      if (from < 0) {
        from += this.length;
      }
      var ret = new Yallist();
      if (to < from || to < 0) {
        return ret;
      }
      if (from < 0) {
        from = 0;
      }
      if (to > this.length) {
        to = this.length;
      }
      for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
        walker = walker.prev;
      }
      for (; walker !== null && i > from; i--, walker = walker.prev) {
        ret.push(walker.value);
      }
      return ret;
    };
    Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
      if (start > this.length) {
        start = this.length - 1;
      }
      if (start < 0) {
        start = this.length + start;
      }
      for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
        walker = walker.next;
      }
      var ret = [];
      for (var i = 0; walker && i < deleteCount; i++) {
        ret.push(walker.value);
        walker = this.removeNode(walker);
      }
      if (walker === null) {
        walker = this.tail;
      }
      if (walker !== this.head && walker !== this.tail) {
        walker = walker.prev;
      }
      for (var i = 0; i < nodes.length; i++) {
        walker = insert(this, walker, nodes[i]);
      }
      return ret;
    };
    Yallist.prototype.reverse = function() {
      var head = this.head;
      var tail = this.tail;
      for (var walker = head; walker !== null; walker = walker.prev) {
        var p = walker.prev;
        walker.prev = walker.next;
        walker.next = p;
      }
      this.head = tail;
      this.tail = head;
      return this;
    };
    function insert(self, node, value) {
      var inserted = node === self.head ? new Node(value, null, node, self) : new Node(value, node, node.next, self);
      if (inserted.next === null) {
        self.tail = inserted;
      }
      if (inserted.prev === null) {
        self.head = inserted;
      }
      self.length++;
      return inserted;
    }
    function push(self, item) {
      self.tail = new Node(item, self.tail, null, self);
      if (!self.head) {
        self.head = self.tail;
      }
      self.length++;
    }
    function unshift(self, item) {
      self.head = new Node(item, null, self.head, self);
      if (!self.tail) {
        self.tail = self.head;
      }
      self.length++;
    }
    function Node(value, prev, next, list) {
      if (!(this instanceof Node)) {
        return new Node(value, prev, next, list);
      }
      this.list = list;
      this.value = value;
      if (prev) {
        prev.next = this;
        this.prev = prev;
      } else {
        this.prev = null;
      }
      if (next) {
        next.prev = this;
        this.next = next;
      } else {
        this.next = null;
      }
    }
    try {
      require_iterator()(Yallist);
    } catch (er) {
    }
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/lru-cache/index.js
var require_lru_cache = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/lru-cache/index.js"(exports2, module2) {
    "use strict";
    var Yallist = require_yallist();
    var MAX = Symbol("max");
    var LENGTH = Symbol("length");
    var LENGTH_CALCULATOR = Symbol("lengthCalculator");
    var ALLOW_STALE = Symbol("allowStale");
    var MAX_AGE = Symbol("maxAge");
    var DISPOSE = Symbol("dispose");
    var NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
    var LRU_LIST = Symbol("lruList");
    var CACHE = Symbol("cache");
    var UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
    var naiveLength = () => 1;
    var LRUCache = class {
      constructor(options) {
        if (typeof options === "number")
          options = { max: options };
        if (!options)
          options = {};
        if (options.max && (typeof options.max !== "number" || options.max < 0))
          throw new TypeError("max must be a non-negative number");
        const max = this[MAX] = options.max || Infinity;
        const lc = options.length || naiveLength;
        this[LENGTH_CALCULATOR] = typeof lc !== "function" ? naiveLength : lc;
        this[ALLOW_STALE] = options.stale || false;
        if (options.maxAge && typeof options.maxAge !== "number")
          throw new TypeError("maxAge must be a number");
        this[MAX_AGE] = options.maxAge || 0;
        this[DISPOSE] = options.dispose;
        this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
        this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
        this.reset();
      }
      set max(mL) {
        if (typeof mL !== "number" || mL < 0)
          throw new TypeError("max must be a non-negative number");
        this[MAX] = mL || Infinity;
        trim(this);
      }
      get max() {
        return this[MAX];
      }
      set allowStale(allowStale) {
        this[ALLOW_STALE] = !!allowStale;
      }
      get allowStale() {
        return this[ALLOW_STALE];
      }
      set maxAge(mA) {
        if (typeof mA !== "number")
          throw new TypeError("maxAge must be a non-negative number");
        this[MAX_AGE] = mA;
        trim(this);
      }
      get maxAge() {
        return this[MAX_AGE];
      }
      set lengthCalculator(lC) {
        if (typeof lC !== "function")
          lC = naiveLength;
        if (lC !== this[LENGTH_CALCULATOR]) {
          this[LENGTH_CALCULATOR] = lC;
          this[LENGTH] = 0;
          this[LRU_LIST].forEach((hit) => {
            hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
            this[LENGTH] += hit.length;
          });
        }
        trim(this);
      }
      get lengthCalculator() {
        return this[LENGTH_CALCULATOR];
      }
      get length() {
        return this[LENGTH];
      }
      get itemCount() {
        return this[LRU_LIST].length;
      }
      rforEach(fn, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].tail; walker !== null; ) {
          const prev = walker.prev;
          forEachStep(this, fn, walker, thisp);
          walker = prev;
        }
      }
      forEach(fn, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].head; walker !== null; ) {
          const next = walker.next;
          forEachStep(this, fn, walker, thisp);
          walker = next;
        }
      }
      keys() {
        return this[LRU_LIST].toArray().map((k) => k.key);
      }
      values() {
        return this[LRU_LIST].toArray().map((k) => k.value);
      }
      reset() {
        if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
          this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value));
        }
        this[CACHE] = new Map();
        this[LRU_LIST] = new Yallist();
        this[LENGTH] = 0;
      }
      dump() {
        return this[LRU_LIST].map((hit) => isStale(this, hit) ? false : {
          k: hit.key,
          v: hit.value,
          e: hit.now + (hit.maxAge || 0)
        }).toArray().filter((h) => h);
      }
      dumpLru() {
        return this[LRU_LIST];
      }
      set(key, value, maxAge) {
        maxAge = maxAge || this[MAX_AGE];
        if (maxAge && typeof maxAge !== "number")
          throw new TypeError("maxAge must be a number");
        const now = maxAge ? Date.now() : 0;
        const len = this[LENGTH_CALCULATOR](value, key);
        if (this[CACHE].has(key)) {
          if (len > this[MAX]) {
            del(this, this[CACHE].get(key));
            return false;
          }
          const node = this[CACHE].get(key);
          const item = node.value;
          if (this[DISPOSE]) {
            if (!this[NO_DISPOSE_ON_SET])
              this[DISPOSE](key, item.value);
          }
          item.now = now;
          item.maxAge = maxAge;
          item.value = value;
          this[LENGTH] += len - item.length;
          item.length = len;
          this.get(key);
          trim(this);
          return true;
        }
        const hit = new Entry(key, value, len, now, maxAge);
        if (hit.length > this[MAX]) {
          if (this[DISPOSE])
            this[DISPOSE](key, value);
          return false;
        }
        this[LENGTH] += hit.length;
        this[LRU_LIST].unshift(hit);
        this[CACHE].set(key, this[LRU_LIST].head);
        trim(this);
        return true;
      }
      has(key) {
        if (!this[CACHE].has(key))
          return false;
        const hit = this[CACHE].get(key).value;
        return !isStale(this, hit);
      }
      get(key) {
        return get(this, key, true);
      }
      peek(key) {
        return get(this, key, false);
      }
      pop() {
        const node = this[LRU_LIST].tail;
        if (!node)
          return null;
        del(this, node);
        return node.value;
      }
      del(key) {
        del(this, this[CACHE].get(key));
      }
      load(arr) {
        this.reset();
        const now = Date.now();
        for (let l = arr.length - 1; l >= 0; l--) {
          const hit = arr[l];
          const expiresAt = hit.e || 0;
          if (expiresAt === 0)
            this.set(hit.k, hit.v);
          else {
            const maxAge = expiresAt - now;
            if (maxAge > 0) {
              this.set(hit.k, hit.v, maxAge);
            }
          }
        }
      }
      prune() {
        this[CACHE].forEach((value, key) => get(this, key, false));
      }
    };
    var get = (self, key, doUse) => {
      const node = self[CACHE].get(key);
      if (node) {
        const hit = node.value;
        if (isStale(self, hit)) {
          del(self, node);
          if (!self[ALLOW_STALE])
            return void 0;
        } else {
          if (doUse) {
            if (self[UPDATE_AGE_ON_GET])
              node.value.now = Date.now();
            self[LRU_LIST].unshiftNode(node);
          }
        }
        return hit.value;
      }
    };
    var isStale = (self, hit) => {
      if (!hit || !hit.maxAge && !self[MAX_AGE])
        return false;
      const diff = Date.now() - hit.now;
      return hit.maxAge ? diff > hit.maxAge : self[MAX_AGE] && diff > self[MAX_AGE];
    };
    var trim = (self) => {
      if (self[LENGTH] > self[MAX]) {
        for (let walker = self[LRU_LIST].tail; self[LENGTH] > self[MAX] && walker !== null; ) {
          const prev = walker.prev;
          del(self, walker);
          walker = prev;
        }
      }
    };
    var del = (self, node) => {
      if (node) {
        const hit = node.value;
        if (self[DISPOSE])
          self[DISPOSE](hit.key, hit.value);
        self[LENGTH] -= hit.length;
        self[CACHE].delete(hit.key);
        self[LRU_LIST].removeNode(node);
      }
    };
    var Entry = class {
      constructor(key, value, length, now, maxAge) {
        this.key = key;
        this.value = value;
        this.length = length;
        this.now = now;
        this.maxAge = maxAge || 0;
      }
    };
    var forEachStep = (self, fn, node, thisp) => {
      let hit = node.value;
      if (isStale(self, hit)) {
        del(self, node);
        if (!self[ALLOW_STALE])
          hit = void 0;
      }
      if (hit)
        fn.call(thisp, hit.value, hit.key, self);
    };
    module2.exports = LRUCache;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/classes/range.js
var require_range = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/classes/range.js"(exports2, module2) {
    var Range = class {
      constructor(range, options) {
        options = parseOptions(options);
        if (range instanceof Range) {
          if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
            return range;
          } else {
            return new Range(range.raw, options);
          }
        }
        if (range instanceof Comparator) {
          this.raw = range.value;
          this.set = [[range]];
          this.format();
          return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        this.raw = range;
        this.set = range.split(/\s*\|\|\s*/).map((range2) => this.parseRange(range2.trim())).filter((c) => c.length);
        if (!this.set.length) {
          throw new TypeError(`Invalid SemVer Range: ${range}`);
        }
        if (this.set.length > 1) {
          const first = this.set[0];
          this.set = this.set.filter((c) => !isNullSet(c[0]));
          if (this.set.length === 0)
            this.set = [first];
          else if (this.set.length > 1) {
            for (const c of this.set) {
              if (c.length === 1 && isAny(c[0])) {
                this.set = [c];
                break;
              }
            }
          }
        }
        this.format();
      }
      format() {
        this.range = this.set.map((comps) => {
          return comps.join(" ").trim();
        }).join("||").trim();
        return this.range;
      }
      toString() {
        return this.range;
      }
      parseRange(range) {
        range = range.trim();
        const memoOpts = Object.keys(this.options).join(",");
        const memoKey = `parseRange:${memoOpts}:${range}`;
        const cached = cache.get(memoKey);
        if (cached)
          return cached;
        const loose = this.options.loose;
        const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
        range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
        debug("hyphen replace", range);
        range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
        debug("comparator trim", range, re[t.COMPARATORTRIM]);
        range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
        range = range.replace(re[t.CARETTRIM], caretTrimReplace);
        range = range.split(/\s+/).join(" ");
        const compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
        const rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options)).filter(this.options.loose ? (comp) => !!comp.match(compRe) : () => true).map((comp) => new Comparator(comp, this.options));
        const l = rangeList.length;
        const rangeMap = new Map();
        for (const comp of rangeList) {
          if (isNullSet(comp))
            return [comp];
          rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has(""))
          rangeMap.delete("");
        const result = [...rangeMap.values()];
        cache.set(memoKey, result);
        return result;
      }
      intersects(range, options) {
        if (!(range instanceof Range)) {
          throw new TypeError("a Range is required");
        }
        return this.set.some((thisComparators) => {
          return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => {
            return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options);
              });
            });
          });
        });
      }
      test(version) {
        if (!version) {
          return false;
        }
        if (typeof version === "string") {
          try {
            version = new SemVer(version, this.options);
          } catch (er) {
            return false;
          }
        }
        for (let i = 0; i < this.set.length; i++) {
          if (testSet(this.set[i], version, this.options)) {
            return true;
          }
        }
        return false;
      }
    };
    module2.exports = Range;
    var LRU = require_lru_cache();
    var cache = new LRU({ max: 1e3 });
    var parseOptions = require_parse_options();
    var Comparator = require_comparator();
    var debug = require_debug();
    var SemVer = require_semver2();
    var {
      re,
      t,
      comparatorTrimReplace,
      tildeTrimReplace,
      caretTrimReplace
    } = require_re();
    var isNullSet = (c) => c.value === "<0.0.0-0";
    var isAny = (c) => c.value === "";
    var isSatisfiable = (comparators, options) => {
      let result = true;
      const remainingComparators = comparators.slice();
      let testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every((otherComparator) => {
          return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    };
    var parseComparator = (comp, options) => {
      debug("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug("caret", comp);
      comp = replaceTildes(comp, options);
      debug("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug("xrange", comp);
      comp = replaceStars(comp, options);
      debug("stars", comp);
      return comp;
    };
    var isX = (id) => !id || id.toLowerCase() === "x" || id === "*";
    var replaceTildes = (comp, options) => comp.trim().split(/\s+/).map((comp2) => {
      return replaceTilde(comp2, options);
    }).join(" ");
    var replaceTilde = (comp, options) => {
      const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
      return comp.replace(r, (_, M, m, p, pr) => {
        debug("tilde", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
        } else if (pr) {
          debug("replaceTilde pr", pr);
          ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
        } else {
          ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
        }
        debug("tilde return", ret);
        return ret;
      });
    };
    var replaceCarets = (comp, options) => comp.trim().split(/\s+/).map((comp2) => {
      return replaceCaret(comp2, options);
    }).join(" ");
    var replaceCaret = (comp, options) => {
      debug("caret", comp, options);
      const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
      const z = options.includePrerelease ? "-0" : "";
      return comp.replace(r, (_, M, m, p, pr) => {
        debug("caret", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          if (M === "0") {
            ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
          } else {
            ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
          }
        } else if (pr) {
          debug("replaceCaret pr", pr);
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
          }
        } else {
          debug("no pr");
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
          }
        }
        debug("caret return", ret);
        return ret;
      });
    };
    var replaceXRanges = (comp, options) => {
      debug("replaceXRanges", comp, options);
      return comp.split(/\s+/).map((comp2) => {
        return replaceXRange(comp2, options);
      }).join(" ");
    };
    var replaceXRange = (comp, options) => {
      comp = comp.trim();
      const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
      return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
        debug("xRange", comp, ret, gtlt, M, m, p, pr);
        const xM = isX(M);
        const xm = xM || isX(m);
        const xp = xm || isX(p);
        const anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }
          if (gtlt === "<")
            pr = "-0";
          ret = `${gtlt + M}.${m}.${p}${pr}`;
        } else if (xm) {
          ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
        } else if (xp) {
          ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
        }
        debug("xRange return", ret);
        return ret;
      });
    };
    var replaceStars = (comp, options) => {
      debug("replaceStars", comp, options);
      return comp.trim().replace(re[t.STAR], "");
    };
    var replaceGTE0 = (comp, options) => {
      debug("replaceGTE0", comp, options);
      return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], "");
    };
    var hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) => {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
      } else if (isX(fp)) {
        from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
      } else if (fpr) {
        from = `>=${from}`;
      } else {
        from = `>=${from}${incPr ? "-0" : ""}`;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = `<${+tM + 1}.0.0-0`;
      } else if (isX(tp)) {
        to = `<${tM}.${+tm + 1}.0-0`;
      } else if (tpr) {
        to = `<=${tM}.${tm}.${tp}-${tpr}`;
      } else if (incPr) {
        to = `<${tM}.${tm}.${+tp + 1}-0`;
      } else {
        to = `<=${to}`;
      }
      return `${from} ${to}`.trim();
    };
    var testSet = (set, version, options) => {
      for (let i = 0; i < set.length; i++) {
        if (!set[i].test(version)) {
          return false;
        }
      }
      if (version.prerelease.length && !options.includePrerelease) {
        for (let i = 0; i < set.length; i++) {
          debug(set[i].semver);
          if (set[i].semver === Comparator.ANY) {
            continue;
          }
          if (set[i].semver.prerelease.length > 0) {
            const allowed = set[i].semver;
            if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    };
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/classes/comparator.js
var require_comparator = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/classes/comparator.js"(exports2, module2) {
    var ANY = Symbol("SemVer ANY");
    var Comparator = class {
      static get ANY() {
        return ANY;
      }
      constructor(comp, options) {
        options = parseOptions(options);
        if (comp instanceof Comparator) {
          if (comp.loose === !!options.loose) {
            return comp;
          } else {
            comp = comp.value;
          }
        }
        debug("comparator", comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);
        if (this.semver === ANY) {
          this.value = "";
        } else {
          this.value = this.operator + this.semver.version;
        }
        debug("comp", this);
      }
      parse(comp) {
        const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
        const m = comp.match(r);
        if (!m) {
          throw new TypeError(`Invalid comparator: ${comp}`);
        }
        this.operator = m[1] !== void 0 ? m[1] : "";
        if (this.operator === "=") {
          this.operator = "";
        }
        if (!m[2]) {
          this.semver = ANY;
        } else {
          this.semver = new SemVer(m[2], this.options.loose);
        }
      }
      toString() {
        return this.value;
      }
      test(version) {
        debug("Comparator.test", version, this.options.loose);
        if (this.semver === ANY || version === ANY) {
          return true;
        }
        if (typeof version === "string") {
          try {
            version = new SemVer(version, this.options);
          } catch (er) {
            return false;
          }
        }
        return cmp(version, this.operator, this.semver, this.options);
      }
      intersects(comp, options) {
        if (!(comp instanceof Comparator)) {
          throw new TypeError("a Comparator is required");
        }
        if (!options || typeof options !== "object") {
          options = {
            loose: !!options,
            includePrerelease: false
          };
        }
        if (this.operator === "") {
          if (this.value === "") {
            return true;
          }
          return new Range(comp.value, options).test(this.value);
        } else if (comp.operator === "") {
          if (comp.value === "") {
            return true;
          }
          return new Range(this.value, options).test(comp.semver);
        }
        const sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">");
        const sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<");
        const sameSemVer = this.semver.version === comp.semver.version;
        const differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<=");
        const oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && (this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<");
        const oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && (this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">");
        return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
      }
    };
    module2.exports = Comparator;
    var parseOptions = require_parse_options();
    var { re, t } = require_re();
    var cmp = require_cmp();
    var debug = require_debug();
    var SemVer = require_semver2();
    var Range = require_range();
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/satisfies.js
var require_satisfies = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/functions/satisfies.js"(exports2, module2) {
    var Range = require_range();
    var satisfies = (version, range, options) => {
      try {
        range = new Range(range, options);
      } catch (er) {
        return false;
      }
      return range.test(version);
    };
    module2.exports = satisfies;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/ranges/to-comparators.js
var require_to_comparators = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/ranges/to-comparators.js"(exports2, module2) {
    var Range = require_range();
    var toComparators = (range, options) => new Range(range, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
    module2.exports = toComparators;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/ranges/max-satisfying.js
var require_max_satisfying = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/ranges/max-satisfying.js"(exports2, module2) {
    var SemVer = require_semver2();
    var Range = require_range();
    var maxSatisfying = (versions, range, options) => {
      let max = null;
      let maxSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach((v) => {
        if (rangeObj.test(v)) {
          if (!max || maxSV.compare(v) === -1) {
            max = v;
            maxSV = new SemVer(max, options);
          }
        }
      });
      return max;
    };
    module2.exports = maxSatisfying;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/ranges/min-satisfying.js
var require_min_satisfying = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/ranges/min-satisfying.js"(exports2, module2) {
    var SemVer = require_semver2();
    var Range = require_range();
    var minSatisfying = (versions, range, options) => {
      let min = null;
      let minSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach((v) => {
        if (rangeObj.test(v)) {
          if (!min || minSV.compare(v) === 1) {
            min = v;
            minSV = new SemVer(min, options);
          }
        }
      });
      return min;
    };
    module2.exports = minSatisfying;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/ranges/min-version.js
var require_min_version = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/ranges/min-version.js"(exports2, module2) {
    var SemVer = require_semver2();
    var Range = require_range();
    var gt = require_gt();
    var minVersion = (range, loose) => {
      range = new Range(range, loose);
      let minver = new SemVer("0.0.0");
      if (range.test(minver)) {
        return minver;
      }
      minver = new SemVer("0.0.0-0");
      if (range.test(minver)) {
        return minver;
      }
      minver = null;
      for (let i = 0; i < range.set.length; ++i) {
        const comparators = range.set[i];
        let setMin = null;
        comparators.forEach((comparator) => {
          const compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case ">":
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
            case "":
            case ">=":
              if (!setMin || gt(compver, setMin)) {
                setMin = compver;
              }
              break;
            case "<":
            case "<=":
              break;
            default:
              throw new Error(`Unexpected operation: ${comparator.operator}`);
          }
        });
        if (setMin && (!minver || gt(minver, setMin)))
          minver = setMin;
      }
      if (minver && range.test(minver)) {
        return minver;
      }
      return null;
    };
    module2.exports = minVersion;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/ranges/valid.js
var require_valid2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/ranges/valid.js"(exports2, module2) {
    var Range = require_range();
    var validRange = (range, options) => {
      try {
        return new Range(range, options).range || "*";
      } catch (er) {
        return null;
      }
    };
    module2.exports = validRange;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/ranges/outside.js
var require_outside = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/ranges/outside.js"(exports2, module2) {
    var SemVer = require_semver2();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var Range = require_range();
    var satisfies = require_satisfies();
    var gt = require_gt();
    var lt = require_lt();
    var lte = require_lte();
    var gte = require_gte();
    var outside = (version, range, hilo, options) => {
      version = new SemVer(version, options);
      range = new Range(range, options);
      let gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case ">":
          gtfn = gt;
          ltefn = lte;
          ltfn = lt;
          comp = ">";
          ecomp = ">=";
          break;
        case "<":
          gtfn = lt;
          ltefn = gte;
          ltfn = gt;
          comp = "<";
          ecomp = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies(version, range, options)) {
        return false;
      }
      for (let i = 0; i < range.set.length; ++i) {
        const comparators = range.set[i];
        let high = null;
        let low = null;
        comparators.forEach((comparator) => {
          if (comparator.semver === ANY) {
            comparator = new Comparator(">=0.0.0");
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        });
        if (high.operator === comp || high.operator === ecomp) {
          return false;
        }
        if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version, low.semver)) {
          return false;
        }
      }
      return true;
    };
    module2.exports = outside;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/ranges/gtr.js
var require_gtr = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/ranges/gtr.js"(exports2, module2) {
    var outside = require_outside();
    var gtr = (version, range, options) => outside(version, range, ">", options);
    module2.exports = gtr;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/ranges/ltr.js
var require_ltr = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/ranges/ltr.js"(exports2, module2) {
    var outside = require_outside();
    var ltr = (version, range, options) => outside(version, range, "<", options);
    module2.exports = ltr;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/ranges/intersects.js
var require_intersects = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/ranges/intersects.js"(exports2, module2) {
    var Range = require_range();
    var intersects = (r1, r2, options) => {
      r1 = new Range(r1, options);
      r2 = new Range(r2, options);
      return r1.intersects(r2);
    };
    module2.exports = intersects;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/ranges/simplify.js
var require_simplify = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/ranges/simplify.js"(exports2, module2) {
    var satisfies = require_satisfies();
    var compare = require_compare();
    module2.exports = (versions, range, options) => {
      const set = [];
      let min = null;
      let prev = null;
      const v = versions.sort((a, b) => compare(a, b, options));
      for (const version of v) {
        const included = satisfies(version, range, options);
        if (included) {
          prev = version;
          if (!min)
            min = version;
        } else {
          if (prev) {
            set.push([min, prev]);
          }
          prev = null;
          min = null;
        }
      }
      if (min)
        set.push([min, null]);
      const ranges = [];
      for (const [min2, max] of set) {
        if (min2 === max)
          ranges.push(min2);
        else if (!max && min2 === v[0])
          ranges.push("*");
        else if (!max)
          ranges.push(`>=${min2}`);
        else if (min2 === v[0])
          ranges.push(`<=${max}`);
        else
          ranges.push(`${min2} - ${max}`);
      }
      const simplified = ranges.join(" || ");
      const original = typeof range.raw === "string" ? range.raw : String(range);
      return simplified.length < original.length ? simplified : range;
    };
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/ranges/subset.js
var require_subset = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/ranges/subset.js"(exports2, module2) {
    var Range = require_range();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var satisfies = require_satisfies();
    var compare = require_compare();
    var subset = (sub, dom, options = {}) => {
      if (sub === dom)
        return true;
      sub = new Range(sub, options);
      dom = new Range(dom, options);
      let sawNonNull = false;
      OUTER:
        for (const simpleSub of sub.set) {
          for (const simpleDom of dom.set) {
            const isSub = simpleSubset(simpleSub, simpleDom, options);
            sawNonNull = sawNonNull || isSub !== null;
            if (isSub)
              continue OUTER;
          }
          if (sawNonNull)
            return false;
        }
      return true;
    };
    var simpleSubset = (sub, dom, options) => {
      if (sub === dom)
        return true;
      if (sub.length === 1 && sub[0].semver === ANY) {
        if (dom.length === 1 && dom[0].semver === ANY)
          return true;
        else if (options.includePrerelease)
          sub = [new Comparator(">=0.0.0-0")];
        else
          sub = [new Comparator(">=0.0.0")];
      }
      if (dom.length === 1 && dom[0].semver === ANY) {
        if (options.includePrerelease)
          return true;
        else
          dom = [new Comparator(">=0.0.0")];
      }
      const eqSet = new Set();
      let gt, lt;
      for (const c of sub) {
        if (c.operator === ">" || c.operator === ">=")
          gt = higherGT(gt, c, options);
        else if (c.operator === "<" || c.operator === "<=")
          lt = lowerLT(lt, c, options);
        else
          eqSet.add(c.semver);
      }
      if (eqSet.size > 1)
        return null;
      let gtltComp;
      if (gt && lt) {
        gtltComp = compare(gt.semver, lt.semver, options);
        if (gtltComp > 0)
          return null;
        else if (gtltComp === 0 && (gt.operator !== ">=" || lt.operator !== "<="))
          return null;
      }
      for (const eq of eqSet) {
        if (gt && !satisfies(eq, String(gt), options))
          return null;
        if (lt && !satisfies(eq, String(lt), options))
          return null;
        for (const c of dom) {
          if (!satisfies(eq, String(c), options))
            return false;
        }
        return true;
      }
      let higher, lower;
      let hasDomLT, hasDomGT;
      let needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;
      let needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false;
      if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === "<" && needDomLTPre.prerelease[0] === 0) {
        needDomLTPre = false;
      }
      for (const c of dom) {
        hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
        hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
        if (gt) {
          if (needDomGTPre) {
            if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) {
              needDomGTPre = false;
            }
          }
          if (c.operator === ">" || c.operator === ">=") {
            higher = higherGT(gt, c, options);
            if (higher === c && higher !== gt)
              return false;
          } else if (gt.operator === ">=" && !satisfies(gt.semver, String(c), options))
            return false;
        }
        if (lt) {
          if (needDomLTPre) {
            if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) {
              needDomLTPre = false;
            }
          }
          if (c.operator === "<" || c.operator === "<=") {
            lower = lowerLT(lt, c, options);
            if (lower === c && lower !== lt)
              return false;
          } else if (lt.operator === "<=" && !satisfies(lt.semver, String(c), options))
            return false;
        }
        if (!c.operator && (lt || gt) && gtltComp !== 0)
          return false;
      }
      if (gt && hasDomLT && !lt && gtltComp !== 0)
        return false;
      if (lt && hasDomGT && !gt && gtltComp !== 0)
        return false;
      if (needDomGTPre || needDomLTPre)
        return false;
      return true;
    };
    var higherGT = (a, b, options) => {
      if (!a)
        return b;
      const comp = compare(a.semver, b.semver, options);
      return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
    };
    var lowerLT = (a, b, options) => {
      if (!a)
        return b;
      const comp = compare(a.semver, b.semver, options);
      return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
    };
    module2.exports = subset;
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/index.js
var require_semver3 = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/node_modules/semver/index.js"(exports2, module2) {
    var internalRe = require_re();
    module2.exports = {
      re: internalRe.re,
      src: internalRe.src,
      tokens: internalRe.t,
      SEMVER_SPEC_VERSION: require_constants2().SEMVER_SPEC_VERSION,
      SemVer: require_semver2(),
      compareIdentifiers: require_identifiers().compareIdentifiers,
      rcompareIdentifiers: require_identifiers().rcompareIdentifiers,
      parse: require_parse2(),
      valid: require_valid(),
      clean: require_clean(),
      inc: require_inc(),
      diff: require_diff(),
      major: require_major(),
      minor: require_minor(),
      patch: require_patch(),
      prerelease: require_prerelease(),
      compare: require_compare(),
      rcompare: require_rcompare(),
      compareLoose: require_compare_loose(),
      compareBuild: require_compare_build(),
      sort: require_sort(),
      rsort: require_rsort(),
      gt: require_gt(),
      lt: require_lt(),
      eq: require_eq(),
      neq: require_neq(),
      gte: require_gte(),
      lte: require_lte(),
      cmp: require_cmp(),
      coerce: require_coerce(),
      Comparator: require_comparator(),
      Range: require_range(),
      satisfies: require_satisfies(),
      toComparators: require_to_comparators(),
      maxSatisfying: require_max_satisfying(),
      minSatisfying: require_min_satisfying(),
      minVersion: require_min_version(),
      validRange: require_valid2(),
      outside: require_outside(),
      gtr: require_gtr(),
      ltr: require_ltr(),
      intersects: require_intersects(),
      simplifyRange: require_simplify(),
      subset: require_subset()
    };
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/schema/assets.schema.json
var require_assets_schema = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/schema/assets.schema.json"(exports2, module2) {
    module2.exports = {
      $ref: "#/definitions/AssetManifest",
      definitions: {
        AssetManifest: {
          description: "Definitions for the asset manifest",
          type: "object",
          properties: {
            version: {
              description: "Version of the manifest",
              type: "string"
            },
            files: {
              description: "The file assets in this manifest (Default - No files)",
              type: "object",
              additionalProperties: {
                $ref: "#/definitions/FileAsset"
              }
            },
            dockerImages: {
              description: "The Docker image assets in this manifest (Default - No Docker images)",
              type: "object",
              additionalProperties: {
                $ref: "#/definitions/DockerImageAsset"
              }
            }
          },
          required: [
            "version"
          ]
        },
        FileAsset: {
          description: "A file asset",
          type: "object",
          properties: {
            source: {
              $ref: "#/definitions/FileSource",
              description: "Source description for file assets"
            },
            destinations: {
              description: "Destinations for this file asset",
              type: "object",
              additionalProperties: {
                $ref: "#/definitions/FileDestination"
              }
            }
          },
          required: [
            "destinations",
            "source"
          ]
        },
        FileSource: {
          description: "Describe the source of a file asset",
          type: "object",
          properties: {
            executable: {
              description: "External command which will produce the file asset to upload. (Default - Exactly one of `executable` and `path` is required.)",
              type: "array",
              items: {
                type: "string"
              }
            },
            path: {
              description: "The filesystem object to upload\n\nThis path is relative to the asset manifest location. (Default - Exactly one of `executable` and `path` is required.)",
              type: "string"
            },
            packaging: {
              description: "Packaging method\n\nOnly allowed when `path` is specified. (Default FILE)",
              enum: [
                "file",
                "zip"
              ],
              type: "string"
            }
          }
        },
        FileDestination: {
          description: "Where in S3 a file asset needs to be published",
          type: "object",
          properties: {
            bucketName: {
              description: "The name of the bucket",
              type: "string"
            },
            objectKey: {
              description: "The destination object key",
              type: "string"
            },
            region: {
              description: "The region where this asset will need to be published (Default - Current region)",
              type: "string"
            },
            assumeRoleArn: {
              description: "The role that needs to be assumed while publishing this asset (Default - No role will be assumed)",
              type: "string"
            },
            assumeRoleExternalId: {
              description: "The ExternalId that needs to be supplied while assuming this role (Default - No ExternalId will be supplied)",
              type: "string"
            }
          },
          required: [
            "bucketName",
            "objectKey"
          ]
        },
        DockerImageAsset: {
          description: "A file asset",
          type: "object",
          properties: {
            source: {
              $ref: "#/definitions/DockerImageSource",
              description: "Source description for file assets"
            },
            destinations: {
              description: "Destinations for this file asset",
              type: "object",
              additionalProperties: {
                $ref: "#/definitions/DockerImageDestination"
              }
            }
          },
          required: [
            "destinations",
            "source"
          ]
        },
        DockerImageSource: {
          description: "Properties for how to produce a Docker image from a source",
          type: "object",
          properties: {
            directory: {
              description: "The directory containing the Docker image build instructions.\n\nThis path is relative to the asset manifest location. (Default - Exactly one of `directory` and `executable` is required)",
              type: "string"
            },
            executable: {
              description: "A command-line executable that returns the name of a local\nDocker image on stdout after being run. (Default - Exactly one of `directory` and `executable` is required)",
              type: "array",
              items: {
                type: "string"
              }
            },
            dockerFile: {
              description: "The name of the file with build instructions\n\nOnly allowed when `directory` is set. (Default Dockerfile)",
              type: "string"
            },
            dockerBuildTarget: {
              description: "Target build stage in a Dockerfile with multiple build stages\n\nOnly allowed when `directory` is set. (Default - The last stage in the Dockerfile)",
              type: "string"
            },
            dockerBuildArgs: {
              description: "Additional build arguments\n\nOnly allowed when `directory` is set. (Default - No additional build arguments)",
              type: "object",
              additionalProperties: {
                type: "string"
              }
            }
          }
        },
        DockerImageDestination: {
          description: "Where to publish docker images",
          type: "object",
          properties: {
            repositoryName: {
              description: "Name of the ECR repository to publish to",
              type: "string"
            },
            imageTag: {
              description: "Tag of the image to publish",
              type: "string"
            },
            region: {
              description: "The region where this asset will need to be published (Default - Current region)",
              type: "string"
            },
            assumeRoleArn: {
              description: "The role that needs to be assumed while publishing this asset (Default - No role will be assumed)",
              type: "string"
            },
            assumeRoleExternalId: {
              description: "The ExternalId that needs to be supplied while assuming this role (Default - No ExternalId will be supplied)",
              type: "string"
            }
          },
          required: [
            "imageTag",
            "repositoryName"
          ]
        }
      },
      $schema: "http://json-schema.org/draft-07/schema#"
    };
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/schema/cloud-assembly.schema.json
var require_cloud_assembly_schema = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/schema/cloud-assembly.schema.json"(exports2, module2) {
    module2.exports = {
      $ref: "#/definitions/AssemblyManifest",
      definitions: {
        AssemblyManifest: {
          description: "A manifest which describes the cloud assembly.",
          type: "object",
          properties: {
            version: {
              description: "Protocol version",
              type: "string"
            },
            artifacts: {
              description: "The set of artifacts in this assembly. (Default - no artifacts.)",
              type: "object",
              additionalProperties: {
                $ref: "#/definitions/ArtifactManifest"
              }
            },
            missing: {
              description: "Missing context information. If this field has values, it means that the\ncloud assembly is not complete and should not be deployed. (Default - no missing context.)",
              type: "array",
              items: {
                $ref: "#/definitions/MissingContext"
              }
            },
            runtime: {
              description: "Runtime information. (Default - no info.)",
              $ref: "#/definitions/RuntimeInfo"
            }
          },
          required: [
            "version"
          ]
        },
        ArtifactManifest: {
          description: "A manifest for a single artifact within the cloud assembly.",
          type: "object",
          properties: {
            type: {
              $ref: "#/definitions/ArtifactType",
              description: "The type of artifact."
            },
            environment: {
              description: "The environment into which this artifact is deployed. (Default - no envrionment.)",
              type: "string"
            },
            metadata: {
              description: "Associated metadata. (Default - no metadata.)",
              type: "object",
              additionalProperties: {
                type: "array",
                items: {
                  $ref: "#/definitions/MetadataEntry"
                }
              }
            },
            dependencies: {
              description: "IDs of artifacts that must be deployed before this artifact. (Default - no dependencies.)",
              type: "array",
              items: {
                type: "string"
              }
            },
            properties: {
              description: "The set of properties for this artifact (depends on type) (Default - no properties.)",
              anyOf: [
                {
                  $ref: "#/definitions/AwsCloudFormationStackProperties"
                },
                {
                  $ref: "#/definitions/AssetManifestProperties"
                },
                {
                  $ref: "#/definitions/TreeArtifactProperties"
                },
                {
                  $ref: "#/definitions/NestedCloudAssemblyProperties"
                }
              ]
            },
            displayName: {
              description: "A string that represents this artifact. Should only be used in user interfaces. (Default - no display name)",
              type: "string"
            }
          },
          required: [
            "type"
          ]
        },
        ArtifactType: {
          description: "Type of cloud artifact.",
          enum: [
            "aws:cloudformation:stack",
            "cdk:asset-manifest",
            "cdk:cloud-assembly",
            "cdk:tree",
            "none"
          ],
          type: "string"
        },
        MetadataEntry: {
          description: "A metadata entry in a cloud assembly artifact.",
          type: "object",
          properties: {
            type: {
              description: "The type of the metadata entry.",
              type: "string"
            },
            data: {
              description: "The data. (Default - no data.)",
              anyOf: [
                {
                  $ref: "#/definitions/FileAssetMetadataEntry"
                },
                {
                  $ref: "#/definitions/ContainerImageAssetMetadataEntry"
                },
                {
                  type: "array",
                  items: {
                    $ref: "#/definitions/Tag"
                  }
                },
                {
                  type: "string"
                },
                {
                  description: "Free form data."
                }
              ]
            },
            trace: {
              description: "A stack trace for when the entry was created. (Default - no trace.)",
              type: "array",
              items: {
                type: "string"
              }
            }
          },
          required: [
            "type"
          ]
        },
        FileAssetMetadataEntry: {
          description: "Metadata Entry spec for files.",
          type: "object",
          properties: {
            packaging: {
              description: "Requested packaging style",
              enum: [
                "file",
                "zip"
              ],
              type: "string"
            },
            s3BucketParameter: {
              description: "Name of parameter where S3 bucket should be passed in",
              type: "string"
            },
            s3KeyParameter: {
              description: "Name of parameter where S3 key should be passed in",
              type: "string"
            },
            artifactHashParameter: {
              description: "The name of the parameter where the hash of the bundled asset should be passed in.",
              type: "string"
            },
            id: {
              description: "Logical identifier for the asset",
              type: "string"
            },
            sourceHash: {
              description: "The hash of the asset source.",
              type: "string"
            },
            path: {
              description: "Path on disk to the asset",
              type: "string"
            }
          },
          required: [
            "artifactHashParameter",
            "id",
            "packaging",
            "path",
            "s3BucketParameter",
            "s3KeyParameter",
            "sourceHash"
          ]
        },
        ContainerImageAssetMetadataEntry: {
          description: "Metadata Entry spec for container images.",
          type: "object",
          properties: {
            packaging: {
              description: "Type of asset",
              type: "string",
              enum: [
                "container-image"
              ]
            },
            imageNameParameter: {
              description: 'ECR Repository name and repo digest (separated by "@sha256:") where this\nimage is stored. (Default undefined If not specified, `repositoryName` and `imageTag` are\nrequired because otherwise how will the stack know where to find the asset,\nha?)',
              type: "string"
            },
            repositoryName: {
              description: "ECR repository name, if omitted a default name based on the asset's ID is\nused instead. Specify this property if you need to statically address the\nimage, e.g. from a Kubernetes Pod. Note, this is only the repository name,\nwithout the registry and the tag parts. (Default - this parameter is REQUIRED after 1.21.0)",
              type: "string"
            },
            imageTag: {
              description: "The docker image tag to use for tagging pushed images. This field is\nrequired if `imageParameterName` is ommited (otherwise, the app won't be\nable to find the image). (Default - this parameter is REQUIRED after 1.21.0)",
              type: "string"
            },
            buildArgs: {
              description: "Build args to pass to the `docker build` command (Default no build args are passed)",
              type: "object",
              additionalProperties: {
                type: "string"
              }
            },
            target: {
              description: "Docker target to build to (Default no build target)",
              type: "string"
            },
            file: {
              description: "Path to the Dockerfile (relative to the directory). (Default - no file is passed)",
              type: "string"
            },
            id: {
              description: "Logical identifier for the asset",
              type: "string"
            },
            sourceHash: {
              description: "The hash of the asset source.",
              type: "string"
            },
            path: {
              description: "Path on disk to the asset",
              type: "string"
            }
          },
          required: [
            "id",
            "packaging",
            "path",
            "sourceHash"
          ]
        },
        Tag: {
          description: "Metadata Entry spec for stack tag.",
          type: "object",
          properties: {
            key: {
              description: 'Tag key.\n\n(In the actual file on disk this will be cased as "Key", and the structure is\npatched to match this structure upon loading:\nhttps://github.com/aws/aws-cdk/blob/4aadaa779b48f35838cccd4e25107b2338f05547/packages/%40aws-cdk/cloud-assembly-schema/lib/manifest.ts#L137)',
              type: "string"
            },
            value: {
              description: 'Tag value.\n\n(In the actual file on disk this will be cased as "Value", and the structure is\npatched to match this structure upon loading:\nhttps://github.com/aws/aws-cdk/blob/4aadaa779b48f35838cccd4e25107b2338f05547/packages/%40aws-cdk/cloud-assembly-schema/lib/manifest.ts#L137)',
              type: "string"
            }
          },
          required: [
            "key",
            "value"
          ]
        },
        AwsCloudFormationStackProperties: {
          description: "Artifact properties for CloudFormation stacks.",
          type: "object",
          properties: {
            templateFile: {
              description: "A file relative to the assembly root which contains the CloudFormation template for this stack.",
              type: "string"
            },
            parameters: {
              description: "Values for CloudFormation stack parameters that should be passed when the stack is deployed. (Default - No parameters)",
              type: "object",
              additionalProperties: {
                type: "string"
              }
            },
            tags: {
              description: "Values for CloudFormation stack tags that should be passed when the stack is deployed. (Default - No tags)",
              type: "object",
              additionalProperties: {
                type: "string"
              }
            },
            stackName: {
              description: "The name to use for the CloudFormation stack. (Default - name derived from artifact ID)",
              type: "string"
            },
            terminationProtection: {
              description: "Whether to enable termination protection for this stack.",
              default: false,
              type: "boolean"
            },
            assumeRoleArn: {
              description: "The role that needs to be assumed to deploy the stack (Default - No role is assumed (current credentials are used))",
              type: "string"
            },
            assumeRoleExternalId: {
              description: "External ID to use when assuming role for cloudformation deployments (Default - No external ID)",
              type: "string"
            },
            cloudFormationExecutionRoleArn: {
              description: "The role that is passed to CloudFormation to execute the change set (Default - No role is passed (currently assumed role/credentials are used))",
              type: "string"
            },
            stackTemplateAssetObjectUrl: {
              description: "If the stack template has already been included in the asset manifest, its asset URL (Default - Not uploaded yet, upload just before deploying)",
              type: "string"
            },
            requiresBootstrapStackVersion: {
              description: "Version of bootstrap stack required to deploy this stack (Default - No bootstrap stack required)",
              type: "number"
            },
            bootstrapStackVersionSsmParameter: {
              description: "SSM parameter where the bootstrap stack version number can be found\n\nOnly used if `requiresBootstrapStackVersion` is set.\n\n- If this value is not set, the bootstrap stack name must be known at\n  deployment time so the stack version can be looked up from the stack\n  outputs.\n- If this value is set, the bootstrap stack can have any name because\n  we won't need to look it up. (Default - Bootstrap stack version number looked up)",
              type: "string"
            },
            validateOnSynth: {
              description: "Whether this stack should be validated by the CLI after synthesis (Default - false)",
              type: "boolean"
            }
          },
          required: [
            "templateFile"
          ]
        },
        AssetManifestProperties: {
          description: "Artifact properties for the Asset Manifest",
          type: "object",
          properties: {
            file: {
              description: "Filename of the asset manifest",
              type: "string"
            },
            requiresBootstrapStackVersion: {
              description: "Version of bootstrap stack required to deploy this stack (Default - Version 1 (basic modern bootstrap stack))",
              type: "number"
            },
            bootstrapStackVersionSsmParameter: {
              description: "SSM parameter where the bootstrap stack version number can be found\n\n- If this value is not set, the bootstrap stack name must be known at\n  deployment time so the stack version can be looked up from the stack\n  outputs.\n- If this value is set, the bootstrap stack can have any name because\n  we won't need to look it up. (Default - Bootstrap stack version number looked up)",
              type: "string"
            }
          },
          required: [
            "file"
          ]
        },
        TreeArtifactProperties: {
          description: "Artifact properties for the Construct Tree Artifact",
          type: "object",
          properties: {
            file: {
              description: "Filename of the tree artifact",
              type: "string"
            }
          },
          required: [
            "file"
          ]
        },
        NestedCloudAssemblyProperties: {
          description: "Artifact properties for nested cloud assemblies",
          type: "object",
          properties: {
            directoryName: {
              description: "Relative path to the nested cloud assembly",
              type: "string"
            },
            displayName: {
              description: "Display name for the cloud assembly (Default - The artifact ID)",
              type: "string"
            }
          },
          required: [
            "directoryName"
          ]
        },
        MissingContext: {
          description: "Represents a missing piece of context.",
          type: "object",
          properties: {
            key: {
              description: "The missing context key.",
              type: "string"
            },
            provider: {
              $ref: "#/definitions/ContextProvider",
              description: "The provider from which we expect this context key to be obtained."
            },
            props: {
              description: "A set of provider-specific options.",
              anyOf: [
                {
                  $ref: "#/definitions/AmiContextQuery"
                },
                {
                  $ref: "#/definitions/AvailabilityZonesContextQuery"
                },
                {
                  $ref: "#/definitions/HostedZoneContextQuery"
                },
                {
                  $ref: "#/definitions/SSMParameterContextQuery"
                },
                {
                  $ref: "#/definitions/VpcContextQuery"
                },
                {
                  $ref: "#/definitions/EndpointServiceAvailabilityZonesContextQuery"
                },
                {
                  $ref: "#/definitions/LoadBalancerContextQuery"
                },
                {
                  $ref: "#/definitions/LoadBalancerListenerContextQuery"
                },
                {
                  $ref: "#/definitions/SecurityGroupContextQuery"
                },
                {
                  $ref: "#/definitions/KeyContextQuery"
                }
              ]
            }
          },
          required: [
            "key",
            "props",
            "provider"
          ]
        },
        ContextProvider: {
          description: "Identifier for the context provider",
          enum: [
            "ami",
            "availability-zones",
            "endpoint-service-availability-zones",
            "hosted-zone",
            "key-provider",
            "load-balancer",
            "load-balancer-listener",
            "security-group",
            "ssm",
            "vpc-provider"
          ],
          type: "string"
        },
        AmiContextQuery: {
          description: "Query to AMI context provider",
          type: "object",
          properties: {
            account: {
              description: "Account to query",
              type: "string"
            },
            region: {
              description: "Region to query",
              type: "string"
            },
            lookupRoleArn: {
              description: "The ARN of the role that should be used to look up the missing values (Default - None)",
              type: "string"
            },
            owners: {
              description: "Owners to DescribeImages call (Default - All owners)",
              type: "array",
              items: {
                type: "string"
              }
            },
            filters: {
              description: "Filters to DescribeImages call",
              type: "object",
              additionalProperties: {
                type: "array",
                items: {
                  type: "string"
                }
              }
            }
          },
          required: [
            "account",
            "filters",
            "region"
          ]
        },
        AvailabilityZonesContextQuery: {
          description: "Query to availability zone context provider",
          type: "object",
          properties: {
            account: {
              description: "Query account",
              type: "string"
            },
            region: {
              description: "Query region",
              type: "string"
            },
            lookupRoleArn: {
              description: "The ARN of the role that should be used to look up the missing values (Default - None)",
              type: "string"
            }
          },
          required: [
            "account",
            "region"
          ]
        },
        HostedZoneContextQuery: {
          description: "Query to hosted zone context provider",
          type: "object",
          properties: {
            account: {
              description: "Query account",
              type: "string"
            },
            region: {
              description: "Query region",
              type: "string"
            },
            lookupRoleArn: {
              description: "The ARN of the role that should be used to look up the missing values (Default - None)",
              type: "string"
            },
            domainName: {
              description: "The domain name e.g. example.com to lookup",
              type: "string"
            },
            privateZone: {
              description: "True if the zone you want to find is a private hosted zone",
              default: false,
              type: "boolean"
            },
            vpcId: {
              description: "The VPC ID to that the private zone must be associated with\n\nIf you provide VPC ID and privateZone is false, this will return no results\nand raise an error. (Default - Required if privateZone=true)",
              type: "string"
            }
          },
          required: [
            "account",
            "domainName",
            "region"
          ]
        },
        SSMParameterContextQuery: {
          description: "Query to SSM Parameter Context Provider",
          type: "object",
          properties: {
            account: {
              description: "Query account",
              type: "string"
            },
            region: {
              description: "Query region",
              type: "string"
            },
            lookupRoleArn: {
              description: "The ARN of the role that should be used to look up the missing values (Default - None)",
              type: "string"
            },
            parameterName: {
              description: "Parameter name to query",
              type: "string"
            }
          },
          required: [
            "account",
            "parameterName",
            "region"
          ]
        },
        VpcContextQuery: {
          description: "Query input for looking up a VPC",
          type: "object",
          properties: {
            account: {
              description: "Query account",
              type: "string"
            },
            region: {
              description: "Query region",
              type: "string"
            },
            lookupRoleArn: {
              description: "The ARN of the role that should be used to look up the missing values (Default - None)",
              type: "string"
            },
            filter: {
              description: "Filters to apply to the VPC\n\nFilter parameters are the same as passed to DescribeVpcs.",
              type: "object",
              additionalProperties: {
                type: "string"
              }
            },
            returnAsymmetricSubnets: {
              description: "Whether to populate the subnetGroups field of the {@link VpcContextResponse},\nwhich contains potentially asymmetric subnet groups.",
              default: false,
              type: "boolean"
            },
            subnetGroupNameTag: {
              description: "Optional tag for subnet group name.\nIf not provided, we'll look at the aws-cdk:subnet-name tag.\nIf the subnet does not have the specified tag,\nwe'll use its type as the name. (Default 'aws-cdk:subnet-name')",
              type: "string"
            }
          },
          required: [
            "account",
            "filter",
            "region"
          ]
        },
        EndpointServiceAvailabilityZonesContextQuery: {
          description: "Query to endpoint service context provider",
          type: "object",
          properties: {
            account: {
              description: "Query account",
              type: "string"
            },
            region: {
              description: "Query region",
              type: "string"
            },
            lookupRoleArn: {
              description: "The ARN of the role that should be used to look up the missing values (Default - None)",
              type: "string"
            },
            serviceName: {
              description: "Query service name",
              type: "string"
            }
          },
          required: [
            "account",
            "region",
            "serviceName"
          ]
        },
        LoadBalancerContextQuery: {
          description: "Query input for looking up a load balancer",
          type: "object",
          properties: {
            account: {
              description: "Query account",
              type: "string"
            },
            region: {
              description: "Query region",
              type: "string"
            },
            lookupRoleArn: {
              description: "The ARN of the role that should be used to look up the missing values (Default - None)",
              type: "string"
            },
            loadBalancerType: {
              $ref: "#/definitions/LoadBalancerType",
              description: "Filter load balancers by their type"
            },
            loadBalancerArn: {
              description: "Find by load balancer's ARN (Default - does not search by load balancer arn)",
              type: "string"
            },
            loadBalancerTags: {
              description: "Match load balancer tags (Default - does not match load balancers by tags)",
              type: "array",
              items: {
                $ref: "#/definitions/Tag"
              }
            }
          },
          required: [
            "account",
            "loadBalancerType",
            "region"
          ]
        },
        LoadBalancerType: {
          description: "Type of load balancer",
          enum: [
            "application",
            "network"
          ],
          type: "string"
        },
        LoadBalancerListenerContextQuery: {
          description: "Query input for looking up a load balancer listener",
          type: "object",
          properties: {
            account: {
              description: "Query account",
              type: "string"
            },
            region: {
              description: "Query region",
              type: "string"
            },
            lookupRoleArn: {
              description: "The ARN of the role that should be used to look up the missing values (Default - None)",
              type: "string"
            },
            listenerArn: {
              description: "Find by listener's arn (Default - does not find by listener arn)",
              type: "string"
            },
            listenerProtocol: {
              description: "Filter by listener protocol (Default - does not filter by listener protocol)",
              enum: [
                "HTTP",
                "HTTPS",
                "TCP",
                "TCP_UDP",
                "TLS",
                "UDP"
              ],
              type: "string"
            },
            listenerPort: {
              description: "Filter listeners by listener port (Default - does not filter by a listener port)",
              type: "number"
            },
            loadBalancerType: {
              $ref: "#/definitions/LoadBalancerType",
              description: "Filter load balancers by their type"
            },
            loadBalancerArn: {
              description: "Find by load balancer's ARN (Default - does not search by load balancer arn)",
              type: "string"
            },
            loadBalancerTags: {
              description: "Match load balancer tags (Default - does not match load balancers by tags)",
              type: "array",
              items: {
                $ref: "#/definitions/Tag"
              }
            }
          },
          required: [
            "account",
            "loadBalancerType",
            "region"
          ]
        },
        SecurityGroupContextQuery: {
          description: "Query input for looking up a security group",
          type: "object",
          properties: {
            account: {
              description: "Query account",
              type: "string"
            },
            region: {
              description: "Query region",
              type: "string"
            },
            lookupRoleArn: {
              description: "The ARN of the role that should be used to look up the missing values (Default - None)",
              type: "string"
            },
            securityGroupId: {
              description: "Security group id",
              type: "string"
            }
          },
          required: [
            "account",
            "region",
            "securityGroupId"
          ]
        },
        KeyContextQuery: {
          description: "Query input for looking up a KMS Key",
          type: "object",
          properties: {
            account: {
              description: "Query account",
              type: "string"
            },
            region: {
              description: "Query region",
              type: "string"
            },
            lookupRoleArn: {
              description: "The ARN of the role that should be used to look up the missing values (Default - None)",
              type: "string"
            },
            aliasName: {
              description: "Alias name used to search the Key",
              type: "string"
            }
          },
          required: [
            "account",
            "aliasName",
            "region"
          ]
        },
        RuntimeInfo: {
          description: "Information about the application's runtime components.",
          type: "object",
          properties: {
            libraries: {
              description: "The list of libraries loaded in the application, associated with their versions.",
              type: "object",
              additionalProperties: {
                type: "string"
              }
            }
          },
          required: [
            "libraries"
          ]
        }
      },
      $schema: "http://json-schema.org/draft-07/schema#"
    };
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/schema/cloud-assembly.version.json
var require_cloud_assembly_version = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/schema/cloud-assembly.version.json"(exports2, module2) {
    module2.exports = { version: "14.0.0" };
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/lib/manifest.js
var require_manifest = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/lib/manifest.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Manifest = exports2.VERSION_MISMATCH = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var fs = require("fs");
    var jsonschema = require_lib2();
    var semver = require_semver3();
    var assembly = require_cloud_assembly();
    exports2.VERSION_MISMATCH = "Cloud assembly schema version mismatch";
    var ASSETS_SCHEMA = require_assets_schema();
    var ASSEMBLY_SCHEMA = require_cloud_assembly_schema();
    var SCHEMA_VERSION = require_cloud_assembly_version().version;
    var Manifest = class {
      constructor() {
      }
      static saveAssemblyManifest(manifest, filePath) {
        Manifest.saveManifest(manifest, filePath, ASSEMBLY_SCHEMA, Manifest.patchStackTagsOnWrite);
      }
      static loadAssemblyManifest(filePath) {
        return Manifest.loadManifest(filePath, ASSEMBLY_SCHEMA, Manifest.patchStackTagsOnRead);
      }
      static saveAssetManifest(manifest, filePath) {
        Manifest.saveManifest(manifest, filePath, ASSETS_SCHEMA, Manifest.patchStackTagsOnRead);
      }
      static loadAssetManifest(filePath) {
        return this.loadManifest(filePath, ASSETS_SCHEMA);
      }
      static version() {
        return SCHEMA_VERSION;
      }
      static save(manifest, filePath) {
        return this.saveAssemblyManifest(manifest, filePath);
      }
      static load(filePath) {
        return this.loadAssemblyManifest(filePath);
      }
      static validate(manifest, schema) {
        function parseVersion(version) {
          const ver = semver.valid(version);
          if (!ver) {
            throw new Error(`Invalid semver string: "${version}"`);
          }
          return ver;
        }
        const maxSupported = parseVersion(Manifest.version());
        const actual = parseVersion(manifest.version);
        if (semver.gt(actual, maxSupported)) {
          throw new Error(`${exports2.VERSION_MISMATCH}: Maximum schema version supported is ${maxSupported}, but found ${actual}`);
        }
        const validator = new jsonschema.Validator();
        const result = validator.validate(manifest, schema, {
          nestedErrors: true,
          allowUnknownAttributes: false
        });
        if (!result.valid) {
          throw new Error(`Invalid assembly manifest:
${result}`);
        }
      }
      static saveManifest(manifest, filePath, schema, preprocess) {
        let withVersion = __spreadProps(__spreadValues({}, manifest), { version: Manifest.version() });
        Manifest.validate(withVersion, schema);
        if (preprocess) {
          withVersion = preprocess(withVersion);
        }
        fs.writeFileSync(filePath, JSON.stringify(withVersion, void 0, 2));
      }
      static loadManifest(filePath, schema, preprocess) {
        let obj = JSON.parse(fs.readFileSync(filePath, { encoding: "utf-8" }));
        if (preprocess) {
          obj = preprocess(obj);
        }
        Manifest.validate(obj, schema);
        return obj;
      }
      static patchStackTagsOnRead(manifest) {
        return Manifest.replaceStackTags(manifest, (tags) => tags.map((diskTag) => ({
          key: diskTag.Key,
          value: diskTag.Value
        })));
      }
      static patchStackTagsOnWrite(manifest) {
        return Manifest.replaceStackTags(manifest, (tags) => tags.map((memTag) => "Key" in memTag ? memTag : { Key: memTag.key, Value: memTag.value }));
      }
      static replaceStackTags(manifest, fn) {
        return noUndefined(__spreadProps(__spreadValues({}, manifest), {
          artifacts: mapValues(manifest.artifacts, (artifact) => {
            if (artifact.type !== assembly.ArtifactType.AWS_CLOUDFORMATION_STACK) {
              return artifact;
            }
            return noUndefined(__spreadProps(__spreadValues({}, artifact), {
              metadata: mapValues(artifact.metadata, (metadataEntries) => metadataEntries.map((metadataEntry) => {
                if (metadataEntry.type !== assembly.ArtifactMetadataEntryType.STACK_TAGS || !metadataEntry.data) {
                  return metadataEntry;
                }
                return __spreadProps(__spreadValues({}, metadataEntry), {
                  data: fn(metadataEntry.data)
                });
              }))
            }));
          })
        }));
      }
    };
    exports2.Manifest = Manifest;
    _a = JSII_RTTI_SYMBOL_1;
    Manifest[_a] = { fqn: "@aws-cdk/cloud-assembly-schema.Manifest", version: "1.132.0" };
    function mapValues(xs, fn) {
      if (!xs) {
        return void 0;
      }
      const ret = {};
      for (const [k, v] of Object.entries(xs)) {
        ret[k] = fn(v);
      }
      return ret;
    }
    function noUndefined(xs) {
      const ret = {};
      for (const [k, v] of Object.entries(xs)) {
        if (v !== void 0) {
          ret[k] = v;
        }
      }
      return ret;
    }
  }
});

// asset-input/node_modules/@aws-cdk/cloud-assembly-schema/lib/index.js
var require_lib3 = __commonJS({
  "asset-input/node_modules/@aws-cdk/cloud-assembly-schema/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_cloud_assembly(), exports2);
    __exportStar(require_assets(), exports2);
    __exportStar(require_manifest(), exports2);
  }
});

// asset-input/node_modules/constructs/lib/aspect.js
var require_aspect2 = __commonJS({
  "asset-input/node_modules/constructs/lib/aspect.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/constructs/lib/metadata.js
var require_metadata = __commonJS({
  "asset-input/node_modules/constructs/lib/metadata.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ConstructMetadata = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var ConstructMetadata = class {
      constructor() {
      }
    };
    exports2.ConstructMetadata = ConstructMetadata;
    _a = JSII_RTTI_SYMBOL_1;
    ConstructMetadata[_a] = { fqn: "constructs.ConstructMetadata", version: "3.3.161" };
    ConstructMetadata.DISABLE_STACK_TRACE_IN_METADATA = "disable-stack-trace";
    ConstructMetadata.INFO_METADATA_KEY = "info";
    ConstructMetadata.WARNING_METADATA_KEY = "warning";
    ConstructMetadata.ERROR_METADATA_KEY = "error";
  }
});

// asset-input/node_modules/constructs/lib/private/dependency.js
var require_dependency = __commonJS({
  "asset-input/node_modules/constructs/lib/private/dependency.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DependableTrait = exports2.ConcreteDependable = void 0;
    var ConcreteDependable = class {
      constructor() {
        this._dependencyRoots = new Array();
        const self = this;
        DependableTrait.implement(this, {
          get dependencyRoots() {
            return self._dependencyRoots;
          }
        });
      }
      add(construct) {
        this._dependencyRoots.push(construct);
      }
    };
    exports2.ConcreteDependable = ConcreteDependable;
    var DEPENDABLE_SYMBOL = Symbol.for("@aws-cdk/core.DependableTrait");
    var DependableTrait = class {
      static implement(instance, trait) {
        instance[DEPENDABLE_SYMBOL] = trait;
      }
      static get(instance) {
        const ret = instance[DEPENDABLE_SYMBOL];
        if (!ret) {
          throw new Error(`${instance} does not implement DependableTrait`);
        }
        return ret;
      }
    };
    exports2.DependableTrait = DependableTrait;
  }
});

// asset-input/node_modules/constructs/lib/private/stack-trace.js
var require_stack_trace = __commonJS({
  "asset-input/node_modules/constructs/lib/private/stack-trace.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.captureStackTrace = void 0;
    function captureStackTrace(below) {
      below = below || captureStackTrace;
      const object = { stack: "" };
      const previousLimit = Error.stackTraceLimit;
      try {
        Error.stackTraceLimit = Number.MAX_SAFE_INTEGER;
        Error.captureStackTrace(object, below);
      } finally {
        Error.stackTraceLimit = previousLimit;
      }
      if (!object.stack) {
        return [];
      }
      return object.stack.split("\n").slice(1).map((s) => s.replace(/^\s*at\s+/, ""));
    }
    exports2.captureStackTrace = captureStackTrace;
  }
});

// asset-input/node_modules/constructs/lib/private/uniqueid.js
var require_uniqueid = __commonJS({
  "asset-input/node_modules/constructs/lib/private/uniqueid.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.makeLegacyUniqueId = exports2.addressOf = void 0;
    var crypto = require("crypto");
    var HIDDEN_FROM_HUMAN_ID = "Resource";
    var HIDDEN_ID = "Default";
    var PATH_SEP = "/";
    var HASH_LEN = 8;
    var MAX_HUMAN_LEN = 240;
    var MAX_ID_LEN = 255;
    function addressOf(components) {
      const hash = crypto.createHash("sha1");
      for (const c of components) {
        if (c === HIDDEN_ID) {
          continue;
        }
        hash.update(c);
        hash.update("\n");
      }
      return "c8" + hash.digest("hex");
    }
    exports2.addressOf = addressOf;
    function makeLegacyUniqueId(components) {
      components = components.filter((x) => x !== HIDDEN_ID);
      if (components.length === 0) {
        throw new Error("Unable to calculate a unique id for an empty set of components");
      }
      if (components.length === 1) {
        const candidate = removeNonAlphanumeric(components[0]);
        if (candidate.length <= MAX_ID_LEN) {
          return candidate;
        }
      }
      const hash = legacyPathHash(components);
      const human = removeDupes(components).filter((x) => x !== HIDDEN_FROM_HUMAN_ID).map(removeNonAlphanumeric).join("").slice(0, MAX_HUMAN_LEN);
      return human + hash;
    }
    exports2.makeLegacyUniqueId = makeLegacyUniqueId;
    function legacyPathHash(path) {
      const md5 = crypto.createHash("md5").update(path.join(PATH_SEP)).digest("hex");
      return md5.slice(0, HASH_LEN).toUpperCase();
    }
    function removeNonAlphanumeric(s) {
      return s.replace(/[^A-Za-z0-9]/g, "");
    }
    function removeDupes(path) {
      const ret = new Array();
      for (const component of path) {
        if (ret.length === 0 || !ret[ret.length - 1].endsWith(component)) {
          ret.push(component);
        }
      }
      return ret;
    }
  }
});

// asset-input/node_modules/constructs/lib/construct.js
var require_construct = __commonJS({
  "asset-input/node_modules/constructs/lib/construct.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ConstructOrder = exports2.Construct = exports2.Node = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var metadata_1 = require_metadata();
    var dependency_1 = require_dependency();
    var stack_trace_1 = require_stack_trace();
    var uniqueid_1 = require_uniqueid();
    var CONSTRUCT_NODE_PROPERTY_SYMBOL = Symbol.for("constructs.Construct.node");
    var Node = class {
      constructor(host, scope, id) {
        this.host = host;
        this._locked = false;
        this._aspects = [];
        this._children = {};
        this._context = {};
        this._metadata = new Array();
        this._dependencies = new Set();
        this.invokedAspects = [];
        this._validations = new Array();
        id = id || "";
        this.id = sanitizeId(id);
        this.scope = scope;
        if (scope != null) {
          if (id === "") {
            throw new Error("Only root constructs may have an empty name");
          }
          Node.of(scope).addChild(host, this.id);
        } else {
          this.id = id;
        }
      }
      static of(construct) {
        const node = construct[CONSTRUCT_NODE_PROPERTY_SYMBOL];
        if (!node) {
          throw new Error('construct does not have an associated node. All constructs must extend the "Construct" base class');
        }
        return node;
      }
      get path() {
        const components = this.scopes.slice(1).map((c) => Node.of(c).id);
        return components.join(Node.PATH_SEP);
      }
      get addr() {
        if (!this._addr) {
          this._addr = uniqueid_1.addressOf(this.scopes.map((c) => Node.of(c).id));
        }
        return this._addr;
      }
      get uniqueId() {
        const components = this.scopes.slice(1).map((c) => Node.of(c).id);
        return components.length > 0 ? uniqueid_1.makeLegacyUniqueId(components) : "";
      }
      tryFindChild(id) {
        return this._children[sanitizeId(id)];
      }
      findChild(id) {
        const ret = this.tryFindChild(id);
        if (!ret) {
          throw new Error(`No child with id: '${id}'`);
        }
        return ret;
      }
      get defaultChild() {
        if (this._defaultChild !== void 0) {
          return this._defaultChild;
        }
        const resourceChild = this.tryFindChild("Resource");
        const defaultChild = this.tryFindChild("Default");
        if (resourceChild && defaultChild) {
          throw new Error(`Cannot determine default child for ${this.path}. There is both a child with id "Resource" and id "Default"`);
        }
        return defaultChild || resourceChild;
      }
      set defaultChild(value) {
        this._defaultChild = value;
      }
      get children() {
        return Object.values(this._children);
      }
      findAll(order = ConstructOrder.PREORDER) {
        const ret = new Array();
        visit(this.host);
        return ret;
        function visit(c) {
          if (order === ConstructOrder.PREORDER) {
            ret.push(c);
          }
          for (const child of Node.of(c).children) {
            visit(child);
          }
          if (order === ConstructOrder.POSTORDER) {
            ret.push(c);
          }
        }
      }
      setContext(key, value) {
        if (this.children.length > 0) {
          const names = this.children.map((c) => Node.of(c).id);
          throw new Error("Cannot set context after children have been added: " + names.join(","));
        }
        this._context[key] = value;
      }
      tryGetContext(key) {
        const value = this._context[key];
        if (value !== void 0) {
          return value;
        }
        return this.scope && Node.of(this.scope).tryGetContext(key);
      }
      get metadata() {
        return [...this._metadata];
      }
      addMetadata(type, data, fromFunction) {
        if (data == null) {
          return;
        }
        const trace = this.tryGetContext(metadata_1.ConstructMetadata.DISABLE_STACK_TRACE_IN_METADATA) ? void 0 : stack_trace_1.captureStackTrace(fromFunction || this.addMetadata);
        this._metadata.push({ type, data, trace });
      }
      addInfo(message) {
        this.addMetadata(metadata_1.ConstructMetadata.INFO_METADATA_KEY, message);
      }
      addWarning(message) {
        this.addMetadata(metadata_1.ConstructMetadata.WARNING_METADATA_KEY, message);
      }
      addError(message) {
        this.addMetadata(metadata_1.ConstructMetadata.ERROR_METADATA_KEY, message);
      }
      applyAspect(aspect) {
        this._aspects.push(aspect);
        return;
      }
      get scopes() {
        const ret = new Array();
        let curr = this.host;
        while (curr) {
          ret.unshift(curr);
          curr = Node.of(curr).scope;
        }
        return ret;
      }
      get root() {
        return this.scopes[0];
      }
      get locked() {
        if (this._locked) {
          return true;
        }
        if (this.scope && Node.of(this.scope).locked) {
          return true;
        }
        return false;
      }
      addDependency(...dependencies) {
        for (const dependency of dependencies) {
          this._dependencies.add(dependency);
        }
      }
      get dependencies() {
        const found = new Map();
        const ret = new Array();
        for (const source of this.findAll()) {
          for (const dependable of Node.of(source)._dependencies) {
            for (const target of dependency_1.DependableTrait.get(dependable).dependencyRoots) {
              let foundTargets = found.get(source);
              if (!foundTargets) {
                found.set(source, foundTargets = new Set());
              }
              if (!foundTargets.has(target)) {
                ret.push({ source, target });
                foundTargets.add(target);
              }
            }
          }
        }
        return ret;
      }
      tryRemoveChild(childName) {
        if (!(childName in this._children)) {
          return false;
        }
        delete this._children[childName];
        return true;
      }
      addValidation(validation) {
        this._validations.push(validation);
      }
      synthesize(options) {
        this.prepare();
        const validate = options.skipValidation === void 0 ? true : !options.skipValidation;
        if (validate) {
          const errors = this.validate();
          if (errors.length > 0) {
            const errorList = errors.map((e) => `[${Node.of(e.source).path}] ${e.message}`).join("\n  ");
            throw new Error(`Validation failed with the following errors:
  ${errorList}`);
          }
        }
        for (const construct of this.findAll(ConstructOrder.POSTORDER)) {
          const node = Node.of(construct);
          try {
            node._lock();
            const ctx = __spreadProps(__spreadValues({}, options.sessionContext), {
              outdir: options.outdir
            });
            construct.onSynthesize(ctx);
          } finally {
            node._unlock();
          }
        }
      }
      prepare() {
        for (const construct of this.findAll(ConstructOrder.PREORDER)) {
          Node.of(construct).invokeAspects();
        }
        for (const construct of this.findAll(ConstructOrder.PREORDER).reverse()) {
          const cn = construct;
          if ("onPrepare" in cn) {
            if (typeof cn.onPrepare !== "function") {
              throw new Error('expecting "onPrepare" to be a function');
            }
            cn.onPrepare();
          }
        }
      }
      validate() {
        let errors = new Array();
        for (const child of this.children) {
          errors = errors.concat(Node.of(child).validate());
        }
        const localErrors = this.host.onValidate();
        for (const v of this._validations) {
          localErrors.push(...v.validate());
        }
        return errors.concat(localErrors.map((msg) => ({ source: this.host, message: msg })));
      }
      _lock() {
        this._locked = true;
      }
      _unlock() {
        this._locked = false;
      }
      addChild(child, childName) {
        if (this.locked) {
          if (!this.path) {
            throw new Error("Cannot add children during synthesis");
          }
          throw new Error(`Cannot add children to "${this.path}" during synthesis`);
        }
        if (childName in this._children) {
          const name = this.id || "";
          const typeName = this.host.constructor.name;
          throw new Error(`There is already a Construct with name '${childName}' in ${typeName}${name.length > 0 ? " [" + name + "]" : ""}`);
        }
        this._children[childName] = child;
      }
      invokeAspects() {
        const descendants = this.findAll();
        for (const aspect of this._aspects) {
          if (this.invokedAspects.includes(aspect)) {
            continue;
          }
          descendants.forEach((member) => aspect.visit(member));
          this.invokedAspects.push(aspect);
        }
      }
    };
    exports2.Node = Node;
    _a = JSII_RTTI_SYMBOL_1;
    Node[_a] = { fqn: "constructs.Node", version: "3.3.161" };
    Node.PATH_SEP = "/";
    var Construct = class {
      constructor(scope, id, options = {}) {
        var _c;
        const nodeFactory = (_c = options.nodeFactory) !== null && _c !== void 0 ? _c : { createNode: (host, nodeScope, nodeId) => new Node(host, nodeScope, nodeId) };
        Object.defineProperty(this, CONSTRUCT_NODE_PROPERTY_SYMBOL, {
          value: nodeFactory.createNode(this, scope, id),
          enumerable: false,
          configurable: false
        });
        dependency_1.DependableTrait.implement(this, {
          dependencyRoots: [this]
        });
      }
      toString() {
        return Node.of(this).path || "<root>";
      }
      onValidate() {
        return [];
      }
      onPrepare() {
        return;
      }
      onSynthesize(session) {
        ignore(session);
      }
    };
    exports2.Construct = Construct;
    _b = JSII_RTTI_SYMBOL_1;
    Construct[_b] = { fqn: "constructs.Construct", version: "3.3.161" };
    var ConstructOrder;
    (function(ConstructOrder2) {
      ConstructOrder2[ConstructOrder2["PREORDER"] = 0] = "PREORDER";
      ConstructOrder2[ConstructOrder2["POSTORDER"] = 1] = "POSTORDER";
    })(ConstructOrder = exports2.ConstructOrder || (exports2.ConstructOrder = {}));
    function ignore(_x) {
      return;
    }
    var PATH_SEP_REGEX = new RegExp(`${Node.PATH_SEP}`, "g");
    function sanitizeId(id) {
      return id.replace(PATH_SEP_REGEX, "--");
    }
  }
});

// asset-input/node_modules/constructs/lib/index.js
var require_lib4 = __commonJS({
  "asset-input/node_modules/constructs/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_aspect2(), exports2);
    __exportStar(require_construct(), exports2);
    __exportStar(require_metadata(), exports2);
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/annotations.js
var require_annotations = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/annotations.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Annotations = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cxschema = require_lib3();
    var constructs_1 = require_lib4();
    var DEPRECATIONS_SYMBOL = Symbol.for("@aws-cdk/core.deprecations");
    var Annotations = class {
      constructor(scope) {
        this.scope = scope;
      }
      static of(scope) {
        return new Annotations(scope);
      }
      addWarning(message) {
        this.addMessage(cxschema.ArtifactMetadataEntryType.WARN, message);
      }
      addInfo(message) {
        this.addMessage(cxschema.ArtifactMetadataEntryType.INFO, message);
      }
      addError(message) {
        this.addMessage(cxschema.ArtifactMetadataEntryType.ERROR, message);
      }
      addDeprecation(api, message) {
        const text = `The API ${api} is deprecated: ${message}. This API will be removed in the next major release`;
        if (process.env.CDK_BLOCK_DEPRECATIONS) {
          throw new Error(`${constructs_1.Node.of(this.scope).path}: ${text}`);
        }
        const set = this.deprecationsReported;
        if (set.has(api)) {
          return;
        }
        this.addWarning(text);
        set.add(api);
      }
      addMessage(level, message) {
        constructs_1.Node.of(this.scope).addMetadata(level, message);
      }
      get deprecationsReported() {
        let set = this.scope[DEPRECATIONS_SYMBOL];
        if (!set) {
          set = new Set();
          Object.defineProperty(this.scope, DEPRECATIONS_SYMBOL, { value: set });
        }
        return set;
      }
    };
    exports2.Annotations = Annotations;
    _a = JSII_RTTI_SYMBOL_1;
    Annotations[_a] = { fqn: "@aws-cdk/core.Annotations", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/cx-api/lib/cxapi.js
var require_cxapi = __commonJS({
  "asset-input/node_modules/@aws-cdk/cx-api/lib/cxapi.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSMPARAM_NO_INVALIDATE = exports2.PROVIDER_ERROR_KEY = exports2.CLI_VERSION_ENV = exports2.CLI_ASM_VERSION_ENV = exports2.DEFAULT_REGION_ENV = exports2.DEFAULT_ACCOUNT_ENV = exports2.CONTEXT_ENV = exports2.OUTDIR_ENV = void 0;
    exports2.OUTDIR_ENV = "CDK_OUTDIR";
    exports2.CONTEXT_ENV = "CDK_CONTEXT_JSON";
    exports2.DEFAULT_ACCOUNT_ENV = "CDK_DEFAULT_ACCOUNT";
    exports2.DEFAULT_REGION_ENV = "CDK_DEFAULT_REGION";
    exports2.CLI_ASM_VERSION_ENV = "CDK_CLI_ASM_VERSION";
    exports2.CLI_VERSION_ENV = "CDK_CLI_VERSION";
    exports2.PROVIDER_ERROR_KEY = "$providerError";
    exports2.SSMPARAM_NO_INVALIDATE = "[cdk:skip]";
  }
});

// asset-input/node_modules/@aws-cdk/cx-api/lib/context/vpc.js
var require_vpc = __commonJS({
  "asset-input/node_modules/@aws-cdk/cx-api/lib/context/vpc.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.VpcSubnetGroupType = void 0;
    var VpcSubnetGroupType;
    (function(VpcSubnetGroupType2) {
      VpcSubnetGroupType2["PUBLIC"] = "Public";
      VpcSubnetGroupType2["PRIVATE"] = "Private";
      VpcSubnetGroupType2["ISOLATED"] = "Isolated";
    })(VpcSubnetGroupType = exports2.VpcSubnetGroupType || (exports2.VpcSubnetGroupType = {}));
  }
});

// asset-input/node_modules/@aws-cdk/cx-api/lib/context/ami.js
var require_ami = __commonJS({
  "asset-input/node_modules/@aws-cdk/cx-api/lib/context/ami.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/@aws-cdk/cx-api/lib/context/load-balancer.js
var require_load_balancer = __commonJS({
  "asset-input/node_modules/@aws-cdk/cx-api/lib/context/load-balancer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LoadBalancerIpAddressType = void 0;
    var LoadBalancerIpAddressType;
    (function(LoadBalancerIpAddressType2) {
      LoadBalancerIpAddressType2["IPV4"] = "ipv4";
      LoadBalancerIpAddressType2["DUAL_STACK"] = "dualstack";
    })(LoadBalancerIpAddressType = exports2.LoadBalancerIpAddressType || (exports2.LoadBalancerIpAddressType = {}));
  }
});

// asset-input/node_modules/@aws-cdk/cx-api/lib/context/availability-zones.js
var require_availability_zones = __commonJS({
  "asset-input/node_modules/@aws-cdk/cx-api/lib/context/availability-zones.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AVAILABILITY_ZONE_FALLBACK_CONTEXT_KEY = void 0;
    exports2.AVAILABILITY_ZONE_FALLBACK_CONTEXT_KEY = "aws:cdk:availability-zones:fallback";
  }
});

// asset-input/node_modules/@aws-cdk/cx-api/lib/context/endpoint-service-availability-zones.js
var require_endpoint_service_availability_zones = __commonJS({
  "asset-input/node_modules/@aws-cdk/cx-api/lib/context/endpoint-service-availability-zones.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ENDPOINT_SERVICE_AVAILABILITY_ZONE_PROVIDER = void 0;
    exports2.ENDPOINT_SERVICE_AVAILABILITY_ZONE_PROVIDER = "endpoint-service-availability-zones";
  }
});

// asset-input/node_modules/@aws-cdk/cx-api/lib/context/security-group.js
var require_security_group = __commonJS({
  "asset-input/node_modules/@aws-cdk/cx-api/lib/context/security-group.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/@aws-cdk/cx-api/lib/context/key.js
var require_key = __commonJS({
  "asset-input/node_modules/@aws-cdk/cx-api/lib/context/key.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/@aws-cdk/cx-api/lib/metadata.js
var require_metadata2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/cx-api/lib/metadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SynthesisMessageLevel = exports2.PATH_METADATA_KEY = void 0;
    exports2.PATH_METADATA_KEY = "aws:cdk:path";
    var SynthesisMessageLevel;
    (function(SynthesisMessageLevel2) {
      SynthesisMessageLevel2["INFO"] = "info";
      SynthesisMessageLevel2["WARNING"] = "warning";
      SynthesisMessageLevel2["ERROR"] = "error";
    })(SynthesisMessageLevel = exports2.SynthesisMessageLevel || (exports2.SynthesisMessageLevel = {}));
  }
});

// asset-input/node_modules/@aws-cdk/cx-api/lib/artifacts/asset-manifest-artifact.js
var require_asset_manifest_artifact = __commonJS({
  "asset-input/node_modules/@aws-cdk/cx-api/lib/artifacts/asset-manifest-artifact.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AssetManifestArtifact = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var path = require("path");
    var cloud_artifact_1 = require_cloud_artifact();
    var AssetManifestArtifact = class extends cloud_artifact_1.CloudArtifact {
      constructor(assembly, name, artifact) {
        var _b;
        super(assembly, name, artifact);
        const properties = this.manifest.properties || {};
        if (!properties.file) {
          throw new Error('Invalid AssetManifestArtifact. Missing "file" property');
        }
        this.file = path.resolve(this.assembly.directory, properties.file);
        this.requiresBootstrapStackVersion = (_b = properties.requiresBootstrapStackVersion) !== null && _b !== void 0 ? _b : 1;
        this.bootstrapStackVersionSsmParameter = properties.bootstrapStackVersionSsmParameter;
      }
    };
    exports2.AssetManifestArtifact = AssetManifestArtifact;
    _a = JSII_RTTI_SYMBOL_1;
    AssetManifestArtifact[_a] = { fqn: "@aws-cdk/cx-api.AssetManifestArtifact", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/cx-api/lib/environment.js
var require_environment = __commonJS({
  "asset-input/node_modules/@aws-cdk/cx-api/lib/environment.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EnvironmentUtils = exports2.UNKNOWN_REGION = exports2.UNKNOWN_ACCOUNT = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var AWS_ENV_REGEX = /aws\:\/\/([a-z0-9A-Z\-\@\.\_]+)\/([a-z\-0-9]+)/;
    exports2.UNKNOWN_ACCOUNT = "unknown-account";
    exports2.UNKNOWN_REGION = "unknown-region";
    var EnvironmentUtils = class {
      static parse(environment) {
        const env = AWS_ENV_REGEX.exec(environment);
        if (!env) {
          throw new Error(`Unable to parse environment specification "${environment}". Expected format: aws://account/region`);
        }
        const [, account, region] = env;
        if (!account || !region) {
          throw new Error(`Invalid environment specification: ${environment}`);
        }
        return { account, region, name: environment };
      }
      static make(account, region) {
        return { account, region, name: this.format(account, region) };
      }
      static format(account, region) {
        return `aws://${account}/${region}`;
      }
    };
    exports2.EnvironmentUtils = EnvironmentUtils;
    _a = JSII_RTTI_SYMBOL_1;
    EnvironmentUtils[_a] = { fqn: "@aws-cdk/cx-api.EnvironmentUtils", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/cx-api/lib/artifacts/cloudformation-artifact.js
var require_cloudformation_artifact = __commonJS({
  "asset-input/node_modules/@aws-cdk/cx-api/lib/artifacts/cloudformation-artifact.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CloudFormationStackArtifact = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var fs = require("fs");
    var path = require("path");
    var cxschema = require_lib3();
    var cloud_artifact_1 = require_cloud_artifact();
    var environment_1 = require_environment();
    var CloudFormationStackArtifact = class extends cloud_artifact_1.CloudArtifact {
      constructor(assembly, artifactId, artifact) {
        var _b, _c;
        super(assembly, artifactId, artifact);
        const properties = this.manifest.properties || {};
        if (!properties.templateFile) {
          throw new Error('Invalid CloudFormation stack artifact. Missing "templateFile" property in cloud assembly manifest');
        }
        if (!artifact.environment) {
          throw new Error("Invalid CloudFormation stack artifact. Missing environment");
        }
        this.environment = environment_1.EnvironmentUtils.parse(artifact.environment);
        this.templateFile = properties.templateFile;
        this.parameters = (_b = properties.parameters) !== null && _b !== void 0 ? _b : {};
        this.tags = (_c = properties.tags) !== null && _c !== void 0 ? _c : this.tagsFromMetadata();
        this.assumeRoleArn = properties.assumeRoleArn;
        this.assumeRoleExternalId = properties.assumeRoleExternalId;
        this.cloudFormationExecutionRoleArn = properties.cloudFormationExecutionRoleArn;
        this.stackTemplateAssetObjectUrl = properties.stackTemplateAssetObjectUrl;
        this.requiresBootstrapStackVersion = properties.requiresBootstrapStackVersion;
        this.bootstrapStackVersionSsmParameter = properties.bootstrapStackVersionSsmParameter;
        this.terminationProtection = properties.terminationProtection;
        this.validateOnSynth = properties.validateOnSynth;
        this.stackName = properties.stackName || artifactId;
        this.assets = this.findMetadataByType(cxschema.ArtifactMetadataEntryType.ASSET).map((e) => e.data);
        this.displayName = this.stackName === artifactId ? this.stackName : `${artifactId} (${this.stackName})`;
        this.name = this.stackName;
        this.originalName = this.stackName;
      }
      get templateFullPath() {
        return path.join(this.assembly.directory, this.templateFile);
      }
      get template() {
        if (this._template === void 0) {
          this._template = JSON.parse(fs.readFileSync(this.templateFullPath, "utf-8"));
        }
        return this._template;
      }
      tagsFromMetadata() {
        var _b;
        const ret = {};
        for (const metadataEntry of this.findMetadataByType(cxschema.ArtifactMetadataEntryType.STACK_TAGS)) {
          for (const tag of (_b = metadataEntry.data) !== null && _b !== void 0 ? _b : []) {
            ret[tag.key] = tag.value;
          }
        }
        return ret;
      }
    };
    exports2.CloudFormationStackArtifact = CloudFormationStackArtifact;
    _a = JSII_RTTI_SYMBOL_1;
    CloudFormationStackArtifact[_a] = { fqn: "@aws-cdk/cx-api.CloudFormationStackArtifact", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/cx-api/lib/artifacts/tree-cloud-artifact.js
var require_tree_cloud_artifact = __commonJS({
  "asset-input/node_modules/@aws-cdk/cx-api/lib/artifacts/tree-cloud-artifact.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TreeCloudArtifact = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cloud_artifact_1 = require_cloud_artifact();
    var TreeCloudArtifact = class extends cloud_artifact_1.CloudArtifact {
      constructor(assembly, name, artifact) {
        super(assembly, name, artifact);
        const properties = this.manifest.properties || {};
        if (!properties.file) {
          throw new Error('Invalid TreeCloudArtifact. Missing "file" property');
        }
        this.file = properties.file;
      }
    };
    exports2.TreeCloudArtifact = TreeCloudArtifact;
    _a = JSII_RTTI_SYMBOL_1;
    TreeCloudArtifact[_a] = { fqn: "@aws-cdk/cx-api.TreeCloudArtifact", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/cx-api/lib/toposort.js
var require_toposort = __commonJS({
  "asset-input/node_modules/@aws-cdk/cx-api/lib/toposort.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.topologicalSort = void 0;
    function topologicalSort(xs, keyFn, depFn) {
      const remaining = new Map();
      for (const element of xs) {
        const key = keyFn(element);
        remaining.set(key, { key, element, dependencies: depFn(element) });
      }
      const ret = new Array();
      while (remaining.size > 0) {
        const selectable = Array.from(remaining.values()).filter((e) => e.dependencies.every((d) => !remaining.has(d)));
        selectable.sort((a, b) => a.key < b.key ? -1 : b.key < a.key ? 1 : 0);
        for (const selected of selectable) {
          ret.push(selected.element);
          remaining.delete(selected.key);
        }
        if (selectable.length === 0) {
          throw new Error(`Could not determine ordering between: ${Array.from(remaining.keys()).join(", ")}`);
        }
      }
      return ret;
    }
    exports2.topologicalSort = topologicalSort;
  }
});

// asset-input/node_modules/@aws-cdk/cx-api/lib/cloud-assembly.js
var require_cloud_assembly2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/cx-api/lib/cloud-assembly.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CloudAssemblyBuilder = exports2.CloudAssembly = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var fs = require("fs");
    var os = require("os");
    var path = require("path");
    var cxschema = require_lib3();
    var cloudformation_artifact_1 = require_cloudformation_artifact();
    var nested_cloud_assembly_artifact_1 = require_nested_cloud_assembly_artifact();
    var tree_cloud_artifact_1 = require_tree_cloud_artifact();
    var cloud_artifact_1 = require_cloud_artifact();
    var toposort_1 = require_toposort();
    var MANIFEST_FILE = "manifest.json";
    var CloudAssembly = class {
      constructor(directory) {
        this.directory = directory;
        this.manifest = cxschema.Manifest.loadAssemblyManifest(path.join(directory, MANIFEST_FILE));
        this.version = this.manifest.version;
        this.artifacts = this.renderArtifacts();
        this.runtime = this.manifest.runtime || { libraries: {} };
        this.validateDeps();
      }
      tryGetArtifact(id) {
        return this.artifacts.find((a) => a.id === id);
      }
      getStackByName(stackName) {
        const artifacts = this.artifacts.filter((a) => a instanceof cloudformation_artifact_1.CloudFormationStackArtifact && a.stackName === stackName);
        if (!artifacts || artifacts.length === 0) {
          throw new Error(`Unable to find stack with stack name "${stackName}"`);
        }
        if (artifacts.length > 1) {
          throw new Error(`There are multiple stacks with the stack name "${stackName}" (${artifacts.map((a) => a.id).join(",")}). Use "getStackArtifact(id)" instead`);
        }
        return artifacts[0];
      }
      getStack(stackName) {
        return this.getStackByName(stackName);
      }
      getStackArtifact(artifactId) {
        const artifact = this.tryGetArtifactRecursively(artifactId);
        if (!artifact) {
          throw new Error(`Unable to find artifact with id "${artifactId}"`);
        }
        if (!(artifact instanceof cloudformation_artifact_1.CloudFormationStackArtifact)) {
          throw new Error(`Artifact ${artifactId} is not a CloudFormation stack`);
        }
        return artifact;
      }
      tryGetArtifactRecursively(artifactId) {
        return this.stacksRecursively.find((a) => a.id === artifactId);
      }
      get stacksRecursively() {
        function search(stackArtifacts, assemblies) {
          if (assemblies.length === 0) {
            return stackArtifacts;
          }
          const [head, ...tail] = assemblies;
          const nestedAssemblies = head.nestedAssemblies.map((asm) => asm.nestedAssembly);
          return search(stackArtifacts.concat(head.stacks), tail.concat(nestedAssemblies));
        }
        ;
        return search([], [this]);
      }
      getNestedAssemblyArtifact(artifactId) {
        const artifact = this.tryGetArtifact(artifactId);
        if (!artifact) {
          throw new Error(`Unable to find artifact with id "${artifactId}"`);
        }
        if (!(artifact instanceof nested_cloud_assembly_artifact_1.NestedCloudAssemblyArtifact)) {
          throw new Error(`Found artifact '${artifactId}' but it's not a nested cloud assembly`);
        }
        return artifact;
      }
      getNestedAssembly(artifactId) {
        return this.getNestedAssemblyArtifact(artifactId).nestedAssembly;
      }
      tree() {
        const trees = this.artifacts.filter((a) => a.manifest.type === cxschema.ArtifactType.CDK_TREE);
        if (trees.length === 0) {
          return void 0;
        } else if (trees.length > 1) {
          throw new Error(`Multiple artifacts of type ${cxschema.ArtifactType.CDK_TREE} found in manifest`);
        }
        const tree = trees[0];
        if (!(tree instanceof tree_cloud_artifact_1.TreeCloudArtifact)) {
          throw new Error('"Tree" artifact is not of expected type');
        }
        return tree;
      }
      get stacks() {
        return this.artifacts.filter(isCloudFormationStackArtifact);
        function isCloudFormationStackArtifact(x) {
          return x instanceof cloudformation_artifact_1.CloudFormationStackArtifact;
        }
      }
      get nestedAssemblies() {
        return this.artifacts.filter(isNestedCloudAssemblyArtifact);
        function isNestedCloudAssemblyArtifact(x) {
          return x instanceof nested_cloud_assembly_artifact_1.NestedCloudAssemblyArtifact;
        }
      }
      validateDeps() {
        for (const artifact of this.artifacts) {
          ignore(artifact.dependencies);
        }
      }
      renderArtifacts() {
        const result = new Array();
        for (const [name, artifact] of Object.entries(this.manifest.artifacts || {})) {
          const cloudartifact = cloud_artifact_1.CloudArtifact.fromManifest(this, name, artifact);
          if (cloudartifact) {
            result.push(cloudartifact);
          }
        }
        return toposort_1.topologicalSort(result, (x) => x.id, (x) => x._dependencyIDs);
      }
    };
    exports2.CloudAssembly = CloudAssembly;
    _a = JSII_RTTI_SYMBOL_1;
    CloudAssembly[_a] = { fqn: "@aws-cdk/cx-api.CloudAssembly", version: "1.132.0" };
    var CloudAssemblyBuilder = class {
      constructor(outdir, props = {}) {
        var _c;
        this.artifacts = {};
        this.missing = new Array();
        this.outdir = determineOutputDirectory(outdir);
        this.assetOutdir = (_c = props.assetOutdir) !== null && _c !== void 0 ? _c : this.outdir;
        this.parentBuilder = props.parentBuilder;
        ensureDirSync(this.outdir);
      }
      addArtifact(id, manifest) {
        this.artifacts[id] = filterUndefined(manifest);
      }
      addMissing(missing) {
        var _c;
        if (this.missing.every((m) => m.key !== missing.key)) {
          this.missing.push(missing);
        }
        (_c = this.parentBuilder) === null || _c === void 0 ? void 0 : _c.addMissing(missing);
      }
      buildAssembly(options = {}) {
        let manifest = {
          version: cxschema.Manifest.version(),
          artifacts: this.artifacts,
          runtime: options.runtimeInfo,
          missing: this.missing.length > 0 ? this.missing : void 0
        };
        manifest = filterUndefined(manifest);
        const manifestFilePath = path.join(this.outdir, MANIFEST_FILE);
        cxschema.Manifest.saveAssemblyManifest(manifest, manifestFilePath);
        fs.writeFileSync(path.join(this.outdir, "cdk.out"), JSON.stringify({ version: manifest.version }));
        return new CloudAssembly(this.outdir);
      }
      createNestedAssembly(artifactId, displayName) {
        const directoryName = artifactId;
        const innerAsmDir = path.join(this.outdir, directoryName);
        this.addArtifact(artifactId, {
          type: cxschema.ArtifactType.NESTED_CLOUD_ASSEMBLY,
          properties: {
            directoryName,
            displayName
          }
        });
        return new CloudAssemblyBuilder(innerAsmDir, {
          assetOutdir: this.assetOutdir,
          parentBuilder: this
        });
      }
    };
    exports2.CloudAssemblyBuilder = CloudAssemblyBuilder;
    _b = JSII_RTTI_SYMBOL_1;
    CloudAssemblyBuilder[_b] = { fqn: "@aws-cdk/cx-api.CloudAssemblyBuilder", version: "1.132.0" };
    function filterUndefined(obj) {
      if (Array.isArray(obj)) {
        return obj.filter((x) => x !== void 0).map((x) => filterUndefined(x));
      }
      if (typeof obj === "object") {
        const ret = {};
        for (const [key, value] of Object.entries(obj)) {
          if (value === void 0) {
            continue;
          }
          ret[key] = filterUndefined(value);
        }
        return ret;
      }
      return obj;
    }
    function ignore(_x) {
      return;
    }
    function determineOutputDirectory(outdir) {
      return outdir !== null && outdir !== void 0 ? outdir : fs.mkdtempSync(path.join(fs.realpathSync(os.tmpdir()), "cdk.out"));
    }
    function ensureDirSync(dir) {
      if (fs.existsSync(dir)) {
        if (!fs.statSync(dir).isDirectory()) {
          throw new Error(`${dir} must be a directory`);
        }
      } else {
        fs.mkdirSync(dir, { recursive: true });
      }
    }
  }
});

// asset-input/node_modules/@aws-cdk/cx-api/lib/artifacts/nested-cloud-assembly-artifact.js
var require_nested_cloud_assembly_artifact = __commonJS({
  "asset-input/node_modules/@aws-cdk/cx-api/lib/artifacts/nested-cloud-assembly-artifact.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NestedCloudAssemblyArtifact = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var path = require("path");
    var cloud_artifact_1 = require_cloud_artifact();
    var cloud_assembly_1 = require_cloud_assembly2();
    var NestedCloudAssemblyArtifact = class extends cloud_artifact_1.CloudArtifact {
      constructor(assembly, name, artifact) {
        var _b;
        super(assembly, name, artifact);
        const properties = this.manifest.properties || {};
        this.directoryName = properties.directoryName;
        this.displayName = (_b = properties.displayName) !== null && _b !== void 0 ? _b : name;
      }
      get fullPath() {
        return path.join(this.assembly.directory, this.directoryName);
      }
      get nestedAssembly() {
        if (!this._nestedAssembly) {
          this._nestedAssembly = new cloud_assembly_1.CloudAssembly(this.fullPath);
        }
        return this._nestedAssembly;
      }
    };
    exports2.NestedCloudAssemblyArtifact = NestedCloudAssemblyArtifact;
    _a = JSII_RTTI_SYMBOL_1;
    NestedCloudAssemblyArtifact[_a] = { fqn: "@aws-cdk/cx-api.NestedCloudAssemblyArtifact", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/cx-api/lib/cloud-artifact.js
var require_cloud_artifact = __commonJS({
  "asset-input/node_modules/@aws-cdk/cx-api/lib/cloud-artifact.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CloudArtifact = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cxschema = require_lib3();
    var metadata_1 = require_metadata2();
    var CloudArtifact = class {
      constructor(assembly, id, manifest) {
        this.assembly = assembly;
        this.id = id;
        this.manifest = manifest;
        this.messages = this.renderMessages();
        this._dependencyIDs = manifest.dependencies || [];
      }
      static fromManifest(assembly, id, artifact) {
        switch (artifact.type) {
          case cxschema.ArtifactType.AWS_CLOUDFORMATION_STACK:
            return new cloudformation_artifact_1.CloudFormationStackArtifact(assembly, id, artifact);
          case cxschema.ArtifactType.CDK_TREE:
            return new tree_cloud_artifact_1.TreeCloudArtifact(assembly, id, artifact);
          case cxschema.ArtifactType.ASSET_MANIFEST:
            return new asset_manifest_artifact_1.AssetManifestArtifact(assembly, id, artifact);
          case cxschema.ArtifactType.NESTED_CLOUD_ASSEMBLY:
            return new nested_cloud_assembly_artifact_1.NestedCloudAssemblyArtifact(assembly, id, artifact);
          default:
            return void 0;
        }
      }
      get dependencies() {
        if (this._deps) {
          return this._deps;
        }
        this._deps = this._dependencyIDs.map((id) => {
          const dep = this.assembly.tryGetArtifact(id);
          if (!dep) {
            throw new Error(`Artifact ${this.id} depends on non-existing artifact ${id}`);
          }
          return dep;
        });
        return this._deps;
      }
      findMetadataByType(type) {
        const result = new Array();
        for (const path of Object.keys(this.manifest.metadata || {})) {
          for (const entry of (this.manifest.metadata || {})[path]) {
            if (entry.type === type) {
              result.push(__spreadValues({ path }, entry));
            }
          }
        }
        return result;
      }
      renderMessages() {
        const messages = new Array();
        for (const [id, metadata] of Object.entries(this.manifest.metadata || {})) {
          for (const entry of metadata) {
            let level;
            switch (entry.type) {
              case cxschema.ArtifactMetadataEntryType.WARN:
                level = metadata_1.SynthesisMessageLevel.WARNING;
                break;
              case cxschema.ArtifactMetadataEntryType.ERROR:
                level = metadata_1.SynthesisMessageLevel.ERROR;
                break;
              case cxschema.ArtifactMetadataEntryType.INFO:
                level = metadata_1.SynthesisMessageLevel.INFO;
                break;
              default:
                continue;
            }
            messages.push({ level, entry, id });
          }
        }
        return messages;
      }
      get hierarchicalId() {
        var _b;
        return (_b = this.manifest.displayName) !== null && _b !== void 0 ? _b : this.id;
      }
    };
    exports2.CloudArtifact = CloudArtifact;
    _a = JSII_RTTI_SYMBOL_1;
    CloudArtifact[_a] = { fqn: "@aws-cdk/cx-api.CloudArtifact", version: "1.132.0" };
    var asset_manifest_artifact_1 = require_asset_manifest_artifact();
    var cloudformation_artifact_1 = require_cloudformation_artifact();
    var nested_cloud_assembly_artifact_1 = require_nested_cloud_assembly_artifact();
    var tree_cloud_artifact_1 = require_tree_cloud_artifact();
  }
});

// asset-input/node_modules/@aws-cdk/cx-api/lib/assets.js
var require_assets2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/cx-api/lib/assets.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ASSET_PREFIX_SEPARATOR = exports2.ASSET_RESOURCE_METADATA_PROPERTY_KEY = exports2.ASSET_RESOURCE_METADATA_PATH_KEY = exports2.ASSET_RESOURCE_METADATA_ENABLED_CONTEXT = void 0;
    exports2.ASSET_RESOURCE_METADATA_ENABLED_CONTEXT = "aws:cdk:enable-asset-metadata";
    exports2.ASSET_RESOURCE_METADATA_PATH_KEY = "aws:asset:path";
    exports2.ASSET_RESOURCE_METADATA_PROPERTY_KEY = "aws:asset:property";
    exports2.ASSET_PREFIX_SEPARATOR = "||";
  }
});

// asset-input/node_modules/@aws-cdk/cx-api/lib/features.js
var require_features = __commonJS({
  "asset-input/node_modules/@aws-cdk/cx-api/lib/features.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.futureFlagDefault = exports2.FUTURE_FLAGS_EXPIRED = exports2.FUTURE_FLAGS = exports2.CLOUDFRONT_DEFAULT_SECURITY_POLICY_TLS_V1_2_2021 = exports2.LAMBDA_RECOGNIZE_VERSION_PROPS = exports2.EFS_DEFAULT_ENCRYPTION_AT_REST = exports2.APIGATEWAY_USAGEPLANKEY_ORDERINSENSITIVE_ID = exports2.RDS_LOWERCASE_DB_IDENTIFIER = exports2.ECS_REMOVE_DEFAULT_DESIRED_COUNT = exports2.S3_GRANT_WRITE_WITHOUT_ACL = exports2.KMS_DEFAULT_KEY_POLICIES = exports2.SECRETS_MANAGER_PARSE_OWNED_SECRET_NAME = exports2.DOCKER_IGNORE_SUPPORT = exports2.STACK_RELATIVE_EXPORTS_CONTEXT = exports2.NEW_STYLE_STACK_SYNTHESIS_CONTEXT = exports2.ENABLE_DIFF_NO_FAIL = exports2.ENABLE_DIFF_NO_FAIL_CONTEXT = exports2.ENABLE_STACK_NAME_DUPLICATES_CONTEXT = void 0;
    exports2.ENABLE_STACK_NAME_DUPLICATES_CONTEXT = "@aws-cdk/core:enableStackNameDuplicates";
    exports2.ENABLE_DIFF_NO_FAIL_CONTEXT = "aws-cdk:enableDiffNoFail";
    exports2.ENABLE_DIFF_NO_FAIL = exports2.ENABLE_DIFF_NO_FAIL_CONTEXT;
    exports2.NEW_STYLE_STACK_SYNTHESIS_CONTEXT = "@aws-cdk/core:newStyleStackSynthesis";
    exports2.STACK_RELATIVE_EXPORTS_CONTEXT = "@aws-cdk/core:stackRelativeExports";
    exports2.DOCKER_IGNORE_SUPPORT = "@aws-cdk/aws-ecr-assets:dockerIgnoreSupport";
    exports2.SECRETS_MANAGER_PARSE_OWNED_SECRET_NAME = "@aws-cdk/aws-secretsmanager:parseOwnedSecretName";
    exports2.KMS_DEFAULT_KEY_POLICIES = "@aws-cdk/aws-kms:defaultKeyPolicies";
    exports2.S3_GRANT_WRITE_WITHOUT_ACL = "@aws-cdk/aws-s3:grantWriteWithoutAcl";
    exports2.ECS_REMOVE_DEFAULT_DESIRED_COUNT = "@aws-cdk/aws-ecs-patterns:removeDefaultDesiredCount";
    exports2.RDS_LOWERCASE_DB_IDENTIFIER = "@aws-cdk/aws-rds:lowercaseDbIdentifier";
    exports2.APIGATEWAY_USAGEPLANKEY_ORDERINSENSITIVE_ID = "@aws-cdk/aws-apigateway:usagePlanKeyOrderInsensitiveId";
    exports2.EFS_DEFAULT_ENCRYPTION_AT_REST = "@aws-cdk/aws-efs:defaultEncryptionAtRest";
    exports2.LAMBDA_RECOGNIZE_VERSION_PROPS = "@aws-cdk/aws-lambda:recognizeVersionProps";
    exports2.CLOUDFRONT_DEFAULT_SECURITY_POLICY_TLS_V1_2_2021 = "@aws-cdk/aws-cloudfront:defaultSecurityPolicyTLSv1.2_2021";
    exports2.FUTURE_FLAGS = {
      [exports2.APIGATEWAY_USAGEPLANKEY_ORDERINSENSITIVE_ID]: true,
      [exports2.ENABLE_STACK_NAME_DUPLICATES_CONTEXT]: true,
      [exports2.ENABLE_DIFF_NO_FAIL_CONTEXT]: true,
      [exports2.STACK_RELATIVE_EXPORTS_CONTEXT]: true,
      [exports2.DOCKER_IGNORE_SUPPORT]: true,
      [exports2.SECRETS_MANAGER_PARSE_OWNED_SECRET_NAME]: true,
      [exports2.KMS_DEFAULT_KEY_POLICIES]: true,
      [exports2.S3_GRANT_WRITE_WITHOUT_ACL]: true,
      [exports2.ECS_REMOVE_DEFAULT_DESIRED_COUNT]: true,
      [exports2.RDS_LOWERCASE_DB_IDENTIFIER]: true,
      [exports2.EFS_DEFAULT_ENCRYPTION_AT_REST]: true,
      [exports2.LAMBDA_RECOGNIZE_VERSION_PROPS]: true,
      [exports2.CLOUDFRONT_DEFAULT_SECURITY_POLICY_TLS_V1_2_2021]: true
    };
    exports2.FUTURE_FLAGS_EXPIRED = [];
    var FUTURE_FLAGS_DEFAULTS = {
      [exports2.APIGATEWAY_USAGEPLANKEY_ORDERINSENSITIVE_ID]: false,
      [exports2.ENABLE_STACK_NAME_DUPLICATES_CONTEXT]: false,
      [exports2.ENABLE_DIFF_NO_FAIL_CONTEXT]: false,
      [exports2.STACK_RELATIVE_EXPORTS_CONTEXT]: false,
      [exports2.NEW_STYLE_STACK_SYNTHESIS_CONTEXT]: false,
      [exports2.DOCKER_IGNORE_SUPPORT]: false,
      [exports2.SECRETS_MANAGER_PARSE_OWNED_SECRET_NAME]: false,
      [exports2.KMS_DEFAULT_KEY_POLICIES]: false,
      [exports2.S3_GRANT_WRITE_WITHOUT_ACL]: false,
      [exports2.ECS_REMOVE_DEFAULT_DESIRED_COUNT]: false,
      [exports2.RDS_LOWERCASE_DB_IDENTIFIER]: false,
      [exports2.EFS_DEFAULT_ENCRYPTION_AT_REST]: false,
      [exports2.LAMBDA_RECOGNIZE_VERSION_PROPS]: false,
      [exports2.CLOUDFRONT_DEFAULT_SECURITY_POLICY_TLS_V1_2_2021]: false
    };
    function futureFlagDefault(flag) {
      return FUTURE_FLAGS_DEFAULTS[flag];
    }
    exports2.futureFlagDefault = futureFlagDefault;
  }
});

// asset-input/node_modules/@aws-cdk/cx-api/lib/placeholders.js
var require_placeholders = __commonJS({
  "asset-input/node_modules/@aws-cdk/cx-api/lib/placeholders.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EnvironmentPlaceholders = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var EnvironmentPlaceholders = class {
      static replace(object, values) {
        return this.recurse(object, (value) => {
          value = replaceAll(value, EnvironmentPlaceholders.CURRENT_REGION, values.region);
          value = replaceAll(value, EnvironmentPlaceholders.CURRENT_ACCOUNT, values.accountId);
          value = replaceAll(value, EnvironmentPlaceholders.CURRENT_PARTITION, values.partition);
          return value;
        });
      }
      static async replaceAsync(object, provider) {
        let needRegion = false;
        let needAccountId = false;
        let needPartition = false;
        this.recurse(object, (value) => {
          if (value.indexOf(EnvironmentPlaceholders.CURRENT_REGION) > 1) {
            needRegion = true;
          }
          if (value.indexOf(EnvironmentPlaceholders.CURRENT_ACCOUNT) > 1) {
            needAccountId = true;
          }
          if (value.indexOf(EnvironmentPlaceholders.CURRENT_PARTITION) > 1) {
            needPartition = true;
          }
          return value;
        });
        const region = needRegion ? await provider.region() : void 0;
        const accountId = needAccountId ? await provider.accountId() : void 0;
        const partition = needPartition ? await provider.partition() : void 0;
        return this.recurse(object, (value) => {
          value = replaceAll(value, EnvironmentPlaceholders.CURRENT_REGION, region !== null && region !== void 0 ? region : "WONTHAPPEN");
          value = replaceAll(value, EnvironmentPlaceholders.CURRENT_ACCOUNT, accountId !== null && accountId !== void 0 ? accountId : "WONTHAPPEN");
          value = replaceAll(value, EnvironmentPlaceholders.CURRENT_PARTITION, partition !== null && partition !== void 0 ? partition : "WONTHAPPEN");
          return value;
        });
      }
      static recurse(value, cb) {
        if (typeof value === "string") {
          return cb(value);
        }
        if (typeof value !== "object" || value === null) {
          return value;
        }
        if (Array.isArray(value)) {
          return value.map((x) => this.recurse(x, cb));
        }
        const ret = {};
        for (const [key, inner] of Object.entries(value)) {
          ret[key] = this.recurse(inner, cb);
        }
        return ret;
      }
    };
    exports2.EnvironmentPlaceholders = EnvironmentPlaceholders;
    _a = JSII_RTTI_SYMBOL_1;
    EnvironmentPlaceholders[_a] = { fqn: "@aws-cdk/cx-api.EnvironmentPlaceholders", version: "1.132.0" };
    EnvironmentPlaceholders.CURRENT_REGION = "${AWS::Region}";
    EnvironmentPlaceholders.CURRENT_ACCOUNT = "${AWS::AccountId}";
    EnvironmentPlaceholders.CURRENT_PARTITION = "${AWS::Partition}";
    function replaceAll(s, search, replace) {
      return s.split(search).join(replace);
    }
  }
});

// asset-input/node_modules/@aws-cdk/cx-api/lib/app.js
var require_app = __commonJS({
  "asset-input/node_modules/@aws-cdk/cx-api/lib/app.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BUNDLING_STACKS = exports2.DISABLE_METADATA_STACK_TRACE = exports2.DISABLE_ASSET_STAGING_CONTEXT = exports2.ANALYTICS_REPORTING_ENABLED_CONTEXT = exports2.PATH_METADATA_ENABLE_CONTEXT = void 0;
    exports2.PATH_METADATA_ENABLE_CONTEXT = "aws:cdk:enable-path-metadata";
    exports2.ANALYTICS_REPORTING_ENABLED_CONTEXT = "aws:cdk:version-reporting";
    exports2.DISABLE_ASSET_STAGING_CONTEXT = "aws:cdk:disable-asset-staging";
    exports2.DISABLE_METADATA_STACK_TRACE = "aws:cdk:disable-stack-trace";
    exports2.BUNDLING_STACKS = "aws:cdk:bundling-stacks";
  }
});

// asset-input/node_modules/@aws-cdk/cx-api/lib/index.js
var require_lib5 = __commonJS({
  "asset-input/node_modules/@aws-cdk/cx-api/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_cxapi(), exports2);
    __exportStar(require_vpc(), exports2);
    __exportStar(require_ami(), exports2);
    __exportStar(require_load_balancer(), exports2);
    __exportStar(require_availability_zones(), exports2);
    __exportStar(require_endpoint_service_availability_zones(), exports2);
    __exportStar(require_security_group(), exports2);
    __exportStar(require_key(), exports2);
    __exportStar(require_cloud_artifact(), exports2);
    __exportStar(require_asset_manifest_artifact(), exports2);
    __exportStar(require_cloudformation_artifact(), exports2);
    __exportStar(require_tree_cloud_artifact(), exports2);
    __exportStar(require_nested_cloud_assembly_artifact(), exports2);
    __exportStar(require_cloud_assembly2(), exports2);
    __exportStar(require_assets2(), exports2);
    __exportStar(require_environment(), exports2);
    __exportStar(require_metadata2(), exports2);
    __exportStar(require_features(), exports2);
    __exportStar(require_placeholders(), exports2);
    __exportStar(require_app(), exports2);
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/debug.js
var require_debug2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/debug.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.debugModeEnabled = exports2.CDK_DEBUG = void 0;
    var process_1 = require("process");
    exports2.CDK_DEBUG = "CDK_DEBUG";
    function debugModeEnabled() {
      return isTruthy(process_1.env[exports2.CDK_DEBUG]);
    }
    exports2.debugModeEnabled = debugModeEnabled;
    var TRUTHY_VALUES = new Set(["1", "on", "true"]);
    function isTruthy(value) {
      if (!value) {
        return false;
      }
      return TRUTHY_VALUES.has(value.toLowerCase());
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/stack-trace.js
var require_stack_trace2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/stack-trace.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.captureStackTrace = void 0;
    var debug_1 = require_debug2();
    function captureStackTrace(below = captureStackTrace, limit = Number.MAX_SAFE_INTEGER) {
      if (!debug_1.debugModeEnabled()) {
        return ["stack traces disabled"];
      }
      const object = {};
      const previousLimit = Error.stackTraceLimit;
      try {
        Error.stackTraceLimit = limit;
        Error.captureStackTrace(object, below);
      } finally {
        Error.stackTraceLimit = previousLimit;
      }
      if (!object.stack) {
        return [];
      }
      return object.stack.split("\n").slice(1).map((s) => s.replace(/^\s*at\s+/, ""));
    }
    exports2.captureStackTrace = captureStackTrace;
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/lazy.js
var require_lazy = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/lazy.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Lazy = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var debug_1 = require_debug2();
    var stack_trace_1 = require_stack_trace2();
    var token_1 = require_token();
    var Lazy = class {
      constructor() {
      }
      static stringValue(producer, options = {}) {
        return token_1.Token.asString(new LazyString(producer, false), options);
      }
      static string(producer, options = {}) {
        return token_1.Token.asString(new LazyString(producer, true), options);
      }
      static uncachedString(producer, options = {}) {
        return token_1.Token.asString(new LazyString(producer, false), options);
      }
      static numberValue(producer) {
        return token_1.Token.asNumber(new LazyNumber(producer, false));
      }
      static number(producer) {
        return token_1.Token.asNumber(new LazyNumber(producer, true));
      }
      static uncachedNumber(producer) {
        return token_1.Token.asNumber(new LazyNumber(producer, false));
      }
      static listValue(producer, options = {}) {
        return token_1.Token.asList(new LazyList(producer, false, options), options);
      }
      static uncachedList(producer, options = {}) {
        return token_1.Token.asList(new LazyList(producer, false, options), options);
      }
      static list(producer, options = {}) {
        return token_1.Token.asList(new LazyList(producer, true, options), options);
      }
      static anyValue(producer, options = {}) {
        return new LazyAny(producer, false, options);
      }
      static any(producer, options = {}) {
        return new LazyAny(producer, true, options);
      }
      static uncachedAny(producer, options = {}) {
        return new LazyAny(producer, false, options);
      }
    };
    exports2.Lazy = Lazy;
    _a = JSII_RTTI_SYMBOL_1;
    Lazy[_a] = { fqn: "@aws-cdk/core.Lazy", version: "1.132.0" };
    var LazyBase = class {
      constructor(producer, cache) {
        this.producer = producer;
        this.cache = cache;
        this.creationStack = debug_1.debugModeEnabled() ? stack_trace_1.captureStackTrace(this.constructor) : [`Execute again with ${debug_1.CDK_DEBUG}=true to capture stack traces`];
      }
      resolve(context) {
        var _b;
        if (this.cache) {
          return (_b = this._cached) !== null && _b !== void 0 ? _b : this._cached = this.producer.produce(context);
        } else {
          return this.producer.produce(context);
        }
      }
      toString() {
        return token_1.Token.asString(this);
      }
      toJSON() {
        return "<unresolved-lazy>";
      }
    };
    var LazyString = class extends LazyBase {
    };
    var LazyNumber = class extends LazyBase {
    };
    var LazyList = class extends LazyBase {
      constructor(producer, cache, options = {}) {
        super(producer, cache);
        this.options = options;
      }
      resolve(context) {
        const resolved = super.resolve(context);
        if ((resolved === null || resolved === void 0 ? void 0 : resolved.length) === 0 && this.options.omitEmpty) {
          return void 0;
        }
        return resolved;
      }
    };
    var LazyAny = class extends LazyBase {
      constructor(producer, cache, options = {}) {
        super(producer, cache);
        this.options = options;
      }
      resolve(context) {
        const resolved = super.resolve(context);
        if (Array.isArray(resolved) && resolved.length === 0 && this.options.omitEmptyArray) {
          return void 0;
        }
        return resolved;
      }
    };
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/string-fragments.js
var require_string_fragments = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/string-fragments.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TokenizedStringFragments = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var token_1 = require_token();
    var TokenizedStringFragments = class {
      constructor() {
        this.fragments = new Array();
      }
      get firstToken() {
        const first = this.fragments[0];
        if (first.type === "token") {
          return first.token;
        }
        return void 0;
      }
      get firstValue() {
        return fragmentValue(this.fragments[0]);
      }
      get length() {
        return this.fragments.length;
      }
      addLiteral(lit) {
        this.fragments.push({ type: "literal", lit });
      }
      addToken(token) {
        this.fragments.push({ type: "token", token });
      }
      addIntrinsic(value) {
        this.fragments.push({ type: "intrinsic", value });
      }
      get tokens() {
        const ret = new Array();
        for (const f of this.fragments) {
          if (f.type === "token") {
            ret.push(f.token);
          }
        }
        return ret;
      }
      mapTokens(mapper) {
        const ret = new TokenizedStringFragments();
        for (const f of this.fragments) {
          switch (f.type) {
            case "literal":
              ret.addLiteral(f.lit);
              break;
            case "token":
              const mapped = mapper.mapToken(f.token);
              if (token_1.isResolvableObject(mapped)) {
                ret.addToken(mapped);
              } else {
                ret.addIntrinsic(mapped);
              }
              break;
            case "intrinsic":
              ret.addIntrinsic(f.value);
              break;
          }
        }
        return ret;
      }
      join(concat) {
        if (this.fragments.length === 0) {
          return concat.join(void 0, void 0);
        }
        if (this.fragments.length === 1) {
          return this.firstValue;
        }
        const values = this.fragments.map(fragmentValue);
        while (values.length > 1) {
          const prefix = values.splice(0, 2);
          values.splice(0, 0, concat.join(prefix[0], prefix[1]));
        }
        return values[0];
      }
    };
    exports2.TokenizedStringFragments = TokenizedStringFragments;
    _a = JSII_RTTI_SYMBOL_1;
    TokenizedStringFragments[_a] = { fqn: "@aws-cdk/core.TokenizedStringFragments", version: "1.132.0" };
    function fragmentValue(fragment) {
      switch (fragment.type) {
        case "literal":
          return fragment.lit;
        case "token":
          return fragment.token.toString();
        case "intrinsic":
          return fragment.value;
      }
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/private/encoding.js
var require_encoding = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/private/encoding.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.extractTokenDouble = exports2.createTokenDouble = exports2.unresolved = exports2.containsListTokenElement = exports2.NullConcat = exports2.regexQuote = exports2.TokenString = exports2.VALID_KEY_CHARS = exports2.END_TOKEN_MARKER = exports2.BEGIN_LIST_TOKEN_MARKER = exports2.BEGIN_STRING_TOKEN_MARKER = void 0;
    var string_fragments_1 = require_string_fragments();
    var token_1 = require_token();
    exports2.BEGIN_STRING_TOKEN_MARKER = "${Token[";
    exports2.BEGIN_LIST_TOKEN_MARKER = "#{Token[";
    exports2.END_TOKEN_MARKER = "]}";
    exports2.VALID_KEY_CHARS = "a-zA-Z0-9:._-";
    var QUOTED_BEGIN_STRING_TOKEN_MARKER = regexQuote(exports2.BEGIN_STRING_TOKEN_MARKER);
    var QUOTED_BEGIN_LIST_TOKEN_MARKER = regexQuote(exports2.BEGIN_LIST_TOKEN_MARKER);
    var QUOTED_END_TOKEN_MARKER = regexQuote(exports2.END_TOKEN_MARKER);
    var STRING_TOKEN_REGEX = new RegExp(`${QUOTED_BEGIN_STRING_TOKEN_MARKER}([${exports2.VALID_KEY_CHARS}]+)${QUOTED_END_TOKEN_MARKER}`, "g");
    var LIST_TOKEN_REGEX = new RegExp(`${QUOTED_BEGIN_LIST_TOKEN_MARKER}([${exports2.VALID_KEY_CHARS}]+)${QUOTED_END_TOKEN_MARKER}`, "g");
    var TokenString = class {
      constructor(str, re) {
        this.str = str;
        this.re = re;
      }
      static forString(s) {
        return new TokenString(s, STRING_TOKEN_REGEX);
      }
      static forListToken(s) {
        return new TokenString(s, LIST_TOKEN_REGEX);
      }
      split(lookup) {
        const ret = new string_fragments_1.TokenizedStringFragments();
        let rest = 0;
        this.re.lastIndex = 0;
        let m = this.re.exec(this.str);
        while (m) {
          if (m.index > rest) {
            ret.addLiteral(this.str.substring(rest, m.index));
          }
          ret.addToken(lookup(m[1]));
          rest = this.re.lastIndex;
          m = this.re.exec(this.str);
        }
        if (rest < this.str.length) {
          ret.addLiteral(this.str.substring(rest));
        }
        return ret;
      }
      test() {
        this.re.lastIndex = 0;
        return this.re.test(this.str);
      }
    };
    exports2.TokenString = TokenString;
    function regexQuote(s) {
      return s.replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
    }
    exports2.regexQuote = regexQuote;
    var NullConcat = class {
      join(_left, _right) {
        return void 0;
      }
    };
    exports2.NullConcat = NullConcat;
    function containsListTokenElement(xs) {
      return xs.some((x) => typeof x === "string" && TokenString.forListToken(x).test());
    }
    exports2.containsListTokenElement = containsListTokenElement;
    function unresolved(obj) {
      if (typeof obj === "string") {
        return TokenString.forString(obj).test();
      } else if (typeof obj === "number") {
        return extractTokenDouble(obj) !== void 0;
      } else if (Array.isArray(obj) && obj.length === 1) {
        return typeof obj[0] === "string" && TokenString.forListToken(obj[0]).test();
      } else {
        return token_1.isResolvableObject(obj);
      }
    }
    exports2.unresolved = unresolved;
    var DOUBLE_TOKEN_MARKER_BITS = 64511 << 16;
    var MAX_ENCODABLE_INTEGER = Math.pow(2, 48) - 1;
    var BITS32 = Math.pow(2, 32);
    function createTokenDouble(x) {
      if (Math.floor(x) !== x || x < 0) {
        throw new Error("Can only encode positive integers");
      }
      if (x > MAX_ENCODABLE_INTEGER) {
        throw new Error(`Got an index too large to encode: ${x}`);
      }
      const buf = new ArrayBuffer(8);
      const ints = new Uint32Array(buf);
      ints[0] = x & 4294967295;
      ints[1] = shr32(x) & 65535 | DOUBLE_TOKEN_MARKER_BITS;
      return new Float64Array(buf)[0];
    }
    exports2.createTokenDouble = createTokenDouble;
    function shr32(x) {
      return Math.floor(x / BITS32);
    }
    function shl32(x) {
      return x * BITS32;
    }
    function extractTokenDouble(encoded) {
      const buf = new ArrayBuffer(8);
      new Float64Array(buf)[0] = encoded;
      const ints = new Uint32Array(buf);
      if ((ints[1] & 4294901760) !== DOUBLE_TOKEN_MARKER_BITS) {
        return void 0;
      }
      return ints[0] + shl32(ints[1] & 65535);
    }
    exports2.extractTokenDouble = extractTokenDouble;
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/private/intrinsic.js
var require_intrinsic = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/private/intrinsic.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Intrinsic = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var stack_trace_1 = require_stack_trace2();
    var token_1 = require_token();
    var Intrinsic = class {
      constructor(value, options = {}) {
        var _b;
        if (isFunction(value)) {
          throw new Error(`Argument to Intrinsic must be a plain value object, got ${value}`);
        }
        this.creationStack = ((_b = options.stackTrace) !== null && _b !== void 0 ? _b : true) ? stack_trace_1.captureStackTrace() : [];
        this.value = value;
      }
      resolve(_context) {
        return this.value;
      }
      toString() {
        return token_1.Token.asString(this);
      }
      toJSON() {
        return "<unresolved-token>";
      }
      newError(message) {
        return new Error(`${message}
Token created:
    at ${this.creationStack.join("\n    at ")}
Error thrown:`);
      }
    };
    exports2.Intrinsic = Intrinsic;
    _a = JSII_RTTI_SYMBOL_1;
    Intrinsic[_a] = { fqn: "@aws-cdk/core.Intrinsic", version: "1.132.0" };
    function isFunction(x) {
      return typeof x === "function";
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/private/token-map.js
var require_token_map = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/private/token-map.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TokenMap = void 0;
    var token_1 = require_token();
    var encoding_1 = require_encoding();
    var glob = global;
    var STRING_SYMBOL = Symbol.for("@aws-cdk/core.TokenMap.STRING");
    var LIST_SYMBOL = Symbol.for("@aws-cdk/core.TokenMap.LIST");
    var NUMBER_SYMBOL = Symbol.for("@aws-cdk/core.TokenMap.NUMBER");
    var TokenMap = class {
      constructor() {
        this.stringTokenMap = new Map();
        this.numberTokenMap = new Map();
        this.tokenCounter = Math.floor(Math.random() * 10);
      }
      static instance() {
        if (!glob.__cdkTokenMap) {
          glob.__cdkTokenMap = new TokenMap();
        }
        return glob.__cdkTokenMap;
      }
      registerString(token, displayHint) {
        return cachedValue(token, STRING_SYMBOL, () => {
          const key = this.registerStringKey(token, displayHint);
          return `${encoding_1.BEGIN_STRING_TOKEN_MARKER}${key}${encoding_1.END_TOKEN_MARKER}`;
        });
      }
      registerList(token, displayHint) {
        return cachedValue(token, LIST_SYMBOL, () => {
          const key = this.registerStringKey(token, displayHint);
          return [`${encoding_1.BEGIN_LIST_TOKEN_MARKER}${key}${encoding_1.END_TOKEN_MARKER}`];
        });
      }
      registerNumber(token) {
        return cachedValue(token, NUMBER_SYMBOL, () => {
          return this.registerNumberKey(token);
        });
      }
      tokenFromEncoding(x) {
        if (token_1.isResolvableObject(x)) {
          return x;
        }
        if (typeof x === "string") {
          return this.lookupString(x);
        }
        if (Array.isArray(x)) {
          return this.lookupList(x);
        }
        if (token_1.Token.isUnresolved(x)) {
          return x;
        }
        return void 0;
      }
      lookupString(s) {
        const fragments = this.splitString(s);
        if (fragments.tokens.length > 0 && fragments.length === 1) {
          return fragments.firstToken;
        }
        return void 0;
      }
      lookupList(xs) {
        if (xs.length !== 1) {
          return void 0;
        }
        const str = encoding_1.TokenString.forListToken(xs[0]);
        const fragments = str.split(this.lookupToken.bind(this));
        if (fragments.length === 1) {
          return fragments.firstToken;
        }
        return void 0;
      }
      splitString(s) {
        const str = encoding_1.TokenString.forString(s);
        return str.split(this.lookupToken.bind(this));
      }
      lookupNumberToken(x) {
        const tokenIndex = encoding_1.extractTokenDouble(x);
        if (tokenIndex === void 0) {
          return void 0;
        }
        const t = this.numberTokenMap.get(tokenIndex);
        if (t === void 0) {
          throw new Error("Encoded representation of unknown number Token found");
        }
        return t;
      }
      lookupToken(key) {
        const token = this.stringTokenMap.get(key);
        if (!token) {
          throw new Error(`Unrecognized token key: ${key}`);
        }
        return token;
      }
      registerStringKey(token, displayHint) {
        const counter = this.tokenCounter++;
        const representation = (displayHint || "TOKEN").replace(new RegExp(`[^${encoding_1.VALID_KEY_CHARS}]`, "g"), ".");
        const key = `${representation}.${counter}`;
        this.stringTokenMap.set(key, token);
        return key;
      }
      registerNumberKey(token) {
        const counter = this.tokenCounter++;
        this.numberTokenMap.set(counter, token);
        return encoding_1.createTokenDouble(counter);
      }
    };
    exports2.TokenMap = TokenMap;
    function cachedValue(x, sym, prod) {
      let cached = x[sym];
      if (cached === void 0) {
        cached = prod();
        Object.defineProperty(x, sym, { value: cached });
      }
      return cached;
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/resolvable.js
var require_resolvable = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/resolvable.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DefaultTokenResolver = exports2.StringConcat = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var encoding_1 = require_encoding();
    var token_map_1 = require_token_map();
    var StringConcat = class {
      join(left, right) {
        if (left === void 0) {
          return right !== void 0 ? `${right}` : void 0;
        }
        if (right === void 0) {
          return `${left}`;
        }
        return `${left}${right}`;
      }
    };
    exports2.StringConcat = StringConcat;
    _a = JSII_RTTI_SYMBOL_1;
    StringConcat[_a] = { fqn: "@aws-cdk/core.StringConcat", version: "1.132.0" };
    var DefaultTokenResolver = class {
      constructor(concat) {
        this.concat = concat;
      }
      resolveToken(t, context, postProcessor) {
        try {
          let resolved = t.resolve(context);
          resolved = context.resolve(resolved);
          resolved = postProcessor.postProcess(resolved, context);
          return resolved;
        } catch (e) {
          let message = `Resolution error: ${e.message}.`;
          if (t.creationStack && t.creationStack.length > 0) {
            message += `
Object creation stack:
  at ${t.creationStack.join("\n  at ")}`;
          }
          e.message = message;
          throw e;
        }
      }
      resolveString(fragments, context) {
        return fragments.mapTokens({ mapToken: context.resolve }).join(this.concat);
      }
      resolveList(xs, context) {
        if (xs.length !== 1) {
          throw new Error(`Cannot add elements to list token, got: ${xs}`);
        }
        const str = encoding_1.TokenString.forListToken(xs[0]);
        const tokenMap = token_map_1.TokenMap.instance();
        const fragments = str.split(tokenMap.lookupToken.bind(tokenMap));
        if (fragments.length !== 1) {
          throw new Error(`Cannot concatenate strings in a tokenized string array, got: ${xs[0]}`);
        }
        return fragments.mapTokens({ mapToken: context.resolve }).firstValue;
      }
    };
    exports2.DefaultTokenResolver = DefaultTokenResolver;
    _b = JSII_RTTI_SYMBOL_1;
    DefaultTokenResolver[_b] = { fqn: "@aws-cdk/core.DefaultTokenResolver", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/private/resolve.js
var require_resolve = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/private/resolve.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolvedTypeHint = exports2.RememberingTokenResolver = exports2.findTokens = exports2.resolve = exports2.ResolutionTypeHint = exports2.INTRINSIC_KEY_PREFIX = void 0;
    var resolvable_1 = require_resolvable();
    var encoding_1 = require_encoding();
    var token_map_1 = require_token_map();
    var tokenMap = token_map_1.TokenMap.instance();
    var RESOLUTION_TYPEHINT_SYM = Symbol.for("@aws-cdk/core.resolvedTypeHint");
    exports2.INTRINSIC_KEY_PREFIX = "$IntrinsicKey$";
    var ResolutionTypeHint;
    (function(ResolutionTypeHint2) {
      ResolutionTypeHint2["STRING"] = "string";
      ResolutionTypeHint2["NUMBER"] = "number";
      ResolutionTypeHint2["LIST"] = "list";
    })(ResolutionTypeHint = exports2.ResolutionTypeHint || (exports2.ResolutionTypeHint = {}));
    function resolve(obj, options) {
      const prefix = options.prefix || [];
      const pathName = "/" + prefix.join("/");
      function makeContext(appendPath) {
        const newPrefix = appendPath !== void 0 ? prefix.concat([appendPath]) : options.prefix;
        let postProcessor;
        const context = {
          preparing: options.preparing,
          scope: options.scope,
          registerPostProcessor(pp) {
            postProcessor = pp;
          },
          resolve(x, changeOptions) {
            return resolve(x, __spreadProps(__spreadValues(__spreadValues({}, options), changeOptions), { prefix: newPrefix }));
          }
        };
        return [context, { postProcess(x) {
          return postProcessor ? postProcessor.postProcess(x, context) : x;
        } }];
      }
      if (prefix.length > 200) {
        throw new Error("Unable to resolve object tree with circular reference. Path: " + pathName);
      }
      const leaveEmpty = options.removeEmpty === false;
      if (typeof obj === "undefined") {
        return void 0;
      }
      if (obj === null) {
        return null;
      }
      if (typeof obj === "function") {
        throw new Error(`Trying to resolve a non-data object. Only token are supported for lazy evaluation. Path: ${pathName}. Object: ${obj}`);
      }
      if (typeof obj === "string") {
        if (encoding_1.TokenString.forListToken(obj).test()) {
          throw new Error("Found an encoded list token string in a scalar string context. Use 'Fn.select(0, list)' (not 'list[0]') to extract elements from token lists.");
        }
        const str = encoding_1.TokenString.forString(obj);
        if (str.test()) {
          const fragments = str.split(tokenMap.lookupToken.bind(tokenMap));
          return tagResolvedValue(options.resolver.resolveString(fragments, makeContext()[0]), ResolutionTypeHint.STRING);
        }
        return obj;
      }
      if (typeof obj === "number") {
        return tagResolvedValue(resolveNumberToken(obj, makeContext()[0]), ResolutionTypeHint.NUMBER);
      }
      if (typeof obj !== "object" || obj instanceof Date) {
        return obj;
      }
      if (Array.isArray(obj)) {
        if (encoding_1.containsListTokenElement(obj)) {
          return tagResolvedValue(options.resolver.resolveList(obj, makeContext()[0]), ResolutionTypeHint.LIST);
        }
        const arr = obj.map((x, i) => makeContext(`${i}`)[0].resolve(x)).filter((x) => leaveEmpty || typeof x !== "undefined");
        return arr;
      }
      if (encoding_1.unresolved(obj)) {
        const [context, postProcessor] = makeContext();
        const ret = tagResolvedValue(options.resolver.resolveToken(obj, context, postProcessor), ResolutionTypeHint.STRING);
        return ret;
      }
      if (isConstruct(obj)) {
        throw new Error("Trying to resolve() a Construct at " + pathName);
      }
      const result = {};
      let intrinsicKeyCtr = 0;
      for (const key of Object.keys(obj)) {
        const value = makeContext(String(key))[0].resolve(obj[key]);
        if (typeof value === "undefined") {
          if (leaveEmpty) {
            result[key] = void 0;
          }
          continue;
        }
        if (!encoding_1.unresolved(key)) {
          result[key] = value;
          continue;
        }
        const resolvedKey = makeContext()[0].resolve(key);
        if (typeof resolvedKey === "string") {
          result[resolvedKey] = value;
        } else {
          if (!options.allowIntrinsicKeys) {
            throw new Error(`"${String(key)}" is used as the key in a map so must resolve to a string, but it resolves to: ${JSON.stringify(resolvedKey)}. Consider using "CfnJson" to delay resolution to deployment-time`);
          }
          result[`${exports2.INTRINSIC_KEY_PREFIX}${intrinsicKeyCtr++}`] = [resolvedKey, value];
        }
      }
      const previousTypeHint = resolvedTypeHint(obj);
      return previousTypeHint ? tagResolvedValue(result, previousTypeHint) : result;
    }
    exports2.resolve = resolve;
    function findTokens(scope, fn) {
      const resolver = new RememberingTokenResolver(new resolvable_1.StringConcat());
      resolve(fn(), { scope, prefix: [], resolver, preparing: true });
      return resolver.tokens;
    }
    exports2.findTokens = findTokens;
    var RememberingTokenResolver = class extends resolvable_1.DefaultTokenResolver {
      constructor() {
        super(...arguments);
        this.tokensSeen = new Set();
      }
      resolveToken(t, context, postProcessor) {
        this.tokensSeen.add(t);
        return super.resolveToken(t, context, postProcessor);
      }
      resolveString(s, context) {
        const ret = super.resolveString(s, context);
        return ret;
      }
      get tokens() {
        return Array.from(this.tokensSeen);
      }
    };
    exports2.RememberingTokenResolver = RememberingTokenResolver;
    function isConstruct(x) {
      return x._children !== void 0 && x._metadata !== void 0;
    }
    function resolveNumberToken(x, context) {
      const token = token_map_1.TokenMap.instance().lookupNumberToken(x);
      if (token === void 0) {
        return x;
      }
      return context.resolve(token);
    }
    function tagResolvedValue(value, typeHint) {
      if (typeof value !== "object" || value == null) {
        return value;
      }
      Object.defineProperty(value, RESOLUTION_TYPEHINT_SYM, {
        value: typeHint,
        configurable: true
      });
      return value;
    }
    function resolvedTypeHint(value) {
      if (typeof value !== "object" || value == null) {
        return void 0;
      }
      return value[RESOLUTION_TYPEHINT_SYM];
    }
    exports2.resolvedTypeHint = resolvedTypeHint;
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/token.js
var require_token = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/token.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.withResolved = exports2.isResolvableObject = exports2.Tokenization = exports2.Token = exports2.TokenComparison = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var lazy_1 = require_lazy();
    var encoding_1 = require_encoding();
    var intrinsic_1 = require_intrinsic();
    var resolve_1 = require_resolve();
    var token_map_1 = require_token_map();
    var TokenComparison = class {
      constructor() {
      }
    };
    exports2.TokenComparison = TokenComparison;
    _a = JSII_RTTI_SYMBOL_1;
    TokenComparison[_a] = { fqn: "@aws-cdk/core.TokenComparison", version: "1.132.0" };
    TokenComparison.SAME = new TokenComparison();
    TokenComparison.DIFFERENT = new TokenComparison();
    TokenComparison.ONE_UNRESOLVED = new TokenComparison();
    TokenComparison.BOTH_UNRESOLVED = new TokenComparison();
    var Token = class {
      constructor() {
      }
      static isUnresolved(obj) {
        return encoding_1.unresolved(obj);
      }
      static asString(value, options = {}) {
        if (typeof value === "string") {
          return value;
        }
        return token_map_1.TokenMap.instance().registerString(Token.asAny(value), options.displayHint);
      }
      static asNumber(value) {
        if (typeof value === "number") {
          return value;
        }
        return token_map_1.TokenMap.instance().registerNumber(Token.asAny(value));
      }
      static asList(value, options = {}) {
        if (Array.isArray(value) && value.every((x) => typeof x === "string")) {
          return value;
        }
        return token_map_1.TokenMap.instance().registerList(Token.asAny(value), options.displayHint);
      }
      static asAny(value) {
        return isResolvableObject(value) ? value : new intrinsic_1.Intrinsic(value);
      }
      static compareStrings(possibleToken1, possibleToken2) {
        const firstIsUnresolved = Token.isUnresolved(possibleToken1);
        const secondIsUnresolved = Token.isUnresolved(possibleToken2);
        if (firstIsUnresolved && secondIsUnresolved) {
          return TokenComparison.BOTH_UNRESOLVED;
        }
        if (firstIsUnresolved || secondIsUnresolved) {
          return TokenComparison.ONE_UNRESOLVED;
        }
        return possibleToken1 === possibleToken2 ? TokenComparison.SAME : TokenComparison.DIFFERENT;
      }
    };
    exports2.Token = Token;
    _b = JSII_RTTI_SYMBOL_1;
    Token[_b] = { fqn: "@aws-cdk/core.Token", version: "1.132.0" };
    var Tokenization = class {
      constructor() {
      }
      static reverseString(s) {
        return token_map_1.TokenMap.instance().splitString(s);
      }
      static reverseCompleteString(s) {
        const fragments = Tokenization.reverseString(s);
        if (fragments.length !== 1) {
          throw new Error(`Tokenzation.reverseCompleteString: argument must not be a concatentation, got '${s}'`);
        }
        return fragments.firstToken;
      }
      static reverseNumber(n) {
        return token_map_1.TokenMap.instance().lookupNumberToken(n);
      }
      static reverseList(l) {
        return token_map_1.TokenMap.instance().lookupList(l);
      }
      static reverse(x, options = {}) {
        if (Tokenization.isResolvable(x)) {
          return x;
        }
        if (typeof x === "string") {
          if (options.failConcat === false) {
            const fragments = Tokenization.reverseString(x);
            return fragments.length === 1 ? fragments.firstToken : void 0;
          }
          return Tokenization.reverseCompleteString(x);
        }
        if (Array.isArray(x)) {
          return Tokenization.reverseList(x);
        }
        if (typeof x === "number") {
          return Tokenization.reverseNumber(x);
        }
        return void 0;
      }
      static resolve(obj, options) {
        var _d;
        return resolve_1.resolve(obj, {
          scope: options.scope,
          resolver: options.resolver,
          preparing: (_d = options.preparing) !== null && _d !== void 0 ? _d : false,
          removeEmpty: options.removeEmpty
        });
      }
      static isResolvable(obj) {
        return isResolvableObject(obj);
      }
      static stringifyNumber(x) {
        if (Token.isUnresolved(x)) {
          return lazy_1.Lazy.uncachedString({
            produce: (context) => {
              const resolved = context.resolve(x);
              return typeof resolved !== "number" ? resolved : `${resolved}`;
            }
          });
        } else {
          return typeof x !== "number" ? x : `${x}`;
        }
      }
    };
    exports2.Tokenization = Tokenization;
    _c = JSII_RTTI_SYMBOL_1;
    Tokenization[_c] = { fqn: "@aws-cdk/core.Tokenization", version: "1.132.0" };
    function isResolvableObject(x) {
      return typeof x === "object" && x !== null && typeof x.resolve === "function";
    }
    exports2.isResolvableObject = isResolvableObject;
    function withResolved(...args) {
      if (args.length < 2) {
        return;
      }
      const argArray = args.slice(0, args.length - 1);
      if (argArray.some(Token.isUnresolved)) {
        return;
      }
      args[args.length - 1].apply(arguments, argArray);
    }
    exports2.withResolved = withResolved;
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/tree.js
var require_tree = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/tree.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TreeInspector = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var TreeInspector = class {
      constructor() {
        this.attributes = {};
      }
      addAttribute(key, value) {
        this.attributes[key] = value;
      }
    };
    exports2.TreeInspector = TreeInspector;
    _a = JSII_RTTI_SYMBOL_1;
    TreeInspector[_a] = { fqn: "@aws-cdk/core.TreeInspector", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/stage.js
var require_stage = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/stage.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Stage = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cxapi = require_lib5();
    var constructs_1 = require_lib4();
    var synthesis_1 = require_synthesis();
    var construct_compat_1 = require_construct_compat();
    var STAGE_SYMBOL = Symbol.for("@aws-cdk/core.Stage");
    var Stage = class extends construct_compat_1.Construct {
      constructor(scope, id, props = {}) {
        var _b, _c, _d, _e, _f, _g, _h;
        super(scope, id);
        if (id !== "" && !/^[a-z][a-z0-9\-\_\.]+$/i.test(id)) {
          throw new Error(`invalid stage name "${id}". Stage name must start with a letter and contain only alphanumeric characters, hypens ('-'), underscores ('_') and periods ('.')`);
        }
        Object.defineProperty(this, STAGE_SYMBOL, { value: true });
        this.parentStage = Stage.of(this);
        this.region = (_c = (_b = props.env) === null || _b === void 0 ? void 0 : _b.region) !== null && _c !== void 0 ? _c : (_d = this.parentStage) === null || _d === void 0 ? void 0 : _d.region;
        this.account = (_f = (_e = props.env) === null || _e === void 0 ? void 0 : _e.account) !== null && _f !== void 0 ? _f : (_g = this.parentStage) === null || _g === void 0 ? void 0 : _g.account;
        this._assemblyBuilder = this.createBuilder(props.outdir);
        this.stageName = [(_h = this.parentStage) === null || _h === void 0 ? void 0 : _h.stageName, id].filter((x) => x).join("-");
      }
      static of(construct) {
        return constructs_1.Node.of(construct).scopes.reverse().slice(1).find(Stage.isStage);
      }
      static isStage(x) {
        return x !== null && typeof x === "object" && STAGE_SYMBOL in x;
      }
      get outdir() {
        return this._assemblyBuilder.outdir;
      }
      get assetOutdir() {
        return this._assemblyBuilder.assetOutdir;
      }
      get artifactId() {
        if (!this.node.path) {
          return "";
        }
        return `assembly-${this.node.path.replace(/\//g, "-").replace(/^-+|-+$/g, "")}`;
      }
      synth(options = {}) {
        if (!this.assembly || options.force) {
          this.assembly = synthesis_1.synthesize(this, {
            skipValidation: options.skipValidation,
            validateOnSynthesis: options.validateOnSynthesis
          });
        }
        return this.assembly;
      }
      createBuilder(outdir) {
        if (this.parentStage && outdir) {
          throw new Error('"outdir" cannot be specified for nested stages');
        }
        return this.parentStage ? this.parentStage._assemblyBuilder.createNestedAssembly(this.artifactId, this.node.path) : new cxapi.CloudAssemblyBuilder(outdir);
      }
    };
    exports2.Stage = Stage;
    _a = JSII_RTTI_SYMBOL_1;
    Stage[_a] = { fqn: "@aws-cdk/core.Stage", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/private/runtime-info.js
var require_runtime_info = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/private/runtime-info.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.constructInfoFromStack = exports2.constructInfoFromConstruct = void 0;
    var stack_1 = require_stack();
    var stage_1 = require_stage();
    var ALLOWED_FQN_PREFIXES = [
      "@aws-cdk/",
      "@aws-cdk-containers/",
      "@aws-solutions-konstruk/",
      "@aws-solutions-constructs/",
      "@amzn/",
      "aws-rfdk.",
      "aws-cdk-lib.",
      "monocdk."
    ];
    var JSII_RUNTIME_SYMBOL = Symbol.for("jsii.rtti");
    function constructInfoFromConstruct(construct) {
      const jsiiRuntimeInfo = Object.getPrototypeOf(construct).constructor[JSII_RUNTIME_SYMBOL];
      if (typeof jsiiRuntimeInfo === "object" && jsiiRuntimeInfo !== null && typeof jsiiRuntimeInfo.fqn === "string" && typeof jsiiRuntimeInfo.version === "string") {
        return { fqn: jsiiRuntimeInfo.fqn, version: jsiiRuntimeInfo.version };
      } else if (jsiiRuntimeInfo) {
        throw new Error(`malformed jsii runtime info for construct: '${construct.node.path}'`);
      }
      return void 0;
    }
    exports2.constructInfoFromConstruct = constructInfoFromConstruct;
    function constructInfoFromStack(stack) {
      const isDefined = (value) => value !== void 0;
      const allConstructInfos = constructsInStack(stack).map((construct) => constructInfoFromConstruct(construct)).filter(isDefined).filter((info) => ALLOWED_FQN_PREFIXES.find((prefix) => info.fqn.startsWith(prefix)));
      allConstructInfos.push({
        fqn: "jsii-runtime.Runtime",
        version: getJsiiAgentVersion()
      });
      const uniqKeys = new Set();
      return allConstructInfos.filter((construct) => {
        const constructKey = `${construct.fqn}@${construct.version}`;
        const isDuplicate = uniqKeys.has(constructKey);
        uniqKeys.add(constructKey);
        return !isDuplicate;
      });
    }
    exports2.constructInfoFromStack = constructInfoFromStack;
    function constructsInStack(construct) {
      const constructs = [construct];
      construct.node.children.filter((child) => !stage_1.Stage.isStage(child) && !stack_1.Stack.isStack(child)).forEach((child) => constructs.push(...constructsInStack(child)));
      return constructs;
    }
    function getJsiiAgentVersion() {
      let jsiiAgent = process.env.JSII_AGENT;
      if (!jsiiAgent) {
        jsiiAgent = `node.js/${process.version}`;
      }
      jsiiAgent = jsiiAgent.replace(/[^a-z0-9.-/=_]/gi, "-");
      return jsiiAgent;
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/private/tree-metadata.js
var require_tree_metadata = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/private/tree-metadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TreeMetadata = void 0;
    var fs = require("fs");
    var path = require("path");
    var cloud_assembly_schema_1 = require_lib3();
    var annotations_1 = require_annotations();
    var construct_compat_1 = require_construct_compat();
    var stack_1 = require_stack();
    var tree_1 = require_tree();
    var runtime_info_1 = require_runtime_info();
    var FILE_PATH = "tree.json";
    var TreeMetadata = class extends construct_compat_1.Construct {
      constructor(scope) {
        super(scope, "Tree");
      }
      _synthesizeTree(session) {
        const lookup = {};
        const visit = (construct) => {
          const children = construct.node.children.map((c) => {
            try {
              return visit(c);
            } catch (e) {
              annotations_1.Annotations.of(this).addWarning(`Failed to render tree metadata for node [${c.node.id}]. Reason: ${e}`);
              return void 0;
            }
          });
          const childrenMap = children.filter((child) => child !== void 0).reduce((map, child) => Object.assign(map, { [child.id]: child }), {});
          const node = {
            id: construct.node.id || "App",
            path: construct.node.path,
            children: Object.keys(childrenMap).length === 0 ? void 0 : childrenMap,
            attributes: this.synthAttributes(construct),
            constructInfo: runtime_info_1.constructInfoFromConstruct(construct)
          };
          lookup[node.path] = node;
          return node;
        };
        const tree = {
          version: "tree-0.1",
          tree: visit(this.node.root)
        };
        const builder = session.assembly;
        fs.writeFileSync(path.join(builder.outdir, FILE_PATH), JSON.stringify(tree, void 0, 2), { encoding: "utf-8" });
        builder.addArtifact("Tree", {
          type: cloud_assembly_schema_1.ArtifactType.CDK_TREE,
          properties: {
            file: FILE_PATH
          }
        });
      }
      synthAttributes(construct) {
        function canInspect(inspectable) {
          return inspectable.inspect !== void 0;
        }
        const inspector = new tree_1.TreeInspector();
        if (canInspect(construct)) {
          construct.inspect(inspector);
          return stack_1.Stack.of(construct).resolve(inspector.attributes);
        }
        return void 0;
      }
    };
    exports2.TreeMetadata = TreeMetadata;
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/app.js
var require_app2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/app.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.attachCustomSynthesis = exports2.App = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cxapi = require_lib5();
    var synthesis_1 = require_synthesis();
    var tree_metadata_1 = require_tree_metadata();
    var stage_1 = require_stage();
    var APP_SYMBOL = Symbol.for("@aws-cdk/core.App");
    var App = class extends stage_1.Stage {
      constructor(props = {}) {
        var _b, _c, _d;
        super(void 0, "", {
          outdir: (_b = props.outdir) !== null && _b !== void 0 ? _b : process.env[cxapi.OUTDIR_ENV]
        });
        Object.defineProperty(this, APP_SYMBOL, { value: true });
        this.loadContext(props.context);
        if (props.stackTraces === false) {
          this.node.setContext(cxapi.DISABLE_METADATA_STACK_TRACE, true);
        }
        const analyticsReporting = (_c = props.analyticsReporting) !== null && _c !== void 0 ? _c : props.runtimeInfo;
        if (analyticsReporting !== void 0) {
          this.node.setContext(cxapi.ANALYTICS_REPORTING_ENABLED_CONTEXT, analyticsReporting);
        }
        const autoSynth = (_d = props.autoSynth) !== null && _d !== void 0 ? _d : cxapi.OUTDIR_ENV in process.env;
        if (autoSynth) {
          process.once("beforeExit", () => this.synth());
        }
        if (props.treeMetadata === void 0 || props.treeMetadata) {
          new tree_metadata_1.TreeMetadata(this);
        }
      }
      static isApp(obj) {
        return APP_SYMBOL in obj;
      }
      loadContext(defaults = {}) {
        for (const [k, v] of Object.entries(defaults)) {
          this.node.setContext(k, v);
        }
        const contextJson = process.env[cxapi.CONTEXT_ENV];
        const contextFromEnvironment = contextJson ? JSON.parse(contextJson) : {};
        for (const [k, v] of Object.entries(contextFromEnvironment)) {
          this.node.setContext(k, v);
        }
      }
    };
    exports2.App = App;
    _a = JSII_RTTI_SYMBOL_1;
    App[_a] = { fqn: "@aws-cdk/core.App", version: "1.132.0" };
    function attachCustomSynthesis(construct, synthesis) {
      synthesis_1.addCustomSynthesis(construct, synthesis);
    }
    exports2.attachCustomSynthesis = attachCustomSynthesis;
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/removal-policy.js
var require_removal_policy = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/removal-policy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RemovalPolicy = void 0;
    var RemovalPolicy;
    (function(RemovalPolicy2) {
      RemovalPolicy2["DESTROY"] = "destroy";
      RemovalPolicy2["RETAIN"] = "retain";
      RemovalPolicy2["SNAPSHOT"] = "snapshot";
    })(RemovalPolicy = exports2.RemovalPolicy || (exports2.RemovalPolicy = {}));
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/private/uniqueid.js
var require_uniqueid2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/private/uniqueid.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.makeUniqueId = void 0;
    var crypto = require("crypto");
    var encoding_1 = require_encoding();
    var HIDDEN_FROM_HUMAN_ID = "Resource";
    var HIDDEN_ID = "Default";
    var PATH_SEP = "/";
    var HASH_LEN = 8;
    var MAX_HUMAN_LEN = 240;
    var MAX_ID_LEN = 255;
    function makeUniqueId(components) {
      components = components.filter((x) => x !== HIDDEN_ID);
      if (components.length === 0) {
        throw new Error("Unable to calculate a unique id for an empty set of components");
      }
      const unresolvedTokens = components.filter((c) => encoding_1.unresolved(c));
      if (unresolvedTokens.length > 0) {
        throw new Error(`ID components may not include unresolved tokens: ${unresolvedTokens.join(",")}`);
      }
      if (components.length === 1) {
        const candidate = removeNonAlphanumeric(components[0]);
        if (candidate.length <= MAX_ID_LEN) {
          return candidate;
        }
      }
      const hash = pathHash(components);
      const human = removeDupes(components).filter((x) => x !== HIDDEN_FROM_HUMAN_ID).map(removeNonAlphanumeric).join("").slice(0, MAX_HUMAN_LEN);
      return human + hash;
    }
    exports2.makeUniqueId = makeUniqueId;
    function pathHash(path) {
      const md5 = crypto.createHash("md5").update(path.join(PATH_SEP)).digest("hex");
      return md5.slice(0, HASH_LEN).toUpperCase();
    }
    function removeNonAlphanumeric(s) {
      return s.replace(/[^A-Za-z0-9]/g, "");
    }
    function removeDupes(path) {
      const ret = new Array();
      for (const component of path) {
        if (ret.length === 0 || !ret[ret.length - 1].endsWith(component)) {
          ret.push(component);
        }
      }
      return ret;
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/names.js
var require_names = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/names.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Names = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var constructs_1 = require_lib4();
    var uniqueid_1 = require_uniqueid2();
    var Names = class {
      constructor() {
      }
      static uniqueId(construct) {
        const node = constructs_1.Node.of(construct);
        const components = node.scopes.slice(1).map((c) => constructs_1.Node.of(c).id);
        return components.length > 0 ? uniqueid_1.makeUniqueId(components) : "";
      }
      static nodeUniqueId(node) {
        const components = node.scopes.slice(1).map((c) => c.node.id);
        return components.length > 0 ? uniqueid_1.makeUniqueId(components) : "";
      }
    };
    exports2.Names = Names;
    _a = JSII_RTTI_SYMBOL_1;
    Names[_a] = { fqn: "@aws-cdk/core.Names", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/private/physical-name-generator.js
var require_physical_name_generator = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/private/physical-name-generator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isGeneratedWhenNeededMarker = exports2.GeneratedWhenNeededMarker = exports2.generatePhysicalName = void 0;
    var crypto = require("crypto");
    var constructs_1 = require_lib4();
    var names_1 = require_names();
    var stack_1 = require_stack();
    var token_1 = require_token();
    var token_map_1 = require_token_map();
    function generatePhysicalName(resource) {
      const stack = stack_1.Stack.of(resource);
      const stackPart = new PrefixNamePart(stack.stackName, 25);
      const idPart = new SuffixNamePart(names_1.Names.nodeUniqueId(resource.node), 24);
      const region = stack.region;
      if (token_1.Token.isUnresolved(region) || !region) {
        throw new Error(`Cannot generate a physical name for ${constructs_1.Node.of(resource).path}, because the region is un-resolved or missing`);
      }
      const account = stack.account;
      if (token_1.Token.isUnresolved(account) || !account) {
        throw new Error(`Cannot generate a physical name for ${constructs_1.Node.of(resource).path}, because the account is un-resolved or missing`);
      }
      const parts = [stackPart, idPart].map((part) => part.generate());
      const hashLength = 12;
      const sha256 = crypto.createHash("sha256").update(stackPart.bareStr).update(idPart.bareStr).update(region).update(account);
      const hash = sha256.digest("hex").slice(0, hashLength);
      const ret = [...parts, hash].join("");
      return ret.toLowerCase();
    }
    exports2.generatePhysicalName = generatePhysicalName;
    var NamePart = class {
      constructor(bareStr) {
        this.bareStr = bareStr;
      }
    };
    var PrefixNamePart = class extends NamePart {
      constructor(bareStr, prefixLength) {
        super(bareStr);
        this.prefixLength = prefixLength;
      }
      generate() {
        return this.bareStr.slice(0, this.prefixLength);
      }
    };
    var SuffixNamePart = class extends NamePart {
      constructor(str, suffixLength) {
        super(str);
        this.suffixLength = suffixLength;
      }
      generate() {
        const strLen = this.bareStr.length;
        const startIndex = Math.max(strLen - this.suffixLength, 0);
        return this.bareStr.slice(startIndex, strLen);
      }
    };
    var GENERATE_IF_NEEDED_SYMBOL = Symbol.for("@aws-cdk/core.<private>.GenerateIfNeeded");
    var GeneratedWhenNeededMarker = class {
      constructor() {
        this.creationStack = [];
        Object.defineProperty(this, GENERATE_IF_NEEDED_SYMBOL, { value: true });
      }
      resolve(_ctx) {
        throw new Error('Invalid physical name passed to CloudFormation. Use "this.physicalName" instead');
      }
      toString() {
        return "PhysicalName.GENERATE_IF_NEEDED";
      }
    };
    exports2.GeneratedWhenNeededMarker = GeneratedWhenNeededMarker;
    function isGeneratedWhenNeededMarker(val) {
      const token = token_map_1.TokenMap.instance().lookupString(val);
      return !!token && GENERATE_IF_NEEDED_SYMBOL in token;
    }
    exports2.isGeneratedWhenNeededMarker = isGeneratedWhenNeededMarker;
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/reference.js
var require_reference = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/reference.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Reference = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var intrinsic_1 = require_intrinsic();
    var REFERENCE_SYMBOL = Symbol.for("@aws-cdk/core.Reference");
    var Reference = class extends intrinsic_1.Intrinsic {
      constructor(value, target, displayName) {
        super(value);
        Object.defineProperty(this, REFERENCE_SYMBOL, { value: true });
        this.target = target;
        this.displayName = displayName || "Reference";
      }
      static isReference(x) {
        return typeof x === "object" && x !== null && REFERENCE_SYMBOL in x;
      }
    };
    exports2.Reference = Reference;
    _a = JSII_RTTI_SYMBOL_1;
    Reference[_a] = { fqn: "@aws-cdk/core.Reference", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/resource.js
var require_resource = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/resource.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Resource = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cfn_resource_1 = require_cfn_resource();
    var construct_compat_1 = require_construct_compat();
    var lazy_1 = require_lazy();
    var physical_name_generator_1 = require_physical_name_generator();
    var reference_1 = require_reference();
    var stack_1 = require_stack();
    var token_1 = require_token();
    var RESOURCE_SYMBOL = Symbol.for("@aws-cdk/core.Resource");
    var Resource = class extends construct_compat_1.Construct {
      constructor(scope, id, props = {}) {
        var _b, _c, _d, _e;
        super(scope, id);
        if ((props.account !== void 0 || props.region !== void 0) && props.environmentFromArn !== void 0) {
          throw new Error(`Supply at most one of 'account'/'region' (${props.account}/${props.region}) and 'environmentFromArn' (${props.environmentFromArn})`);
        }
        Object.defineProperty(this, RESOURCE_SYMBOL, { value: true });
        this.stack = stack_1.Stack.of(this);
        const parsedArn = props.environmentFromArn ? this.stack.parseArn(props.environmentFromArn) : void 0;
        this.env = {
          account: (_c = (_b = props.account) !== null && _b !== void 0 ? _b : parsedArn === null || parsedArn === void 0 ? void 0 : parsedArn.account) !== null && _c !== void 0 ? _c : this.stack.account,
          region: (_e = (_d = props.region) !== null && _d !== void 0 ? _d : parsedArn === null || parsedArn === void 0 ? void 0 : parsedArn.region) !== null && _e !== void 0 ? _e : this.stack.region
        };
        let physicalName = props.physicalName;
        if (props.physicalName && physical_name_generator_1.isGeneratedWhenNeededMarker(props.physicalName)) {
          this._physicalName = void 0;
          this._allowCrossEnvironment = true;
          physicalName = lazy_1.Lazy.string({ produce: () => this._physicalName });
        } else if (props.physicalName && !token_1.Token.isUnresolved(props.physicalName)) {
          this._physicalName = props.physicalName;
          this._allowCrossEnvironment = true;
        } else {
          this._physicalName = props.physicalName;
          this._allowCrossEnvironment = false;
        }
        if (physicalName === void 0) {
          physicalName = token_1.Token.asString(void 0);
        }
        this.physicalName = physicalName;
      }
      static isResource(construct) {
        return construct !== null && typeof construct === "object" && RESOURCE_SYMBOL in construct;
      }
      _enableCrossEnvironment() {
        if (!this._allowCrossEnvironment) {
          throw new Error(`Cannot use resource '${this.node.path}' in a cross-environment fashion, the resource's physical name must be explicit set or use \`PhysicalName.GENERATE_IF_NEEDED\``);
        }
        if (!this._physicalName) {
          this._physicalName = this.generatePhysicalName();
        }
      }
      applyRemovalPolicy(policy) {
        const child = this.node.defaultChild;
        if (!child || !cfn_resource_1.CfnResource.isCfnResource(child)) {
          throw new Error("Cannot apply RemovalPolicy: no child or not a CfnResource. Apply the removal policy on the CfnResource directly.");
        }
        child.applyRemovalPolicy(policy);
      }
      generatePhysicalName() {
        return physical_name_generator_1.generatePhysicalName(this);
      }
      getResourceNameAttribute(nameAttr) {
        return mimicReference(nameAttr, {
          produce: (context) => {
            const consumingStack = stack_1.Stack.of(context.scope);
            if (this.stack.environment !== consumingStack.environment) {
              this._enableCrossEnvironment();
              return this.physicalName;
            } else {
              return nameAttr;
            }
          }
        });
      }
      getResourceArnAttribute(arnAttr, arnComponents) {
        return mimicReference(arnAttr, {
          produce: (context) => {
            const consumingStack = stack_1.Stack.of(context.scope);
            if (this.stack.environment !== consumingStack.environment) {
              this._enableCrossEnvironment();
              return this.stack.formatArn(arnComponents);
            } else {
              return arnAttr;
            }
          }
        });
      }
    };
    exports2.Resource = Resource;
    _a = JSII_RTTI_SYMBOL_1;
    Resource[_a] = { fqn: "@aws-cdk/core.Resource", version: "1.132.0" };
    function mimicReference(refSource, producer) {
      const reference = token_1.Tokenization.reverse(refSource, {
        failConcat: false
      });
      if (!reference_1.Reference.isReference(reference)) {
        return lazy_1.Lazy.uncachedString(producer);
      }
      return token_1.Token.asString(new class extends reference_1.Reference {
        resolve(context) {
          return producer.produce(context);
        }
      }(reference, reference.target, reference.displayName));
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/custom-resource.js
var require_custom_resource = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/custom-resource.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CustomResource = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cfn_resource_1 = require_cfn_resource();
    var removal_policy_1 = require_removal_policy();
    var resource_1 = require_resource();
    var token_1 = require_token();
    var CustomResource = class extends resource_1.Resource {
      constructor(scope, id, props) {
        var _b;
        super(scope, id);
        const type = renderResourceType(props.resourceType);
        const pascalCaseProperties = (_b = props.pascalCaseProperties) !== null && _b !== void 0 ? _b : false;
        const properties = pascalCaseProperties ? uppercaseProperties(props.properties || {}) : props.properties || {};
        this.resource = new cfn_resource_1.CfnResource(this, "Default", {
          type,
          properties: __spreadValues({
            ServiceToken: props.serviceToken
          }, properties)
        });
        this.resource.applyRemovalPolicy(props.removalPolicy, {
          default: removal_policy_1.RemovalPolicy.DESTROY
        });
      }
      get ref() {
        return this.resource.ref;
      }
      getAtt(attributeName) {
        return this.resource.getAtt(attributeName);
      }
      getAttString(attributeName) {
        return token_1.Token.asString(this.getAtt(attributeName));
      }
    };
    exports2.CustomResource = CustomResource;
    _a = JSII_RTTI_SYMBOL_1;
    CustomResource[_a] = { fqn: "@aws-cdk/core.CustomResource", version: "1.132.0" };
    function uppercaseProperties(props) {
      const ret = {};
      Object.keys(props).forEach((key) => {
        const upper = key.substr(0, 1).toUpperCase() + key.substr(1);
        ret[upper] = props[key];
      });
      return ret;
    }
    function renderResourceType(resourceType) {
      if (!resourceType) {
        return "AWS::CloudFormation::CustomResource";
      }
      if (!resourceType.startsWith("Custom::")) {
        throw new Error(`Custom resource type must begin with "Custom::" (${resourceType})`);
      }
      const typeName = resourceType.substr(resourceType.indexOf("::") + 2);
      if (typeName.length > 60) {
        throw new Error(`Custom resource type length > 60 (${resourceType})`);
      }
      if (!/^[a-z0-9_@-]+$/i.test(typeName)) {
        throw new Error(`Custom resource type name can only include alphanumeric characters and _@- (${typeName})`);
      }
      return resourceType;
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/universalify/index.js
var require_universalify = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/universalify/index.js"(exports2) {
    "use strict";
    exports2.fromCallback = function(fn) {
      return Object.defineProperty(function(...args) {
        if (typeof args[args.length - 1] === "function")
          fn.apply(this, args);
        else {
          return new Promise((resolve, reject) => {
            fn.call(this, ...args, (err, res) => err != null ? reject(err) : resolve(res));
          });
        }
      }, "name", { value: fn.name });
    };
    exports2.fromPromise = function(fn) {
      return Object.defineProperty(function(...args) {
        const cb = args[args.length - 1];
        if (typeof cb !== "function")
          return fn.apply(this, args);
        else
          fn.apply(this, args.slice(0, -1)).then((r) => cb(null, r), cb);
      }, "name", { value: fn.name });
    };
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/graceful-fs/polyfills.js
var require_polyfills = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/graceful-fs/polyfills.js"(exports2, module2) {
    var constants = require("constants");
    var origCwd = process.cwd;
    var cwd = null;
    var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform;
    process.cwd = function() {
      if (!cwd)
        cwd = origCwd.call(process);
      return cwd;
    };
    try {
      process.cwd();
    } catch (er) {
    }
    if (typeof process.chdir === "function") {
      chdir = process.chdir;
      process.chdir = function(d) {
        cwd = null;
        chdir.call(process, d);
      };
      if (Object.setPrototypeOf)
        Object.setPrototypeOf(process.chdir, chdir);
    }
    var chdir;
    module2.exports = patch;
    function patch(fs) {
      if (constants.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
        patchLchmod(fs);
      }
      if (!fs.lutimes) {
        patchLutimes(fs);
      }
      fs.chown = chownFix(fs.chown);
      fs.fchown = chownFix(fs.fchown);
      fs.lchown = chownFix(fs.lchown);
      fs.chmod = chmodFix(fs.chmod);
      fs.fchmod = chmodFix(fs.fchmod);
      fs.lchmod = chmodFix(fs.lchmod);
      fs.chownSync = chownFixSync(fs.chownSync);
      fs.fchownSync = chownFixSync(fs.fchownSync);
      fs.lchownSync = chownFixSync(fs.lchownSync);
      fs.chmodSync = chmodFixSync(fs.chmodSync);
      fs.fchmodSync = chmodFixSync(fs.fchmodSync);
      fs.lchmodSync = chmodFixSync(fs.lchmodSync);
      fs.stat = statFix(fs.stat);
      fs.fstat = statFix(fs.fstat);
      fs.lstat = statFix(fs.lstat);
      fs.statSync = statFixSync(fs.statSync);
      fs.fstatSync = statFixSync(fs.fstatSync);
      fs.lstatSync = statFixSync(fs.lstatSync);
      if (!fs.lchmod) {
        fs.lchmod = function(path, mode, cb) {
          if (cb)
            process.nextTick(cb);
        };
        fs.lchmodSync = function() {
        };
      }
      if (!fs.lchown) {
        fs.lchown = function(path, uid, gid, cb) {
          if (cb)
            process.nextTick(cb);
        };
        fs.lchownSync = function() {
        };
      }
      if (platform === "win32") {
        fs.rename = function(fs$rename) {
          return function(from, to, cb) {
            var start = Date.now();
            var backoff = 0;
            fs$rename(from, to, function CB(er) {
              if (er && (er.code === "EACCES" || er.code === "EPERM") && Date.now() - start < 6e4) {
                setTimeout(function() {
                  fs.stat(to, function(stater, st) {
                    if (stater && stater.code === "ENOENT")
                      fs$rename(from, to, CB);
                    else
                      cb(er);
                  });
                }, backoff);
                if (backoff < 100)
                  backoff += 10;
                return;
              }
              if (cb)
                cb(er);
            });
          };
        }(fs.rename);
      }
      fs.read = function(fs$read) {
        function read(fd, buffer, offset, length, position, callback_) {
          var callback;
          if (callback_ && typeof callback_ === "function") {
            var eagCounter = 0;
            callback = function(er, _, __) {
              if (er && er.code === "EAGAIN" && eagCounter < 10) {
                eagCounter++;
                return fs$read.call(fs, fd, buffer, offset, length, position, callback);
              }
              callback_.apply(this, arguments);
            };
          }
          return fs$read.call(fs, fd, buffer, offset, length, position, callback);
        }
        if (Object.setPrototypeOf)
          Object.setPrototypeOf(read, fs$read);
        return read;
      }(fs.read);
      fs.readSync = function(fs$readSync) {
        return function(fd, buffer, offset, length, position) {
          var eagCounter = 0;
          while (true) {
            try {
              return fs$readSync.call(fs, fd, buffer, offset, length, position);
            } catch (er) {
              if (er.code === "EAGAIN" && eagCounter < 10) {
                eagCounter++;
                continue;
              }
              throw er;
            }
          }
        };
      }(fs.readSync);
      function patchLchmod(fs2) {
        fs2.lchmod = function(path, mode, callback) {
          fs2.open(path, constants.O_WRONLY | constants.O_SYMLINK, mode, function(err, fd) {
            if (err) {
              if (callback)
                callback(err);
              return;
            }
            fs2.fchmod(fd, mode, function(err2) {
              fs2.close(fd, function(err22) {
                if (callback)
                  callback(err2 || err22);
              });
            });
          });
        };
        fs2.lchmodSync = function(path, mode) {
          var fd = fs2.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode);
          var threw = true;
          var ret;
          try {
            ret = fs2.fchmodSync(fd, mode);
            threw = false;
          } finally {
            if (threw) {
              try {
                fs2.closeSync(fd);
              } catch (er) {
              }
            } else {
              fs2.closeSync(fd);
            }
          }
          return ret;
        };
      }
      function patchLutimes(fs2) {
        if (constants.hasOwnProperty("O_SYMLINK")) {
          fs2.lutimes = function(path, at, mt, cb) {
            fs2.open(path, constants.O_SYMLINK, function(er, fd) {
              if (er) {
                if (cb)
                  cb(er);
                return;
              }
              fs2.futimes(fd, at, mt, function(er2) {
                fs2.close(fd, function(er22) {
                  if (cb)
                    cb(er2 || er22);
                });
              });
            });
          };
          fs2.lutimesSync = function(path, at, mt) {
            var fd = fs2.openSync(path, constants.O_SYMLINK);
            var ret;
            var threw = true;
            try {
              ret = fs2.futimesSync(fd, at, mt);
              threw = false;
            } finally {
              if (threw) {
                try {
                  fs2.closeSync(fd);
                } catch (er) {
                }
              } else {
                fs2.closeSync(fd);
              }
            }
            return ret;
          };
        } else {
          fs2.lutimes = function(_a, _b, _c, cb) {
            if (cb)
              process.nextTick(cb);
          };
          fs2.lutimesSync = function() {
          };
        }
      }
      function chmodFix(orig) {
        if (!orig)
          return orig;
        return function(target, mode, cb) {
          return orig.call(fs, target, mode, function(er) {
            if (chownErOk(er))
              er = null;
            if (cb)
              cb.apply(this, arguments);
          });
        };
      }
      function chmodFixSync(orig) {
        if (!orig)
          return orig;
        return function(target, mode) {
          try {
            return orig.call(fs, target, mode);
          } catch (er) {
            if (!chownErOk(er))
              throw er;
          }
        };
      }
      function chownFix(orig) {
        if (!orig)
          return orig;
        return function(target, uid, gid, cb) {
          return orig.call(fs, target, uid, gid, function(er) {
            if (chownErOk(er))
              er = null;
            if (cb)
              cb.apply(this, arguments);
          });
        };
      }
      function chownFixSync(orig) {
        if (!orig)
          return orig;
        return function(target, uid, gid) {
          try {
            return orig.call(fs, target, uid, gid);
          } catch (er) {
            if (!chownErOk(er))
              throw er;
          }
        };
      }
      function statFix(orig) {
        if (!orig)
          return orig;
        return function(target, options, cb) {
          if (typeof options === "function") {
            cb = options;
            options = null;
          }
          function callback(er, stats) {
            if (stats) {
              if (stats.uid < 0)
                stats.uid += 4294967296;
              if (stats.gid < 0)
                stats.gid += 4294967296;
            }
            if (cb)
              cb.apply(this, arguments);
          }
          return options ? orig.call(fs, target, options, callback) : orig.call(fs, target, callback);
        };
      }
      function statFixSync(orig) {
        if (!orig)
          return orig;
        return function(target, options) {
          var stats = options ? orig.call(fs, target, options) : orig.call(fs, target);
          if (stats.uid < 0)
            stats.uid += 4294967296;
          if (stats.gid < 0)
            stats.gid += 4294967296;
          return stats;
        };
      }
      function chownErOk(er) {
        if (!er)
          return true;
        if (er.code === "ENOSYS")
          return true;
        var nonroot = !process.getuid || process.getuid() !== 0;
        if (nonroot) {
          if (er.code === "EINVAL" || er.code === "EPERM")
            return true;
        }
        return false;
      }
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/graceful-fs/legacy-streams.js
var require_legacy_streams = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/graceful-fs/legacy-streams.js"(exports2, module2) {
    var Stream = require("stream").Stream;
    module2.exports = legacy;
    function legacy(fs) {
      return {
        ReadStream,
        WriteStream
      };
      function ReadStream(path, options) {
        if (!(this instanceof ReadStream))
          return new ReadStream(path, options);
        Stream.call(this);
        var self = this;
        this.path = path;
        this.fd = null;
        this.readable = true;
        this.paused = false;
        this.flags = "r";
        this.mode = 438;
        this.bufferSize = 64 * 1024;
        options = options || {};
        var keys = Object.keys(options);
        for (var index = 0, length = keys.length; index < length; index++) {
          var key = keys[index];
          this[key] = options[key];
        }
        if (this.encoding)
          this.setEncoding(this.encoding);
        if (this.start !== void 0) {
          if (typeof this.start !== "number") {
            throw TypeError("start must be a Number");
          }
          if (this.end === void 0) {
            this.end = Infinity;
          } else if (typeof this.end !== "number") {
            throw TypeError("end must be a Number");
          }
          if (this.start > this.end) {
            throw new Error("start must be <= end");
          }
          this.pos = this.start;
        }
        if (this.fd !== null) {
          process.nextTick(function() {
            self._read();
          });
          return;
        }
        fs.open(this.path, this.flags, this.mode, function(err, fd) {
          if (err) {
            self.emit("error", err);
            self.readable = false;
            return;
          }
          self.fd = fd;
          self.emit("open", fd);
          self._read();
        });
      }
      function WriteStream(path, options) {
        if (!(this instanceof WriteStream))
          return new WriteStream(path, options);
        Stream.call(this);
        this.path = path;
        this.fd = null;
        this.writable = true;
        this.flags = "w";
        this.encoding = "binary";
        this.mode = 438;
        this.bytesWritten = 0;
        options = options || {};
        var keys = Object.keys(options);
        for (var index = 0, length = keys.length; index < length; index++) {
          var key = keys[index];
          this[key] = options[key];
        }
        if (this.start !== void 0) {
          if (typeof this.start !== "number") {
            throw TypeError("start must be a Number");
          }
          if (this.start < 0) {
            throw new Error("start must be >= zero");
          }
          this.pos = this.start;
        }
        this.busy = false;
        this._queue = [];
        if (this.fd === null) {
          this._open = fs.open;
          this._queue.push([this._open, this.path, this.flags, this.mode, void 0]);
          this.flush();
        }
      }
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/graceful-fs/clone.js
var require_clone = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/graceful-fs/clone.js"(exports2, module2) {
    "use strict";
    module2.exports = clone;
    var getPrototypeOf = Object.getPrototypeOf || function(obj) {
      return obj.__proto__;
    };
    function clone(obj) {
      if (obj === null || typeof obj !== "object")
        return obj;
      if (obj instanceof Object)
        var copy = { __proto__: getPrototypeOf(obj) };
      else
        var copy = Object.create(null);
      Object.getOwnPropertyNames(obj).forEach(function(key) {
        Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));
      });
      return copy;
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/graceful-fs/graceful-fs.js
var require_graceful_fs = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/graceful-fs/graceful-fs.js"(exports2, module2) {
    var fs = require("fs");
    var polyfills = require_polyfills();
    var legacy = require_legacy_streams();
    var clone = require_clone();
    var util = require("util");
    var gracefulQueue;
    var previousSymbol;
    if (typeof Symbol === "function" && typeof Symbol.for === "function") {
      gracefulQueue = Symbol.for("graceful-fs.queue");
      previousSymbol = Symbol.for("graceful-fs.previous");
    } else {
      gracefulQueue = "___graceful-fs.queue";
      previousSymbol = "___graceful-fs.previous";
    }
    function noop() {
    }
    function publishQueue(context, queue2) {
      Object.defineProperty(context, gracefulQueue, {
        get: function() {
          return queue2;
        }
      });
    }
    var debug = noop;
    if (util.debuglog)
      debug = util.debuglog("gfs4");
    else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ""))
      debug = function() {
        var m = util.format.apply(util, arguments);
        m = "GFS4: " + m.split(/\n/).join("\nGFS4: ");
        console.error(m);
      };
    if (!fs[gracefulQueue]) {
      queue = global[gracefulQueue] || [];
      publishQueue(fs, queue);
      fs.close = function(fs$close) {
        function close(fd, cb) {
          return fs$close.call(fs, fd, function(err) {
            if (!err) {
              resetQueue();
            }
            if (typeof cb === "function")
              cb.apply(this, arguments);
          });
        }
        Object.defineProperty(close, previousSymbol, {
          value: fs$close
        });
        return close;
      }(fs.close);
      fs.closeSync = function(fs$closeSync) {
        function closeSync(fd) {
          fs$closeSync.apply(fs, arguments);
          resetQueue();
        }
        Object.defineProperty(closeSync, previousSymbol, {
          value: fs$closeSync
        });
        return closeSync;
      }(fs.closeSync);
      if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || "")) {
        process.on("exit", function() {
          debug(fs[gracefulQueue]);
          require("assert").equal(fs[gracefulQueue].length, 0);
        });
      }
    }
    var queue;
    if (!global[gracefulQueue]) {
      publishQueue(global, fs[gracefulQueue]);
    }
    module2.exports = patch(clone(fs));
    if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs.__patched) {
      module2.exports = patch(fs);
      fs.__patched = true;
    }
    function patch(fs2) {
      polyfills(fs2);
      fs2.gracefulify = patch;
      fs2.createReadStream = createReadStream;
      fs2.createWriteStream = createWriteStream;
      var fs$readFile = fs2.readFile;
      fs2.readFile = readFile;
      function readFile(path, options, cb) {
        if (typeof options === "function")
          cb = options, options = null;
        return go$readFile(path, options, cb);
        function go$readFile(path2, options2, cb2, startTime) {
          return fs$readFile(path2, options2, function(err) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$readFile, [path2, options2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      var fs$writeFile = fs2.writeFile;
      fs2.writeFile = writeFile;
      function writeFile(path, data, options, cb) {
        if (typeof options === "function")
          cb = options, options = null;
        return go$writeFile(path, data, options, cb);
        function go$writeFile(path2, data2, options2, cb2, startTime) {
          return fs$writeFile(path2, data2, options2, function(err) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$writeFile, [path2, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      var fs$appendFile = fs2.appendFile;
      if (fs$appendFile)
        fs2.appendFile = appendFile;
      function appendFile(path, data, options, cb) {
        if (typeof options === "function")
          cb = options, options = null;
        return go$appendFile(path, data, options, cb);
        function go$appendFile(path2, data2, options2, cb2, startTime) {
          return fs$appendFile(path2, data2, options2, function(err) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$appendFile, [path2, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      var fs$copyFile = fs2.copyFile;
      if (fs$copyFile)
        fs2.copyFile = copyFile;
      function copyFile(src, dest, flags, cb) {
        if (typeof flags === "function") {
          cb = flags;
          flags = 0;
        }
        return go$copyFile(src, dest, flags, cb);
        function go$copyFile(src2, dest2, flags2, cb2, startTime) {
          return fs$copyFile(src2, dest2, flags2, function(err) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$copyFile, [src2, dest2, flags2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      var fs$readdir = fs2.readdir;
      fs2.readdir = readdir;
      function readdir(path, options, cb) {
        if (typeof options === "function")
          cb = options, options = null;
        return go$readdir(path, options, cb);
        function go$readdir(path2, options2, cb2, startTime) {
          return fs$readdir(path2, options2, function(err, files) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$readdir, [path2, options2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (files && files.sort)
                files.sort();
              if (typeof cb2 === "function")
                cb2.call(this, err, files);
            }
          });
        }
      }
      if (process.version.substr(0, 4) === "v0.8") {
        var legStreams = legacy(fs2);
        ReadStream = legStreams.ReadStream;
        WriteStream = legStreams.WriteStream;
      }
      var fs$ReadStream = fs2.ReadStream;
      if (fs$ReadStream) {
        ReadStream.prototype = Object.create(fs$ReadStream.prototype);
        ReadStream.prototype.open = ReadStream$open;
      }
      var fs$WriteStream = fs2.WriteStream;
      if (fs$WriteStream) {
        WriteStream.prototype = Object.create(fs$WriteStream.prototype);
        WriteStream.prototype.open = WriteStream$open;
      }
      Object.defineProperty(fs2, "ReadStream", {
        get: function() {
          return ReadStream;
        },
        set: function(val) {
          ReadStream = val;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(fs2, "WriteStream", {
        get: function() {
          return WriteStream;
        },
        set: function(val) {
          WriteStream = val;
        },
        enumerable: true,
        configurable: true
      });
      var FileReadStream = ReadStream;
      Object.defineProperty(fs2, "FileReadStream", {
        get: function() {
          return FileReadStream;
        },
        set: function(val) {
          FileReadStream = val;
        },
        enumerable: true,
        configurable: true
      });
      var FileWriteStream = WriteStream;
      Object.defineProperty(fs2, "FileWriteStream", {
        get: function() {
          return FileWriteStream;
        },
        set: function(val) {
          FileWriteStream = val;
        },
        enumerable: true,
        configurable: true
      });
      function ReadStream(path, options) {
        if (this instanceof ReadStream)
          return fs$ReadStream.apply(this, arguments), this;
        else
          return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
      }
      function ReadStream$open() {
        var that = this;
        open(that.path, that.flags, that.mode, function(err, fd) {
          if (err) {
            if (that.autoClose)
              that.destroy();
            that.emit("error", err);
          } else {
            that.fd = fd;
            that.emit("open", fd);
            that.read();
          }
        });
      }
      function WriteStream(path, options) {
        if (this instanceof WriteStream)
          return fs$WriteStream.apply(this, arguments), this;
        else
          return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
      }
      function WriteStream$open() {
        var that = this;
        open(that.path, that.flags, that.mode, function(err, fd) {
          if (err) {
            that.destroy();
            that.emit("error", err);
          } else {
            that.fd = fd;
            that.emit("open", fd);
          }
        });
      }
      function createReadStream(path, options) {
        return new fs2.ReadStream(path, options);
      }
      function createWriteStream(path, options) {
        return new fs2.WriteStream(path, options);
      }
      var fs$open = fs2.open;
      fs2.open = open;
      function open(path, flags, mode, cb) {
        if (typeof mode === "function")
          cb = mode, mode = null;
        return go$open(path, flags, mode, cb);
        function go$open(path2, flags2, mode2, cb2, startTime) {
          return fs$open(path2, flags2, mode2, function(err, fd) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$open, [path2, flags2, mode2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      return fs2;
    }
    function enqueue(elem) {
      debug("ENQUEUE", elem[0].name, elem[1]);
      fs[gracefulQueue].push(elem);
      retry();
    }
    var retryTimer;
    function resetQueue() {
      var now = Date.now();
      for (var i = 0; i < fs[gracefulQueue].length; ++i) {
        if (fs[gracefulQueue][i].length > 2) {
          fs[gracefulQueue][i][3] = now;
          fs[gracefulQueue][i][4] = now;
        }
      }
      retry();
    }
    function retry() {
      clearTimeout(retryTimer);
      retryTimer = void 0;
      if (fs[gracefulQueue].length === 0)
        return;
      var elem = fs[gracefulQueue].shift();
      var fn = elem[0];
      var args = elem[1];
      var err = elem[2];
      var startTime = elem[3];
      var lastTime = elem[4];
      if (startTime === void 0) {
        debug("RETRY", fn.name, args);
        fn.apply(null, args);
      } else if (Date.now() - startTime >= 6e4) {
        debug("TIMEOUT", fn.name, args);
        var cb = args.pop();
        if (typeof cb === "function")
          cb.call(null, err);
      } else {
        var sinceAttempt = Date.now() - lastTime;
        var sinceStart = Math.max(lastTime - startTime, 1);
        var desiredDelay = Math.min(sinceStart * 1.2, 100);
        if (sinceAttempt >= desiredDelay) {
          debug("RETRY", fn.name, args);
          fn.apply(null, args.concat([startTime]));
        } else {
          fs[gracefulQueue].push(elem);
        }
      }
      if (retryTimer === void 0) {
        retryTimer = setTimeout(retry, 0);
      }
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/fs/index.js
var require_fs = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/fs/index.js"(exports2) {
    "use strict";
    var u = require_universalify().fromCallback;
    var fs = require_graceful_fs();
    var api = [
      "access",
      "appendFile",
      "chmod",
      "chown",
      "close",
      "copyFile",
      "fchmod",
      "fchown",
      "fdatasync",
      "fstat",
      "fsync",
      "ftruncate",
      "futimes",
      "lchmod",
      "lchown",
      "link",
      "lstat",
      "mkdir",
      "mkdtemp",
      "open",
      "opendir",
      "readdir",
      "readFile",
      "readlink",
      "realpath",
      "rename",
      "rm",
      "rmdir",
      "stat",
      "symlink",
      "truncate",
      "unlink",
      "utimes",
      "writeFile"
    ].filter((key) => {
      return typeof fs[key] === "function";
    });
    Object.keys(fs).forEach((key) => {
      if (key === "promises") {
        return;
      }
      exports2[key] = fs[key];
    });
    api.forEach((method) => {
      exports2[method] = u(fs[method]);
    });
    exports2.exists = function(filename, callback) {
      if (typeof callback === "function") {
        return fs.exists(filename, callback);
      }
      return new Promise((resolve) => {
        return fs.exists(filename, resolve);
      });
    };
    exports2.read = function(fd, buffer, offset, length, position, callback) {
      if (typeof callback === "function") {
        return fs.read(fd, buffer, offset, length, position, callback);
      }
      return new Promise((resolve, reject) => {
        fs.read(fd, buffer, offset, length, position, (err, bytesRead, buffer2) => {
          if (err)
            return reject(err);
          resolve({ bytesRead, buffer: buffer2 });
        });
      });
    };
    exports2.write = function(fd, buffer, ...args) {
      if (typeof args[args.length - 1] === "function") {
        return fs.write(fd, buffer, ...args);
      }
      return new Promise((resolve, reject) => {
        fs.write(fd, buffer, ...args, (err, bytesWritten, buffer2) => {
          if (err)
            return reject(err);
          resolve({ bytesWritten, buffer: buffer2 });
        });
      });
    };
    if (typeof fs.writev === "function") {
      exports2.writev = function(fd, buffers, ...args) {
        if (typeof args[args.length - 1] === "function") {
          return fs.writev(fd, buffers, ...args);
        }
        return new Promise((resolve, reject) => {
          fs.writev(fd, buffers, ...args, (err, bytesWritten, buffers2) => {
            if (err)
              return reject(err);
            resolve({ bytesWritten, buffers: buffers2 });
          });
        });
      };
    }
    if (typeof fs.realpath.native === "function") {
      exports2.realpath.native = u(fs.realpath.native);
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/at-least-node/index.js
var require_at_least_node = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/at-least-node/index.js"(exports2, module2) {
    module2.exports = (r) => {
      const n = process.versions.node.split(".").map((x) => parseInt(x, 10));
      r = r.split(".").map((x) => parseInt(x, 10));
      return n[0] > r[0] || n[0] === r[0] && (n[1] > r[1] || n[1] === r[1] && n[2] >= r[2]);
    };
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/mkdirs/make-dir.js
var require_make_dir = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/mkdirs/make-dir.js"(exports2, module2) {
    "use strict";
    var fs = require_fs();
    var path = require("path");
    var atLeastNode = require_at_least_node();
    var useNativeRecursiveOption = atLeastNode("10.12.0");
    var checkPath = (pth) => {
      if (process.platform === "win32") {
        const pathHasInvalidWinCharacters = /[<>:"|?*]/.test(pth.replace(path.parse(pth).root, ""));
        if (pathHasInvalidWinCharacters) {
          const error = new Error(`Path contains invalid characters: ${pth}`);
          error.code = "EINVAL";
          throw error;
        }
      }
    };
    var processOptions = (options) => {
      const defaults = { mode: 511 };
      if (typeof options === "number")
        options = { mode: options };
      return __spreadValues(__spreadValues({}, defaults), options);
    };
    var permissionError = (pth) => {
      const error = new Error(`operation not permitted, mkdir '${pth}'`);
      error.code = "EPERM";
      error.errno = -4048;
      error.path = pth;
      error.syscall = "mkdir";
      return error;
    };
    module2.exports.makeDir = async (input, options) => {
      checkPath(input);
      options = processOptions(options);
      if (useNativeRecursiveOption) {
        const pth = path.resolve(input);
        return fs.mkdir(pth, {
          mode: options.mode,
          recursive: true
        });
      }
      const make = async (pth) => {
        try {
          await fs.mkdir(pth, options.mode);
        } catch (error) {
          if (error.code === "EPERM") {
            throw error;
          }
          if (error.code === "ENOENT") {
            if (path.dirname(pth) === pth) {
              throw permissionError(pth);
            }
            if (error.message.includes("null bytes")) {
              throw error;
            }
            await make(path.dirname(pth));
            return make(pth);
          }
          try {
            const stats = await fs.stat(pth);
            if (!stats.isDirectory()) {
              throw new Error("The path is not a directory");
            }
          } catch {
            throw error;
          }
        }
      };
      return make(path.resolve(input));
    };
    module2.exports.makeDirSync = (input, options) => {
      checkPath(input);
      options = processOptions(options);
      if (useNativeRecursiveOption) {
        const pth = path.resolve(input);
        return fs.mkdirSync(pth, {
          mode: options.mode,
          recursive: true
        });
      }
      const make = (pth) => {
        try {
          fs.mkdirSync(pth, options.mode);
        } catch (error) {
          if (error.code === "EPERM") {
            throw error;
          }
          if (error.code === "ENOENT") {
            if (path.dirname(pth) === pth) {
              throw permissionError(pth);
            }
            if (error.message.includes("null bytes")) {
              throw error;
            }
            make(path.dirname(pth));
            return make(pth);
          }
          try {
            if (!fs.statSync(pth).isDirectory()) {
              throw new Error("The path is not a directory");
            }
          } catch {
            throw error;
          }
        }
      };
      return make(path.resolve(input));
    };
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/mkdirs/index.js
var require_mkdirs = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/mkdirs/index.js"(exports2, module2) {
    "use strict";
    var u = require_universalify().fromPromise;
    var { makeDir: _makeDir, makeDirSync } = require_make_dir();
    var makeDir = u(_makeDir);
    module2.exports = {
      mkdirs: makeDir,
      mkdirsSync: makeDirSync,
      mkdirp: makeDir,
      mkdirpSync: makeDirSync,
      ensureDir: makeDir,
      ensureDirSync: makeDirSync
    };
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/util/utimes.js
var require_utimes = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/util/utimes.js"(exports2, module2) {
    "use strict";
    var fs = require_graceful_fs();
    function utimesMillis(path, atime, mtime, callback) {
      fs.open(path, "r+", (err, fd) => {
        if (err)
          return callback(err);
        fs.futimes(fd, atime, mtime, (futimesErr) => {
          fs.close(fd, (closeErr) => {
            if (callback)
              callback(futimesErr || closeErr);
          });
        });
      });
    }
    function utimesMillisSync(path, atime, mtime) {
      const fd = fs.openSync(path, "r+");
      fs.futimesSync(fd, atime, mtime);
      return fs.closeSync(fd);
    }
    module2.exports = {
      utimesMillis,
      utimesMillisSync
    };
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/util/stat.js
var require_stat = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/util/stat.js"(exports2, module2) {
    "use strict";
    var fs = require_fs();
    var path = require("path");
    var util = require("util");
    var atLeastNode = require_at_least_node();
    var nodeSupportsBigInt = atLeastNode("10.5.0");
    var stat = (file) => nodeSupportsBigInt ? fs.stat(file, { bigint: true }) : fs.stat(file);
    var statSync = (file) => nodeSupportsBigInt ? fs.statSync(file, { bigint: true }) : fs.statSync(file);
    function getStats(src, dest) {
      return Promise.all([
        stat(src),
        stat(dest).catch((err) => {
          if (err.code === "ENOENT")
            return null;
          throw err;
        })
      ]).then(([srcStat, destStat]) => ({ srcStat, destStat }));
    }
    function getStatsSync(src, dest) {
      let destStat;
      const srcStat = statSync(src);
      try {
        destStat = statSync(dest);
      } catch (err) {
        if (err.code === "ENOENT")
          return { srcStat, destStat: null };
        throw err;
      }
      return { srcStat, destStat };
    }
    function checkPaths(src, dest, funcName, cb) {
      util.callbackify(getStats)(src, dest, (err, stats) => {
        if (err)
          return cb(err);
        const { srcStat, destStat } = stats;
        if (destStat && areIdentical(srcStat, destStat)) {
          return cb(new Error("Source and destination must not be the same."));
        }
        if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
          return cb(new Error(errMsg(src, dest, funcName)));
        }
        return cb(null, { srcStat, destStat });
      });
    }
    function checkPathsSync(src, dest, funcName) {
      const { srcStat, destStat } = getStatsSync(src, dest);
      if (destStat && areIdentical(srcStat, destStat)) {
        throw new Error("Source and destination must not be the same.");
      }
      if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
        throw new Error(errMsg(src, dest, funcName));
      }
      return { srcStat, destStat };
    }
    function checkParentPaths(src, srcStat, dest, funcName, cb) {
      const srcParent = path.resolve(path.dirname(src));
      const destParent = path.resolve(path.dirname(dest));
      if (destParent === srcParent || destParent === path.parse(destParent).root)
        return cb();
      const callback = (err, destStat) => {
        if (err) {
          if (err.code === "ENOENT")
            return cb();
          return cb(err);
        }
        if (areIdentical(srcStat, destStat)) {
          return cb(new Error(errMsg(src, dest, funcName)));
        }
        return checkParentPaths(src, srcStat, destParent, funcName, cb);
      };
      if (nodeSupportsBigInt)
        fs.stat(destParent, { bigint: true }, callback);
      else
        fs.stat(destParent, callback);
    }
    function checkParentPathsSync(src, srcStat, dest, funcName) {
      const srcParent = path.resolve(path.dirname(src));
      const destParent = path.resolve(path.dirname(dest));
      if (destParent === srcParent || destParent === path.parse(destParent).root)
        return;
      let destStat;
      try {
        destStat = statSync(destParent);
      } catch (err) {
        if (err.code === "ENOENT")
          return;
        throw err;
      }
      if (areIdentical(srcStat, destStat)) {
        throw new Error(errMsg(src, dest, funcName));
      }
      return checkParentPathsSync(src, srcStat, destParent, funcName);
    }
    function areIdentical(srcStat, destStat) {
      if (destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {
        if (nodeSupportsBigInt || destStat.ino < Number.MAX_SAFE_INTEGER) {
          return true;
        }
        if (destStat.size === srcStat.size && destStat.mode === srcStat.mode && destStat.nlink === srcStat.nlink && destStat.atimeMs === srcStat.atimeMs && destStat.mtimeMs === srcStat.mtimeMs && destStat.ctimeMs === srcStat.ctimeMs && destStat.birthtimeMs === srcStat.birthtimeMs) {
          return true;
        }
      }
      return false;
    }
    function isSrcSubdir(src, dest) {
      const srcArr = path.resolve(src).split(path.sep).filter((i) => i);
      const destArr = path.resolve(dest).split(path.sep).filter((i) => i);
      return srcArr.reduce((acc, cur, i) => acc && destArr[i] === cur, true);
    }
    function errMsg(src, dest, funcName) {
      return `Cannot ${funcName} '${src}' to a subdirectory of itself, '${dest}'.`;
    }
    module2.exports = {
      checkPaths,
      checkPathsSync,
      checkParentPaths,
      checkParentPathsSync,
      isSrcSubdir
    };
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/copy-sync/copy-sync.js
var require_copy_sync = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/copy-sync/copy-sync.js"(exports2, module2) {
    "use strict";
    var fs = require_graceful_fs();
    var path = require("path");
    var mkdirsSync = require_mkdirs().mkdirsSync;
    var utimesMillisSync = require_utimes().utimesMillisSync;
    var stat = require_stat();
    function copySync(src, dest, opts) {
      if (typeof opts === "function") {
        opts = { filter: opts };
      }
      opts = opts || {};
      opts.clobber = "clobber" in opts ? !!opts.clobber : true;
      opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
      if (opts.preserveTimestamps && process.arch === "ia32") {
        console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;

    see https://github.com/jprichardson/node-fs-extra/issues/269`);
      }
      const { srcStat, destStat } = stat.checkPathsSync(src, dest, "copy");
      stat.checkParentPathsSync(src, srcStat, dest, "copy");
      return handleFilterAndCopy(destStat, src, dest, opts);
    }
    function handleFilterAndCopy(destStat, src, dest, opts) {
      if (opts.filter && !opts.filter(src, dest))
        return;
      const destParent = path.dirname(dest);
      if (!fs.existsSync(destParent))
        mkdirsSync(destParent);
      return startCopy(destStat, src, dest, opts);
    }
    function startCopy(destStat, src, dest, opts) {
      if (opts.filter && !opts.filter(src, dest))
        return;
      return getStats(destStat, src, dest, opts);
    }
    function getStats(destStat, src, dest, opts) {
      const statSync = opts.dereference ? fs.statSync : fs.lstatSync;
      const srcStat = statSync(src);
      if (srcStat.isDirectory())
        return onDir(srcStat, destStat, src, dest, opts);
      else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice())
        return onFile(srcStat, destStat, src, dest, opts);
      else if (srcStat.isSymbolicLink())
        return onLink(destStat, src, dest, opts);
    }
    function onFile(srcStat, destStat, src, dest, opts) {
      if (!destStat)
        return copyFile(srcStat, src, dest, opts);
      return mayCopyFile(srcStat, src, dest, opts);
    }
    function mayCopyFile(srcStat, src, dest, opts) {
      if (opts.overwrite) {
        fs.unlinkSync(dest);
        return copyFile(srcStat, src, dest, opts);
      } else if (opts.errorOnExist) {
        throw new Error(`'${dest}' already exists`);
      }
    }
    function copyFile(srcStat, src, dest, opts) {
      fs.copyFileSync(src, dest);
      if (opts.preserveTimestamps)
        handleTimestamps(srcStat.mode, src, dest);
      return setDestMode(dest, srcStat.mode);
    }
    function handleTimestamps(srcMode, src, dest) {
      if (fileIsNotWritable(srcMode))
        makeFileWritable(dest, srcMode);
      return setDestTimestamps(src, dest);
    }
    function fileIsNotWritable(srcMode) {
      return (srcMode & 128) === 0;
    }
    function makeFileWritable(dest, srcMode) {
      return setDestMode(dest, srcMode | 128);
    }
    function setDestMode(dest, srcMode) {
      return fs.chmodSync(dest, srcMode);
    }
    function setDestTimestamps(src, dest) {
      const updatedSrcStat = fs.statSync(src);
      return utimesMillisSync(dest, updatedSrcStat.atime, updatedSrcStat.mtime);
    }
    function onDir(srcStat, destStat, src, dest, opts) {
      if (!destStat)
        return mkDirAndCopy(srcStat.mode, src, dest, opts);
      if (destStat && !destStat.isDirectory()) {
        throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`);
      }
      return copyDir(src, dest, opts);
    }
    function mkDirAndCopy(srcMode, src, dest, opts) {
      fs.mkdirSync(dest);
      copyDir(src, dest, opts);
      return setDestMode(dest, srcMode);
    }
    function copyDir(src, dest, opts) {
      fs.readdirSync(src).forEach((item) => copyDirItem(item, src, dest, opts));
    }
    function copyDirItem(item, src, dest, opts) {
      const srcItem = path.join(src, item);
      const destItem = path.join(dest, item);
      const { destStat } = stat.checkPathsSync(srcItem, destItem, "copy");
      return startCopy(destStat, srcItem, destItem, opts);
    }
    function onLink(destStat, src, dest, opts) {
      let resolvedSrc = fs.readlinkSync(src);
      if (opts.dereference) {
        resolvedSrc = path.resolve(process.cwd(), resolvedSrc);
      }
      if (!destStat) {
        return fs.symlinkSync(resolvedSrc, dest);
      } else {
        let resolvedDest;
        try {
          resolvedDest = fs.readlinkSync(dest);
        } catch (err) {
          if (err.code === "EINVAL" || err.code === "UNKNOWN")
            return fs.symlinkSync(resolvedSrc, dest);
          throw err;
        }
        if (opts.dereference) {
          resolvedDest = path.resolve(process.cwd(), resolvedDest);
        }
        if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {
          throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`);
        }
        if (fs.statSync(dest).isDirectory() && stat.isSrcSubdir(resolvedDest, resolvedSrc)) {
          throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`);
        }
        return copyLink(resolvedSrc, dest);
      }
    }
    function copyLink(resolvedSrc, dest) {
      fs.unlinkSync(dest);
      return fs.symlinkSync(resolvedSrc, dest);
    }
    module2.exports = copySync;
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/copy-sync/index.js
var require_copy_sync2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/copy-sync/index.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      copySync: require_copy_sync()
    };
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/path-exists/index.js
var require_path_exists = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/path-exists/index.js"(exports2, module2) {
    "use strict";
    var u = require_universalify().fromPromise;
    var fs = require_fs();
    function pathExists(path) {
      return fs.access(path).then(() => true).catch(() => false);
    }
    module2.exports = {
      pathExists: u(pathExists),
      pathExistsSync: fs.existsSync
    };
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/copy/copy.js
var require_copy = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/copy/copy.js"(exports2, module2) {
    "use strict";
    var fs = require_graceful_fs();
    var path = require("path");
    var mkdirs = require_mkdirs().mkdirs;
    var pathExists = require_path_exists().pathExists;
    var utimesMillis = require_utimes().utimesMillis;
    var stat = require_stat();
    function copy(src, dest, opts, cb) {
      if (typeof opts === "function" && !cb) {
        cb = opts;
        opts = {};
      } else if (typeof opts === "function") {
        opts = { filter: opts };
      }
      cb = cb || function() {
      };
      opts = opts || {};
      opts.clobber = "clobber" in opts ? !!opts.clobber : true;
      opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
      if (opts.preserveTimestamps && process.arch === "ia32") {
        console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;

    see https://github.com/jprichardson/node-fs-extra/issues/269`);
      }
      stat.checkPaths(src, dest, "copy", (err, stats) => {
        if (err)
          return cb(err);
        const { srcStat, destStat } = stats;
        stat.checkParentPaths(src, srcStat, dest, "copy", (err2) => {
          if (err2)
            return cb(err2);
          if (opts.filter)
            return handleFilter(checkParentDir, destStat, src, dest, opts, cb);
          return checkParentDir(destStat, src, dest, opts, cb);
        });
      });
    }
    function checkParentDir(destStat, src, dest, opts, cb) {
      const destParent = path.dirname(dest);
      pathExists(destParent, (err, dirExists) => {
        if (err)
          return cb(err);
        if (dirExists)
          return startCopy(destStat, src, dest, opts, cb);
        mkdirs(destParent, (err2) => {
          if (err2)
            return cb(err2);
          return startCopy(destStat, src, dest, opts, cb);
        });
      });
    }
    function handleFilter(onInclude, destStat, src, dest, opts, cb) {
      Promise.resolve(opts.filter(src, dest)).then((include) => {
        if (include)
          return onInclude(destStat, src, dest, opts, cb);
        return cb();
      }, (error) => cb(error));
    }
    function startCopy(destStat, src, dest, opts, cb) {
      if (opts.filter)
        return handleFilter(getStats, destStat, src, dest, opts, cb);
      return getStats(destStat, src, dest, opts, cb);
    }
    function getStats(destStat, src, dest, opts, cb) {
      const stat2 = opts.dereference ? fs.stat : fs.lstat;
      stat2(src, (err, srcStat) => {
        if (err)
          return cb(err);
        if (srcStat.isDirectory())
          return onDir(srcStat, destStat, src, dest, opts, cb);
        else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice())
          return onFile(srcStat, destStat, src, dest, opts, cb);
        else if (srcStat.isSymbolicLink())
          return onLink(destStat, src, dest, opts, cb);
      });
    }
    function onFile(srcStat, destStat, src, dest, opts, cb) {
      if (!destStat)
        return copyFile(srcStat, src, dest, opts, cb);
      return mayCopyFile(srcStat, src, dest, opts, cb);
    }
    function mayCopyFile(srcStat, src, dest, opts, cb) {
      if (opts.overwrite) {
        fs.unlink(dest, (err) => {
          if (err)
            return cb(err);
          return copyFile(srcStat, src, dest, opts, cb);
        });
      } else if (opts.errorOnExist) {
        return cb(new Error(`'${dest}' already exists`));
      } else
        return cb();
    }
    function copyFile(srcStat, src, dest, opts, cb) {
      fs.copyFile(src, dest, (err) => {
        if (err)
          return cb(err);
        if (opts.preserveTimestamps)
          return handleTimestampsAndMode(srcStat.mode, src, dest, cb);
        return setDestMode(dest, srcStat.mode, cb);
      });
    }
    function handleTimestampsAndMode(srcMode, src, dest, cb) {
      if (fileIsNotWritable(srcMode)) {
        return makeFileWritable(dest, srcMode, (err) => {
          if (err)
            return cb(err);
          return setDestTimestampsAndMode(srcMode, src, dest, cb);
        });
      }
      return setDestTimestampsAndMode(srcMode, src, dest, cb);
    }
    function fileIsNotWritable(srcMode) {
      return (srcMode & 128) === 0;
    }
    function makeFileWritable(dest, srcMode, cb) {
      return setDestMode(dest, srcMode | 128, cb);
    }
    function setDestTimestampsAndMode(srcMode, src, dest, cb) {
      setDestTimestamps(src, dest, (err) => {
        if (err)
          return cb(err);
        return setDestMode(dest, srcMode, cb);
      });
    }
    function setDestMode(dest, srcMode, cb) {
      return fs.chmod(dest, srcMode, cb);
    }
    function setDestTimestamps(src, dest, cb) {
      fs.stat(src, (err, updatedSrcStat) => {
        if (err)
          return cb(err);
        return utimesMillis(dest, updatedSrcStat.atime, updatedSrcStat.mtime, cb);
      });
    }
    function onDir(srcStat, destStat, src, dest, opts, cb) {
      if (!destStat)
        return mkDirAndCopy(srcStat.mode, src, dest, opts, cb);
      if (destStat && !destStat.isDirectory()) {
        return cb(new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`));
      }
      return copyDir(src, dest, opts, cb);
    }
    function mkDirAndCopy(srcMode, src, dest, opts, cb) {
      fs.mkdir(dest, (err) => {
        if (err)
          return cb(err);
        copyDir(src, dest, opts, (err2) => {
          if (err2)
            return cb(err2);
          return setDestMode(dest, srcMode, cb);
        });
      });
    }
    function copyDir(src, dest, opts, cb) {
      fs.readdir(src, (err, items) => {
        if (err)
          return cb(err);
        return copyDirItems(items, src, dest, opts, cb);
      });
    }
    function copyDirItems(items, src, dest, opts, cb) {
      const item = items.pop();
      if (!item)
        return cb();
      return copyDirItem(items, item, src, dest, opts, cb);
    }
    function copyDirItem(items, item, src, dest, opts, cb) {
      const srcItem = path.join(src, item);
      const destItem = path.join(dest, item);
      stat.checkPaths(srcItem, destItem, "copy", (err, stats) => {
        if (err)
          return cb(err);
        const { destStat } = stats;
        startCopy(destStat, srcItem, destItem, opts, (err2) => {
          if (err2)
            return cb(err2);
          return copyDirItems(items, src, dest, opts, cb);
        });
      });
    }
    function onLink(destStat, src, dest, opts, cb) {
      fs.readlink(src, (err, resolvedSrc) => {
        if (err)
          return cb(err);
        if (opts.dereference) {
          resolvedSrc = path.resolve(process.cwd(), resolvedSrc);
        }
        if (!destStat) {
          return fs.symlink(resolvedSrc, dest, cb);
        } else {
          fs.readlink(dest, (err2, resolvedDest) => {
            if (err2) {
              if (err2.code === "EINVAL" || err2.code === "UNKNOWN")
                return fs.symlink(resolvedSrc, dest, cb);
              return cb(err2);
            }
            if (opts.dereference) {
              resolvedDest = path.resolve(process.cwd(), resolvedDest);
            }
            if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {
              return cb(new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`));
            }
            if (destStat.isDirectory() && stat.isSrcSubdir(resolvedDest, resolvedSrc)) {
              return cb(new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`));
            }
            return copyLink(resolvedSrc, dest, cb);
          });
        }
      });
    }
    function copyLink(resolvedSrc, dest, cb) {
      fs.unlink(dest, (err) => {
        if (err)
          return cb(err);
        return fs.symlink(resolvedSrc, dest, cb);
      });
    }
    module2.exports = copy;
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/copy/index.js
var require_copy2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/copy/index.js"(exports2, module2) {
    "use strict";
    var u = require_universalify().fromCallback;
    module2.exports = {
      copy: u(require_copy())
    };
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/remove/rimraf.js
var require_rimraf = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/remove/rimraf.js"(exports2, module2) {
    "use strict";
    var fs = require_graceful_fs();
    var path = require("path");
    var assert = require("assert");
    var isWindows = process.platform === "win32";
    function defaults(options) {
      const methods = [
        "unlink",
        "chmod",
        "stat",
        "lstat",
        "rmdir",
        "readdir"
      ];
      methods.forEach((m) => {
        options[m] = options[m] || fs[m];
        m = m + "Sync";
        options[m] = options[m] || fs[m];
      });
      options.maxBusyTries = options.maxBusyTries || 3;
    }
    function rimraf(p, options, cb) {
      let busyTries = 0;
      if (typeof options === "function") {
        cb = options;
        options = {};
      }
      assert(p, "rimraf: missing path");
      assert.strictEqual(typeof p, "string", "rimraf: path should be a string");
      assert.strictEqual(typeof cb, "function", "rimraf: callback function required");
      assert(options, "rimraf: invalid options argument provided");
      assert.strictEqual(typeof options, "object", "rimraf: options should be object");
      defaults(options);
      rimraf_(p, options, function CB(er) {
        if (er) {
          if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") && busyTries < options.maxBusyTries) {
            busyTries++;
            const time = busyTries * 100;
            return setTimeout(() => rimraf_(p, options, CB), time);
          }
          if (er.code === "ENOENT")
            er = null;
        }
        cb(er);
      });
    }
    function rimraf_(p, options, cb) {
      assert(p);
      assert(options);
      assert(typeof cb === "function");
      options.lstat(p, (er, st) => {
        if (er && er.code === "ENOENT") {
          return cb(null);
        }
        if (er && er.code === "EPERM" && isWindows) {
          return fixWinEPERM(p, options, er, cb);
        }
        if (st && st.isDirectory()) {
          return rmdir(p, options, er, cb);
        }
        options.unlink(p, (er2) => {
          if (er2) {
            if (er2.code === "ENOENT") {
              return cb(null);
            }
            if (er2.code === "EPERM") {
              return isWindows ? fixWinEPERM(p, options, er2, cb) : rmdir(p, options, er2, cb);
            }
            if (er2.code === "EISDIR") {
              return rmdir(p, options, er2, cb);
            }
          }
          return cb(er2);
        });
      });
    }
    function fixWinEPERM(p, options, er, cb) {
      assert(p);
      assert(options);
      assert(typeof cb === "function");
      options.chmod(p, 438, (er2) => {
        if (er2) {
          cb(er2.code === "ENOENT" ? null : er);
        } else {
          options.stat(p, (er3, stats) => {
            if (er3) {
              cb(er3.code === "ENOENT" ? null : er);
            } else if (stats.isDirectory()) {
              rmdir(p, options, er, cb);
            } else {
              options.unlink(p, cb);
            }
          });
        }
      });
    }
    function fixWinEPERMSync(p, options, er) {
      let stats;
      assert(p);
      assert(options);
      try {
        options.chmodSync(p, 438);
      } catch (er2) {
        if (er2.code === "ENOENT") {
          return;
        } else {
          throw er;
        }
      }
      try {
        stats = options.statSync(p);
      } catch (er3) {
        if (er3.code === "ENOENT") {
          return;
        } else {
          throw er;
        }
      }
      if (stats.isDirectory()) {
        rmdirSync(p, options, er);
      } else {
        options.unlinkSync(p);
      }
    }
    function rmdir(p, options, originalEr, cb) {
      assert(p);
      assert(options);
      assert(typeof cb === "function");
      options.rmdir(p, (er) => {
        if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")) {
          rmkids(p, options, cb);
        } else if (er && er.code === "ENOTDIR") {
          cb(originalEr);
        } else {
          cb(er);
        }
      });
    }
    function rmkids(p, options, cb) {
      assert(p);
      assert(options);
      assert(typeof cb === "function");
      options.readdir(p, (er, files) => {
        if (er)
          return cb(er);
        let n = files.length;
        let errState;
        if (n === 0)
          return options.rmdir(p, cb);
        files.forEach((f) => {
          rimraf(path.join(p, f), options, (er2) => {
            if (errState) {
              return;
            }
            if (er2)
              return cb(errState = er2);
            if (--n === 0) {
              options.rmdir(p, cb);
            }
          });
        });
      });
    }
    function rimrafSync(p, options) {
      let st;
      options = options || {};
      defaults(options);
      assert(p, "rimraf: missing path");
      assert.strictEqual(typeof p, "string", "rimraf: path should be a string");
      assert(options, "rimraf: missing options");
      assert.strictEqual(typeof options, "object", "rimraf: options should be object");
      try {
        st = options.lstatSync(p);
      } catch (er) {
        if (er.code === "ENOENT") {
          return;
        }
        if (er.code === "EPERM" && isWindows) {
          fixWinEPERMSync(p, options, er);
        }
      }
      try {
        if (st && st.isDirectory()) {
          rmdirSync(p, options, null);
        } else {
          options.unlinkSync(p);
        }
      } catch (er) {
        if (er.code === "ENOENT") {
          return;
        } else if (er.code === "EPERM") {
          return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er);
        } else if (er.code !== "EISDIR") {
          throw er;
        }
        rmdirSync(p, options, er);
      }
    }
    function rmdirSync(p, options, originalEr) {
      assert(p);
      assert(options);
      try {
        options.rmdirSync(p);
      } catch (er) {
        if (er.code === "ENOTDIR") {
          throw originalEr;
        } else if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM") {
          rmkidsSync(p, options);
        } else if (er.code !== "ENOENT") {
          throw er;
        }
      }
    }
    function rmkidsSync(p, options) {
      assert(p);
      assert(options);
      options.readdirSync(p).forEach((f) => rimrafSync(path.join(p, f), options));
      if (isWindows) {
        const startTime = Date.now();
        do {
          try {
            const ret = options.rmdirSync(p, options);
            return ret;
          } catch {
          }
        } while (Date.now() - startTime < 500);
      } else {
        const ret = options.rmdirSync(p, options);
        return ret;
      }
    }
    module2.exports = rimraf;
    rimraf.sync = rimrafSync;
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/remove/index.js
var require_remove = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/remove/index.js"(exports2, module2) {
    "use strict";
    var u = require_universalify().fromCallback;
    var rimraf = require_rimraf();
    module2.exports = {
      remove: u(rimraf),
      removeSync: rimraf.sync
    };
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/empty/index.js
var require_empty = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/empty/index.js"(exports2, module2) {
    "use strict";
    var u = require_universalify().fromCallback;
    var fs = require_graceful_fs();
    var path = require("path");
    var mkdir = require_mkdirs();
    var remove = require_remove();
    var emptyDir = u(function emptyDir2(dir, callback) {
      callback = callback || function() {
      };
      fs.readdir(dir, (err, items) => {
        if (err)
          return mkdir.mkdirs(dir, callback);
        items = items.map((item) => path.join(dir, item));
        deleteItem();
        function deleteItem() {
          const item = items.pop();
          if (!item)
            return callback();
          remove.remove(item, (err2) => {
            if (err2)
              return callback(err2);
            deleteItem();
          });
        }
      });
    });
    function emptyDirSync(dir) {
      let items;
      try {
        items = fs.readdirSync(dir);
      } catch {
        return mkdir.mkdirsSync(dir);
      }
      items.forEach((item) => {
        item = path.join(dir, item);
        remove.removeSync(item);
      });
    }
    module2.exports = {
      emptyDirSync,
      emptydirSync: emptyDirSync,
      emptyDir,
      emptydir: emptyDir
    };
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/ensure/file.js
var require_file = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/ensure/file.js"(exports2, module2) {
    "use strict";
    var u = require_universalify().fromCallback;
    var path = require("path");
    var fs = require_graceful_fs();
    var mkdir = require_mkdirs();
    function createFile(file, callback) {
      function makeFile() {
        fs.writeFile(file, "", (err) => {
          if (err)
            return callback(err);
          callback();
        });
      }
      fs.stat(file, (err, stats) => {
        if (!err && stats.isFile())
          return callback();
        const dir = path.dirname(file);
        fs.stat(dir, (err2, stats2) => {
          if (err2) {
            if (err2.code === "ENOENT") {
              return mkdir.mkdirs(dir, (err3) => {
                if (err3)
                  return callback(err3);
                makeFile();
              });
            }
            return callback(err2);
          }
          if (stats2.isDirectory())
            makeFile();
          else {
            fs.readdir(dir, (err3) => {
              if (err3)
                return callback(err3);
            });
          }
        });
      });
    }
    function createFileSync(file) {
      let stats;
      try {
        stats = fs.statSync(file);
      } catch {
      }
      if (stats && stats.isFile())
        return;
      const dir = path.dirname(file);
      try {
        if (!fs.statSync(dir).isDirectory()) {
          fs.readdirSync(dir);
        }
      } catch (err) {
        if (err && err.code === "ENOENT")
          mkdir.mkdirsSync(dir);
        else
          throw err;
      }
      fs.writeFileSync(file, "");
    }
    module2.exports = {
      createFile: u(createFile),
      createFileSync
    };
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/ensure/link.js
var require_link = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/ensure/link.js"(exports2, module2) {
    "use strict";
    var u = require_universalify().fromCallback;
    var path = require("path");
    var fs = require_graceful_fs();
    var mkdir = require_mkdirs();
    var pathExists = require_path_exists().pathExists;
    function createLink(srcpath, dstpath, callback) {
      function makeLink(srcpath2, dstpath2) {
        fs.link(srcpath2, dstpath2, (err) => {
          if (err)
            return callback(err);
          callback(null);
        });
      }
      pathExists(dstpath, (err, destinationExists) => {
        if (err)
          return callback(err);
        if (destinationExists)
          return callback(null);
        fs.lstat(srcpath, (err2) => {
          if (err2) {
            err2.message = err2.message.replace("lstat", "ensureLink");
            return callback(err2);
          }
          const dir = path.dirname(dstpath);
          pathExists(dir, (err3, dirExists) => {
            if (err3)
              return callback(err3);
            if (dirExists)
              return makeLink(srcpath, dstpath);
            mkdir.mkdirs(dir, (err4) => {
              if (err4)
                return callback(err4);
              makeLink(srcpath, dstpath);
            });
          });
        });
      });
    }
    function createLinkSync(srcpath, dstpath) {
      const destinationExists = fs.existsSync(dstpath);
      if (destinationExists)
        return void 0;
      try {
        fs.lstatSync(srcpath);
      } catch (err) {
        err.message = err.message.replace("lstat", "ensureLink");
        throw err;
      }
      const dir = path.dirname(dstpath);
      const dirExists = fs.existsSync(dir);
      if (dirExists)
        return fs.linkSync(srcpath, dstpath);
      mkdir.mkdirsSync(dir);
      return fs.linkSync(srcpath, dstpath);
    }
    module2.exports = {
      createLink: u(createLink),
      createLinkSync
    };
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/ensure/symlink-paths.js
var require_symlink_paths = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/ensure/symlink-paths.js"(exports2, module2) {
    "use strict";
    var path = require("path");
    var fs = require_graceful_fs();
    var pathExists = require_path_exists().pathExists;
    function symlinkPaths(srcpath, dstpath, callback) {
      if (path.isAbsolute(srcpath)) {
        return fs.lstat(srcpath, (err) => {
          if (err) {
            err.message = err.message.replace("lstat", "ensureSymlink");
            return callback(err);
          }
          return callback(null, {
            toCwd: srcpath,
            toDst: srcpath
          });
        });
      } else {
        const dstdir = path.dirname(dstpath);
        const relativeToDst = path.join(dstdir, srcpath);
        return pathExists(relativeToDst, (err, exists) => {
          if (err)
            return callback(err);
          if (exists) {
            return callback(null, {
              toCwd: relativeToDst,
              toDst: srcpath
            });
          } else {
            return fs.lstat(srcpath, (err2) => {
              if (err2) {
                err2.message = err2.message.replace("lstat", "ensureSymlink");
                return callback(err2);
              }
              return callback(null, {
                toCwd: srcpath,
                toDst: path.relative(dstdir, srcpath)
              });
            });
          }
        });
      }
    }
    function symlinkPathsSync(srcpath, dstpath) {
      let exists;
      if (path.isAbsolute(srcpath)) {
        exists = fs.existsSync(srcpath);
        if (!exists)
          throw new Error("absolute srcpath does not exist");
        return {
          toCwd: srcpath,
          toDst: srcpath
        };
      } else {
        const dstdir = path.dirname(dstpath);
        const relativeToDst = path.join(dstdir, srcpath);
        exists = fs.existsSync(relativeToDst);
        if (exists) {
          return {
            toCwd: relativeToDst,
            toDst: srcpath
          };
        } else {
          exists = fs.existsSync(srcpath);
          if (!exists)
            throw new Error("relative srcpath does not exist");
          return {
            toCwd: srcpath,
            toDst: path.relative(dstdir, srcpath)
          };
        }
      }
    }
    module2.exports = {
      symlinkPaths,
      symlinkPathsSync
    };
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/ensure/symlink-type.js
var require_symlink_type = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/ensure/symlink-type.js"(exports2, module2) {
    "use strict";
    var fs = require_graceful_fs();
    function symlinkType(srcpath, type, callback) {
      callback = typeof type === "function" ? type : callback;
      type = typeof type === "function" ? false : type;
      if (type)
        return callback(null, type);
      fs.lstat(srcpath, (err, stats) => {
        if (err)
          return callback(null, "file");
        type = stats && stats.isDirectory() ? "dir" : "file";
        callback(null, type);
      });
    }
    function symlinkTypeSync(srcpath, type) {
      let stats;
      if (type)
        return type;
      try {
        stats = fs.lstatSync(srcpath);
      } catch {
        return "file";
      }
      return stats && stats.isDirectory() ? "dir" : "file";
    }
    module2.exports = {
      symlinkType,
      symlinkTypeSync
    };
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/ensure/symlink.js
var require_symlink = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/ensure/symlink.js"(exports2, module2) {
    "use strict";
    var u = require_universalify().fromCallback;
    var path = require("path");
    var fs = require_graceful_fs();
    var _mkdirs = require_mkdirs();
    var mkdirs = _mkdirs.mkdirs;
    var mkdirsSync = _mkdirs.mkdirsSync;
    var _symlinkPaths = require_symlink_paths();
    var symlinkPaths = _symlinkPaths.symlinkPaths;
    var symlinkPathsSync = _symlinkPaths.symlinkPathsSync;
    var _symlinkType = require_symlink_type();
    var symlinkType = _symlinkType.symlinkType;
    var symlinkTypeSync = _symlinkType.symlinkTypeSync;
    var pathExists = require_path_exists().pathExists;
    function createSymlink(srcpath, dstpath, type, callback) {
      callback = typeof type === "function" ? type : callback;
      type = typeof type === "function" ? false : type;
      pathExists(dstpath, (err, destinationExists) => {
        if (err)
          return callback(err);
        if (destinationExists)
          return callback(null);
        symlinkPaths(srcpath, dstpath, (err2, relative) => {
          if (err2)
            return callback(err2);
          srcpath = relative.toDst;
          symlinkType(relative.toCwd, type, (err3, type2) => {
            if (err3)
              return callback(err3);
            const dir = path.dirname(dstpath);
            pathExists(dir, (err4, dirExists) => {
              if (err4)
                return callback(err4);
              if (dirExists)
                return fs.symlink(srcpath, dstpath, type2, callback);
              mkdirs(dir, (err5) => {
                if (err5)
                  return callback(err5);
                fs.symlink(srcpath, dstpath, type2, callback);
              });
            });
          });
        });
      });
    }
    function createSymlinkSync(srcpath, dstpath, type) {
      const destinationExists = fs.existsSync(dstpath);
      if (destinationExists)
        return void 0;
      const relative = symlinkPathsSync(srcpath, dstpath);
      srcpath = relative.toDst;
      type = symlinkTypeSync(relative.toCwd, type);
      const dir = path.dirname(dstpath);
      const exists = fs.existsSync(dir);
      if (exists)
        return fs.symlinkSync(srcpath, dstpath, type);
      mkdirsSync(dir);
      return fs.symlinkSync(srcpath, dstpath, type);
    }
    module2.exports = {
      createSymlink: u(createSymlink),
      createSymlinkSync
    };
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/ensure/index.js
var require_ensure = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/ensure/index.js"(exports2, module2) {
    "use strict";
    var file = require_file();
    var link = require_link();
    var symlink = require_symlink();
    module2.exports = {
      createFile: file.createFile,
      createFileSync: file.createFileSync,
      ensureFile: file.createFile,
      ensureFileSync: file.createFileSync,
      createLink: link.createLink,
      createLinkSync: link.createLinkSync,
      ensureLink: link.createLink,
      ensureLinkSync: link.createLinkSync,
      createSymlink: symlink.createSymlink,
      createSymlinkSync: symlink.createSymlinkSync,
      ensureSymlink: symlink.createSymlink,
      ensureSymlinkSync: symlink.createSymlinkSync
    };
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/jsonfile/utils.js
var require_utils2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/jsonfile/utils.js"(exports2, module2) {
    function stringify(obj, { EOL = "\n", finalEOL = true, replacer = null, spaces } = {}) {
      const EOF = finalEOL ? EOL : "";
      const str = JSON.stringify(obj, replacer, spaces);
      return str.replace(/\n/g, EOL) + EOF;
    }
    function stripBom(content) {
      if (Buffer.isBuffer(content))
        content = content.toString("utf8");
      return content.replace(/^\uFEFF/, "");
    }
    module2.exports = { stringify, stripBom };
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/jsonfile/index.js
var require_jsonfile = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/jsonfile/index.js"(exports2, module2) {
    var _fs;
    try {
      _fs = require_graceful_fs();
    } catch (_) {
      _fs = require("fs");
    }
    var universalify = require_universalify();
    var { stringify, stripBom } = require_utils2();
    async function _readFile(file, options = {}) {
      if (typeof options === "string") {
        options = { encoding: options };
      }
      const fs = options.fs || _fs;
      const shouldThrow = "throws" in options ? options.throws : true;
      let data = await universalify.fromCallback(fs.readFile)(file, options);
      data = stripBom(data);
      let obj;
      try {
        obj = JSON.parse(data, options ? options.reviver : null);
      } catch (err) {
        if (shouldThrow) {
          err.message = `${file}: ${err.message}`;
          throw err;
        } else {
          return null;
        }
      }
      return obj;
    }
    var readFile = universalify.fromPromise(_readFile);
    function readFileSync(file, options = {}) {
      if (typeof options === "string") {
        options = { encoding: options };
      }
      const fs = options.fs || _fs;
      const shouldThrow = "throws" in options ? options.throws : true;
      try {
        let content = fs.readFileSync(file, options);
        content = stripBom(content);
        return JSON.parse(content, options.reviver);
      } catch (err) {
        if (shouldThrow) {
          err.message = `${file}: ${err.message}`;
          throw err;
        } else {
          return null;
        }
      }
    }
    async function _writeFile(file, obj, options = {}) {
      const fs = options.fs || _fs;
      const str = stringify(obj, options);
      await universalify.fromCallback(fs.writeFile)(file, str, options);
    }
    var writeFile = universalify.fromPromise(_writeFile);
    function writeFileSync(file, obj, options = {}) {
      const fs = options.fs || _fs;
      const str = stringify(obj, options);
      return fs.writeFileSync(file, str, options);
    }
    var jsonfile = {
      readFile,
      readFileSync,
      writeFile,
      writeFileSync
    };
    module2.exports = jsonfile;
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/json/jsonfile.js
var require_jsonfile2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/json/jsonfile.js"(exports2, module2) {
    "use strict";
    var jsonFile = require_jsonfile();
    module2.exports = {
      readJson: jsonFile.readFile,
      readJsonSync: jsonFile.readFileSync,
      writeJson: jsonFile.writeFile,
      writeJsonSync: jsonFile.writeFileSync
    };
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/output/index.js
var require_output = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/output/index.js"(exports2, module2) {
    "use strict";
    var u = require_universalify().fromCallback;
    var fs = require_graceful_fs();
    var path = require("path");
    var mkdir = require_mkdirs();
    var pathExists = require_path_exists().pathExists;
    function outputFile(file, data, encoding, callback) {
      if (typeof encoding === "function") {
        callback = encoding;
        encoding = "utf8";
      }
      const dir = path.dirname(file);
      pathExists(dir, (err, itDoes) => {
        if (err)
          return callback(err);
        if (itDoes)
          return fs.writeFile(file, data, encoding, callback);
        mkdir.mkdirs(dir, (err2) => {
          if (err2)
            return callback(err2);
          fs.writeFile(file, data, encoding, callback);
        });
      });
    }
    function outputFileSync(file, ...args) {
      const dir = path.dirname(file);
      if (fs.existsSync(dir)) {
        return fs.writeFileSync(file, ...args);
      }
      mkdir.mkdirsSync(dir);
      fs.writeFileSync(file, ...args);
    }
    module2.exports = {
      outputFile: u(outputFile),
      outputFileSync
    };
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/json/output-json.js
var require_output_json = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/json/output-json.js"(exports2, module2) {
    "use strict";
    var { stringify } = require_utils2();
    var { outputFile } = require_output();
    async function outputJson(file, data, options = {}) {
      const str = stringify(data, options);
      await outputFile(file, str, options);
    }
    module2.exports = outputJson;
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/json/output-json-sync.js
var require_output_json_sync = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/json/output-json-sync.js"(exports2, module2) {
    "use strict";
    var { stringify } = require_utils2();
    var { outputFileSync } = require_output();
    function outputJsonSync(file, data, options) {
      const str = stringify(data, options);
      outputFileSync(file, str, options);
    }
    module2.exports = outputJsonSync;
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/json/index.js
var require_json = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/json/index.js"(exports2, module2) {
    "use strict";
    var u = require_universalify().fromPromise;
    var jsonFile = require_jsonfile2();
    jsonFile.outputJson = u(require_output_json());
    jsonFile.outputJsonSync = require_output_json_sync();
    jsonFile.outputJSON = jsonFile.outputJson;
    jsonFile.outputJSONSync = jsonFile.outputJsonSync;
    jsonFile.writeJSON = jsonFile.writeJson;
    jsonFile.writeJSONSync = jsonFile.writeJsonSync;
    jsonFile.readJSON = jsonFile.readJson;
    jsonFile.readJSONSync = jsonFile.readJsonSync;
    module2.exports = jsonFile;
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/move-sync/move-sync.js
var require_move_sync = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/move-sync/move-sync.js"(exports2, module2) {
    "use strict";
    var fs = require_graceful_fs();
    var path = require("path");
    var copySync = require_copy_sync2().copySync;
    var removeSync = require_remove().removeSync;
    var mkdirpSync = require_mkdirs().mkdirpSync;
    var stat = require_stat();
    function moveSync(src, dest, opts) {
      opts = opts || {};
      const overwrite = opts.overwrite || opts.clobber || false;
      const { srcStat } = stat.checkPathsSync(src, dest, "move");
      stat.checkParentPathsSync(src, srcStat, dest, "move");
      mkdirpSync(path.dirname(dest));
      return doRename(src, dest, overwrite);
    }
    function doRename(src, dest, overwrite) {
      if (overwrite) {
        removeSync(dest);
        return rename(src, dest, overwrite);
      }
      if (fs.existsSync(dest))
        throw new Error("dest already exists.");
      return rename(src, dest, overwrite);
    }
    function rename(src, dest, overwrite) {
      try {
        fs.renameSync(src, dest);
      } catch (err) {
        if (err.code !== "EXDEV")
          throw err;
        return moveAcrossDevice(src, dest, overwrite);
      }
    }
    function moveAcrossDevice(src, dest, overwrite) {
      const opts = {
        overwrite,
        errorOnExist: true
      };
      copySync(src, dest, opts);
      return removeSync(src);
    }
    module2.exports = moveSync;
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/move-sync/index.js
var require_move_sync2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/move-sync/index.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      moveSync: require_move_sync()
    };
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/move/move.js
var require_move = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/move/move.js"(exports2, module2) {
    "use strict";
    var fs = require_graceful_fs();
    var path = require("path");
    var copy = require_copy2().copy;
    var remove = require_remove().remove;
    var mkdirp = require_mkdirs().mkdirp;
    var pathExists = require_path_exists().pathExists;
    var stat = require_stat();
    function move(src, dest, opts, cb) {
      if (typeof opts === "function") {
        cb = opts;
        opts = {};
      }
      const overwrite = opts.overwrite || opts.clobber || false;
      stat.checkPaths(src, dest, "move", (err, stats) => {
        if (err)
          return cb(err);
        const { srcStat } = stats;
        stat.checkParentPaths(src, srcStat, dest, "move", (err2) => {
          if (err2)
            return cb(err2);
          mkdirp(path.dirname(dest), (err3) => {
            if (err3)
              return cb(err3);
            return doRename(src, dest, overwrite, cb);
          });
        });
      });
    }
    function doRename(src, dest, overwrite, cb) {
      if (overwrite) {
        return remove(dest, (err) => {
          if (err)
            return cb(err);
          return rename(src, dest, overwrite, cb);
        });
      }
      pathExists(dest, (err, destExists) => {
        if (err)
          return cb(err);
        if (destExists)
          return cb(new Error("dest already exists."));
        return rename(src, dest, overwrite, cb);
      });
    }
    function rename(src, dest, overwrite, cb) {
      fs.rename(src, dest, (err) => {
        if (!err)
          return cb();
        if (err.code !== "EXDEV")
          return cb(err);
        return moveAcrossDevice(src, dest, overwrite, cb);
      });
    }
    function moveAcrossDevice(src, dest, overwrite, cb) {
      const opts = {
        overwrite,
        errorOnExist: true
      };
      copy(src, dest, opts, (err) => {
        if (err)
          return cb(err);
        return remove(src, cb);
      });
    }
    module2.exports = move;
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/move/index.js
var require_move2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/move/index.js"(exports2, module2) {
    "use strict";
    var u = require_universalify().fromCallback;
    module2.exports = {
      move: u(require_move())
    };
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/index.js
var require_lib6 = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/fs-extra/lib/index.js"(exports2, module2) {
    "use strict";
    module2.exports = __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, require_fs()), require_copy_sync2()), require_copy2()), require_empty()), require_ensure()), require_json()), require_mkdirs()), require_move_sync2()), require_move2()), require_output()), require_path_exists()), require_remove());
    var fs = require("fs");
    if (Object.getOwnPropertyDescriptor(fs, "promises")) {
      Object.defineProperty(module2.exports, "promises", {
        get() {
          return fs.promises;
        }
      });
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/concat-map/index.js
var require_concat_map = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/concat-map/index.js"(exports2, module2) {
    module2.exports = function(xs, fn) {
      var res = [];
      for (var i = 0; i < xs.length; i++) {
        var x = fn(xs[i], i);
        if (isArray(x))
          res.push.apply(res, x);
        else
          res.push(x);
      }
      return res;
    };
    var isArray = Array.isArray || function(xs) {
      return Object.prototype.toString.call(xs) === "[object Array]";
    };
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/balanced-match/index.js
var require_balanced_match = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/balanced-match/index.js"(exports2, module2) {
    "use strict";
    module2.exports = balanced;
    function balanced(a, b, str) {
      if (a instanceof RegExp)
        a = maybeMatch(a, str);
      if (b instanceof RegExp)
        b = maybeMatch(b, str);
      var r = range(a, b, str);
      return r && {
        start: r[0],
        end: r[1],
        pre: str.slice(0, r[0]),
        body: str.slice(r[0] + a.length, r[1]),
        post: str.slice(r[1] + b.length)
      };
    }
    function maybeMatch(reg, str) {
      var m = str.match(reg);
      return m ? m[0] : null;
    }
    balanced.range = range;
    function range(a, b, str) {
      var begs, beg, left, right, result;
      var ai = str.indexOf(a);
      var bi = str.indexOf(b, ai + 1);
      var i = ai;
      if (ai >= 0 && bi > 0) {
        if (a === b) {
          return [ai, bi];
        }
        begs = [];
        left = str.length;
        while (i >= 0 && !result) {
          if (i == ai) {
            begs.push(i);
            ai = str.indexOf(a, i + 1);
          } else if (begs.length == 1) {
            result = [begs.pop(), bi];
          } else {
            beg = begs.pop();
            if (beg < left) {
              left = beg;
              right = bi;
            }
            bi = str.indexOf(b, i + 1);
          }
          i = ai < bi && ai >= 0 ? ai : bi;
        }
        if (begs.length) {
          result = [left, right];
        }
      }
      return result;
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/brace-expansion/index.js
var require_brace_expansion = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/brace-expansion/index.js"(exports2, module2) {
    var concatMap = require_concat_map();
    var balanced = require_balanced_match();
    module2.exports = expandTop;
    var escSlash = "\0SLASH" + Math.random() + "\0";
    var escOpen = "\0OPEN" + Math.random() + "\0";
    var escClose = "\0CLOSE" + Math.random() + "\0";
    var escComma = "\0COMMA" + Math.random() + "\0";
    var escPeriod = "\0PERIOD" + Math.random() + "\0";
    function numeric(str) {
      return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);
    }
    function escapeBraces(str) {
      return str.split("\\\\").join(escSlash).split("\\{").join(escOpen).split("\\}").join(escClose).split("\\,").join(escComma).split("\\.").join(escPeriod);
    }
    function unescapeBraces(str) {
      return str.split(escSlash).join("\\").split(escOpen).join("{").split(escClose).join("}").split(escComma).join(",").split(escPeriod).join(".");
    }
    function parseCommaParts(str) {
      if (!str)
        return [""];
      var parts = [];
      var m = balanced("{", "}", str);
      if (!m)
        return str.split(",");
      var pre = m.pre;
      var body = m.body;
      var post = m.post;
      var p = pre.split(",");
      p[p.length - 1] += "{" + body + "}";
      var postParts = parseCommaParts(post);
      if (post.length) {
        p[p.length - 1] += postParts.shift();
        p.push.apply(p, postParts);
      }
      parts.push.apply(parts, p);
      return parts;
    }
    function expandTop(str) {
      if (!str)
        return [];
      if (str.substr(0, 2) === "{}") {
        str = "\\{\\}" + str.substr(2);
      }
      return expand(escapeBraces(str), true).map(unescapeBraces);
    }
    function embrace(str) {
      return "{" + str + "}";
    }
    function isPadded(el) {
      return /^-?0\d/.test(el);
    }
    function lte(i, y) {
      return i <= y;
    }
    function gte(i, y) {
      return i >= y;
    }
    function expand(str, isTop) {
      var expansions = [];
      var m = balanced("{", "}", str);
      if (!m || /\$$/.test(m.pre))
        return [str];
      var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
      var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
      var isSequence = isNumericSequence || isAlphaSequence;
      var isOptions = m.body.indexOf(",") >= 0;
      if (!isSequence && !isOptions) {
        if (m.post.match(/,.*\}/)) {
          str = m.pre + "{" + m.body + escClose + m.post;
          return expand(str);
        }
        return [str];
      }
      var n;
      if (isSequence) {
        n = m.body.split(/\.\./);
      } else {
        n = parseCommaParts(m.body);
        if (n.length === 1) {
          n = expand(n[0], false).map(embrace);
          if (n.length === 1) {
            var post = m.post.length ? expand(m.post, false) : [""];
            return post.map(function(p) {
              return m.pre + n[0] + p;
            });
          }
        }
      }
      var pre = m.pre;
      var post = m.post.length ? expand(m.post, false) : [""];
      var N;
      if (isSequence) {
        var x = numeric(n[0]);
        var y = numeric(n[1]);
        var width = Math.max(n[0].length, n[1].length);
        var incr = n.length == 3 ? Math.abs(numeric(n[2])) : 1;
        var test = lte;
        var reverse = y < x;
        if (reverse) {
          incr *= -1;
          test = gte;
        }
        var pad = n.some(isPadded);
        N = [];
        for (var i = x; test(i, y); i += incr) {
          var c;
          if (isAlphaSequence) {
            c = String.fromCharCode(i);
            if (c === "\\")
              c = "";
          } else {
            c = String(i);
            if (pad) {
              var need = width - c.length;
              if (need > 0) {
                var z = new Array(need + 1).join("0");
                if (i < 0)
                  c = "-" + z + c.slice(1);
                else
                  c = z + c;
              }
            }
          }
          N.push(c);
        }
      } else {
        N = concatMap(n, function(el) {
          return expand(el, false);
        });
      }
      for (var j = 0; j < N.length; j++) {
        for (var k = 0; k < post.length; k++) {
          var expansion = pre + N[j] + post[k];
          if (!isTop || isSequence || expansion)
            expansions.push(expansion);
        }
      }
      return expansions;
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/minimatch/minimatch.js
var require_minimatch = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/minimatch/minimatch.js"(exports2, module2) {
    module2.exports = minimatch;
    minimatch.Minimatch = Minimatch;
    var path = { sep: "/" };
    try {
      path = require("path");
    } catch (er) {
    }
    var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {};
    var expand = require_brace_expansion();
    var plTypes = {
      "!": { open: "(?:(?!(?:", close: "))[^/]*?)" },
      "?": { open: "(?:", close: ")?" },
      "+": { open: "(?:", close: ")+" },
      "*": { open: "(?:", close: ")*" },
      "@": { open: "(?:", close: ")" }
    };
    var qmark = "[^/]";
    var star = qmark + "*?";
    var twoStarDot = "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?";
    var twoStarNoDot = "(?:(?!(?:\\/|^)\\.).)*?";
    var reSpecials = charSet("().*{}+?[]^$\\!");
    function charSet(s) {
      return s.split("").reduce(function(set, c) {
        set[c] = true;
        return set;
      }, {});
    }
    var slashSplit = /\/+/;
    minimatch.filter = filter;
    function filter(pattern, options) {
      options = options || {};
      return function(p, i, list) {
        return minimatch(p, pattern, options);
      };
    }
    function ext(a, b) {
      a = a || {};
      b = b || {};
      var t = {};
      Object.keys(b).forEach(function(k) {
        t[k] = b[k];
      });
      Object.keys(a).forEach(function(k) {
        t[k] = a[k];
      });
      return t;
    }
    minimatch.defaults = function(def) {
      if (!def || !Object.keys(def).length)
        return minimatch;
      var orig = minimatch;
      var m = function minimatch2(p, pattern, options) {
        return orig.minimatch(p, pattern, ext(def, options));
      };
      m.Minimatch = function Minimatch2(pattern, options) {
        return new orig.Minimatch(pattern, ext(def, options));
      };
      return m;
    };
    Minimatch.defaults = function(def) {
      if (!def || !Object.keys(def).length)
        return Minimatch;
      return minimatch.defaults(def).Minimatch;
    };
    function minimatch(p, pattern, options) {
      if (typeof pattern !== "string") {
        throw new TypeError("glob pattern string required");
      }
      if (!options)
        options = {};
      if (!options.nocomment && pattern.charAt(0) === "#") {
        return false;
      }
      if (pattern.trim() === "")
        return p === "";
      return new Minimatch(pattern, options).match(p);
    }
    function Minimatch(pattern, options) {
      if (!(this instanceof Minimatch)) {
        return new Minimatch(pattern, options);
      }
      if (typeof pattern !== "string") {
        throw new TypeError("glob pattern string required");
      }
      if (!options)
        options = {};
      pattern = pattern.trim();
      if (path.sep !== "/") {
        pattern = pattern.split(path.sep).join("/");
      }
      this.options = options;
      this.set = [];
      this.pattern = pattern;
      this.regexp = null;
      this.negate = false;
      this.comment = false;
      this.empty = false;
      this.make();
    }
    Minimatch.prototype.debug = function() {
    };
    Minimatch.prototype.make = make;
    function make() {
      if (this._made)
        return;
      var pattern = this.pattern;
      var options = this.options;
      if (!options.nocomment && pattern.charAt(0) === "#") {
        this.comment = true;
        return;
      }
      if (!pattern) {
        this.empty = true;
        return;
      }
      this.parseNegate();
      var set = this.globSet = this.braceExpand();
      if (options.debug)
        this.debug = console.error;
      this.debug(this.pattern, set);
      set = this.globParts = set.map(function(s) {
        return s.split(slashSplit);
      });
      this.debug(this.pattern, set);
      set = set.map(function(s, si, set2) {
        return s.map(this.parse, this);
      }, this);
      this.debug(this.pattern, set);
      set = set.filter(function(s) {
        return s.indexOf(false) === -1;
      });
      this.debug(this.pattern, set);
      this.set = set;
    }
    Minimatch.prototype.parseNegate = parseNegate;
    function parseNegate() {
      var pattern = this.pattern;
      var negate = false;
      var options = this.options;
      var negateOffset = 0;
      if (options.nonegate)
        return;
      for (var i = 0, l = pattern.length; i < l && pattern.charAt(i) === "!"; i++) {
        negate = !negate;
        negateOffset++;
      }
      if (negateOffset)
        this.pattern = pattern.substr(negateOffset);
      this.negate = negate;
    }
    minimatch.braceExpand = function(pattern, options) {
      return braceExpand(pattern, options);
    };
    Minimatch.prototype.braceExpand = braceExpand;
    function braceExpand(pattern, options) {
      if (!options) {
        if (this instanceof Minimatch) {
          options = this.options;
        } else {
          options = {};
        }
      }
      pattern = typeof pattern === "undefined" ? this.pattern : pattern;
      if (typeof pattern === "undefined") {
        throw new TypeError("undefined pattern");
      }
      if (options.nobrace || !pattern.match(/\{.*\}/)) {
        return [pattern];
      }
      return expand(pattern);
    }
    Minimatch.prototype.parse = parse;
    var SUBPARSE = {};
    function parse(pattern, isSub) {
      if (pattern.length > 1024 * 64) {
        throw new TypeError("pattern is too long");
      }
      var options = this.options;
      if (!options.noglobstar && pattern === "**")
        return GLOBSTAR;
      if (pattern === "")
        return "";
      var re = "";
      var hasMagic = !!options.nocase;
      var escaping = false;
      var patternListStack = [];
      var negativeLists = [];
      var stateChar;
      var inClass = false;
      var reClassStart = -1;
      var classStart = -1;
      var patternStart = pattern.charAt(0) === "." ? "" : options.dot ? "(?!(?:^|\\/)\\.{1,2}(?:$|\\/))" : "(?!\\.)";
      var self = this;
      function clearStateChar() {
        if (stateChar) {
          switch (stateChar) {
            case "*":
              re += star;
              hasMagic = true;
              break;
            case "?":
              re += qmark;
              hasMagic = true;
              break;
            default:
              re += "\\" + stateChar;
              break;
          }
          self.debug("clearStateChar %j %j", stateChar, re);
          stateChar = false;
        }
      }
      for (var i = 0, len = pattern.length, c; i < len && (c = pattern.charAt(i)); i++) {
        this.debug("%s	%s %s %j", pattern, i, re, c);
        if (escaping && reSpecials[c]) {
          re += "\\" + c;
          escaping = false;
          continue;
        }
        switch (c) {
          case "/":
            return false;
          case "\\":
            clearStateChar();
            escaping = true;
            continue;
          case "?":
          case "*":
          case "+":
          case "@":
          case "!":
            this.debug("%s	%s %s %j <-- stateChar", pattern, i, re, c);
            if (inClass) {
              this.debug("  in class");
              if (c === "!" && i === classStart + 1)
                c = "^";
              re += c;
              continue;
            }
            self.debug("call clearStateChar %j", stateChar);
            clearStateChar();
            stateChar = c;
            if (options.noext)
              clearStateChar();
            continue;
          case "(":
            if (inClass) {
              re += "(";
              continue;
            }
            if (!stateChar) {
              re += "\\(";
              continue;
            }
            patternListStack.push({
              type: stateChar,
              start: i - 1,
              reStart: re.length,
              open: plTypes[stateChar].open,
              close: plTypes[stateChar].close
            });
            re += stateChar === "!" ? "(?:(?!(?:" : "(?:";
            this.debug("plType %j %j", stateChar, re);
            stateChar = false;
            continue;
          case ")":
            if (inClass || !patternListStack.length) {
              re += "\\)";
              continue;
            }
            clearStateChar();
            hasMagic = true;
            var pl = patternListStack.pop();
            re += pl.close;
            if (pl.type === "!") {
              negativeLists.push(pl);
            }
            pl.reEnd = re.length;
            continue;
          case "|":
            if (inClass || !patternListStack.length || escaping) {
              re += "\\|";
              escaping = false;
              continue;
            }
            clearStateChar();
            re += "|";
            continue;
          case "[":
            clearStateChar();
            if (inClass) {
              re += "\\" + c;
              continue;
            }
            inClass = true;
            classStart = i;
            reClassStart = re.length;
            re += c;
            continue;
          case "]":
            if (i === classStart + 1 || !inClass) {
              re += "\\" + c;
              escaping = false;
              continue;
            }
            if (inClass) {
              var cs = pattern.substring(classStart + 1, i);
              try {
                RegExp("[" + cs + "]");
              } catch (er) {
                var sp = this.parse(cs, SUBPARSE);
                re = re.substr(0, reClassStart) + "\\[" + sp[0] + "\\]";
                hasMagic = hasMagic || sp[1];
                inClass = false;
                continue;
              }
            }
            hasMagic = true;
            inClass = false;
            re += c;
            continue;
          default:
            clearStateChar();
            if (escaping) {
              escaping = false;
            } else if (reSpecials[c] && !(c === "^" && inClass)) {
              re += "\\";
            }
            re += c;
        }
      }
      if (inClass) {
        cs = pattern.substr(classStart + 1);
        sp = this.parse(cs, SUBPARSE);
        re = re.substr(0, reClassStart) + "\\[" + sp[0];
        hasMagic = hasMagic || sp[1];
      }
      for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
        var tail = re.slice(pl.reStart + pl.open.length);
        this.debug("setting tail", re, pl);
        tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function(_, $1, $2) {
          if (!$2) {
            $2 = "\\";
          }
          return $1 + $1 + $2 + "|";
        });
        this.debug("tail=%j\n   %s", tail, tail, pl, re);
        var t = pl.type === "*" ? star : pl.type === "?" ? qmark : "\\" + pl.type;
        hasMagic = true;
        re = re.slice(0, pl.reStart) + t + "\\(" + tail;
      }
      clearStateChar();
      if (escaping) {
        re += "\\\\";
      }
      var addPatternStart = false;
      switch (re.charAt(0)) {
        case ".":
        case "[":
        case "(":
          addPatternStart = true;
      }
      for (var n = negativeLists.length - 1; n > -1; n--) {
        var nl = negativeLists[n];
        var nlBefore = re.slice(0, nl.reStart);
        var nlFirst = re.slice(nl.reStart, nl.reEnd - 8);
        var nlLast = re.slice(nl.reEnd - 8, nl.reEnd);
        var nlAfter = re.slice(nl.reEnd);
        nlLast += nlAfter;
        var openParensBefore = nlBefore.split("(").length - 1;
        var cleanAfter = nlAfter;
        for (i = 0; i < openParensBefore; i++) {
          cleanAfter = cleanAfter.replace(/\)[+*?]?/, "");
        }
        nlAfter = cleanAfter;
        var dollar = "";
        if (nlAfter === "" && isSub !== SUBPARSE) {
          dollar = "$";
        }
        var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast;
        re = newRe;
      }
      if (re !== "" && hasMagic) {
        re = "(?=.)" + re;
      }
      if (addPatternStart) {
        re = patternStart + re;
      }
      if (isSub === SUBPARSE) {
        return [re, hasMagic];
      }
      if (!hasMagic) {
        return globUnescape(pattern);
      }
      var flags = options.nocase ? "i" : "";
      try {
        var regExp = new RegExp("^" + re + "$", flags);
      } catch (er) {
        return new RegExp("$.");
      }
      regExp._glob = pattern;
      regExp._src = re;
      return regExp;
    }
    minimatch.makeRe = function(pattern, options) {
      return new Minimatch(pattern, options || {}).makeRe();
    };
    Minimatch.prototype.makeRe = makeRe;
    function makeRe() {
      if (this.regexp || this.regexp === false)
        return this.regexp;
      var set = this.set;
      if (!set.length) {
        this.regexp = false;
        return this.regexp;
      }
      var options = this.options;
      var twoStar = options.noglobstar ? star : options.dot ? twoStarDot : twoStarNoDot;
      var flags = options.nocase ? "i" : "";
      var re = set.map(function(pattern) {
        return pattern.map(function(p) {
          return p === GLOBSTAR ? twoStar : typeof p === "string" ? regExpEscape(p) : p._src;
        }).join("\\/");
      }).join("|");
      re = "^(?:" + re + ")$";
      if (this.negate)
        re = "^(?!" + re + ").*$";
      try {
        this.regexp = new RegExp(re, flags);
      } catch (ex) {
        this.regexp = false;
      }
      return this.regexp;
    }
    minimatch.match = function(list, pattern, options) {
      options = options || {};
      var mm = new Minimatch(pattern, options);
      list = list.filter(function(f) {
        return mm.match(f);
      });
      if (mm.options.nonull && !list.length) {
        list.push(pattern);
      }
      return list;
    };
    Minimatch.prototype.match = match;
    function match(f, partial) {
      this.debug("match", f, this.pattern);
      if (this.comment)
        return false;
      if (this.empty)
        return f === "";
      if (f === "/" && partial)
        return true;
      var options = this.options;
      if (path.sep !== "/") {
        f = f.split(path.sep).join("/");
      }
      f = f.split(slashSplit);
      this.debug(this.pattern, "split", f);
      var set = this.set;
      this.debug(this.pattern, "set", set);
      var filename;
      var i;
      for (i = f.length - 1; i >= 0; i--) {
        filename = f[i];
        if (filename)
          break;
      }
      for (i = 0; i < set.length; i++) {
        var pattern = set[i];
        var file = f;
        if (options.matchBase && pattern.length === 1) {
          file = [filename];
        }
        var hit = this.matchOne(file, pattern, partial);
        if (hit) {
          if (options.flipNegate)
            return true;
          return !this.negate;
        }
      }
      if (options.flipNegate)
        return false;
      return this.negate;
    }
    Minimatch.prototype.matchOne = function(file, pattern, partial) {
      var options = this.options;
      this.debug("matchOne", { "this": this, file, pattern });
      this.debug("matchOne", file.length, pattern.length);
      for (var fi = 0, pi = 0, fl = file.length, pl = pattern.length; fi < fl && pi < pl; fi++, pi++) {
        this.debug("matchOne loop");
        var p = pattern[pi];
        var f = file[fi];
        this.debug(pattern, p, f);
        if (p === false)
          return false;
        if (p === GLOBSTAR) {
          this.debug("GLOBSTAR", [pattern, p, f]);
          var fr = fi;
          var pr = pi + 1;
          if (pr === pl) {
            this.debug("** at the end");
            for (; fi < fl; fi++) {
              if (file[fi] === "." || file[fi] === ".." || !options.dot && file[fi].charAt(0) === ".")
                return false;
            }
            return true;
          }
          while (fr < fl) {
            var swallowee = file[fr];
            this.debug("\nglobstar while", file, fr, pattern, pr, swallowee);
            if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
              this.debug("globstar found match!", fr, fl, swallowee);
              return true;
            } else {
              if (swallowee === "." || swallowee === ".." || !options.dot && swallowee.charAt(0) === ".") {
                this.debug("dot detected!", file, fr, pattern, pr);
                break;
              }
              this.debug("globstar swallow a segment, and continue");
              fr++;
            }
          }
          if (partial) {
            this.debug("\n>>> no match, partial?", file, fr, pattern, pr);
            if (fr === fl)
              return true;
          }
          return false;
        }
        var hit;
        if (typeof p === "string") {
          if (options.nocase) {
            hit = f.toLowerCase() === p.toLowerCase();
          } else {
            hit = f === p;
          }
          this.debug("string match", p, f, hit);
        } else {
          hit = f.match(p);
          this.debug("pattern match", p, f, hit);
        }
        if (!hit)
          return false;
      }
      if (fi === fl && pi === pl) {
        return true;
      } else if (fi === fl) {
        return partial;
      } else if (pi === pl) {
        var emptyFileEnd = fi === fl - 1 && file[fi] === "";
        return emptyFileEnd;
      }
      throw new Error("wtf?");
    };
    function globUnescape(s) {
      return s.replace(/\\(.)/g, "$1");
    }
    function regExpEscape(s) {
      return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/assets.js
var require_assets3 = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/assets.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FileAssetPackaging = exports2.AssetHashType = void 0;
    var AssetHashType;
    (function(AssetHashType2) {
      AssetHashType2["SOURCE"] = "source";
      AssetHashType2["BUNDLE"] = "bundle";
      AssetHashType2["OUTPUT"] = "output";
      AssetHashType2["CUSTOM"] = "custom";
    })(AssetHashType = exports2.AssetHashType || (exports2.AssetHashType = {}));
    var FileAssetPackaging;
    (function(FileAssetPackaging2) {
      FileAssetPackaging2["ZIP_DIRECTORY"] = "zip";
      FileAssetPackaging2["FILE"] = "file";
    })(FileAssetPackaging = exports2.FileAssetPackaging || (exports2.FileAssetPackaging = {}));
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/@balena/dockerignore/ignore.js
var require_ignore = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/@balena/dockerignore/ignore.js"(exports2, module2) {
    "use strict";
    var path = require("path");
    var factory = (options) => new IgnoreBase(options);
    factory.default = factory;
    module2.exports = factory;
    function make_array(subject) {
      return Array.isArray(subject) ? subject : [subject];
    }
    var REGEX_TRAILING_SLASH = /(?<=.)\/$/;
    var REGEX_TRAILING_BACKSLASH = /(?<=.)\\$/;
    var REGEX_TRAILING_PATH_SEP = path.sep === "\\" ? REGEX_TRAILING_BACKSLASH : REGEX_TRAILING_SLASH;
    var KEY_IGNORE = typeof Symbol !== "undefined" ? Symbol.for("dockerignore") : "dockerignore";
    function cleanPath(file) {
      return path.normalize(file).replace(REGEX_TRAILING_PATH_SEP, "");
    }
    function toSlash(file) {
      if (path.sep === "/") {
        return file;
      }
      return file.replace(/\\/g, "/");
    }
    function fromSlash(file) {
      if (path.sep === "/") {
        return file;
      }
      return file.replace(/\//g, path.sep);
    }
    var IgnoreBase = class {
      constructor({
        ignorecase = true
      } = {}) {
        this._rules = [];
        this._ignorecase = ignorecase;
        this[KEY_IGNORE] = true;
        this._initCache();
      }
      _initCache() {
        this._cache = {};
      }
      add(pattern) {
        this._added = false;
        if (typeof pattern === "string") {
          pattern = pattern.split(/\r?\n/g);
        }
        make_array(pattern).forEach(this._addPattern, this);
        if (this._added) {
          this._initCache();
        }
        return this;
      }
      addPattern(pattern) {
        return this.add(pattern);
      }
      _addPattern(pattern) {
        if (pattern && pattern[KEY_IGNORE]) {
          this._rules = this._rules.concat(pattern._rules);
          this._added = true;
          return;
        }
        if (this._checkPattern(pattern)) {
          const rule = this._createRule(pattern.trim());
          if (rule !== null) {
            this._added = true;
            this._rules.push(rule);
          }
        }
      }
      _checkPattern(pattern) {
        return pattern && typeof pattern === "string" && pattern.indexOf("#") !== 0 && pattern.trim() !== "";
      }
      filter(paths) {
        return make_array(paths).filter((path2) => this._filter(path2));
      }
      createFilter() {
        return (path2) => this._filter(path2);
      }
      ignores(path2) {
        return !this._filter(path2);
      }
      _createRule(pattern) {
        const origin = pattern;
        let negative = false;
        if (pattern[0] === "!") {
          negative = true;
          pattern = pattern.substring(1).trim();
        }
        if (pattern.length > 0) {
          pattern = cleanPath(pattern);
          pattern = toSlash(pattern);
          if (pattern.length > 1 && pattern[0] === "/") {
            pattern = pattern.slice(1);
          }
        }
        if (negative) {
          pattern = "!" + pattern;
        }
        pattern = pattern.trim();
        if (pattern === "") {
          return null;
        }
        pattern = cleanPath(pattern);
        if (pattern[0] === "!") {
          if (pattern.length === 1) {
            return null;
          }
          negative = true;
          pattern = pattern.substring(1);
        } else {
          negative = false;
        }
        return {
          origin,
          pattern,
          dirs: pattern.split(path.sep),
          negative
        };
      }
      _filter(path2) {
        if (!path2) {
          return false;
        }
        if (path2 in this._cache) {
          return this._cache[path2];
        }
        return this._cache[path2] = this._test(path2);
      }
      _test(file) {
        file = fromSlash(file);
        const parentPath = cleanPath(path.dirname(file));
        const parentPathDirs = parentPath.split(path.sep);
        let matched = false;
        this._rules.forEach((rule) => {
          let match = this._match(file, rule);
          if (!match && parentPath !== ".") {
            if (rule.dirs.includes("**")) {
              for (let i = rule.dirs.filter((x) => x !== "**").length; i <= parentPathDirs.length; i++) {
                match = match || this._match(parentPathDirs.slice(0, i).join(path.sep), rule);
              }
            } else if (rule.dirs.length <= parentPathDirs.length) {
              match = this._match(parentPathDirs.slice(0, rule.dirs.length).join(path.sep), rule);
            }
          }
          if (match) {
            matched = !rule.negative;
          }
        });
        return !matched;
      }
      _match(file, rule) {
        return this._compile(rule).regexp.test(file);
      }
      _compile(rule) {
        if (rule.regexp) {
          return rule;
        }
        let regStr = "^";
        let escapedSlash = path.sep === "\\" ? "\\\\" : path.sep;
        for (let i = 0; i < rule.pattern.length; i++) {
          const ch = rule.pattern[i];
          if (ch === "*") {
            if (rule.pattern[i + 1] === "*") {
              i++;
              if (rule.pattern[i + 1] === path.sep) {
                i++;
              }
              if (rule.pattern[i + 1] === void 0) {
                regStr += ".*";
              } else {
                regStr += `(.*${escapedSlash})?`;
              }
            } else {
              regStr += `[^${escapedSlash}]*`;
            }
          } else if (ch === "?") {
            regStr += `[^${escapedSlash}]`;
          } else if (ch === "." || ch === "$") {
            regStr += `\\${ch}`;
          } else if (ch === "\\") {
            if (path.sep === "\\") {
              regStr += escapedSlash;
              continue;
            }
            if (rule.pattern[i + 1] !== void 0) {
              regStr += "\\" + rule.pattern[i + 1];
              i++;
            } else {
              regStr += "\\";
            }
          } else {
            regStr += ch;
          }
        }
        regStr += "$";
        rule.regexp = new RegExp(regStr, this._ignorecase ? "i" : "");
        return rule;
      }
    };
  }
});

// asset-input/node_modules/@aws-cdk/core/node_modules/ignore/index.js
var require_ignore2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/node_modules/ignore/index.js"(exports2, module2) {
    function makeArray(subject) {
      return Array.isArray(subject) ? subject : [subject];
    }
    var EMPTY = "";
    var SPACE = " ";
    var ESCAPE = "\\";
    var REGEX_TEST_BLANK_LINE = /^\s+$/;
    var REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION = /^\\!/;
    var REGEX_REPLACE_LEADING_EXCAPED_HASH = /^\\#/;
    var REGEX_SPLITALL_CRLF = /\r?\n/g;
    var REGEX_TEST_INVALID_PATH = /^\.*\/|^\.+$/;
    var SLASH = "/";
    var KEY_IGNORE = typeof Symbol !== "undefined" ? Symbol.for("node-ignore") : "node-ignore";
    var define = (object, key, value) => Object.defineProperty(object, key, { value });
    var REGEX_REGEXP_RANGE = /([0-z])-([0-z])/g;
    var sanitizeRange = (range) => range.replace(REGEX_REGEXP_RANGE, (match, from, to) => from.charCodeAt(0) <= to.charCodeAt(0) ? match : EMPTY);
    var cleanRangeBackSlash = (slashes) => {
      const { length } = slashes;
      return slashes.slice(0, length - length % 2);
    };
    var REPLACERS = [
      [
        /\\?\s+$/,
        (match) => match.indexOf("\\") === 0 ? SPACE : EMPTY
      ],
      [
        /\\\s/g,
        () => SPACE
      ],
      [
        /[\\$.|*+(){^]/g,
        (match) => `\\${match}`
      ],
      [
        /(?!\\)\?/g,
        () => "[^/]"
      ],
      [
        /^\//,
        () => "^"
      ],
      [
        /\//g,
        () => "\\/"
      ],
      [
        /^\^*\\\*\\\*\\\//,
        () => "^(?:.*\\/)?"
      ],
      [
        /^(?=[^^])/,
        function startingReplacer() {
          return !/\/(?!$)/.test(this) ? "(?:^|\\/)" : "^";
        }
      ],
      [
        /\\\/\\\*\\\*(?=\\\/|$)/g,
        (_, index, str) => index + 6 < str.length ? "(?:\\/[^\\/]+)*" : "\\/.+"
      ],
      [
        /(^|[^\\]+)\\\*(?=.+)/g,
        (_, p1) => `${p1}[^\\/]*`
      ],
      [
        /\\\\\\(?=[$.|*+(){^])/g,
        () => ESCAPE
      ],
      [
        /\\\\/g,
        () => ESCAPE
      ],
      [
        /(\\)?\[([^\]/]*?)(\\*)($|\])/g,
        (match, leadEscape, range, endEscape, close) => leadEscape === ESCAPE ? `\\[${range}${cleanRangeBackSlash(endEscape)}${close}` : close === "]" ? endEscape.length % 2 === 0 ? `[${sanitizeRange(range)}${endEscape}]` : "[]" : "[]"
      ],
      [
        /(?:[^*])$/,
        (match) => /\/$/.test(match) ? `${match}$` : `${match}(?=$|\\/$)`
      ],
      [
        /(\^|\\\/)?\\\*$/,
        (_, p1) => {
          const prefix = p1 ? `${p1}[^/]+` : "[^/]*";
          return `${prefix}(?=$|\\/$)`;
        }
      ]
    ];
    var regexCache = Object.create(null);
    var makeRegex = (pattern, ignorecase) => {
      let source = regexCache[pattern];
      if (!source) {
        source = REPLACERS.reduce((prev, current) => prev.replace(current[0], current[1].bind(pattern)), pattern);
        regexCache[pattern] = source;
      }
      return ignorecase ? new RegExp(source, "i") : new RegExp(source);
    };
    var isString = (subject) => typeof subject === "string";
    var checkPattern = (pattern) => pattern && isString(pattern) && !REGEX_TEST_BLANK_LINE.test(pattern) && pattern.indexOf("#") !== 0;
    var splitPattern = (pattern) => pattern.split(REGEX_SPLITALL_CRLF);
    var IgnoreRule = class {
      constructor(origin, pattern, negative, regex) {
        this.origin = origin;
        this.pattern = pattern;
        this.negative = negative;
        this.regex = regex;
      }
    };
    var createRule = (pattern, ignorecase) => {
      const origin = pattern;
      let negative = false;
      if (pattern.indexOf("!") === 0) {
        negative = true;
        pattern = pattern.substr(1);
      }
      pattern = pattern.replace(REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION, "!").replace(REGEX_REPLACE_LEADING_EXCAPED_HASH, "#");
      const regex = makeRegex(pattern, ignorecase);
      return new IgnoreRule(origin, pattern, negative, regex);
    };
    var throwError = (message, Ctor) => {
      throw new Ctor(message);
    };
    var checkPath = (path, originalPath, doThrow) => {
      if (!isString(path)) {
        return doThrow(`path must be a string, but got \`${originalPath}\``, TypeError);
      }
      if (!path) {
        return doThrow(`path must not be empty`, TypeError);
      }
      if (checkPath.isNotRelative(path)) {
        const r = "`path.relative()`d";
        return doThrow(`path should be a ${r} string, but got "${originalPath}"`, RangeError);
      }
      return true;
    };
    var isNotRelative = (path) => REGEX_TEST_INVALID_PATH.test(path);
    checkPath.isNotRelative = isNotRelative;
    checkPath.convert = (p) => p;
    var Ignore = class {
      constructor({
        ignorecase = true
      } = {}) {
        define(this, KEY_IGNORE, true);
        this._rules = [];
        this._ignorecase = ignorecase;
        this._initCache();
      }
      _initCache() {
        this._ignoreCache = Object.create(null);
        this._testCache = Object.create(null);
      }
      _addPattern(pattern) {
        if (pattern && pattern[KEY_IGNORE]) {
          this._rules = this._rules.concat(pattern._rules);
          this._added = true;
          return;
        }
        if (checkPattern(pattern)) {
          const rule = createRule(pattern, this._ignorecase);
          this._added = true;
          this._rules.push(rule);
        }
      }
      add(pattern) {
        this._added = false;
        makeArray(isString(pattern) ? splitPattern(pattern) : pattern).forEach(this._addPattern, this);
        if (this._added) {
          this._initCache();
        }
        return this;
      }
      addPattern(pattern) {
        return this.add(pattern);
      }
      _testOne(path, checkUnignored) {
        let ignored = false;
        let unignored = false;
        this._rules.forEach((rule) => {
          const { negative } = rule;
          if (unignored === negative && ignored !== unignored || negative && !ignored && !unignored && !checkUnignored) {
            return;
          }
          const matched = rule.regex.test(path);
          if (matched) {
            ignored = !negative;
            unignored = negative;
          }
        });
        return {
          ignored,
          unignored
        };
      }
      _test(originalPath, cache, checkUnignored, slices) {
        const path = originalPath && checkPath.convert(originalPath);
        checkPath(path, originalPath, throwError);
        return this._t(path, cache, checkUnignored, slices);
      }
      _t(path, cache, checkUnignored, slices) {
        if (path in cache) {
          return cache[path];
        }
        if (!slices) {
          slices = path.split(SLASH);
        }
        slices.pop();
        if (!slices.length) {
          return cache[path] = this._testOne(path, checkUnignored);
        }
        const parent = this._t(slices.join(SLASH) + SLASH, cache, checkUnignored, slices);
        return cache[path] = parent.ignored ? parent : this._testOne(path, checkUnignored);
      }
      ignores(path) {
        return this._test(path, this._ignoreCache, false).ignored;
      }
      createFilter() {
        return (path) => !this.ignores(path);
      }
      filter(paths) {
        return makeArray(paths).filter(this.createFilter());
      }
      test(path) {
        return this._test(path, this._testCache, true);
      }
    };
    var factory = (options) => new Ignore(options);
    var returnFalse = () => false;
    var isPathValid = (path) => checkPath(path && checkPath.convert(path), path, returnFalse);
    factory.isPathValid = isPathValid;
    factory.default = factory;
    module2.exports = factory;
    if (typeof process !== "undefined" && (process.env && process.env.IGNORE_TEST_WIN32 || process.platform === "win32")) {
      const makePosix = (str) => /^\\\\\?\\/.test(str) || /["<>|\u0000-\u001F]+/u.test(str) ? str : str.replace(/\\/g, "/");
      checkPath.convert = makePosix;
      const REGIX_IS_WINDOWS_PATH_ABSOLUTE = /^[a-z]:\//i;
      checkPath.isNotRelative = (path) => REGIX_IS_WINDOWS_PATH_ABSOLUTE.test(path) || isNotRelative(path);
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/fs/options.js
var require_options = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/fs/options.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IgnoreMode = exports2.SymlinkFollowMode = void 0;
    var SymlinkFollowMode;
    (function(SymlinkFollowMode2) {
      SymlinkFollowMode2["NEVER"] = "never";
      SymlinkFollowMode2["ALWAYS"] = "always";
      SymlinkFollowMode2["EXTERNAL"] = "external";
      SymlinkFollowMode2["BLOCK_EXTERNAL"] = "internal-only";
    })(SymlinkFollowMode = exports2.SymlinkFollowMode || (exports2.SymlinkFollowMode = {}));
    var IgnoreMode;
    (function(IgnoreMode2) {
      IgnoreMode2["GLOB"] = "glob";
      IgnoreMode2["GIT"] = "git";
      IgnoreMode2["DOCKER"] = "docker";
    })(IgnoreMode = exports2.IgnoreMode || (exports2.IgnoreMode = {}));
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/fs/ignore.js
var require_ignore3 = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/fs/ignore.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    var _d;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DockerIgnoreStrategy = exports2.GitIgnoreStrategy = exports2.GlobIgnoreStrategy = exports2.IgnoreStrategy = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var path = require("path");
    var dockerignore_1 = require_ignore();
    var ignore_1 = require_ignore2();
    var minimatch = require_minimatch();
    var options_1 = require_options();
    var IgnoreStrategy = class {
      static glob(absoluteRootPath, patterns) {
        return new GlobIgnoreStrategy(absoluteRootPath, patterns);
      }
      static git(absoluteRootPath, patterns) {
        return new GitIgnoreStrategy(absoluteRootPath, patterns);
      }
      static docker(absoluteRootPath, patterns) {
        return new DockerIgnoreStrategy(absoluteRootPath, patterns);
      }
      static fromCopyOptions(options, absoluteRootPath) {
        const ignoreMode = options.ignoreMode || options_1.IgnoreMode.GLOB;
        const exclude = options.exclude || [];
        switch (ignoreMode) {
          case options_1.IgnoreMode.GLOB:
            return this.glob(absoluteRootPath, exclude);
          case options_1.IgnoreMode.GIT:
            return this.git(absoluteRootPath, exclude);
          case options_1.IgnoreMode.DOCKER:
            return this.docker(absoluteRootPath, exclude);
        }
      }
    };
    exports2.IgnoreStrategy = IgnoreStrategy;
    _a = JSII_RTTI_SYMBOL_1;
    IgnoreStrategy[_a] = { fqn: "@aws-cdk/core.IgnoreStrategy", version: "1.132.0" };
    var GlobIgnoreStrategy = class extends IgnoreStrategy {
      constructor(absoluteRootPath, patterns) {
        super();
        if (!path.isAbsolute(absoluteRootPath)) {
          throw new Error("GlobIgnoreStrategy expects an absolute file path");
        }
        this.absoluteRootPath = absoluteRootPath;
        this.patterns = patterns;
      }
      add(pattern) {
        this.patterns.push(pattern);
      }
      ignores(absoluteFilePath) {
        if (!path.isAbsolute(absoluteFilePath)) {
          throw new Error("GlobIgnoreStrategy.ignores() expects an absolute path");
        }
        let relativePath = path.relative(this.absoluteRootPath, absoluteFilePath);
        let excludeOutput = false;
        for (const pattern of this.patterns) {
          const negate = pattern.startsWith("!");
          const match = minimatch(relativePath, pattern, { matchBase: true, flipNegate: true });
          if (!negate && match) {
            excludeOutput = true;
          }
          if (negate && match) {
            excludeOutput = false;
          }
        }
        return excludeOutput;
      }
    };
    exports2.GlobIgnoreStrategy = GlobIgnoreStrategy;
    _b = JSII_RTTI_SYMBOL_1;
    GlobIgnoreStrategy[_b] = { fqn: "@aws-cdk/core.GlobIgnoreStrategy", version: "1.132.0" };
    var GitIgnoreStrategy = class extends IgnoreStrategy {
      constructor(absoluteRootPath, patterns) {
        super();
        if (!path.isAbsolute(absoluteRootPath)) {
          throw new Error("GitIgnoreStrategy expects an absolute file path");
        }
        this.absoluteRootPath = absoluteRootPath;
        this.ignore = ignore_1.default().add(patterns);
      }
      add(pattern) {
        this.ignore.add(pattern);
      }
      ignores(absoluteFilePath) {
        if (!path.isAbsolute(absoluteFilePath)) {
          throw new Error("GitIgnoreStrategy.ignores() expects an absolute path");
        }
        let relativePath = path.relative(this.absoluteRootPath, absoluteFilePath);
        return this.ignore.ignores(relativePath);
      }
    };
    exports2.GitIgnoreStrategy = GitIgnoreStrategy;
    _c = JSII_RTTI_SYMBOL_1;
    GitIgnoreStrategy[_c] = { fqn: "@aws-cdk/core.GitIgnoreStrategy", version: "1.132.0" };
    var DockerIgnoreStrategy = class extends IgnoreStrategy {
      constructor(absoluteRootPath, patterns) {
        super();
        if (!path.isAbsolute(absoluteRootPath)) {
          throw new Error("DockerIgnoreStrategy expects an absolute file path");
        }
        this.absoluteRootPath = absoluteRootPath;
        this.ignore = dockerignore_1.default().add(patterns);
      }
      add(pattern) {
        this.ignore.add(pattern);
      }
      ignores(absoluteFilePath) {
        if (!path.isAbsolute(absoluteFilePath)) {
          throw new Error("DockerIgnoreStrategy.ignores() expects an absolute path");
        }
        let relativePath = path.relative(this.absoluteRootPath, absoluteFilePath);
        return this.ignore.ignores(relativePath);
      }
    };
    exports2.DockerIgnoreStrategy = DockerIgnoreStrategy;
    _d = JSII_RTTI_SYMBOL_1;
    DockerIgnoreStrategy[_d] = { fqn: "@aws-cdk/core.DockerIgnoreStrategy", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/fs/utils.js
var require_utils3 = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/fs/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.shouldFollow = void 0;
    var fs = require("fs");
    var path = require("path");
    var options_1 = require_options();
    function shouldFollow(mode, sourceRoot, realPath) {
      switch (mode) {
        case options_1.SymlinkFollowMode.ALWAYS:
          return fs.existsSync(realPath);
        case options_1.SymlinkFollowMode.EXTERNAL:
          return !_isInternal() && fs.existsSync(realPath);
        case options_1.SymlinkFollowMode.BLOCK_EXTERNAL:
          return _isInternal() && fs.existsSync(realPath);
        case options_1.SymlinkFollowMode.NEVER:
          return false;
        default:
          throw new Error(`Unsupported FollowMode: ${mode}`);
      }
      function _isInternal() {
        return path.resolve(realPath).startsWith(path.resolve(sourceRoot));
      }
    }
    exports2.shouldFollow = shouldFollow;
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/fs/copy.js
var require_copy3 = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/fs/copy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.copyDirectory = void 0;
    var fs = require("fs");
    var path = require("path");
    var ignore_1 = require_ignore3();
    var options_1 = require_options();
    var utils_1 = require_utils3();
    function copyDirectory(srcDir, destDir, options = {}, rootDir) {
      var _a;
      const follow = (_a = options.follow) !== null && _a !== void 0 ? _a : options_1.SymlinkFollowMode.EXTERNAL;
      rootDir = rootDir || srcDir;
      const ignoreStrategy = ignore_1.IgnoreStrategy.fromCopyOptions(options, rootDir);
      if (!fs.statSync(srcDir).isDirectory()) {
        throw new Error(`${srcDir} is not a directory`);
      }
      const files = fs.readdirSync(srcDir);
      for (const file of files) {
        const sourceFilePath = path.join(srcDir, file);
        if (ignoreStrategy.ignores(sourceFilePath)) {
          continue;
        }
        const destFilePath = path.join(destDir, file);
        let stat = follow === options_1.SymlinkFollowMode.ALWAYS ? fs.statSync(sourceFilePath) : fs.lstatSync(sourceFilePath);
        if (stat && stat.isSymbolicLink()) {
          const target = fs.readlinkSync(sourceFilePath);
          const targetPath = path.normalize(path.resolve(srcDir, target));
          if (utils_1.shouldFollow(follow, rootDir, targetPath)) {
            stat = fs.statSync(sourceFilePath);
          } else {
            fs.symlinkSync(target, destFilePath);
            stat = void 0;
          }
        }
        if (stat && stat.isDirectory()) {
          fs.mkdirSync(destFilePath);
          copyDirectory(sourceFilePath, destFilePath, options, rootDir);
          stat = void 0;
        }
        if (stat && stat.isFile()) {
          fs.copyFileSync(sourceFilePath, destFilePath);
          stat = void 0;
        }
      }
    }
    exports2.copyDirectory = copyDirectory;
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/fs/fingerprint.js
var require_fingerprint = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/fs/fingerprint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.contentFingerprint = exports2.fingerprint = void 0;
    var crypto = require("crypto");
    var fs = require("fs");
    var path = require("path");
    var ignore_1 = require_ignore3();
    var options_1 = require_options();
    var utils_1 = require_utils3();
    var BUFFER_SIZE = 8 * 1024;
    var CTRL_SOH = "";
    var CTRL_SOT = "";
    var CTRL_ETX = "";
    var CR = "\r";
    var LF = "\n";
    var CRLF = `${CR}${LF}`;
    function fingerprint(fileOrDirectory, options = {}) {
      const hash = crypto.createHash("sha256");
      _hashField(hash, "options.extra", options.extraHash || "");
      const follow = options.follow || options_1.SymlinkFollowMode.EXTERNAL;
      _hashField(hash, "options.follow", follow);
      fileOrDirectory = fs.realpathSync(fileOrDirectory);
      const isDir = fs.statSync(fileOrDirectory).isDirectory();
      const rootDirectory = isDir ? fileOrDirectory : path.dirname(fileOrDirectory);
      const ignoreMode = options.ignoreMode || options_1.IgnoreMode.GLOB;
      if (ignoreMode != options_1.IgnoreMode.GLOB) {
        _hashField(hash, "options.ignoreMode", ignoreMode);
      }
      const ignoreStrategy = ignore_1.IgnoreStrategy.fromCopyOptions(options, fileOrDirectory);
      _processFileOrDirectory(fileOrDirectory, isDir);
      return hash.digest("hex");
      function _processFileOrDirectory(symbolicPath, isRootDir = false, realPath = symbolicPath) {
        if (!isRootDir && ignoreStrategy.ignores(symbolicPath)) {
          return;
        }
        const stat = fs.lstatSync(realPath);
        const hashComponent = path.relative(fileOrDirectory, symbolicPath).replace(/\\/g, "/");
        if (stat.isSymbolicLink()) {
          const linkTarget = fs.readlinkSync(realPath);
          const resolvedLinkTarget = path.resolve(path.dirname(realPath), linkTarget);
          if (utils_1.shouldFollow(follow, rootDirectory, resolvedLinkTarget)) {
            _processFileOrDirectory(symbolicPath, false, resolvedLinkTarget);
          } else {
            _hashField(hash, `link:${hashComponent}`, linkTarget);
          }
        } else if (stat.isFile()) {
          _hashField(hash, `file:${hashComponent}`, contentFingerprint(realPath));
        } else if (stat.isDirectory()) {
          for (const item of fs.readdirSync(realPath).sort()) {
            _processFileOrDirectory(path.join(symbolicPath, item), false, path.join(realPath, item));
          }
        } else {
          throw new Error(`Unable to hash ${symbolicPath}: it is neither a file nor a directory`);
        }
      }
    }
    exports2.fingerprint = fingerprint;
    function contentFingerprint(file) {
      const hash = crypto.createHash("sha256");
      const buffer = Buffer.alloc(BUFFER_SIZE);
      const fd = fs.openSync(file, fs.constants.O_DSYNC | fs.constants.O_RDONLY | fs.constants.O_SYNC);
      let size = 0;
      let isBinary = false;
      let lastStr = "";
      let read = 0;
      try {
        while ((read = fs.readSync(fd, buffer, 0, BUFFER_SIZE, null)) !== 0) {
          const slicedBuffer = buffer.slice(0, read);
          if (size === 0) {
            isBinary = slicedBuffer.indexOf(0) !== -1;
          }
          let dataBuffer = slicedBuffer;
          if (!isBinary) {
            const str = buffer.slice(0, read).toString();
            if (new RegExp(`${CR}$`).test(str)) {
              lastStr += str;
              continue;
            }
            const data = lastStr + str;
            const normalizedData = data.replace(new RegExp(CRLF, "g"), LF);
            dataBuffer = Buffer.from(normalizedData);
            lastStr = "";
          }
          size += dataBuffer.length;
          hash.update(dataBuffer);
        }
        if (lastStr) {
          hash.update(Buffer.from(lastStr));
        }
      } finally {
        fs.closeSync(fd);
      }
      return `${size}:${hash.digest("hex")}`;
    }
    exports2.contentFingerprint = contentFingerprint;
    function _hashField(hash, header, value) {
      hash.update(CTRL_SOH).update(header).update(CTRL_SOT).update(value).update(CTRL_ETX);
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/fs/index.js
var require_fs2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/fs/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FileSystem = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var fs = require("fs");
    var os = require("os");
    var path = require("path");
    var copy_1 = require_copy3();
    var fingerprint_1 = require_fingerprint();
    __exportStar(require_ignore3(), exports2);
    __exportStar(require_options(), exports2);
    var FileSystem = class {
      static copyDirectory(srcDir, destDir, options = {}, rootDir) {
        return copy_1.copyDirectory(srcDir, destDir, options, rootDir);
      }
      static fingerprint(fileOrDirectory, options = {}) {
        return fingerprint_1.fingerprint(fileOrDirectory, options);
      }
      static isEmpty(dir) {
        return fs.readdirSync(dir).length === 0;
      }
      static get tmpdir() {
        if (FileSystem._tmpdir) {
          return FileSystem._tmpdir;
        }
        FileSystem._tmpdir = fs.realpathSync(os.tmpdir());
        return FileSystem._tmpdir;
      }
      static mkdtemp(prefix) {
        return fs.mkdtempSync(path.join(FileSystem.tmpdir, prefix));
      }
    };
    exports2.FileSystem = FileSystem;
    _a = JSII_RTTI_SYMBOL_1;
    FileSystem[_a] = { fqn: "@aws-cdk/core.FileSystem", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/bundling.js
var require_bundling = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/bundling.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DockerVolumeConsistency = exports2.DockerImage = exports2.BundlingDockerImage = exports2.BundlingOutput = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var child_process_1 = require("child_process");
    var crypto = require("crypto");
    var path_1 = require("path");
    var fs_1 = require_fs2();
    var BundlingOutput;
    (function(BundlingOutput2) {
      BundlingOutput2["ARCHIVED"] = "archived";
      BundlingOutput2["NOT_ARCHIVED"] = "not-archived";
      BundlingOutput2["AUTO_DISCOVER"] = "auto-discover";
    })(BundlingOutput = exports2.BundlingOutput || (exports2.BundlingOutput = {}));
    var BundlingDockerImage = class {
      constructor(image, _imageHash) {
        this.image = image;
        this._imageHash = _imageHash;
      }
      static fromRegistry(image) {
        return new DockerImage(image);
      }
      static fromAsset(path, options = {}) {
        return DockerImage.fromBuild(path, options);
      }
      toJSON() {
        var _c;
        return (_c = this._imageHash) !== null && _c !== void 0 ? _c : this.image;
      }
      run(options = {}) {
        var _c, _d;
        const volumes = options.volumes || [];
        const environment = options.environment || {};
        const entrypoint = ((_c = options.entrypoint) === null || _c === void 0 ? void 0 : _c[0]) || null;
        const command = [
          ...((_d = options.entrypoint) === null || _d === void 0 ? void 0 : _d[1]) ? [...options.entrypoint.slice(1)] : [],
          ...options.command ? [...options.command] : []
        ];
        const dockerArgs = [
          "run",
          "--rm",
          ...options.securityOpt ? ["--security-opt", options.securityOpt] : [],
          ...options.user ? ["-u", options.user] : [],
          ...flatten(volumes.map((v) => {
            var _c2;
            return ["-v", `${v.hostPath}:${v.containerPath}:${isSeLinux() ? "z," : ""}${(_c2 = v.consistency) !== null && _c2 !== void 0 ? _c2 : DockerVolumeConsistency.DELEGATED}`];
          })),
          ...flatten(Object.entries(environment).map(([k, v]) => ["--env", `${k}=${v}`])),
          ...options.workingDirectory ? ["-w", options.workingDirectory] : [],
          ...entrypoint ? ["--entrypoint", entrypoint] : [],
          this.image,
          ...command
        ];
        dockerExec(dockerArgs);
      }
      cp(imagePath, outputPath) {
        const { stdout } = dockerExec(["create", this.image], {});
        const match = stdout.toString().match(/([0-9a-f]{16,})/);
        if (!match) {
          throw new Error("Failed to extract container ID from Docker create output");
        }
        const containerId = match[1];
        const containerPath = `${containerId}:${imagePath}`;
        const destPath = outputPath !== null && outputPath !== void 0 ? outputPath : fs_1.FileSystem.mkdtemp("cdk-docker-cp-");
        try {
          dockerExec(["cp", containerPath, destPath]);
          return destPath;
        } catch (err) {
          throw new Error(`Failed to copy files from ${containerPath} to ${destPath}: ${err}`);
        } finally {
          dockerExec(["rm", "-v", containerId]);
        }
      }
    };
    exports2.BundlingDockerImage = BundlingDockerImage;
    _a = JSII_RTTI_SYMBOL_1;
    BundlingDockerImage[_a] = { fqn: "@aws-cdk/core.BundlingDockerImage", version: "1.132.0" };
    var DockerImage = class extends BundlingDockerImage {
      constructor(image, _imageHash) {
        super(image, _imageHash);
        this.image = image;
      }
      static fromBuild(path, options = {}) {
        const buildArgs = options.buildArgs || {};
        if (options.file && path_1.isAbsolute(options.file)) {
          throw new Error(`"file" must be relative to the docker build directory. Got ${options.file}`);
        }
        const input = JSON.stringify(__spreadValues({ path }, options));
        const tagHash = crypto.createHash("sha256").update(input).digest("hex");
        const tag = `cdk-${tagHash}`;
        const dockerArgs = [
          "build",
          "-t",
          tag,
          ...options.file ? ["-f", path_1.join(path, options.file)] : [],
          ...options.platform ? ["--platform", options.platform] : [],
          ...flatten(Object.entries(buildArgs).map(([k, v]) => ["--build-arg", `${k}=${v}`])),
          path
        ];
        dockerExec(dockerArgs);
        const hash = fs_1.FileSystem.fingerprint(path, { extraHash: JSON.stringify(options) });
        return new DockerImage(tag, hash);
      }
      static fromRegistry(image) {
        return new DockerImage(image);
      }
      toJSON() {
        return super.toJSON();
      }
      run(options = {}) {
        return super.run(options);
      }
      cp(imagePath, outputPath) {
        return super.cp(imagePath, outputPath);
      }
    };
    exports2.DockerImage = DockerImage;
    _b = JSII_RTTI_SYMBOL_1;
    DockerImage[_b] = { fqn: "@aws-cdk/core.DockerImage", version: "1.132.0" };
    var DockerVolumeConsistency;
    (function(DockerVolumeConsistency2) {
      DockerVolumeConsistency2["CONSISTENT"] = "consistent";
      DockerVolumeConsistency2["DELEGATED"] = "delegated";
      DockerVolumeConsistency2["CACHED"] = "cached";
    })(DockerVolumeConsistency = exports2.DockerVolumeConsistency || (exports2.DockerVolumeConsistency = {}));
    function flatten(x) {
      return Array.prototype.concat([], ...x);
    }
    function dockerExec(args, options) {
      var _c, _d, _e;
      const prog = (_c = process.env.CDK_DOCKER) !== null && _c !== void 0 ? _c : "docker";
      const proc = child_process_1.spawnSync(prog, args, options !== null && options !== void 0 ? options : {
        stdio: [
          "ignore",
          process.stderr,
          "inherit"
        ]
      });
      if (proc.error) {
        throw proc.error;
      }
      if (proc.status !== 0) {
        if (proc.stdout || proc.stderr) {
          throw new Error(`[Status ${proc.status}] stdout: ${(_d = proc.stdout) === null || _d === void 0 ? void 0 : _d.toString().trim()}


stderr: ${(_e = proc.stderr) === null || _e === void 0 ? void 0 : _e.toString().trim()}`);
        }
        throw new Error(`${prog} exited with status ${proc.status}`);
      }
      return proc;
    }
    function isSeLinux() {
      if (process.platform != "linux") {
        return false;
      }
      const prog = "selinuxenabled";
      const proc = child_process_1.spawnSync(prog, [], {
        stdio: [
          "pipe",
          process.stderr,
          "inherit"
        ]
      });
      if (proc.error) {
        return false;
      }
      if (proc.status == 0) {
        return true;
      } else {
        return false;
      }
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/private/cache.js
var require_cache = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/private/cache.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Cache = void 0;
    var Cache = class {
      constructor() {
        this.cache = new Map();
      }
      clear() {
        this.cache.clear();
      }
      obtain(cacheKey, calcFn) {
        let value = this.cache.get(cacheKey);
        if (value) {
          return value;
        }
        value = calcFn();
        this.cache.set(cacheKey, value);
        return value;
      }
    };
    exports2.Cache = Cache;
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/asset-staging.js
var require_asset_staging = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/asset-staging.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AssetStaging = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var crypto = require("crypto");
    var os = require("os");
    var path = require("path");
    var cxapi = require_lib5();
    var fs = require_lib6();
    var minimatch = require_minimatch();
    var assets_1 = require_assets3();
    var bundling_1 = require_bundling();
    var fs_1 = require_fs2();
    var names_1 = require_names();
    var cache_1 = require_cache();
    var stack_1 = require_stack();
    var stage_1 = require_stage();
    var construct_compat_1 = require_construct_compat();
    var ARCHIVE_EXTENSIONS = [".zip", ".jar"];
    var AssetStaging = class extends construct_compat_1.Construct {
      constructor(scope, id, props) {
        var _b, _c;
        super(scope, id);
        this.sourcePath = path.resolve(props.sourcePath);
        this.fingerprintOptions = props;
        if (!fs.existsSync(this.sourcePath)) {
          throw new Error(`Cannot find asset at ${this.sourcePath}`);
        }
        this.sourceStats = fs.statSync(this.sourcePath);
        const outdir = (_b = stage_1.Stage.of(this)) === null || _b === void 0 ? void 0 : _b.assetOutdir;
        if (!outdir) {
          throw new Error('unable to determine cloud assembly asset output directory. Assets must be defined indirectly within a "Stage" or an "App" scope');
        }
        this.assetOutdir = outdir;
        this.customSourceFingerprint = props.assetHash;
        this.hashType = determineHashType(props.assetHashType, this.customSourceFingerprint);
        let stageThisAsset;
        let skip = false;
        if (props.bundling) {
          const bundlingStacks = (_c = this.node.tryGetContext(cxapi.BUNDLING_STACKS)) !== null && _c !== void 0 ? _c : ["*"];
          skip = !bundlingStacks.find((pattern) => minimatch(stack_1.Stack.of(this).stackName, pattern));
          const bundling = props.bundling;
          stageThisAsset = () => this.stageByBundling(bundling, skip);
        } else {
          stageThisAsset = () => this.stageByCopying();
        }
        this.cacheKey = calculateCacheKey({
          outdir: this.assetOutdir,
          sourcePath: path.resolve(props.sourcePath),
          bundling: props.bundling,
          assetHashType: this.hashType,
          customFingerprint: this.customSourceFingerprint,
          extraHash: props.extraHash,
          exclude: props.exclude,
          ignoreMode: props.ignoreMode,
          skip
        });
        const staged = AssetStaging.assetCache.obtain(this.cacheKey, stageThisAsset);
        this.stagedPath = staged.stagedPath;
        this.absoluteStagedPath = staged.stagedPath;
        this.assetHash = staged.assetHash;
        this.packaging = staged.packaging;
        this.isArchive = staged.isArchive;
      }
      static clearAssetHashCache() {
        this.assetCache.clear();
      }
      get sourceHash() {
        return this.assetHash;
      }
      relativeStagedPath(stack) {
        var _b;
        const asmManifestDir = (_b = stage_1.Stage.of(stack)) === null || _b === void 0 ? void 0 : _b.outdir;
        if (!asmManifestDir) {
          return this.stagedPath;
        }
        const isOutsideAssetDir = path.relative(this.assetOutdir, this.stagedPath).startsWith("..");
        if (isOutsideAssetDir || this.stagingDisabled) {
          return this.stagedPath;
        }
        return path.relative(asmManifestDir, this.stagedPath);
      }
      stageByCopying() {
        const assetHash = this.calculateHash(this.hashType);
        const stagedPath = this.stagingDisabled ? this.sourcePath : path.resolve(this.assetOutdir, renderAssetFilename(assetHash, path.extname(this.sourcePath)));
        if (!this.sourceStats.isDirectory() && !this.sourceStats.isFile()) {
          throw new Error(`Asset ${this.sourcePath} is expected to be either a directory or a regular file`);
        }
        this.stageAsset(this.sourcePath, stagedPath, "copy");
        return {
          assetHash,
          stagedPath,
          packaging: this.sourceStats.isDirectory() ? assets_1.FileAssetPackaging.ZIP_DIRECTORY : assets_1.FileAssetPackaging.FILE,
          isArchive: this.sourceStats.isDirectory() || ARCHIVE_EXTENSIONS.includes(path.extname(this.sourcePath).toLowerCase())
        };
      }
      stageByBundling(bundling, skip) {
        var _b;
        if (!this.sourceStats.isDirectory()) {
          throw new Error(`Asset ${this.sourcePath} is expected to be a directory when bundling`);
        }
        if (skip) {
          let hashType = this.hashType;
          if (hashType === assets_1.AssetHashType.OUTPUT || hashType === assets_1.AssetHashType.BUNDLE) {
            this.customSourceFingerprint = names_1.Names.uniqueId(this);
            hashType = assets_1.AssetHashType.CUSTOM;
          }
          return {
            assetHash: this.calculateHash(hashType, bundling),
            stagedPath: this.sourcePath,
            packaging: assets_1.FileAssetPackaging.ZIP_DIRECTORY,
            isArchive: true
          };
        }
        let assetHash = this.hashType === assets_1.AssetHashType.SOURCE || this.hashType === assets_1.AssetHashType.CUSTOM ? this.calculateHash(this.hashType, bundling) : void 0;
        const bundleDir = this.determineBundleDir(this.assetOutdir, assetHash);
        this.bundle(bundling, bundleDir);
        const bundlingOutputType = (_b = bundling.outputType) !== null && _b !== void 0 ? _b : bundling_1.BundlingOutput.AUTO_DISCOVER;
        const bundledAsset = determineBundledAsset(bundleDir, bundlingOutputType);
        assetHash = assetHash !== null && assetHash !== void 0 ? assetHash : this.calculateHash(this.hashType, bundling, bundledAsset.path);
        const stagedPath = path.resolve(this.assetOutdir, renderAssetFilename(assetHash, bundledAsset.extension));
        this.stageAsset(bundledAsset.path, stagedPath, "move");
        if (bundledAsset.packaging === assets_1.FileAssetPackaging.FILE) {
          fs.closeSync(fs.openSync(bundledAsset.path, "w"));
        }
        return {
          assetHash,
          stagedPath,
          packaging: bundledAsset.packaging,
          isArchive: true
        };
      }
      get stagingDisabled() {
        return !!this.node.tryGetContext(cxapi.DISABLE_ASSET_STAGING_CONTEXT);
      }
      stageAsset(sourcePath, targetPath, style) {
        const isAlreadyStaged = fs.existsSync(targetPath);
        if (isAlreadyStaged) {
          if (style === "move" && sourcePath !== targetPath) {
            fs.removeSync(sourcePath);
          }
          return;
        }
        if (style == "move") {
          fs.renameSync(sourcePath, targetPath);
          return;
        }
        if (this.sourceStats.isFile()) {
          fs.copyFileSync(sourcePath, targetPath);
        } else if (this.sourceStats.isDirectory()) {
          fs.mkdirSync(targetPath);
          fs_1.FileSystem.copyDirectory(sourcePath, targetPath, this.fingerprintOptions);
        } else {
          throw new Error(`Unknown file type: ${sourcePath}`);
        }
      }
      determineBundleDir(outdir, sourceHash) {
        if (sourceHash) {
          return path.resolve(outdir, renderAssetFilename(sourceHash));
        }
        return path.resolve(outdir, `bundling-temp-${this.cacheKey}`);
      }
      bundle(options, bundleDir) {
        var _b, _c, _d, _e;
        if (fs.existsSync(bundleDir)) {
          return;
        }
        fs.ensureDirSync(bundleDir);
        fs.chmodSync(bundleDir, 511);
        const volumes = [
          {
            hostPath: this.sourcePath,
            containerPath: AssetStaging.BUNDLING_INPUT_DIR
          },
          {
            hostPath: bundleDir,
            containerPath: AssetStaging.BUNDLING_OUTPUT_DIR
          },
          ...(_b = options.volumes) !== null && _b !== void 0 ? _b : []
        ];
        let localBundling;
        try {
          process.stderr.write(`Bundling asset ${this.node.path}...
`);
          localBundling = (_c = options.local) === null || _c === void 0 ? void 0 : _c.tryBundle(bundleDir, options);
          if (!localBundling) {
            let user;
            if (options.user) {
              user = options.user;
            } else {
              const userInfo = os.userInfo();
              user = userInfo.uid !== -1 ? `${userInfo.uid}:${userInfo.gid}` : "1000:1000";
            }
            options.image.run({
              command: options.command,
              user,
              volumes,
              environment: options.environment,
              workingDirectory: (_d = options.workingDirectory) !== null && _d !== void 0 ? _d : AssetStaging.BUNDLING_INPUT_DIR,
              securityOpt: (_e = options.securityOpt) !== null && _e !== void 0 ? _e : ""
            });
          }
        } catch (err) {
          const bundleErrorDir = bundleDir + "-error";
          if (fs.existsSync(bundleErrorDir)) {
            fs.removeSync(bundleErrorDir);
          }
          fs.renameSync(bundleDir, bundleErrorDir);
          throw new Error(`Failed to bundle asset ${this.node.path}, bundle output is located at ${bundleErrorDir}: ${err}`);
        }
        if (fs_1.FileSystem.isEmpty(bundleDir)) {
          const outputDir = localBundling ? bundleDir : AssetStaging.BUNDLING_OUTPUT_DIR;
          throw new Error(`Bundling did not produce any output. Check that content is written to ${outputDir}.`);
        }
      }
      calculateHash(hashType, bundling, outputDir) {
        var _b;
        if (hashType == assets_1.AssetHashType.CUSTOM || hashType == assets_1.AssetHashType.SOURCE && bundling) {
          const hash = crypto.createHash("sha256");
          hash.update((_b = this.customSourceFingerprint) !== null && _b !== void 0 ? _b : fs_1.FileSystem.fingerprint(this.sourcePath, this.fingerprintOptions));
          if (bundling) {
            hash.update(JSON.stringify(bundling));
          }
          return hash.digest("hex");
        }
        switch (hashType) {
          case assets_1.AssetHashType.SOURCE:
            return fs_1.FileSystem.fingerprint(this.sourcePath, this.fingerprintOptions);
          case assets_1.AssetHashType.BUNDLE:
          case assets_1.AssetHashType.OUTPUT:
            if (!outputDir) {
              throw new Error(`Cannot use \`${hashType}\` hash type when \`bundling\` is not specified.`);
            }
            return fs_1.FileSystem.fingerprint(outputDir, this.fingerprintOptions);
          default:
            throw new Error("Unknown asset hash type.");
        }
      }
    };
    exports2.AssetStaging = AssetStaging;
    _a = JSII_RTTI_SYMBOL_1;
    AssetStaging[_a] = { fqn: "@aws-cdk/core.AssetStaging", version: "1.132.0" };
    AssetStaging.BUNDLING_INPUT_DIR = "/asset-input";
    AssetStaging.BUNDLING_OUTPUT_DIR = "/asset-output";
    AssetStaging.assetCache = new cache_1.Cache();
    function renderAssetFilename(assetHash, extension = "") {
      return `asset.${assetHash}${extension}`;
    }
    function determineHashType(assetHashType, customSourceFingerprint) {
      const hashType = customSourceFingerprint ? assetHashType !== null && assetHashType !== void 0 ? assetHashType : assets_1.AssetHashType.CUSTOM : assetHashType !== null && assetHashType !== void 0 ? assetHashType : assets_1.AssetHashType.SOURCE;
      if (customSourceFingerprint && hashType !== assets_1.AssetHashType.CUSTOM) {
        throw new Error(`Cannot specify \`${assetHashType}\` for \`assetHashType\` when \`assetHash\` is specified. Use \`CUSTOM\` or leave \`undefined\`.`);
      }
      if (hashType === assets_1.AssetHashType.CUSTOM && !customSourceFingerprint) {
        throw new Error("`assetHash` must be specified when `assetHashType` is set to `AssetHashType.CUSTOM`.");
      }
      return hashType;
    }
    function calculateCacheKey(props) {
      return crypto.createHash("sha256").update(JSON.stringify(sortObject(props))).digest("hex");
    }
    function sortObject(object) {
      if (typeof object !== "object" || object instanceof Array) {
        return object;
      }
      const ret = {};
      for (const key of Object.keys(object).sort()) {
        ret[key] = sortObject(object[key]);
      }
      return ret;
    }
    function singleArchiveFile(directory) {
      if (!fs.existsSync(directory)) {
        throw new Error(`Directory ${directory} does not exist.`);
      }
      if (!fs.statSync(directory).isDirectory()) {
        throw new Error(`${directory} is not a directory.`);
      }
      const content = fs.readdirSync(directory);
      if (content.length === 1) {
        const file = path.join(directory, content[0]);
        const extension = path.extname(content[0]).toLowerCase();
        if (fs.statSync(file).isFile() && ARCHIVE_EXTENSIONS.includes(extension)) {
          return file;
        }
      }
      return void 0;
    }
    function determineBundledAsset(bundleDir, outputType) {
      const archiveFile = singleArchiveFile(bundleDir);
      if (outputType === bundling_1.BundlingOutput.AUTO_DISCOVER) {
        outputType = archiveFile ? bundling_1.BundlingOutput.ARCHIVED : bundling_1.BundlingOutput.NOT_ARCHIVED;
      }
      switch (outputType) {
        case bundling_1.BundlingOutput.NOT_ARCHIVED:
          return { path: bundleDir, packaging: assets_1.FileAssetPackaging.ZIP_DIRECTORY };
        case bundling_1.BundlingOutput.ARCHIVED:
          if (!archiveFile) {
            throw new Error("Bundling output directory is expected to include only a single .zip or .jar file when `output` is set to `ARCHIVED`");
          }
          return { path: archiveFile, packaging: assets_1.FileAssetPackaging.FILE, extension: path.extname(archiveFile) };
      }
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/duration.js
var require_duration = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/duration.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Duration = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var token_1 = require_token();
    var Duration = class {
      constructor(amount, unit) {
        if (!token_1.Token.isUnresolved(amount) && amount < 0) {
          throw new Error(`Duration amounts cannot be negative. Received: ${amount}`);
        }
        this.amount = amount;
        this.unit = unit;
      }
      static millis(amount) {
        return new Duration(amount, TimeUnit.Milliseconds);
      }
      static seconds(amount) {
        return new Duration(amount, TimeUnit.Seconds);
      }
      static minutes(amount) {
        return new Duration(amount, TimeUnit.Minutes);
      }
      static hours(amount) {
        return new Duration(amount, TimeUnit.Hours);
      }
      static days(amount) {
        return new Duration(amount, TimeUnit.Days);
      }
      static parse(duration) {
        const matches = duration.match(/^P(?:(\d+)D)?(?:T(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?)?$/);
        if (!matches) {
          throw new Error(`Not a valid ISO duration: ${duration}`);
        }
        const [, days, hours, minutes, seconds] = matches;
        if (!days && !hours && !minutes && !seconds) {
          throw new Error(`Not a valid ISO duration: ${duration}`);
        }
        return Duration.millis(_toInt(seconds) * TimeUnit.Seconds.inMillis + _toInt(minutes) * TimeUnit.Minutes.inMillis + _toInt(hours) * TimeUnit.Hours.inMillis + _toInt(days) * TimeUnit.Days.inMillis);
        function _toInt(str) {
          if (!str) {
            return 0;
          }
          return Number(str);
        }
      }
      plus(rhs) {
        const targetUnit = finestUnit(this.unit, rhs.unit);
        const res = convert(this.amount, this.unit, targetUnit, {}) + convert(rhs.amount, rhs.unit, targetUnit, {});
        return new Duration(res, targetUnit);
      }
      minus(rhs) {
        const targetUnit = finestUnit(this.unit, rhs.unit);
        const res = convert(this.amount, this.unit, targetUnit, {}) - convert(rhs.amount, rhs.unit, targetUnit, {});
        return new Duration(res, targetUnit);
      }
      toMilliseconds(opts = {}) {
        return convert(this.amount, this.unit, TimeUnit.Milliseconds, opts);
      }
      toSeconds(opts = {}) {
        return convert(this.amount, this.unit, TimeUnit.Seconds, opts);
      }
      toMinutes(opts = {}) {
        return convert(this.amount, this.unit, TimeUnit.Minutes, opts);
      }
      toHours(opts = {}) {
        return convert(this.amount, this.unit, TimeUnit.Hours, opts);
      }
      toDays(opts = {}) {
        return convert(this.amount, this.unit, TimeUnit.Days, opts);
      }
      toIsoString() {
        if (this.amount === 0) {
          return "PT0S";
        }
        const ret = ["P"];
        let tee = false;
        for (const [amount, unit] of this.components(true)) {
          if ([TimeUnit.Seconds, TimeUnit.Minutes, TimeUnit.Hours].includes(unit) && !tee) {
            ret.push("T");
            tee = true;
          }
          ret.push(`${amount}${unit.isoLabel}`);
        }
        return ret.join("");
      }
      toISOString() {
        return this.toIsoString();
      }
      toHumanString() {
        if (this.amount === 0) {
          return fmtUnit(0, this.unit);
        }
        if (token_1.Token.isUnresolved(this.amount)) {
          return `<token> ${this.unit.label}`;
        }
        return this.components(false).slice(0, 2).map(([amount, unit]) => fmtUnit(amount, unit)).join(" ");
        function fmtUnit(amount, unit) {
          if (amount === 1) {
            return `${amount} ${unit.label.substring(0, unit.label.length - 1)}`;
          }
          return `${amount} ${unit.label}`;
        }
      }
      toString() {
        return token_1.Token.asString(() => {
          throw new Error("Duration.toString() was used, but .toSeconds, .toMinutes or .toDays should have been called instead");
        }, { displayHint: `${this.amount} ${this.unit.label}` });
      }
      components(combineMillisWithSeconds) {
        const ret = new Array();
        let millis = convert(this.amount, this.unit, TimeUnit.Milliseconds, { integral: false });
        for (const unit of [TimeUnit.Days, TimeUnit.Hours, TimeUnit.Minutes, TimeUnit.Seconds]) {
          const count = convert(millis, TimeUnit.Milliseconds, unit, { integral: false });
          const wholeCount = unit === TimeUnit.Seconds && combineMillisWithSeconds ? count : Math.floor(count);
          if (wholeCount > 0) {
            ret.push([wholeCount, unit]);
            millis -= wholeCount * unit.inMillis;
          }
        }
        if (millis > 0) {
          ret.push([millis, TimeUnit.Milliseconds]);
        }
        return ret;
      }
      isUnresolved() {
        return token_1.Token.isUnresolved(this.amount);
      }
      unitLabel() {
        return this.unit.label;
      }
      formatTokenToNumber() {
        const number = token_1.Tokenization.stringifyNumber(this.amount);
        return `${number} ${this.unit.label}`;
      }
    };
    exports2.Duration = Duration;
    _a = JSII_RTTI_SYMBOL_1;
    Duration[_a] = { fqn: "@aws-cdk/core.Duration", version: "1.132.0" };
    var TimeUnit = class {
      constructor(label, isoLabel, inMillis) {
        this.label = label;
        this.isoLabel = isoLabel;
        this.inMillis = inMillis;
      }
      toString() {
        return this.label;
      }
    };
    TimeUnit.Milliseconds = new TimeUnit("millis", "", 1);
    TimeUnit.Seconds = new TimeUnit("seconds", "S", 1e3);
    TimeUnit.Minutes = new TimeUnit("minutes", "M", 6e4);
    TimeUnit.Hours = new TimeUnit("hours", "H", 36e5);
    TimeUnit.Days = new TimeUnit("days", "D", 864e5);
    function convert(amount, fromUnit, toUnit, { integral = true }) {
      if (fromUnit.inMillis === toUnit.inMillis) {
        return amount;
      }
      if (token_1.Token.isUnresolved(amount)) {
        throw new Error(`Unable to perform time unit conversion on un-resolved token ${amount}.`);
      }
      const value = amount * fromUnit.inMillis / toUnit.inMillis;
      if (!Number.isInteger(value) && integral) {
        throw new Error(`'${amount} ${fromUnit}' cannot be converted into a whole number of ${toUnit}.`);
      }
      return value;
    }
    function finestUnit(a, b) {
      return a.inMillis < b.inMillis ? a : b;
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/size.js
var require_size = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/size.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SizeRoundingBehavior = exports2.Size = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var token_1 = require_token();
    var Size = class {
      constructor(amount, unit) {
        if (!token_1.Token.isUnresolved(amount) && amount < 0) {
          throw new Error(`Storage amounts cannot be negative. Received: ${amount}`);
        }
        this.amount = amount;
        this.unit = unit;
      }
      static kibibytes(amount) {
        return new Size(amount, StorageUnit.Kibibytes);
      }
      static mebibytes(amount) {
        return new Size(amount, StorageUnit.Mebibytes);
      }
      static gibibytes(amount) {
        return new Size(amount, StorageUnit.Gibibytes);
      }
      static tebibytes(amount) {
        return new Size(amount, StorageUnit.Tebibytes);
      }
      static pebibyte(amount) {
        return Size.pebibytes(amount);
      }
      static pebibytes(amount) {
        return new Size(amount, StorageUnit.Pebibytes);
      }
      toKibibytes(opts = {}) {
        return convert(this.amount, this.unit, StorageUnit.Kibibytes, opts);
      }
      toMebibytes(opts = {}) {
        return convert(this.amount, this.unit, StorageUnit.Mebibytes, opts);
      }
      toGibibytes(opts = {}) {
        return convert(this.amount, this.unit, StorageUnit.Gibibytes, opts);
      }
      toTebibytes(opts = {}) {
        return convert(this.amount, this.unit, StorageUnit.Tebibytes, opts);
      }
      toPebibytes(opts = {}) {
        return convert(this.amount, this.unit, StorageUnit.Pebibytes, opts);
      }
    };
    exports2.Size = Size;
    _a = JSII_RTTI_SYMBOL_1;
    Size[_a] = { fqn: "@aws-cdk/core.Size", version: "1.132.0" };
    var SizeRoundingBehavior;
    (function(SizeRoundingBehavior2) {
      SizeRoundingBehavior2[SizeRoundingBehavior2["FAIL"] = 0] = "FAIL";
      SizeRoundingBehavior2[SizeRoundingBehavior2["FLOOR"] = 1] = "FLOOR";
      SizeRoundingBehavior2[SizeRoundingBehavior2["NONE"] = 2] = "NONE";
    })(SizeRoundingBehavior = exports2.SizeRoundingBehavior || (exports2.SizeRoundingBehavior = {}));
    var StorageUnit = class {
      constructor(label, inKibiBytes) {
        this.label = label;
        this.inKibiBytes = inKibiBytes;
      }
      toString() {
        return this.label;
      }
    };
    StorageUnit.Kibibytes = new StorageUnit("kibibytes", 1);
    StorageUnit.Mebibytes = new StorageUnit("mebibytes", 1024);
    StorageUnit.Gibibytes = new StorageUnit("gibibytes", 1024 * 1024);
    StorageUnit.Tebibytes = new StorageUnit("tebibytes", 1024 * 1024 * 1024);
    StorageUnit.Pebibytes = new StorageUnit("pebibytes", 1024 * 1024 * 1024 * 1024);
    function convert(amount, fromUnit, toUnit, options = {}) {
      var _b;
      const rounding = (_b = options.rounding) !== null && _b !== void 0 ? _b : SizeRoundingBehavior.FAIL;
      if (fromUnit.inKibiBytes === toUnit.inKibiBytes) {
        return amount;
      }
      if (token_1.Token.isUnresolved(amount)) {
        throw new Error(`Unable to perform time unit conversion on un-resolved token ${amount}.`);
      }
      const multiplier = fromUnit.inKibiBytes / toUnit.inKibiBytes;
      const value = amount * multiplier;
      switch (rounding) {
        case SizeRoundingBehavior.NONE:
          return value;
        case SizeRoundingBehavior.FLOOR:
          return Math.floor(value);
        default:
        case SizeRoundingBehavior.FAIL:
          if (!Number.isInteger(value)) {
            throw new Error(`'${amount} ${fromUnit}' cannot be converted into a whole number of ${toUnit}.`);
          }
          return value;
      }
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/custom-resource-provider/custom-resource-provider.js
var require_custom_resource_provider = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/custom-resource-provider/custom-resource-provider.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CustomResourceProvider = exports2.CustomResourceProviderRuntime = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var fs = require("fs");
    var path = require("path");
    var asset_staging_1 = require_asset_staging();
    var assets_1 = require_assets3();
    var cfn_resource_1 = require_cfn_resource();
    var duration_1 = require_duration();
    var size_1 = require_size();
    var stack_1 = require_stack();
    var token_1 = require_token();
    var ENTRYPOINT_FILENAME = "__entrypoint__";
    var ENTRYPOINT_NODEJS_SOURCE = path.join(__dirname, "nodejs-entrypoint.js");
    var construct_compat_1 = require_construct_compat();
    var CustomResourceProviderRuntime;
    (function(CustomResourceProviderRuntime2) {
      CustomResourceProviderRuntime2["NODEJS_12"] = "nodejs12.x";
      CustomResourceProviderRuntime2["NODEJS_12_X"] = "nodejs12.x";
      CustomResourceProviderRuntime2["NODEJS_14_X"] = "nodejs14.x";
    })(CustomResourceProviderRuntime = exports2.CustomResourceProviderRuntime || (exports2.CustomResourceProviderRuntime = {}));
    var CustomResourceProvider = class extends construct_compat_1.Construct {
      constructor(scope, id, props) {
        var _b, _c, _d;
        super(scope, id);
        const stack = stack_1.Stack.of(scope);
        fs.copyFileSync(ENTRYPOINT_NODEJS_SOURCE, path.join(props.codeDirectory, `${ENTRYPOINT_FILENAME}.js`));
        if (!fs.existsSync(path.join(props.codeDirectory, "index.js"))) {
          throw new Error(`cannot find ${props.codeDirectory}/index.js`);
        }
        const staging = new asset_staging_1.AssetStaging(this, "Staging", {
          sourcePath: props.codeDirectory
        });
        const asset = stack.addFileAsset({
          fileName: staging.relativeStagedPath(stack),
          sourceHash: staging.sourceHash,
          packaging: assets_1.FileAssetPackaging.ZIP_DIRECTORY
        });
        const policies = !props.policyStatements ? void 0 : [
          {
            PolicyName: "Inline",
            PolicyDocument: {
              Version: "2012-10-17",
              Statement: props.policyStatements
            }
          }
        ];
        const role = new cfn_resource_1.CfnResource(this, "Role", {
          type: "AWS::IAM::Role",
          properties: {
            AssumeRolePolicyDocument: {
              Version: "2012-10-17",
              Statement: [{ Action: "sts:AssumeRole", Effect: "Allow", Principal: { Service: "lambda.amazonaws.com" } }]
            },
            ManagedPolicyArns: [
              { "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole" }
            ],
            Policies: policies
          }
        });
        this.roleArn = token_1.Token.asString(role.getAtt("Arn"));
        const timeout = (_b = props.timeout) !== null && _b !== void 0 ? _b : duration_1.Duration.minutes(15);
        const memory = (_c = props.memorySize) !== null && _c !== void 0 ? _c : size_1.Size.mebibytes(128);
        const handler = new cfn_resource_1.CfnResource(this, "Handler", {
          type: "AWS::Lambda::Function",
          properties: {
            Code: {
              S3Bucket: asset.bucketName,
              S3Key: asset.objectKey
            },
            Timeout: timeout.toSeconds(),
            MemorySize: memory.toMebibytes(),
            Handler: `${ENTRYPOINT_FILENAME}.handler`,
            Role: role.getAtt("Arn"),
            Runtime: props.runtime,
            Environment: this.renderEnvironmentVariables(props.environment),
            Description: (_d = props.description) !== null && _d !== void 0 ? _d : void 0
          }
        });
        handler.addDependsOn(role);
        this.serviceToken = token_1.Token.asString(handler.getAtt("Arn"));
      }
      static getOrCreate(scope, uniqueid, props) {
        return this.getOrCreateProvider(scope, uniqueid, props).serviceToken;
      }
      static getOrCreateProvider(scope, uniqueid, props) {
        var _b;
        const id = `${uniqueid}CustomResourceProvider`;
        const stack = stack_1.Stack.of(scope);
        const provider = (_b = stack.node.tryFindChild(id)) !== null && _b !== void 0 ? _b : new CustomResourceProvider(stack, id, props);
        return provider;
      }
      renderEnvironmentVariables(env) {
        if (!env || Object.keys(env).length === 0) {
          return void 0;
        }
        const variables = {};
        const keys = Object.keys(env).sort();
        for (const key of keys) {
          variables[key] = env[key];
        }
        return { Variables: variables };
      }
    };
    exports2.CustomResourceProvider = CustomResourceProvider;
    _a = JSII_RTTI_SYMBOL_1;
    CustomResourceProvider[_a] = { fqn: "@aws-cdk/core.CustomResourceProvider", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/custom-resource-provider/index.js
var require_custom_resource_provider2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/custom-resource-provider/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_custom_resource_provider(), exports2);
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/private/cfn-utils-provider.js
var require_cfn_utils_provider = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/private/cfn-utils-provider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnUtils = exports2.CfnUtilsProvider = void 0;
    var construct_compat_1 = require_construct_compat();
    var custom_resource_1 = require_custom_resource();
    var custom_resource_provider_1 = require_custom_resource_provider2();
    var CfnUtilsProvider = class extends construct_compat_1.Construct {
      static getOrCreate(scope) {
        return custom_resource_provider_1.CustomResourceProvider.getOrCreate(scope, "AWSCDKCfnUtilsProvider", {
          runtime: custom_resource_provider_1.CustomResourceProviderRuntime.NODEJS_12_X,
          codeDirectory: `${__dirname}/cfn-utils-provider`
        });
      }
    };
    exports2.CfnUtilsProvider = CfnUtilsProvider;
    var CfnUtils = class {
      static stringify(scope, id, value) {
        const resource = new custom_resource_1.CustomResource(scope, id, {
          serviceToken: CfnUtilsProvider.getOrCreate(scope),
          resourceType: "Custom::AWSCDKCfnJsonStringify",
          properties: {
            Value: value
          }
        });
        return resource.getAttString("Value");
      }
    };
    exports2.CfnUtils = CfnUtils;
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/private/cloudformation-lang.js
var require_cloudformation_lang = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/private/cloudformation-lang.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isNameOfCloudFormationIntrinsic = exports2.minimalCloudFormationJoin = exports2.CLOUDFORMATION_TOKEN_RESOLVER = exports2.CloudFormationLang = void 0;
    var lazy_1 = require_lazy();
    var resolvable_1 = require_resolvable();
    var stack_1 = require_stack();
    var token_1 = require_token();
    var cfn_utils_provider_1 = require_cfn_utils_provider();
    var resolve_1 = require_resolve();
    var CloudFormationLang = class {
      static toJSON(obj, space) {
        return lazy_1.Lazy.uncachedString({
          produce: (ctx) => tokenAwareStringify(obj, space !== null && space !== void 0 ? space : 0, ctx)
        });
      }
      static concat(left, right) {
        if (left === void 0 && right === void 0) {
          return "";
        }
        const parts = new Array();
        if (left !== void 0) {
          parts.push(left);
        }
        if (right !== void 0) {
          parts.push(right);
        }
        if (parts.length === 1) {
          return parts[0];
        }
        if (parts.length === 2 && typeof parts[0] === "string" && typeof parts[1] === "string") {
          return parts[0] + parts[1];
        }
        return fnJoinConcat(parts);
      }
    };
    exports2.CloudFormationLang = CloudFormationLang;
    function fnJoinConcat(parts) {
      return { "Fn::Join": ["", minimalCloudFormationJoin("", parts)] };
    }
    function tokenAwareStringify(root, space, ctx) {
      let indent = 0;
      const ret = new Array();
      recurse(ctx.resolve(root, { allowIntrinsicKeys: true }));
      switch (ret.length) {
        case 0:
          return void 0;
        case 1:
          return renderSegment(ret[0]);
        default:
          return fnJoinConcat(ret.map(renderSegment));
      }
      function recurse(obj) {
        if (obj === void 0) {
          return;
        }
        if (token_1.Token.isUnresolved(obj)) {
          throw new Error("This shouldnt happen anymore");
        }
        if (Array.isArray(obj)) {
          return renderCollection("[", "]", obj, recurse);
        }
        if (typeof obj === "object" && obj != null && !(obj instanceof Date)) {
          if (isIntrinsic(obj) && resolve_1.resolvedTypeHint(obj)) {
            renderIntrinsic(obj);
            return;
          }
          return renderCollection("{", "}", definedEntries(obj), ([key, value]) => {
            if (key.startsWith(resolve_1.INTRINSIC_KEY_PREFIX)) {
              [key, value] = value;
            }
            recurse(key);
            pushLiteral(prettyPunctuation(":"));
            recurse(value);
          });
        }
        pushLiteral(JSON.stringify(obj));
      }
      function renderCollection(pre, post, xs, each) {
        pushLiteral(pre);
        indent += space;
        let atLeastOne = false;
        for (const [comma, item] of sepIter(xs)) {
          if (comma) {
            pushLiteral(",");
          }
          pushLineBreak();
          each(item);
          atLeastOne = true;
        }
        indent -= space;
        if (atLeastOne) {
          pushLineBreak();
        }
        pushLiteral(post);
      }
      function renderIntrinsic(intrinsic) {
        switch (resolve_1.resolvedTypeHint(intrinsic)) {
          case resolve_1.ResolutionTypeHint.STRING:
            pushLiteral('"');
            pushIntrinsic(deepQuoteStringLiterals(intrinsic));
            pushLiteral('"');
            return;
          case resolve_1.ResolutionTypeHint.LIST:
            const stack = stack_1.Stack.of(ctx.scope);
            const stringifyResponse = stringifyCache.obtain(stack, JSON.stringify(intrinsic), () => cfn_utils_provider_1.CfnUtils.stringify(stack, `CdkJsonStringify${stringifyCounter++}`, intrinsic));
            pushIntrinsic(stringifyResponse);
            return;
          case resolve_1.ResolutionTypeHint.NUMBER:
            pushIntrinsic(intrinsic);
            return;
        }
        throw new Error(`Unexpected type hint: ${resolve_1.resolvedTypeHint(intrinsic)}`);
      }
      function pushLiteral(lit) {
        let last = ret[ret.length - 1];
        if ((last === null || last === void 0 ? void 0 : last.type) !== "literal") {
          last = { type: "literal", parts: [] };
          ret.push(last);
        }
        last.parts.push(lit);
      }
      function pushIntrinsic(intrinsic) {
        ret.push({ type: "intrinsic", intrinsic });
      }
      function pushLineBreak() {
        if (space > 0) {
          pushLiteral(`
${" ".repeat(indent)}`);
        }
      }
      function prettyPunctuation(punc) {
        return space > 0 ? `${punc} ` : punc;
      }
    }
    function renderSegment(s) {
      switch (s.type) {
        case "literal":
          return s.parts.join("");
        case "intrinsic":
          return s.intrinsic;
      }
    }
    var CLOUDFORMATION_CONCAT = {
      join(left, right) {
        return CloudFormationLang.concat(left, right);
      }
    };
    exports2.CLOUDFORMATION_TOKEN_RESOLVER = new resolvable_1.DefaultTokenResolver(CLOUDFORMATION_CONCAT);
    function minimalCloudFormationJoin(delimiter, values) {
      let i = 0;
      while (i < values.length) {
        const el = values[i];
        if (isSplicableFnJoinIntrinsic(el)) {
          values.splice(i, 1, ...el["Fn::Join"][1]);
        } else if (i > 0 && isPlainString(values[i - 1]) && isPlainString(values[i])) {
          values[i - 1] += delimiter + values[i];
          values.splice(i, 1);
        } else {
          i += 1;
        }
      }
      return values;
      function isPlainString(obj) {
        return typeof obj === "string" && !token_1.Token.isUnresolved(obj);
      }
      function isSplicableFnJoinIntrinsic(obj) {
        if (!isIntrinsic(obj)) {
          return false;
        }
        if (Object.keys(obj)[0] !== "Fn::Join") {
          return false;
        }
        const [delim, list] = obj["Fn::Join"];
        if (delim !== delimiter) {
          return false;
        }
        if (token_1.Token.isUnresolved(list)) {
          return false;
        }
        if (!Array.isArray(list)) {
          return false;
        }
        return true;
      }
    }
    exports2.minimalCloudFormationJoin = minimalCloudFormationJoin;
    function isIntrinsic(x) {
      if (Array.isArray(x) || x === null || typeof x !== "object") {
        return false;
      }
      const keys = Object.keys(x);
      if (keys.length !== 1) {
        return false;
      }
      return keys[0] === "Ref" || isNameOfCloudFormationIntrinsic(keys[0]);
    }
    function isNameOfCloudFormationIntrinsic(name) {
      if (!name.startsWith("Fn::")) {
        return false;
      }
      return name !== "Fn::GetArtifactAtt" && name !== "Fn::GetParam";
    }
    exports2.isNameOfCloudFormationIntrinsic = isNameOfCloudFormationIntrinsic;
    function* sepIter(xs) {
      let comma = false;
      for (const item of xs) {
        yield [comma, item];
        comma = true;
      }
    }
    function* definedEntries(xs) {
      for (const [key, value] of Object.entries(xs)) {
        if (value !== void 0) {
          yield [key, value];
        }
      }
    }
    function deepQuoteStringLiterals(x) {
      if (Array.isArray(x)) {
        return x.map(deepQuoteStringLiterals);
      }
      if (typeof x === "object" && x != null) {
        const ret = {};
        for (const [key, value] of Object.entries(x)) {
          ret[deepQuoteStringLiterals(key)] = deepQuoteStringLiterals(value);
        }
        return ret;
      }
      if (typeof x === "string") {
        return quoteString(x);
      }
      return x;
    }
    function quoteString(s) {
      s = JSON.stringify(s);
      return s.substring(1, s.length - 1);
    }
    var stringifyCounter = 1;
    var ScopedCache = class {
      constructor() {
        this.cache = new WeakMap();
      }
      obtain(object, key, init) {
        let kvMap = this.cache.get(object);
        if (!kvMap) {
          kvMap = new Map();
          this.cache.set(object, kvMap);
        }
        let ret = kvMap.get(key);
        if (ret === void 0) {
          ret = init();
          kvMap.set(key, ret);
        }
        return ret;
      }
    };
    var stringifyCache = new ScopedCache();
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/cfn-fn.js
var require_cfn_fn = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/cfn-fn.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Fn = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cloudformation_lang_1 = require_cloudformation_lang();
    var intrinsic_1 = require_intrinsic();
    var reference_1 = require_reference();
    var stack_trace_1 = require_stack_trace2();
    var token_1 = require_token();
    var Fn = class {
      constructor() {
      }
      static ref(logicalName) {
        return new FnRef(logicalName).toString();
      }
      static getAtt(logicalNameOfResource, attributeName) {
        return new FnGetAtt(logicalNameOfResource, attributeName);
      }
      static join(delimiter, listOfValues) {
        if (listOfValues.length === 0) {
          throw new Error("FnJoin requires at least one value to be provided");
        }
        return new FnJoin(delimiter, listOfValues).toString();
      }
      static split(delimiter, source, assumedLength) {
        if (!token_1.Token.isUnresolved(source)) {
          return source.split(delimiter);
        }
        if (token_1.Token.isUnresolved(delimiter)) {
          throw new Error("Fn.split: 'delimiter' may not be a token value");
        }
        const split = token_1.Token.asList(new FnSplit(delimiter, source));
        if (assumedLength === void 0) {
          return split;
        }
        if (token_1.Token.isUnresolved(assumedLength)) {
          throw new Error("Fn.split: 'assumedLength' may not be a token value");
        }
        return range(assumedLength).map((i) => Fn.select(i, split));
      }
      static select(index, array) {
        if (!token_1.Token.isUnresolved(array)) {
          return array[index];
        }
        return new FnSelect(index, array).toString();
      }
      static sub(body, variables) {
        return new FnSub(body, variables).toString();
      }
      static base64(data) {
        return new FnBase64(data).toString();
      }
      static cidr(ipBlock, count, sizeMask) {
        return token_1.Token.asList(new FnCidr(ipBlock, count, sizeMask));
      }
      static parseDomainName(url) {
        const noHttps = Fn.select(1, Fn.split("//", url));
        return Fn.select(0, Fn.split("/", noHttps));
      }
      static getAzs(region) {
        return token_1.Token.asList(new FnGetAZs(region));
      }
      static importValue(sharedValueToImport) {
        return new FnImportValue(sharedValueToImport).toString();
      }
      static importListValue(sharedValueToImport, assumedLength, delimiter = ",") {
        return Fn.split(delimiter, Fn.importValue(sharedValueToImport), assumedLength);
      }
      static findInMap(mapName, topLevelKey, secondLevelKey) {
        return Fn._findInMap(mapName, topLevelKey, secondLevelKey).toString();
      }
      static _findInMap(mapName, topLevelKey, secondLevelKey) {
        return new FnFindInMap(mapName, topLevelKey, secondLevelKey);
      }
      static transform(macroName, parameters) {
        return new FnTransform(macroName, parameters);
      }
      static conditionAnd(...conditions) {
        if (conditions.length === 0) {
          throw new Error("Fn.conditionAnd() needs at least one argument");
        }
        if (conditions.length === 1) {
          return conditions[0];
        }
        return Fn.conditionAnd(..._inGroupsOf(conditions, 10).map((group) => new FnAnd(...group)));
      }
      static conditionEquals(lhs, rhs) {
        return new FnEquals(lhs, rhs);
      }
      static conditionIf(conditionId, valueIfTrue, valueIfFalse) {
        return new FnIf(conditionId, valueIfTrue, valueIfFalse);
      }
      static conditionNot(condition) {
        return new FnNot(condition);
      }
      static conditionOr(...conditions) {
        if (conditions.length === 0) {
          throw new Error("Fn.conditionOr() needs at least one argument");
        }
        if (conditions.length === 1) {
          return conditions[0];
        }
        return Fn.conditionOr(..._inGroupsOf(conditions, 10).map((group) => new FnOr(...group)));
      }
      static conditionContains(listOfStrings, value) {
        return new FnContains(listOfStrings, value);
      }
      static conditionEachMemberEquals(listOfStrings, value) {
        return new FnEachMemberEquals(listOfStrings, value);
      }
      static conditionEachMemberIn(stringsToCheck, stringsToMatch) {
        return new FnEachMemberIn(stringsToCheck, stringsToMatch);
      }
      static refAll(parameterType) {
        return token_1.Token.asList(new FnRefAll(parameterType));
      }
      static valueOf(parameterOrLogicalId, attribute) {
        return new FnValueOf(parameterOrLogicalId, attribute).toString();
      }
      static valueOfAll(parameterType, attribute) {
        return token_1.Token.asList(new FnValueOfAll(parameterType, attribute));
      }
    };
    exports2.Fn = Fn;
    _a = JSII_RTTI_SYMBOL_1;
    Fn[_a] = { fqn: "@aws-cdk/core.Fn", version: "1.132.0" };
    var FnBase = class extends intrinsic_1.Intrinsic {
      constructor(name, value) {
        super({ [name]: value });
      }
    };
    var FnRef = class extends FnBase {
      constructor(logicalName) {
        super("Ref", logicalName);
      }
    };
    var FnFindInMap = class extends FnBase {
      constructor(mapName, topLevelKey, secondLevelKey) {
        super("Fn::FindInMap", [mapName, topLevelKey, secondLevelKey]);
      }
    };
    var FnTransform = class extends FnBase {
      constructor(macroName, parameters) {
        super("Fn::Transform", { Name: macroName, Parameters: parameters });
      }
    };
    var FnGetAtt = class extends FnBase {
      constructor(logicalNameOfResource, attributeName) {
        super("Fn::GetAtt", [logicalNameOfResource, attributeName]);
      }
    };
    var FnGetAZs = class extends FnBase {
      constructor(region) {
        super("Fn::GetAZs", region || "");
      }
    };
    var FnImportValue = class extends FnBase {
      constructor(sharedValueToImport) {
        super("Fn::ImportValue", sharedValueToImport);
      }
    };
    var FnSelect = class extends FnBase {
      constructor(index, array) {
        super("Fn::Select", [index, array]);
      }
    };
    var FnSplit = class extends FnBase {
      constructor(delimiter, source) {
        super("Fn::Split", [delimiter, source]);
      }
    };
    var FnSub = class extends FnBase {
      constructor(body, variables) {
        super("Fn::Sub", variables ? [body, variables] : body);
      }
    };
    var FnBase64 = class extends FnBase {
      constructor(data) {
        super("Fn::Base64", data);
      }
    };
    var FnCidr = class extends FnBase {
      constructor(ipBlock, count, sizeMask) {
        if (count < 1 || count > 256) {
          throw new Error(`Fn::Cidr's count attribute must be betwen 1 and 256, ${count} was provided.`);
        }
        super("Fn::Cidr", [ipBlock, count, sizeMask]);
      }
    };
    var FnConditionBase = class extends intrinsic_1.Intrinsic {
      constructor(type, value) {
        super({ [type]: value });
        this.disambiguator = true;
      }
    };
    var FnAnd = class extends FnConditionBase {
      constructor(...condition) {
        super("Fn::And", condition);
      }
    };
    var FnEquals = class extends FnConditionBase {
      constructor(lhs, rhs) {
        super("Fn::Equals", [lhs, rhs]);
      }
    };
    var FnIf = class extends FnConditionBase {
      constructor(condition, valueIfTrue, valueIfFalse) {
        super("Fn::If", [condition, valueIfTrue, valueIfFalse]);
      }
    };
    var FnNot = class extends FnConditionBase {
      constructor(condition) {
        super("Fn::Not", [condition]);
      }
    };
    var FnOr = class extends FnConditionBase {
      constructor(...condition) {
        super("Fn::Or", condition);
      }
    };
    var FnContains = class extends FnConditionBase {
      constructor(listOfStrings, value) {
        super("Fn::Contains", [listOfStrings, value]);
      }
    };
    var FnEachMemberEquals = class extends FnConditionBase {
      constructor(listOfStrings, value) {
        super("Fn::EachMemberEquals", [listOfStrings, value]);
      }
    };
    var FnEachMemberIn = class extends FnConditionBase {
      constructor(stringsToCheck, stringsToMatch) {
        super("Fn::EachMemberIn", [stringsToCheck, stringsToMatch]);
      }
    };
    var FnRefAll = class extends FnBase {
      constructor(parameterType) {
        super("Fn::RefAll", parameterType);
      }
    };
    var FnValueOf = class extends FnBase {
      constructor(parameterOrLogicalId, attribute) {
        super("Fn::ValueOf", [parameterOrLogicalId, attribute]);
      }
    };
    var FnValueOfAll = class extends FnBase {
      constructor(parameterType, attribute) {
        super("Fn::ValueOfAll", [parameterType, attribute]);
      }
    };
    var FnJoin = class {
      constructor(delimiter, listOfValues) {
        if (listOfValues.length === 0) {
          throw new Error("FnJoin requires at least one value to be provided");
        }
        this.delimiter = delimiter;
        this.listOfValues = listOfValues;
        this.creationStack = stack_trace_1.captureStackTrace();
      }
      resolve(context) {
        if (token_1.Token.isUnresolved(this.listOfValues)) {
          return { "Fn::Join": [this.delimiter, this.listOfValues] };
        }
        const resolved = this.resolveValues(context);
        if (resolved.length === 1) {
          return resolved[0];
        }
        return { "Fn::Join": [this.delimiter, resolved] };
      }
      toString() {
        return token_1.Token.asString(this, { displayHint: "Fn::Join" });
      }
      toJSON() {
        return "<Fn::Join>";
      }
      resolveValues(context) {
        const resolvedValues = this.listOfValues.map((x) => reference_1.Reference.isReference(x) ? x : context.resolve(x));
        return cloudformation_lang_1.minimalCloudFormationJoin(this.delimiter, resolvedValues);
      }
    };
    function _inGroupsOf(array, maxGroup) {
      const result = new Array();
      for (let i = 0; i < array.length; i += maxGroup) {
        result.push(array.slice(i, i + maxGroup));
      }
      return result;
    }
    function range(n) {
      const ret = [];
      for (let i = 0; i < n; i++) {
        ret.push(i);
      }
      return ret;
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/util.js
var require_util = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.undefinedIfAllValuesAreEmpty = exports2.findLastCommonElement = exports2.pathToTopLevelStack = exports2.PostResolveToken = exports2.filterUndefined = exports2.ignoreEmpty = exports2.capitalizePropertyNames = void 0;
    var intrinsic_1 = require_intrinsic();
    var stack_1 = require_stack();
    function capitalizePropertyNames(construct, obj) {
      const stack = stack_1.Stack.of(construct);
      obj = stack.resolve(obj);
      if (typeof obj !== "object") {
        return obj;
      }
      if (Array.isArray(obj)) {
        return obj.map((x) => capitalizePropertyNames(construct, x));
      }
      const newObj = {};
      for (const key of Object.keys(obj)) {
        const value = obj[key];
        const first = key.charAt(0).toUpperCase();
        const newKey = first + key.slice(1);
        newObj[newKey] = capitalizePropertyNames(construct, value);
      }
      return newObj;
    }
    exports2.capitalizePropertyNames = capitalizePropertyNames;
    function ignoreEmpty(obj) {
      return new PostResolveToken(obj, (o) => {
        if (o == null) {
          return o;
        }
        if (Array.isArray(o) && o.length === 0) {
          return void 0;
        }
        if (typeof o === "object" && Object.keys(o).length === 0) {
          return void 0;
        }
        return o;
      });
    }
    exports2.ignoreEmpty = ignoreEmpty;
    function filterUndefined(obj) {
      if (Array.isArray(obj)) {
        return obj.filter((x) => x != null).map((x) => filterUndefined(x));
      }
      if (typeof obj === "object") {
        const ret = {};
        for (const [key, value] of Object.entries(obj)) {
          if (value == null) {
            continue;
          }
          ret[key] = filterUndefined(value);
        }
        return ret;
      }
      return obj;
    }
    exports2.filterUndefined = filterUndefined;
    var PostResolveToken = class extends intrinsic_1.Intrinsic {
      constructor(value, processor) {
        super(value, { stackTrace: false });
        this.processor = processor;
      }
      resolve(context) {
        context.registerPostProcessor(this);
        return super.resolve(context);
      }
      postProcess(o, _context) {
        return this.processor(o);
      }
    };
    exports2.PostResolveToken = PostResolveToken;
    function pathToTopLevelStack(s) {
      if (s.nestedStackParent) {
        return [...pathToTopLevelStack(s.nestedStackParent), s];
      } else {
        return [s];
      }
    }
    exports2.pathToTopLevelStack = pathToTopLevelStack;
    function findLastCommonElement(path1, path2) {
      let i = 0;
      while (i < path1.length && i < path2.length) {
        if (path1[i] !== path2[i]) {
          break;
        }
        i++;
      }
      return path1[i - 1];
    }
    exports2.findLastCommonElement = findLastCommonElement;
    function undefinedIfAllValuesAreEmpty(object) {
      return Object.values(object).some((v) => v !== void 0) ? object : void 0;
    }
    exports2.undefinedIfAllValuesAreEmpty = undefinedIfAllValuesAreEmpty;
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/arn.js
var require_arn = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/arn.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Arn = exports2.ArnFormat = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cfn_fn_1 = require_cfn_fn();
    var token_1 = require_token();
    var util_1 = require_util();
    var ArnFormat;
    (function(ArnFormat2) {
      ArnFormat2["NO_RESOURCE_NAME"] = "arn:aws:service:region:account:resource";
      ArnFormat2["COLON_RESOURCE_NAME"] = "arn:aws:service:region:account:resource:resourceName";
      ArnFormat2["SLASH_RESOURCE_NAME"] = "arn:aws:service:region:account:resource/resourceName";
      ArnFormat2["SLASH_RESOURCE_SLASH_RESOURCE_NAME"] = "arn:aws:service:region:account:/resource/resourceName";
    })(ArnFormat = exports2.ArnFormat || (exports2.ArnFormat = {}));
    var Arn = class {
      constructor() {
      }
      static format(components, stack) {
        var _b, _c, _d, _e;
        const partition = (_b = components.partition) !== null && _b !== void 0 ? _b : stack.partition;
        const region = (_c = components.region) !== null && _c !== void 0 ? _c : stack.region;
        const account = (_d = components.account) !== null && _d !== void 0 ? _d : stack.account;
        const sep = (_e = components.sep) !== null && _e !== void 0 ? _e : components.arnFormat === ArnFormat.COLON_RESOURCE_NAME ? ":" : "/";
        const values = [
          "arn",
          ":",
          partition,
          ":",
          components.service,
          ":",
          region,
          ":",
          account,
          ":",
          ...components.arnFormat === ArnFormat.SLASH_RESOURCE_SLASH_RESOURCE_NAME ? ["/"] : [],
          components.resource
        ];
        if (sep !== "/" && sep !== ":" && sep !== "") {
          throw new Error('resourcePathSep may only be ":", "/" or an empty string');
        }
        if (components.resourceName != null) {
          values.push(sep);
          values.push(components.resourceName);
        }
        return values.join("");
      }
      static parse(arn, sepIfToken = "/", hasName = true) {
        let arnFormat;
        if (!hasName) {
          arnFormat = ArnFormat.NO_RESOURCE_NAME;
        } else {
          arnFormat = sepIfToken === "/" ? ArnFormat.SLASH_RESOURCE_NAME : ArnFormat.COLON_RESOURCE_NAME;
        }
        return this.split(arn, arnFormat);
      }
      static split(arn, arnFormat) {
        const components = parseArnShape(arn);
        if (components === "token") {
          return parseTokenArn(arn, arnFormat);
        }
        const [, partition, service, region, account, resourceTypeOrName, ...rest] = components;
        let resource;
        let resourceName;
        let sep;
        let resourcePartStartIndex = 0;
        let detectedArnFormat;
        let slashIndex = resourceTypeOrName.indexOf("/");
        if (slashIndex === 0) {
          slashIndex = resourceTypeOrName.indexOf("/", 1);
          resourcePartStartIndex = 1;
          detectedArnFormat = ArnFormat.SLASH_RESOURCE_SLASH_RESOURCE_NAME;
        }
        if (slashIndex !== -1) {
          if (arnFormat === ArnFormat.NO_RESOURCE_NAME) {
            sep = void 0;
            slashIndex = -1;
            detectedArnFormat = ArnFormat.NO_RESOURCE_NAME;
          } else {
            sep = "/";
            detectedArnFormat = resourcePartStartIndex === 0 ? ArnFormat.SLASH_RESOURCE_NAME : ArnFormat.SLASH_RESOURCE_SLASH_RESOURCE_NAME;
          }
        } else if (rest.length > 0) {
          sep = ":";
          slashIndex = -1;
          detectedArnFormat = ArnFormat.COLON_RESOURCE_NAME;
        } else {
          sep = void 0;
          detectedArnFormat = ArnFormat.NO_RESOURCE_NAME;
        }
        if (slashIndex !== -1) {
          resource = resourceTypeOrName.substring(resourcePartStartIndex, slashIndex);
          resourceName = resourceTypeOrName.substring(slashIndex + 1);
        } else {
          resource = resourceTypeOrName;
        }
        if (rest.length > 0) {
          if (!resourceName) {
            resourceName = "";
          } else {
            resourceName += ":";
          }
          resourceName += rest.join(":");
        }
        return util_1.filterUndefined({
          service: service || void 0,
          resource: resource || void 0,
          partition: partition || void 0,
          region,
          account,
          resourceName,
          sep,
          arnFormat: detectedArnFormat
        });
      }
      static extractResourceName(arn, resourceType) {
        const components = parseArnShape(arn);
        if (components === "token") {
          return cfn_fn_1.Fn.select(1, cfn_fn_1.Fn.split(`:${resourceType}/`, arn));
        }
        const parsed = Arn.parse(arn, "/", true);
        if (!token_1.Token.isUnresolved(parsed.resource) && parsed.resource !== resourceType) {
          throw new Error(`Expected resource type '${resourceType}' in ARN, got '${parsed.resource}' in '${arn}'`);
        }
        if (!parsed.resourceName) {
          throw new Error(`Expected resource name in ARN, didn't find one: '${arn}'`);
        }
        return parsed.resourceName;
      }
    };
    exports2.Arn = Arn;
    _a = JSII_RTTI_SYMBOL_1;
    Arn[_a] = { fqn: "@aws-cdk/core.Arn", version: "1.132.0" };
    function parseTokenArn(arnToken, arnFormat) {
      const components = cfn_fn_1.Fn.split(":", arnToken);
      const partition = cfn_fn_1.Fn.select(1, components).toString();
      const service = cfn_fn_1.Fn.select(2, components).toString();
      const region = cfn_fn_1.Fn.select(3, components).toString();
      const account = cfn_fn_1.Fn.select(4, components).toString();
      let resource;
      let resourceName;
      let sep;
      if (arnFormat === ArnFormat.NO_RESOURCE_NAME || arnFormat === ArnFormat.COLON_RESOURCE_NAME) {
        resource = cfn_fn_1.Fn.select(5, components);
        if (arnFormat === ArnFormat.COLON_RESOURCE_NAME) {
          resourceName = cfn_fn_1.Fn.select(6, components);
          sep = ":";
        } else {
          resourceName = void 0;
          sep = void 0;
        }
      } else {
        const lastComponents = cfn_fn_1.Fn.split("/", cfn_fn_1.Fn.select(5, components));
        if (arnFormat === ArnFormat.SLASH_RESOURCE_NAME) {
          resource = cfn_fn_1.Fn.select(0, lastComponents);
          resourceName = cfn_fn_1.Fn.select(1, lastComponents);
        } else {
          resource = cfn_fn_1.Fn.select(1, lastComponents);
          resourceName = cfn_fn_1.Fn.select(2, lastComponents);
        }
        sep = "/";
      }
      return { partition, service, region, account, resource, resourceName, sep, arnFormat };
    }
    function parseArnShape(arn) {
      const looksLikeArn = arn.startsWith("arn:");
      if (!looksLikeArn) {
        if (token_1.Token.isUnresolved(arn)) {
          return "token";
        } else {
          throw new Error(`ARNs must start with "arn:" and have at least 6 components: ${arn}`);
        }
      }
      const components = arn.split(":");
      const partition = components.length > 1 ? components[1] : void 0;
      if (!partition) {
        throw new Error("The `partition` component (2nd component) of an ARN is required: " + arn);
      }
      const service = components.length > 2 ? components[2] : void 0;
      if (!service) {
        throw new Error("The `service` component (3rd component) of an ARN is required: " + arn);
      }
      const resource = components.length > 5 ? components[5] : void 0;
      if (!resource) {
        throw new Error("The `resource` component (6th component) of an ARN is required: " + arn);
      }
      return components;
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/private/cfn-reference.js
var require_cfn_reference = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/private/cfn-reference.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnReference = exports2.ReferenceRendering = void 0;
    var reference_1 = require_reference();
    var CFN_REFERENCE_SYMBOL = Symbol.for("@aws-cdk/core.CfnReference");
    var ReferenceRendering;
    (function(ReferenceRendering2) {
      ReferenceRendering2[ReferenceRendering2["FN_SUB"] = 0] = "FN_SUB";
      ReferenceRendering2[ReferenceRendering2["GET_ATT_STRING"] = 1] = "GET_ATT_STRING";
    })(ReferenceRendering = exports2.ReferenceRendering || (exports2.ReferenceRendering = {}));
    var CfnReference = class extends reference_1.Reference {
      constructor(value, displayName, target) {
        super(value, target, displayName);
        this.replacementTokens = new Map();
        this.targetStack = stack_1.Stack.of(target);
        Object.defineProperty(this, CFN_REFERENCE_SYMBOL, { value: true });
      }
      static isCfnReference(x) {
        return CFN_REFERENCE_SYMBOL in x;
      }
      static for(target, attribute, refRender) {
        return CfnReference.singletonReference(target, attribute, refRender, () => {
          const cfnIntrinsic = refRender === ReferenceRendering.FN_SUB ? "${" + target.logicalId + (attribute === "Ref" ? "" : `.${attribute}`) + "}" : attribute === "Ref" ? { Ref: target.logicalId } : {
            "Fn::GetAtt": refRender === ReferenceRendering.GET_ATT_STRING ? `${target.logicalId}.${attribute}` : [target.logicalId, attribute]
          };
          return new CfnReference(cfnIntrinsic, attribute, target);
        });
      }
      static forPseudo(pseudoName, scope) {
        return CfnReference.singletonReference(scope, `Pseudo:${pseudoName}`, void 0, () => {
          const cfnIntrinsic = { Ref: pseudoName };
          return new CfnReference(cfnIntrinsic, pseudoName, scope);
        });
      }
      static singletonReference(target, attribKey, refRender, fresh) {
        let attribs = CfnReference.referenceTable.get(target);
        if (!attribs) {
          attribs = new Map();
          CfnReference.referenceTable.set(target, attribs);
        }
        let cacheKey = attribKey;
        switch (refRender) {
          case ReferenceRendering.FN_SUB:
            cacheKey += "Fn::Sub";
            break;
          case ReferenceRendering.GET_ATT_STRING:
            cacheKey += "Fn::GetAtt::String";
            break;
        }
        let ref = attribs.get(cacheKey);
        if (!ref) {
          ref = fresh();
          attribs.set(cacheKey, ref);
        }
        return ref;
      }
      resolve(context) {
        const consumingStack = stack_1.Stack.of(context.scope);
        const token = this.replacementTokens.get(consumingStack);
        if (token) {
          return token.resolve(context);
        } else {
          return super.resolve(context);
        }
      }
      hasValueForStack(stack) {
        if (stack === this.targetStack) {
          return true;
        }
        return this.replacementTokens.has(stack);
      }
      assignValueForStack(stack, value) {
        if (stack === this.targetStack) {
          throw new Error("cannot assign a value for the same stack");
        }
        if (this.hasValueForStack(stack)) {
          throw new Error("Cannot assign a reference value twice to the same stack. Use hasValueForStack to check first");
        }
        this.replacementTokens.set(stack, value);
      }
      toString() {
        return token_1.Token.asString(this, {
          displayHint: `${this.target.node.id}.${this.displayName}`
        });
      }
    };
    exports2.CfnReference = CfnReference;
    CfnReference.referenceTable = new Map();
    var stack_1 = require_stack();
    var token_1 = require_token();
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/cfn-pseudo.js
var require_cfn_pseudo = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/cfn-pseudo.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ScopedAws = exports2.Aws = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cfn_reference_1 = require_cfn_reference();
    var token_1 = require_token();
    var AWS_ACCOUNTID = "AWS::AccountId";
    var AWS_URLSUFFIX = "AWS::URLSuffix";
    var AWS_NOTIFICATIONARNS = "AWS::NotificationARNs";
    var AWS_PARTITION = "AWS::Partition";
    var AWS_REGION = "AWS::Region";
    var AWS_STACKID = "AWS::StackId";
    var AWS_STACKNAME = "AWS::StackName";
    var AWS_NOVALUE = "AWS::NoValue";
    var Aws = class {
      constructor() {
      }
    };
    exports2.Aws = Aws;
    _a = JSII_RTTI_SYMBOL_1;
    Aws[_a] = { fqn: "@aws-cdk/core.Aws", version: "1.132.0" };
    Aws.ACCOUNT_ID = pseudoString(AWS_ACCOUNTID);
    Aws.URL_SUFFIX = pseudoString(AWS_URLSUFFIX);
    Aws.NOTIFICATION_ARNS = token_1.Token.asList({ Ref: AWS_NOTIFICATIONARNS }, { displayHint: AWS_NOTIFICATIONARNS });
    Aws.PARTITION = pseudoString(AWS_PARTITION);
    Aws.REGION = pseudoString(AWS_REGION);
    Aws.STACK_ID = pseudoString(AWS_STACKID);
    Aws.STACK_NAME = pseudoString(AWS_STACKNAME);
    Aws.NO_VALUE = pseudoString(AWS_NOVALUE);
    var ScopedAws = class {
      constructor(scope) {
        this.scope = scope;
      }
      get accountId() {
        return this.asString(AWS_ACCOUNTID);
      }
      get urlSuffix() {
        return this.asString(AWS_URLSUFFIX);
      }
      get notificationArns() {
        return token_1.Token.asList(cfn_reference_1.CfnReference.forPseudo(AWS_NOTIFICATIONARNS, this.scope), {
          displayHint: AWS_NOTIFICATIONARNS
        });
      }
      get partition() {
        return this.asString(AWS_PARTITION);
      }
      get region() {
        return this.asString(AWS_REGION);
      }
      get stackId() {
        return this.asString(AWS_STACKID);
      }
      get stackName() {
        return this.asString(AWS_STACKNAME);
      }
      asString(name) {
        return token_1.Token.asString(cfn_reference_1.CfnReference.forPseudo(name, this.scope), { displayHint: name });
      }
    };
    exports2.ScopedAws = ScopedAws;
    _b = JSII_RTTI_SYMBOL_1;
    ScopedAws[_b] = { fqn: "@aws-cdk/core.ScopedAws", version: "1.132.0" };
    function pseudoString(name) {
      return token_1.Token.asString({ Ref: name }, { displayHint: name.replace("::", ".") });
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/context-provider.js
var require_context_provider = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/context-provider.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ContextProvider = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cxapi = require_lib5();
    var constructs_1 = require_lib4();
    var annotations_1 = require_annotations();
    var stack_1 = require_stack();
    var token_1 = require_token();
    var ContextProvider = class {
      constructor() {
      }
      static getKey(scope, options) {
        const stack = stack_1.Stack.of(scope);
        const props = __spreadValues({
          account: stack.account,
          region: stack.region
        }, options.props || {});
        if (Object.values(props).find((x) => token_1.Token.isUnresolved(x))) {
          throw new Error(`Cannot determine scope for context provider ${options.provider}.
This usually happens when one or more of the provider props have unresolved tokens`);
        }
        const propStrings = propsToArray(props);
        return {
          key: `${options.provider}:${propStrings.join(":")}`,
          props
        };
      }
      static getValue(scope, options) {
        const stack = stack_1.Stack.of(scope);
        if (token_1.Token.isUnresolved(stack.account) || token_1.Token.isUnresolved(stack.region)) {
          throw new Error(`Cannot retrieve value from context provider ${options.provider} since account/region are not specified at the stack level. Configure "env" with an account and region when you define your stack.See https://docs.aws.amazon.com/cdk/latest/guide/environments.html for more details.`);
        }
        const { key, props } = this.getKey(scope, options);
        const value = constructs_1.Node.of(scope).tryGetContext(key);
        const providerError = extractProviderError(value);
        if (value === void 0 || providerError !== void 0) {
          stack.reportMissingContext({
            key,
            provider: options.provider,
            props
          });
          if (providerError !== void 0) {
            annotations_1.Annotations.of(scope).addError(providerError);
          }
          return { value: options.dummyValue };
        }
        return { value };
      }
    };
    exports2.ContextProvider = ContextProvider;
    _a = JSII_RTTI_SYMBOL_1;
    ContextProvider[_a] = { fqn: "@aws-cdk/core.ContextProvider", version: "1.132.0" };
    function extractProviderError(value) {
      if (typeof value === "object" && value !== null) {
        return value[cxapi.PROVIDER_ERROR_KEY];
      }
      return void 0;
    }
    function colonQuote(xs) {
      return xs.replace("$", "$$").replace(":", "$:");
    }
    function propsToArray(props, keyPrefix = "") {
      const ret = [];
      for (const key of Object.keys(props)) {
        if (props[key] === void 0) {
          continue;
        }
        switch (typeof props[key]) {
          case "object": {
            ret.push(...propsToArray(props[key], `${keyPrefix}${key}.`));
            break;
          }
          case "string": {
            ret.push(`${keyPrefix}${key}=${colonQuote(props[key])}`);
            break;
          }
          default: {
            ret.push(`${keyPrefix}${key}=${JSON.stringify(props[key])}`);
            break;
          }
        }
      }
      ret.sort();
      return ret;
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/feature-flags.js
var require_feature_flags = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/feature-flags.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FeatureFlags = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cxapi = require_lib5();
    var FeatureFlags = class {
      constructor(construct) {
        this.construct = construct;
      }
      static of(scope) {
        return new FeatureFlags(scope);
      }
      isEnabled(featureFlag) {
        const context = this.construct.node.tryGetContext(featureFlag);
        if (cxapi.FUTURE_FLAGS_EXPIRED.includes(featureFlag)) {
          if (context !== void 0) {
            throw new Error(`Unsupported feature flag '${featureFlag}'. This flag existed on CDKv1 but has been removed in CDKv2. CDK will now behave as the same as when the flag is enabled.`);
          }
          return true;
        }
        return context !== null && context !== void 0 ? context : cxapi.futureFlagDefault(featureFlag);
      }
    };
    exports2.FeatureFlags = FeatureFlags;
    _a = JSII_RTTI_SYMBOL_1;
    FeatureFlags[_a] = { fqn: "@aws-cdk/core.FeatureFlags", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/private/logical-id.js
var require_logical_id = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/private/logical-id.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LogicalIDs = void 0;
    var LogicalIDs = class {
      constructor() {
        this.renames = {};
        this.reverse = {};
      }
      addRename(oldId, newId) {
        if (oldId in this.renames) {
          throw new Error(`A rename has already been registered for '${oldId}'`);
        }
        this.renames[oldId] = newId;
      }
      applyRename(oldId) {
        let newId = oldId;
        if (oldId in this.renames) {
          newId = this.renames[oldId];
        }
        if (newId in this.reverse && this.reverse[newId] !== oldId) {
          throw new Error(`Two objects have been assigned the same Logical ID: '${this.reverse[newId]}' and '${oldId}' are now both named '${newId}'.`);
        }
        this.reverse[newId] = oldId;
        validateLogicalId(newId);
        return newId;
      }
      assertAllRenamesApplied() {
        const keys = new Set();
        Object.keys(this.renames).forEach(keys.add.bind(keys));
        Object.keys(this.reverse).map((newId) => {
          keys.delete(this.reverse[newId]);
        });
        if (keys.size !== 0) {
          const unusedRenames = Array.from(keys.values());
          throw new Error(`The following Logical IDs were attempted to be renamed, but not found: ${unusedRenames.join(", ")}`);
        }
      }
    };
    exports2.LogicalIDs = LogicalIDs;
    var VALID_LOGICALID_REGEX = /^[A-Za-z][A-Za-z0-9]{1,254}$/;
    function validateLogicalId(logicalId) {
      if (!VALID_LOGICALID_REGEX.test(logicalId)) {
        throw new Error(`Logical ID must adhere to the regular expression: ${VALID_LOGICALID_REGEX.toString()}, got '${logicalId}'`);
      }
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/cfn-output.js
var require_cfn_output = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/cfn-output.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnOutput = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cfn_element_1 = require_cfn_element();
    var CfnOutput = class extends cfn_element_1.CfnElement {
      constructor(scope, id, props) {
        super(scope, id);
        if (props.value === void 0) {
          throw new Error(`Missing value for CloudFormation output at path "${this.node.path}"`);
        }
        this._description = props.description;
        this._value = props.value;
        this._condition = props.condition;
        this._exportName = props.exportName;
      }
      get description() {
        return this._description;
      }
      set description(description) {
        this._description = description;
      }
      get value() {
        return this._value;
      }
      set value(value) {
        this._value = value;
      }
      get condition() {
        return this._condition;
      }
      set condition(condition) {
        this._condition = condition;
      }
      get exportName() {
        return this._exportName;
      }
      set exportName(exportName) {
        this._exportName = exportName;
      }
      get importValue() {
        return cfn_fn_1.Fn.importValue(lazy_1.Lazy.stringValue({
          produce: (ctx) => {
            if (stack_1.Stack.of(ctx.scope) === this.stack) {
              throw new Error(`'importValue' property of '${this.node.path}' should only be used in a different Stack`);
            }
            if (!this._exportName) {
              throw new Error(`Add an exportName to the CfnOutput at '${this.node.path}' in order to use 'output.importValue'`);
            }
            return this._exportName;
          }
        }));
      }
      _toCloudFormation() {
        return {
          Outputs: {
            [this.logicalId]: {
              Description: this._description,
              Value: this._value,
              Export: this._exportName != null ? { Name: this._exportName } : void 0,
              Condition: this._condition ? this._condition.logicalId : void 0
            }
          }
        };
      }
      validate() {
        if (this._exportName && !token_1.Token.isUnresolved(this._exportName) && this._exportName.length > 255) {
          return [`Export name cannot exceed 255 characters (got ${this._exportName.length} characters)`];
        }
        return [];
      }
    };
    exports2.CfnOutput = CfnOutput;
    _a = JSII_RTTI_SYMBOL_1;
    CfnOutput[_a] = { fqn: "@aws-cdk/core.CfnOutput", version: "1.132.0" };
    var cfn_fn_1 = require_cfn_fn();
    var lazy_1 = require_lazy();
    var stack_1 = require_stack();
    var token_1 = require_token();
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/deps.js
var require_deps = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/deps.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.addDependency = void 0;
    var stack_1 = require_stack();
    var stage_1 = require_stage();
    var util_1 = require_util();
    function addDependency(source, target, reason) {
      if (source === target) {
        return;
      }
      const sourceStack = stack_1.Stack.of(source);
      const targetStack = stack_1.Stack.of(target);
      const sourceStage = stage_1.Stage.of(sourceStack);
      const targetStage = stage_1.Stage.of(targetStack);
      if (sourceStage !== targetStage) {
        throw new Error(`You cannot add a dependency from '${source.node.path}' (in ${describeStage(sourceStage)}) to '${target.node.path}' (in ${describeStage(targetStage)}): dependency cannot cross stage boundaries`);
      }
      const sourcePath = util_1.pathToTopLevelStack(sourceStack);
      const targetPath = util_1.pathToTopLevelStack(targetStack);
      const commonStack = util_1.findLastCommonElement(sourcePath, targetPath);
      if (!commonStack) {
        const topLevelSource = sourcePath[0];
        const topLevelTarget = targetPath[0];
        topLevelSource._addAssemblyDependency(topLevelTarget, reason);
        return;
      }
      if (commonStack === source) {
        return;
      }
      if (commonStack === target) {
        throw new Error(`Nested stack '${sourceStack.node.path}' cannot depend on a parent stack '${targetStack.node.path}': ${reason}`);
      }
      const sourceResource = resourceInCommonStackFor(source);
      const targetResource = resourceInCommonStackFor(target);
      sourceResource._addResourceDependency(targetResource);
      function resourceInCommonStackFor(element) {
        const resource = stack_1.Stack.isStack(element) ? element.nestedStackResource : element;
        if (!resource) {
          throw new Error("assertion failure");
        }
        const resourceStack = stack_1.Stack.of(resource);
        if (commonStack === resourceStack) {
          return resource;
        }
        return resourceInCommonStackFor(resourceStack);
      }
    }
    exports2.addDependency = addDependency;
    function describeStage(assembly) {
      if (!assembly) {
        return "an unrooted construct tree";
      }
      if (!assembly.parentStage) {
        return "the App";
      }
      return `Stage '${assembly.node.path}'`;
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/stack-synthesizers/types.js
var require_types = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/stack-synthesizers/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/cfn-parameter.js
var require_cfn_parameter = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/cfn-parameter.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnParameter = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cfn_element_1 = require_cfn_element();
    var cfn_reference_1 = require_cfn_reference();
    var token_1 = require_token();
    var CfnParameter = class extends cfn_element_1.CfnElement {
      constructor(scope, id, props = {}) {
        super(scope, id);
        this._type = props.type || "String";
        this._default = props.default;
        this._allowedPattern = props.allowedPattern;
        this._allowedValues = props.allowedValues;
        this._constraintDescription = props.constraintDescription;
        this._description = props.description;
        this._maxLength = props.maxLength;
        this._maxValue = props.maxValue;
        this._minLength = props.minLength;
        this._minValue = props.minValue;
        this._noEcho = props.noEcho;
      }
      get type() {
        return this._type;
      }
      set type(type) {
        this._type = type;
      }
      get default() {
        return this._default;
      }
      set default(value) {
        this._default = value;
      }
      get allowedPattern() {
        return this._allowedPattern;
      }
      set allowedPattern(pattern) {
        this._allowedPattern = pattern;
      }
      get allowedValues() {
        return this._allowedValues;
      }
      set allowedValues(values) {
        this._allowedValues = values;
      }
      get constraintDescription() {
        return this._constraintDescription;
      }
      set constraintDescription(desc) {
        this._constraintDescription = desc;
      }
      get description() {
        return this._description;
      }
      set description(desc) {
        this._description = desc;
      }
      get maxLength() {
        return this._maxLength;
      }
      set maxLength(len) {
        this._maxLength = len;
      }
      get minLength() {
        return this._minLength;
      }
      set minLength(len) {
        this._minLength = len;
      }
      get maxValue() {
        return this._maxValue;
      }
      set maxValue(len) {
        this._maxValue = len;
      }
      get minValue() {
        return this._minValue;
      }
      set minValue(len) {
        this._minValue = len;
      }
      get noEcho() {
        return !!this._noEcho;
      }
      set noEcho(echo) {
        this._noEcho = echo;
      }
      get value() {
        return cfn_reference_1.CfnReference.for(this, "Ref");
      }
      get valueAsString() {
        if (!isStringType(this.type) && !isNumberType(this.type)) {
          throw new Error(`Parameter type (${this.type}) is not a string or number type`);
        }
        return token_1.Token.asString(this.value);
      }
      get valueAsList() {
        if (!isListType(this.type)) {
          throw new Error(`Parameter type (${this.type}) is not a string list type`);
        }
        return token_1.Token.asList(this.value);
      }
      get valueAsNumber() {
        if (!isNumberType(this.type)) {
          throw new Error(`Parameter type (${this.type}) is not a number type`);
        }
        return token_1.Token.asNumber(this.value);
      }
      _toCloudFormation() {
        return {
          Parameters: {
            [this.logicalId]: {
              Type: this.type,
              Default: this.default,
              AllowedPattern: this.allowedPattern,
              AllowedValues: this.allowedValues,
              ConstraintDescription: this.constraintDescription,
              Description: this.description,
              MaxLength: this.maxLength,
              MaxValue: this.maxValue,
              MinLength: this.minLength,
              MinValue: this.minValue,
              NoEcho: this._noEcho
            }
          }
        };
      }
      resolve(_context) {
        return this.value;
      }
    };
    exports2.CfnParameter = CfnParameter;
    _a = JSII_RTTI_SYMBOL_1;
    CfnParameter[_a] = { fqn: "@aws-cdk/core.CfnParameter", version: "1.132.0" };
    function isListType(type) {
      return type.indexOf("List<") >= 0 || type.indexOf("CommaDelimitedList") >= 0;
    }
    function isNumberType(type) {
      return type === "Number";
    }
    function isStringType(type) {
      return !isListType(type) && !isNumberType(type);
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/cfn-rule.js
var require_cfn_rule = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/cfn-rule.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnRule = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cfn_element_1 = require_cfn_element();
    var util_1 = require_util();
    var CfnRule = class extends cfn_element_1.CfnRefElement {
      constructor(scope, id, props) {
        super(scope, id);
        this.ruleCondition = props && props.ruleCondition;
        this.assertions = props && props.assertions;
      }
      addAssertion(condition, description) {
        if (!this.assertions) {
          this.assertions = [];
        }
        this.assertions.push({
          assert: condition,
          assertDescription: description
        });
      }
      _toCloudFormation() {
        return {
          Rules: {
            [this.logicalId]: {
              RuleCondition: this.ruleCondition,
              Assertions: util_1.capitalizePropertyNames(this, this.assertions)
            }
          }
        };
      }
    };
    exports2.CfnRule = CfnRule;
    _a = JSII_RTTI_SYMBOL_1;
    CfnRule[_a] = { fqn: "@aws-cdk/core.CfnRule", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/stack-synthesizers/_shared.js
var require_shared = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/stack-synthesizers/_shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.assertBound = exports2.contentHash = exports2.addStackArtifactToAssembly = void 0;
    var crypto = require("crypto");
    var cxschema = require_lib3();
    var construct_compat_1 = require_construct_compat();
    var stack_1 = require_stack();
    function addStackArtifactToAssembly(session, stack, stackProps, additionalStackDependencies) {
      if (stack.tags.hasTags()) {
        stack.node.addMetadata(cxschema.ArtifactMetadataEntryType.STACK_TAGS, stack.tags.renderTags());
      }
      const deps = [
        ...stack.dependencies.map((s) => s.artifactId),
        ...additionalStackDependencies
      ];
      const meta = collectStackMetadata(stack);
      const stackNameProperty = stack.stackName === stack.artifactId ? {} : { stackName: stack.stackName };
      const properties = __spreadValues(__spreadValues({
        templateFile: stack.templateFile,
        terminationProtection: stack.terminationProtection,
        tags: nonEmptyDict(stack.tags.tagValues()),
        validateOnSynth: session.validateOnSynth
      }, stackProps), stackNameProperty);
      session.assembly.addArtifact(stack.artifactId, {
        type: cxschema.ArtifactType.AWS_CLOUDFORMATION_STACK,
        environment: stack.environment,
        properties,
        dependencies: deps.length > 0 ? deps : void 0,
        metadata: Object.keys(meta).length > 0 ? meta : void 0,
        displayName: stack.node.path
      });
    }
    exports2.addStackArtifactToAssembly = addStackArtifactToAssembly;
    function collectStackMetadata(stack) {
      const output = {};
      visit(stack);
      return output;
      function visit(node) {
        const parent = findParentStack(node);
        if (parent !== stack) {
          return;
        }
        if (node.node.metadata.length > 0) {
          output[construct_compat_1.ConstructNode.PATH_SEP + node.node.path] = node.node.metadata.map((md) => stack.resolve(md));
        }
        for (const child of node.node.children) {
          visit(child);
        }
      }
      function findParentStack(node) {
        if (node instanceof stack_1.Stack && node.nestedStackParent === void 0) {
          return node;
        }
        if (!node.node.scope) {
          return void 0;
        }
        return findParentStack(node.node.scope);
      }
    }
    function contentHash(content) {
      return crypto.createHash("sha256").update(content).digest("hex");
    }
    exports2.contentHash = contentHash;
    function assertBound(x) {
      if (x === null && x === void 0) {
        throw new Error("You must call bindStack() first");
      }
    }
    exports2.assertBound = assertBound;
    function nonEmptyDict(xs) {
      return Object.keys(xs).length > 0 ? xs : void 0;
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/stack-synthesizers/stack-synthesizer.js
var require_stack_synthesizer = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/stack-synthesizers/stack-synthesizer.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StackSynthesizer = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var _shared_1 = require_shared();
    var StackSynthesizer = class {
      synthesizeStackTemplate(stack, session) {
        stack._synthesizeTemplate(session);
      }
      emitStackArtifact(stack, session, options = {}) {
        var _b;
        _shared_1.addStackArtifactToAssembly(session, stack, options !== null && options !== void 0 ? options : {}, (_b = options.additionalDependencies) !== null && _b !== void 0 ? _b : []);
      }
    };
    exports2.StackSynthesizer = StackSynthesizer;
    _a = JSII_RTTI_SYMBOL_1;
    StackSynthesizer[_a] = { fqn: "@aws-cdk/core.StackSynthesizer", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/stack-synthesizers/default-synthesizer.js
var require_default_synthesizer = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/stack-synthesizers/default-synthesizer.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DefaultStackSynthesizer = exports2.BOOTSTRAP_QUALIFIER_CONTEXT = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var fs = require("fs");
    var path = require("path");
    var cxschema = require_lib3();
    var cxapi = require_lib5();
    var assets_1 = require_assets3();
    var cfn_fn_1 = require_cfn_fn();
    var cfn_parameter_1 = require_cfn_parameter();
    var cfn_rule_1 = require_cfn_rule();
    var token_1 = require_token();
    var _shared_1 = require_shared();
    var stack_synthesizer_1 = require_stack_synthesizer();
    exports2.BOOTSTRAP_QUALIFIER_CONTEXT = "@aws-cdk/core:bootstrapQualifier";
    var MIN_BOOTSTRAP_STACK_VERSION = 6;
    var DefaultStackSynthesizer = class extends stack_synthesizer_1.StackSynthesizer {
      constructor(props = {}) {
        super();
        this.props = props;
        this.files = {};
        this.dockerImages = {};
        for (const key in props) {
          if (props.hasOwnProperty(key)) {
            validateNoToken(key);
          }
        }
        function validateNoToken(key) {
          const prop = props[key];
          if (typeof prop === "string" && token_1.Token.isUnresolved(prop)) {
            throw new Error(`DefaultSynthesizer property '${key}' cannot contain tokens; only the following placeholder strings are allowed: ` + [
              "${Qualifier}",
              cxapi.EnvironmentPlaceholders.CURRENT_REGION,
              cxapi.EnvironmentPlaceholders.CURRENT_ACCOUNT,
              cxapi.EnvironmentPlaceholders.CURRENT_PARTITION
            ].join(", "));
          }
        }
      }
      bind(stack) {
        var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        if (this._stack !== void 0) {
          throw new Error("A StackSynthesizer can only be used for one Stack: create a new instance to use with a different Stack");
        }
        this._stack = stack;
        const qualifier = (_c = (_b = this.props.qualifier) !== null && _b !== void 0 ? _b : stack.node.tryGetContext(exports2.BOOTSTRAP_QUALIFIER_CONTEXT)) !== null && _c !== void 0 ? _c : DefaultStackSynthesizer.DEFAULT_QUALIFIER;
        this.qualifier = qualifier;
        const specialize = (s) => {
          s = replaceAll(s, "${Qualifier}", qualifier);
          return cxapi.EnvironmentPlaceholders.replace(s, {
            region: resolvedOr(stack.region, cxapi.EnvironmentPlaceholders.CURRENT_REGION),
            accountId: resolvedOr(stack.account, cxapi.EnvironmentPlaceholders.CURRENT_ACCOUNT),
            partition: cxapi.EnvironmentPlaceholders.CURRENT_PARTITION
          });
        };
        this.bucketName = specialize((_d = this.props.fileAssetsBucketName) !== null && _d !== void 0 ? _d : DefaultStackSynthesizer.DEFAULT_FILE_ASSETS_BUCKET_NAME);
        this.repositoryName = specialize((_e = this.props.imageAssetsRepositoryName) !== null && _e !== void 0 ? _e : DefaultStackSynthesizer.DEFAULT_IMAGE_ASSETS_REPOSITORY_NAME);
        this._deployRoleArn = specialize((_f = this.props.deployRoleArn) !== null && _f !== void 0 ? _f : DefaultStackSynthesizer.DEFAULT_DEPLOY_ROLE_ARN);
        this._cloudFormationExecutionRoleArn = specialize((_g = this.props.cloudFormationExecutionRole) !== null && _g !== void 0 ? _g : DefaultStackSynthesizer.DEFAULT_CLOUDFORMATION_ROLE_ARN);
        this.fileAssetPublishingRoleArn = specialize((_h = this.props.fileAssetPublishingRoleArn) !== null && _h !== void 0 ? _h : DefaultStackSynthesizer.DEFAULT_FILE_ASSET_PUBLISHING_ROLE_ARN);
        this.imageAssetPublishingRoleArn = specialize((_j = this.props.imageAssetPublishingRoleArn) !== null && _j !== void 0 ? _j : DefaultStackSynthesizer.DEFAULT_IMAGE_ASSET_PUBLISHING_ROLE_ARN);
        this.lookupRoleArn = specialize((_k = this.props.lookupRoleArn) !== null && _k !== void 0 ? _k : DefaultStackSynthesizer.DEFAULT_LOOKUP_ROLE_ARN);
        this.bucketPrefix = specialize((_l = this.props.bucketPrefix) !== null && _l !== void 0 ? _l : DefaultStackSynthesizer.DEFAULT_FILE_ASSET_PREFIX);
        this.dockerTagPrefix = specialize((_m = this.props.dockerTagPrefix) !== null && _m !== void 0 ? _m : DefaultStackSynthesizer.DEFAULT_DOCKER_ASSET_PREFIX);
        this.bootstrapStackVersionSsmParameter = replaceAll((_o = this.props.bootstrapStackVersionSsmParameter) !== null && _o !== void 0 ? _o : DefaultStackSynthesizer.DEFAULT_BOOTSTRAP_STACK_VERSION_SSM_PARAMETER, "${Qualifier}", qualifier);
      }
      addFileAsset(asset) {
        _shared_1.assertBound(this.stack);
        _shared_1.assertBound(this.bucketName);
        validateFileAssetSource(asset);
        const extension = asset.fileName != void 0 ? path.extname(asset.fileName) : "";
        const objectKey = this.bucketPrefix + asset.sourceHash + (asset.packaging === assets_1.FileAssetPackaging.ZIP_DIRECTORY ? ".zip" : extension);
        this.files[asset.sourceHash] = {
          source: {
            path: asset.fileName,
            executable: asset.executable,
            packaging: asset.packaging
          },
          destinations: {
            [this.manifestEnvName]: {
              bucketName: this.bucketName,
              objectKey,
              region: resolvedOr(this.stack.region, void 0),
              assumeRoleArn: this.fileAssetPublishingRoleArn,
              assumeRoleExternalId: this.props.fileAssetPublishingExternalId
            }
          }
        };
        const { region, urlSuffix } = stackLocationOrInstrinsics(this.stack);
        const httpUrl = cfnify(`https://s3.${region}.${urlSuffix}/${this.bucketName}/${objectKey}`);
        const s3ObjectUrl = cfnify(`s3://${this.bucketName}/${objectKey}`);
        return {
          bucketName: cfnify(this.bucketName),
          objectKey,
          httpUrl,
          s3ObjectUrl,
          s3Url: httpUrl
        };
      }
      addDockerImageAsset(asset) {
        _shared_1.assertBound(this.stack);
        _shared_1.assertBound(this.repositoryName);
        validateDockerImageAssetSource(asset);
        const imageTag = this.dockerTagPrefix + asset.sourceHash;
        this.dockerImages[asset.sourceHash] = {
          source: {
            executable: asset.executable,
            directory: asset.directoryName,
            dockerBuildArgs: asset.dockerBuildArgs,
            dockerBuildTarget: asset.dockerBuildTarget,
            dockerFile: asset.dockerFile
          },
          destinations: {
            [this.manifestEnvName]: {
              repositoryName: this.repositoryName,
              imageTag,
              region: resolvedOr(this.stack.region, void 0),
              assumeRoleArn: this.imageAssetPublishingRoleArn,
              assumeRoleExternalId: this.props.imageAssetPublishingExternalId
            }
          }
        };
        const { account, region, urlSuffix } = stackLocationOrInstrinsics(this.stack);
        return {
          repositoryName: cfnify(this.repositoryName),
          imageUri: cfnify(`${account}.dkr.ecr.${region}.${urlSuffix}/${this.repositoryName}:${imageTag}`)
        };
      }
      synthesizeStackTemplate(stack, session) {
        stack._synthesizeTemplate(session, this.lookupRoleArn);
      }
      synthesize(session) {
        var _b;
        _shared_1.assertBound(this.stack);
        _shared_1.assertBound(this.qualifier);
        if ((_b = this.props.generateBootstrapVersionRule) !== null && _b !== void 0 ? _b : true) {
          addBootstrapVersionRule(this.stack, MIN_BOOTSTRAP_STACK_VERSION, this.bootstrapStackVersionSsmParameter);
        }
        this.synthesizeStackTemplate(this.stack, session);
        const templateManifestUrl = this.addStackTemplateToAssetManifest(session);
        const artifactId = this.writeAssetManifest(session);
        this.emitStackArtifact(this.stack, session, {
          assumeRoleExternalId: this.props.deployRoleExternalId,
          assumeRoleArn: this._deployRoleArn,
          cloudFormationExecutionRoleArn: this._cloudFormationExecutionRoleArn,
          stackTemplateAssetObjectUrl: templateManifestUrl,
          requiresBootstrapStackVersion: MIN_BOOTSTRAP_STACK_VERSION,
          bootstrapStackVersionSsmParameter: this.bootstrapStackVersionSsmParameter,
          additionalDependencies: [artifactId]
        });
      }
      get deployRoleArn() {
        if (!this._deployRoleArn) {
          throw new Error("deployRoleArn getter can only be called after the synthesizer has been bound to a Stack");
        }
        return this._deployRoleArn;
      }
      get cloudFormationExecutionRoleArn() {
        if (!this._cloudFormationExecutionRoleArn) {
          throw new Error("cloudFormationExecutionRoleArn getter can only be called after the synthesizer has been bound to a Stack");
        }
        return this._cloudFormationExecutionRoleArn;
      }
      get stack() {
        return this._stack;
      }
      addStackTemplateToAssetManifest(session) {
        _shared_1.assertBound(this.stack);
        const templatePath = path.join(session.assembly.outdir, this.stack.templateFile);
        const template = fs.readFileSync(templatePath, { encoding: "utf-8" });
        const sourceHash = _shared_1.contentHash(template);
        this.addFileAsset({
          fileName: this.stack.templateFile,
          packaging: assets_1.FileAssetPackaging.FILE,
          sourceHash
        });
        const extension = path.extname(this.stack.templateFile);
        return `s3://${this.bucketName}/${this.bucketPrefix}${sourceHash}${extension}`;
      }
      writeAssetManifest(session) {
        _shared_1.assertBound(this.stack);
        const artifactId = `${this.stack.artifactId}.assets`;
        const manifestFile = `${artifactId}.json`;
        const outPath = path.join(session.assembly.outdir, manifestFile);
        const manifest = {
          version: cxschema.Manifest.version(),
          files: this.files,
          dockerImages: this.dockerImages
        };
        fs.writeFileSync(outPath, JSON.stringify(manifest, void 0, 2));
        session.assembly.addArtifact(artifactId, {
          type: cxschema.ArtifactType.ASSET_MANIFEST,
          properties: {
            file: manifestFile,
            requiresBootstrapStackVersion: MIN_BOOTSTRAP_STACK_VERSION,
            bootstrapStackVersionSsmParameter: this.bootstrapStackVersionSsmParameter
          }
        });
        return artifactId;
      }
      get manifestEnvName() {
        _shared_1.assertBound(this.stack);
        return [
          resolvedOr(this.stack.account, "current_account"),
          resolvedOr(this.stack.region, "current_region")
        ].join("-");
      }
    };
    exports2.DefaultStackSynthesizer = DefaultStackSynthesizer;
    _a = JSII_RTTI_SYMBOL_1;
    DefaultStackSynthesizer[_a] = { fqn: "@aws-cdk/core.DefaultStackSynthesizer", version: "1.132.0" };
    DefaultStackSynthesizer.DEFAULT_QUALIFIER = "hnb659fds";
    DefaultStackSynthesizer.DEFAULT_CLOUDFORMATION_ROLE_ARN = "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-${Qualifier}-cfn-exec-role-${AWS::AccountId}-${AWS::Region}";
    DefaultStackSynthesizer.DEFAULT_DEPLOY_ROLE_ARN = "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-${Qualifier}-deploy-role-${AWS::AccountId}-${AWS::Region}";
    DefaultStackSynthesizer.DEFAULT_FILE_ASSET_PUBLISHING_ROLE_ARN = "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-${Qualifier}-file-publishing-role-${AWS::AccountId}-${AWS::Region}";
    DefaultStackSynthesizer.DEFAULT_IMAGE_ASSET_PUBLISHING_ROLE_ARN = "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-${Qualifier}-image-publishing-role-${AWS::AccountId}-${AWS::Region}";
    DefaultStackSynthesizer.DEFAULT_LOOKUP_ROLE_ARN = "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-${Qualifier}-lookup-role-${AWS::AccountId}-${AWS::Region}";
    DefaultStackSynthesizer.DEFAULT_IMAGE_ASSETS_REPOSITORY_NAME = "cdk-${Qualifier}-container-assets-${AWS::AccountId}-${AWS::Region}";
    DefaultStackSynthesizer.DEFAULT_FILE_ASSETS_BUCKET_NAME = "cdk-${Qualifier}-assets-${AWS::AccountId}-${AWS::Region}";
    DefaultStackSynthesizer.DEFAULT_FILE_ASSET_KEY_ARN_EXPORT_NAME = "CdkBootstrap-${Qualifier}-FileAssetKeyArn";
    DefaultStackSynthesizer.DEFAULT_FILE_ASSET_PREFIX = "";
    DefaultStackSynthesizer.DEFAULT_DOCKER_ASSET_PREFIX = "";
    DefaultStackSynthesizer.DEFAULT_BOOTSTRAP_STACK_VERSION_SSM_PARAMETER = "/cdk-bootstrap/${Qualifier}/version";
    function resolvedOr(x, def) {
      return token_1.Token.isUnresolved(x) ? def : x;
    }
    function replaceAll(s, search, replace) {
      return s.split(search).join(replace);
    }
    function cfnify(s) {
      return s.indexOf("${") > -1 ? cfn_fn_1.Fn.sub(s) : s;
    }
    function stackLocationOrInstrinsics(stack) {
      return {
        account: resolvedOr(stack.account, "${AWS::AccountId}"),
        region: resolvedOr(stack.region, "${AWS::Region}"),
        urlSuffix: resolvedOr(stack.urlSuffix, "${AWS::URLSuffix}")
      };
    }
    function addBootstrapVersionRule(stack, requiredVersion, bootstrapStackVersionSsmParameter) {
      if (stack.node.tryFindChild("BootstrapVersion")) {
        return;
      }
      const param = new cfn_parameter_1.CfnParameter(stack, "BootstrapVersion", {
        type: "AWS::SSM::Parameter::Value<String>",
        description: `Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. ${cxapi.SSMPARAM_NO_INVALIDATE}`,
        default: bootstrapStackVersionSsmParameter
      });
      const oldVersions = range(1, requiredVersion).map((n) => `${n}`);
      new cfn_rule_1.CfnRule(stack, "CheckBootstrapVersion", {
        assertions: [
          {
            assert: cfn_fn_1.Fn.conditionNot(cfn_fn_1.Fn.conditionContains(oldVersions, param.valueAsString)),
            assertDescription: `CDK bootstrap stack version ${requiredVersion} required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.`
          }
        ]
      });
    }
    function range(startIncl, endExcl) {
      const ret = new Array();
      for (let i = startIncl; i < endExcl; i++) {
        ret.push(i);
      }
      return ret;
    }
    function validateFileAssetSource(asset) {
      if (!!asset.executable === !!asset.fileName) {
        throw new Error(`Exactly one of 'fileName' or 'executable' is required, got: ${JSON.stringify(asset)}`);
      }
      if (!!asset.packaging !== !!asset.fileName) {
        throw new Error(`'packaging' is expected in combination with 'fileName', got: ${JSON.stringify(asset)}`);
      }
    }
    function validateDockerImageAssetSource(asset) {
      if (!!asset.executable === !!asset.directoryName) {
        throw new Error(`Exactly one of 'directoryName' or 'executable' is required, got: ${JSON.stringify(asset)}`);
      }
      check("dockerBuildArgs");
      check("dockerBuildTarget");
      check("dockerFile");
      function check(key) {
        if (asset[key] && !asset.directoryName) {
          throw new Error(`'${key}' is only allowed in combination with 'directoryName', got: ${JSON.stringify(asset)}`);
        }
      }
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/private/asset-parameters.js
var require_asset_parameters = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/private/asset-parameters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FileAssetParameters = void 0;
    var cfn_parameter_1 = require_cfn_parameter();
    var construct_compat_1 = require_construct_compat();
    var FileAssetParameters = class extends construct_compat_1.Construct {
      constructor(scope, id) {
        super(scope, id);
        this.bucketNameParameter = new cfn_parameter_1.CfnParameter(this, "S3Bucket", {
          type: "String",
          description: `S3 bucket for asset "${id}"`
        });
        this.objectKeyParameter = new cfn_parameter_1.CfnParameter(this, "S3VersionKey", {
          type: "String",
          description: `S3 key for asset version "${id}"`
        });
        this.artifactHashParameter = new cfn_parameter_1.CfnParameter(this, "ArtifactHash", {
          description: `Artifact hash for asset "${id}"`,
          type: "String"
        });
      }
    };
    exports2.FileAssetParameters = FileAssetParameters;
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/stack-synthesizers/legacy.js
var require_legacy = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/stack-synthesizers/legacy.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LegacyStackSynthesizer = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cxschema = require_lib3();
    var cxapi = require_lib5();
    var cfn_fn_1 = require_cfn_fn();
    var construct_compat_1 = require_construct_compat();
    var asset_parameters_1 = require_asset_parameters();
    var _shared_1 = require_shared();
    var stack_synthesizer_1 = require_stack_synthesizer();
    var ASSETS_ECR_REPOSITORY_NAME = "aws-cdk/assets";
    var ASSETS_ECR_REPOSITORY_NAME_OVERRIDE_CONTEXT_KEY = "assets-ecr-repository-name";
    var LegacyStackSynthesizer = class extends stack_synthesizer_1.StackSynthesizer {
      constructor() {
        super(...arguments);
        this.cycle = false;
        this.addedImageAssets = new Set();
      }
      bind(stack) {
        if (this.stack !== void 0) {
          throw new Error("A StackSynthesizer can only be used for one Stack: create a new instance to use with a different Stack");
        }
        this.stack = stack;
      }
      addFileAsset(asset) {
        _shared_1.assertBound(this.stack);
        if (this.cycle) {
          return this.doAddFileAsset(asset);
        }
        this.cycle = true;
        try {
          return this.stack.addFileAsset(asset);
        } finally {
          this.cycle = false;
        }
      }
      addDockerImageAsset(asset) {
        _shared_1.assertBound(this.stack);
        if (this.cycle) {
          return this.doAddDockerImageAsset(asset);
        }
        this.cycle = true;
        try {
          return this.stack.addDockerImageAsset(asset);
        } finally {
          this.cycle = false;
        }
      }
      synthesize(session) {
        _shared_1.assertBound(this.stack);
        this.synthesizeStackTemplate(this.stack, session);
        this.emitStackArtifact(this.stack, session);
      }
      doAddDockerImageAsset(asset) {
        var _b, _c;
        _shared_1.assertBound(this.stack);
        const repositoryNameOverride = this.stack.node.tryGetContext(ASSETS_ECR_REPOSITORY_NAME_OVERRIDE_CONTEXT_KEY);
        const repositoryName = (_c = (_b = asset.repositoryName) !== null && _b !== void 0 ? _b : repositoryNameOverride) !== null && _c !== void 0 ? _c : ASSETS_ECR_REPOSITORY_NAME;
        const imageTag = asset.sourceHash;
        const assetId = asset.sourceHash;
        if (!this.addedImageAssets.has(assetId)) {
          if (!asset.directoryName) {
            throw new Error(`LegacyStackSynthesizer does not support this type of file asset: ${JSON.stringify(asset)}`);
          }
          const metadata = {
            repositoryName,
            imageTag,
            id: assetId,
            packaging: "container-image",
            path: asset.directoryName,
            sourceHash: asset.sourceHash,
            buildArgs: asset.dockerBuildArgs,
            target: asset.dockerBuildTarget,
            file: asset.dockerFile
          };
          this.stack.node.addMetadata(cxschema.ArtifactMetadataEntryType.ASSET, metadata);
          this.addedImageAssets.add(assetId);
        }
        return {
          imageUri: `${this.stack.account}.dkr.ecr.${this.stack.region}.${this.stack.urlSuffix}/${repositoryName}:${imageTag}`,
          repositoryName
        };
      }
      doAddFileAsset(asset) {
        _shared_1.assertBound(this.stack);
        let params = this.assetParameters.node.tryFindChild(asset.sourceHash);
        if (!params) {
          params = new asset_parameters_1.FileAssetParameters(this.assetParameters, asset.sourceHash);
          if (!asset.fileName || !asset.packaging) {
            throw new Error(`LegacyStackSynthesizer does not support this type of file asset: ${JSON.stringify(asset)}`);
          }
          const metadata = {
            path: asset.fileName,
            id: asset.sourceHash,
            packaging: asset.packaging,
            sourceHash: asset.sourceHash,
            s3BucketParameter: params.bucketNameParameter.logicalId,
            s3KeyParameter: params.objectKeyParameter.logicalId,
            artifactHashParameter: params.artifactHashParameter.logicalId
          };
          this.stack.node.addMetadata(cxschema.ArtifactMetadataEntryType.ASSET, metadata);
        }
        const bucketName = params.bucketNameParameter.valueAsString;
        const encodedKey = params.objectKeyParameter.valueAsString;
        const s3Prefix = cfn_fn_1.Fn.select(0, cfn_fn_1.Fn.split(cxapi.ASSET_PREFIX_SEPARATOR, encodedKey));
        const s3Filename = cfn_fn_1.Fn.select(1, cfn_fn_1.Fn.split(cxapi.ASSET_PREFIX_SEPARATOR, encodedKey));
        const objectKey = `${s3Prefix}${s3Filename}`;
        const httpUrl = `https://s3.${this.stack.region}.${this.stack.urlSuffix}/${bucketName}/${objectKey}`;
        const s3ObjectUrl = `s3://${bucketName}/${objectKey}`;
        return { bucketName, objectKey, httpUrl, s3ObjectUrl, s3Url: httpUrl };
      }
      get assetParameters() {
        _shared_1.assertBound(this.stack);
        if (!this._assetParameters) {
          this._assetParameters = new construct_compat_1.Construct(this.stack, "AssetParameters");
        }
        return this._assetParameters;
      }
    };
    exports2.LegacyStackSynthesizer = LegacyStackSynthesizer;
    _a = JSII_RTTI_SYMBOL_1;
    LegacyStackSynthesizer[_a] = { fqn: "@aws-cdk/core.LegacyStackSynthesizer", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/stack-synthesizers/bootstrapless-synthesizer.js
var require_bootstrapless_synthesizer = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/stack-synthesizers/bootstrapless-synthesizer.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BootstraplessSynthesizer = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var _shared_1 = require_shared();
    var default_synthesizer_1 = require_default_synthesizer();
    var BootstraplessSynthesizer = class extends default_synthesizer_1.DefaultStackSynthesizer {
      constructor(props) {
        super({
          deployRoleArn: props.deployRoleArn,
          cloudFormationExecutionRole: props.cloudFormationExecutionRoleArn,
          generateBootstrapVersionRule: false
        });
      }
      addFileAsset(_asset) {
        throw new Error("Cannot add assets to a Stack that uses the BootstraplessSynthesizer");
      }
      addDockerImageAsset(_asset) {
        throw new Error("Cannot add assets to a Stack that uses the BootstraplessSynthesizer");
      }
      synthesize(session) {
        _shared_1.assertBound(this.stack);
        this.synthesizeStackTemplate(this.stack, session);
        this.emitStackArtifact(this.stack, session, {
          assumeRoleArn: this.deployRoleArn,
          cloudFormationExecutionRoleArn: this.cloudFormationExecutionRoleArn
        });
      }
    };
    exports2.BootstraplessSynthesizer = BootstraplessSynthesizer;
    _a = JSII_RTTI_SYMBOL_1;
    BootstraplessSynthesizer[_a] = { fqn: "@aws-cdk/core.BootstraplessSynthesizer", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/stack-synthesizers/nested.js
var require_nested = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/stack-synthesizers/nested.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NestedStackSynthesizer = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var _shared_1 = require_shared();
    var stack_synthesizer_1 = require_stack_synthesizer();
    var NestedStackSynthesizer = class extends stack_synthesizer_1.StackSynthesizer {
      constructor(parentDeployment) {
        super();
        this.parentDeployment = parentDeployment;
      }
      bind(stack) {
        if (this.stack !== void 0) {
          throw new Error("A StackSynthesizer can only be used for one Stack: create a new instance to use with a different Stack");
        }
        this.stack = stack;
      }
      addFileAsset(asset) {
        return this.parentDeployment.addFileAsset(asset);
      }
      addDockerImageAsset(asset) {
        return this.parentDeployment.addDockerImageAsset(asset);
      }
      synthesize(session) {
        _shared_1.assertBound(this.stack);
        this.synthesizeStackTemplate(this.stack, session);
      }
    };
    exports2.NestedStackSynthesizer = NestedStackSynthesizer;
    _a = JSII_RTTI_SYMBOL_1;
    NestedStackSynthesizer[_a] = { fqn: "@aws-cdk/core.NestedStackSynthesizer", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/stack-synthesizers/index.js
var require_stack_synthesizers = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/stack-synthesizers/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_types(), exports2);
    __exportStar(require_default_synthesizer(), exports2);
    __exportStar(require_legacy(), exports2);
    __exportStar(require_bootstrapless_synthesizer(), exports2);
    __exportStar(require_nested(), exports2);
    __exportStar(require_stack_synthesizer(), exports2);
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/private/refs.js
var require_refs = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/private/refs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.referenceNestedStackValueInParent = exports2.resolveReferences = void 0;
    var cfn_element_1 = require_cfn_element();
    var cfn_output_1 = require_cfn_output();
    var cfn_parameter_1 = require_cfn_parameter();
    var names_1 = require_names();
    var stack_1 = require_stack();
    var token_1 = require_token();
    var cfn_reference_1 = require_cfn_reference();
    var resolve_1 = require_resolve();
    function resolveReferences(scope) {
      const edges = findAllReferences(scope);
      for (const { source, value } of edges) {
        const consumer = stack_1.Stack.of(source);
        if (!value.hasValueForStack(consumer)) {
          const resolved = resolveValue(consumer, value);
          value.assignValueForStack(consumer, resolved);
        }
      }
    }
    exports2.resolveReferences = resolveReferences;
    function resolveValue(consumer, reference) {
      const producer = stack_1.Stack.of(reference.target);
      if (producer === consumer) {
        return reference;
      }
      if (producer.node.root !== consumer.node.root) {
        throw new Error("Cannot reference across apps. Consuming and producing stacks must be defined within the same CDK app.");
      }
      if (producer.environment !== consumer.environment) {
        throw new Error(`Stack "${consumer.node.path}" cannot consume a cross reference from stack "${producer.node.path}". Cross stack references are only supported for stacks deployed to the same environment or between nested stacks and their parent stack`);
      }
      if (consumer.nestedStackParent && isNested(consumer, producer)) {
        const parameterValue = resolveValue(consumer.nestedStackParent, reference);
        return createNestedStackParameter(consumer, reference, parameterValue);
      }
      if (producer.nested) {
        const outputValue = createNestedStackOutput(producer, reference);
        return resolveValue(consumer, outputValue);
      }
      consumer.addDependency(producer, `${consumer.node.path} -> ${reference.target.node.path}.${reference.displayName}`);
      return createImportValue(reference);
    }
    function findAllReferences(root) {
      const result = new Array();
      for (const consumer of root.node.findAll()) {
        if (!cfn_element_1.CfnElement.isCfnElement(consumer)) {
          continue;
        }
        try {
          const tokens = resolve_1.findTokens(consumer, () => consumer._toCloudFormation());
          for (const token of tokens) {
            if (!cfn_reference_1.CfnReference.isCfnReference(token)) {
              continue;
            }
            result.push({
              source: consumer,
              value: token
            });
          }
        } catch (e) {
          if (e.type === "CfnSynthesisError") {
            continue;
          }
          throw e;
        }
      }
      return result;
    }
    function createImportValue(reference) {
      const exportingStack = stack_1.Stack.of(reference.target);
      const importExpr = exportingStack.exportValue(reference);
      return token_1.Tokenization.reverseCompleteString(importExpr);
    }
    function createNestedStackParameter(nested, reference, value) {
      const paramId = generateUniqueId(nested, reference, "reference-to-");
      let param = nested.node.tryFindChild(paramId);
      if (!param) {
        param = new cfn_parameter_1.CfnParameter(nested, paramId, { type: "String" });
        if (!("setParameter" in nested)) {
          throw new Error('assertion failed: nested stack should have a "setParameter" method');
        }
        nested.setParameter(param.logicalId, token_1.Token.asString(value));
      }
      return param.value;
    }
    function createNestedStackOutput(producer, reference) {
      const outputId = generateUniqueId(producer, reference);
      let output = producer.node.tryFindChild(outputId);
      if (!output) {
        output = new cfn_output_1.CfnOutput(producer, outputId, { value: token_1.Token.asString(reference) });
      }
      if (!producer.nestedStackResource) {
        throw new Error("assertion failed");
      }
      return producer.nestedStackResource.getAtt(`Outputs.${output.logicalId}`);
    }
    function referenceNestedStackValueInParent(reference, targetStack) {
      let currentStack = stack_1.Stack.of(reference.target);
      if (currentStack !== targetStack && !isNested(currentStack, targetStack)) {
        throw new Error(`Referenced resource must be in stack '${targetStack.node.path}', got '${reference.target.node.path}'`);
      }
      while (currentStack !== targetStack) {
        reference = createNestedStackOutput(stack_1.Stack.of(reference.target), reference);
        currentStack = stack_1.Stack.of(reference.target);
      }
      return reference;
    }
    exports2.referenceNestedStackValueInParent = referenceNestedStackValueInParent;
    function isNested(nested, parent) {
      if (nested.nestedStackParent === parent) {
        return true;
      }
      if (!nested.nestedStackParent) {
        return false;
      }
      return isNested(nested.nestedStackParent, parent);
    }
    function generateUniqueId(stack, ref, prefix = "") {
      return stack.resolve(`${prefix}${names_1.Names.nodeUniqueId(ref.target.node)}${ref.displayName}`);
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/stack.js
var require_stack = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/stack.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.rootPathTo = exports2.Stack = exports2.STACK_RESOURCE_LIMIT_CONTEXT = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var fs = require("fs");
    var path = require("path");
    var cxschema = require_lib3();
    var cxapi = require_lib5();
    var constructs_1 = require_lib4();
    var annotations_1 = require_annotations();
    var app_1 = require_app2();
    var arn_1 = require_arn();
    var cfn_element_1 = require_cfn_element();
    var cfn_fn_1 = require_cfn_fn();
    var cfn_pseudo_1 = require_cfn_pseudo();
    var cfn_resource_1 = require_cfn_resource();
    var context_provider_1 = require_context_provider();
    var feature_flags_1 = require_feature_flags();
    var cloudformation_lang_1 = require_cloudformation_lang();
    var logical_id_1 = require_logical_id();
    var resolve_1 = require_resolve();
    var uniqueid_1 = require_uniqueid2();
    var construct_compat_1 = require_construct_compat();
    var STACK_SYMBOL = Symbol.for("@aws-cdk/core.Stack");
    var MY_STACK_CACHE = Symbol.for("@aws-cdk/core.Stack.myStack");
    exports2.STACK_RESOURCE_LIMIT_CONTEXT = "@aws-cdk/core:stackResourceLimit";
    var VALID_STACK_NAME_REGEX = /^[A-Za-z][A-Za-z0-9-]*$/;
    var MAX_RESOURCES = 500;
    var Stack = class extends construct_compat_1.Construct {
      constructor(scope, id, props = {}) {
        var _b, _c, _d;
        scope = scope !== null && scope !== void 0 ? scope : new app_1.App({
          autoSynth: false,
          outdir: fs_1.FileSystem.mkdtemp("cdk-test-app-")
        });
        id = id !== null && id !== void 0 ? id : "Default";
        super(scope, id);
        this._missingContext = new Array();
        this._stackDependencies = {};
        this.templateOptions = {};
        Object.defineProperty(this, STACK_SYMBOL, { value: true });
        this._logicalIds = new logical_id_1.LogicalIDs();
        const { account, region, environment } = this.parseEnvironment(props.env);
        this.account = account;
        this.region = region;
        this.environment = environment;
        this.terminationProtection = props.terminationProtection;
        if (props.description !== void 0) {
          if (props.description.length > 512) {
            throw new Error(`Stack description must be <= 1024 bytes. Received description: '${props.description}'`);
          }
          this.templateOptions.description = props.description;
        }
        this._stackName = (_b = props.stackName) !== null && _b !== void 0 ? _b : this.generateStackName();
        this.tags = new tag_manager_1.TagManager(cfn_resource_1.TagType.KEY_VALUE, "aws:cdk:stack", props.tags);
        if (!VALID_STACK_NAME_REGEX.test(this.stackName)) {
          throw new Error(`Stack name must match the regular expression: ${VALID_STACK_NAME_REGEX.toString()}, got '${this.stackName}'`);
        }
        const featureFlags = feature_flags_1.FeatureFlags.of(this);
        const stackNameDupeContext = featureFlags.isEnabled(cxapi.ENABLE_STACK_NAME_DUPLICATES_CONTEXT);
        const newStyleSynthesisContext = featureFlags.isEnabled(cxapi.NEW_STYLE_STACK_SYNTHESIS_CONTEXT);
        this.artifactId = stackNameDupeContext || newStyleSynthesisContext ? this.generateStackArtifactId() : this.stackName;
        this.templateFile = `${this.artifactId}.template.json`;
        this._versionReportingEnabled = ((_c = props.analyticsReporting) !== null && _c !== void 0 ? _c : this.node.tryGetContext(cxapi.ANALYTICS_REPORTING_ENABLED_CONTEXT)) && !this.nestedStackParent;
        this.synthesizer = (_d = props.synthesizer) !== null && _d !== void 0 ? _d : newStyleSynthesisContext ? new stack_synthesizers_1.DefaultStackSynthesizer() : new stack_synthesizers_1.LegacyStackSynthesizer();
        this.synthesizer.bind(this);
      }
      static isStack(x) {
        return x !== null && typeof x === "object" && STACK_SYMBOL in x;
      }
      static of(construct) {
        const cache = construct[MY_STACK_CACHE];
        if (cache) {
          return cache;
        } else {
          const value = _lookup(construct);
          Object.defineProperty(construct, MY_STACK_CACHE, {
            enumerable: false,
            writable: false,
            configurable: false,
            value
          });
          return value;
        }
        function _lookup(c) {
          var _b, _c;
          if (Stack.isStack(c)) {
            return c;
          }
          const _scope = constructs_1.Node.of(c).scope;
          if (stage_1.Stage.isStage(c) || !_scope) {
            throw new Error(`${(_c = (_b = construct.constructor) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : "Construct"} at '${constructs_1.Node.of(construct).path}' should be created in the scope of a Stack, but no Stack found`);
          }
          return _lookup(_scope);
        }
      }
      resolve(obj) {
        return resolve_1.resolve(obj, {
          scope: this,
          prefix: [],
          resolver: cloudformation_lang_1.CLOUDFORMATION_TOKEN_RESOLVER,
          preparing: false
        });
      }
      toJsonString(obj, space) {
        return cloudformation_lang_1.CloudFormationLang.toJSON(obj, space).toString();
      }
      reportMissingContext(report) {
        if (!Object.values(cxschema.ContextProvider).includes(report.provider)) {
          throw new Error(`Unknown context provider requested in: ${JSON.stringify(report)}`);
        }
        this.reportMissingContextKey(report);
      }
      reportMissingContextKey(report) {
        this._missingContext.push(report);
      }
      renameLogicalId(oldId, newId) {
        this._logicalIds.addRename(oldId, newId);
      }
      getLogicalId(element) {
        const logicalId = this.allocateLogicalId(element);
        return this._logicalIds.applyRename(logicalId);
      }
      addDependency(target, reason) {
        deps_1.addDependency(this, target, reason);
      }
      get dependencies() {
        return Object.values(this._stackDependencies).map((x) => x.stack);
      }
      get stackName() {
        return this._stackName;
      }
      get partition() {
        return cfn_pseudo_1.Aws.PARTITION;
      }
      get urlSuffix() {
        return cfn_pseudo_1.Aws.URL_SUFFIX;
      }
      get stackId() {
        return new cfn_pseudo_1.ScopedAws(this).stackId;
      }
      get notificationArns() {
        return new cfn_pseudo_1.ScopedAws(this).notificationArns;
      }
      get nested() {
        return this.nestedStackResource !== void 0;
      }
      formatArn(components) {
        return arn_1.Arn.format(components, this);
      }
      parseArn(arn, sepIfToken = "/", hasName = true) {
        return arn_1.Arn.parse(arn, sepIfToken, hasName);
      }
      splitArn(arn, arnFormat) {
        return arn_1.Arn.split(arn, arnFormat);
      }
      get availabilityZones() {
        const agnostic = token_1.Token.isUnresolved(this.account) || token_1.Token.isUnresolved(this.region);
        if (agnostic) {
          return this.node.tryGetContext(cxapi.AVAILABILITY_ZONE_FALLBACK_CONTEXT_KEY) || [
            cfn_fn_1.Fn.select(0, cfn_fn_1.Fn.getAzs()),
            cfn_fn_1.Fn.select(1, cfn_fn_1.Fn.getAzs())
          ];
        }
        const value = context_provider_1.ContextProvider.getValue(this, {
          provider: cxschema.ContextProvider.AVAILABILITY_ZONE_PROVIDER,
          dummyValue: ["dummy1a", "dummy1b", "dummy1c"]
        }).value;
        if (!Array.isArray(value)) {
          throw new Error(`Provider ${cxschema.ContextProvider.AVAILABILITY_ZONE_PROVIDER} expects a list`);
        }
        return value;
      }
      addFileAsset(asset) {
        return this.synthesizer.addFileAsset(asset);
      }
      addDockerImageAsset(asset) {
        return this.synthesizer.addDockerImageAsset(asset);
      }
      get nestedStackParent() {
        return this.nestedStackResource && Stack.of(this.nestedStackResource);
      }
      get parentStack() {
        return this.nestedStackParent;
      }
      addTransform(transform) {
        if (!this.templateOptions.transforms) {
          this.templateOptions.transforms = [];
        }
        this.templateOptions.transforms.push(transform);
      }
      _addAssemblyDependency(target, reason) {
        if (this.nested || target.nested) {
          throw new Error("Cannot add assembly-level dependencies for nested stacks");
        }
        reason = reason || "dependency added using stack.addDependency()";
        const cycle = target.stackDependencyReasons(this);
        if (cycle !== void 0) {
          throw new Error(`'${target.node.path}' depends on '${this.node.path}' (${cycle.join(", ")}). Adding this dependency (${reason}) would create a cyclic reference.`);
        }
        let dep = this._stackDependencies[names_1.Names.uniqueId(target)];
        if (!dep) {
          dep = this._stackDependencies[names_1.Names.uniqueId(target)] = {
            stack: target,
            reasons: []
          };
        }
        dep.reasons.push(reason);
        if (process.env.CDK_DEBUG_DEPS) {
          console.error(`[CDK_DEBUG_DEPS] stack "${this.node.path}" depends on "${target.node.path}" because: ${reason}`);
        }
      }
      _synthesizeTemplate(session, lookupRoleArn) {
        const builder = session.assembly;
        const template = this._toCloudFormation();
        const outPath = path.join(builder.outdir, this.templateFile);
        if (this.maxResources > 0) {
          const resources = template.Resources || {};
          const numberOfResources = Object.keys(resources).length;
          if (numberOfResources > this.maxResources) {
            throw new Error(`Number of resources in stack '${this.node.path}': ${numberOfResources} is greater than allowed maximum of ${this.maxResources}`);
          } else if (numberOfResources >= this.maxResources * 0.8) {
            annotations_1.Annotations.of(this).addInfo(`Number of resources: ${numberOfResources} is approaching allowed maximum of ${this.maxResources}`);
          }
        }
        fs.writeFileSync(outPath, JSON.stringify(template, void 0, 2));
        for (const ctx of this._missingContext) {
          if (lookupRoleArn != null) {
            builder.addMissing(__spreadProps(__spreadValues({}, ctx), { props: __spreadProps(__spreadValues({}, ctx.props), { lookupRoleArn }) }));
          } else {
            builder.addMissing(ctx);
          }
        }
      }
      exportValue(exportedValue, options = {}) {
        if (options.name) {
          new cfn_output_1.CfnOutput(this, `Export${options.name}`, {
            value: exportedValue,
            exportName: options.name
          });
          return cfn_fn_1.Fn.importValue(options.name);
        }
        const resolvable = token_1.Tokenization.reverse(exportedValue);
        if (!resolvable || !reference_1.Reference.isReference(resolvable)) {
          throw new Error("exportValue: either supply 'name' or make sure to export a resource attribute (like 'bucket.bucketName')");
        }
        const exportable = refs_1.referenceNestedStackValueInParent(resolvable, this);
        const exportsScope = getCreateExportsScope(this);
        const resolved = this.resolve(exportable);
        const id = "Output" + JSON.stringify(resolved);
        const exportName = generateExportName(exportsScope, id);
        if (token_1.Token.isUnresolved(exportName)) {
          throw new Error(`unresolved token in generated export name: ${JSON.stringify(this.resolve(exportName))}`);
        }
        const output = exportsScope.node.tryFindChild(id);
        if (!output) {
          new cfn_output_1.CfnOutput(exportsScope, id, { value: token_1.Token.asString(exportable), exportName });
        }
        return cfn_fn_1.Fn.importValue(exportName);
      }
      allocateLogicalId(cfnElement) {
        const scopes = cfnElement.node.scopes;
        const stackIndex = scopes.indexOf(cfnElement.stack);
        const pathComponents = scopes.slice(stackIndex + 1).map((x) => x.node.id);
        return uniqueid_1.makeUniqueId(pathComponents);
      }
      _validateId(name) {
        if (name && !VALID_STACK_NAME_REGEX.test(name)) {
          throw new Error(`Stack name must match the regular expression: ${VALID_STACK_NAME_REGEX.toString()}, got '${name}'`);
        }
      }
      _toCloudFormation() {
        let transform;
        if (this.templateOptions.transform) {
          annotations_1.Annotations.of(this).addWarning("This stack is using the deprecated `templateOptions.transform` property. Consider switching to `addTransform()`.");
          this.addTransform(this.templateOptions.transform);
        }
        if (this.templateOptions.transforms) {
          if (this.templateOptions.transforms.length === 1) {
            transform = this.templateOptions.transforms[0];
          } else {
            transform = Array.from(new Set(this.templateOptions.transforms));
          }
        }
        const template = {
          Description: this.templateOptions.description,
          Transform: transform,
          AWSTemplateFormatVersion: this.templateOptions.templateFormatVersion,
          Metadata: this.templateOptions.metadata
        };
        const elements = cfnElements(this);
        const fragments = elements.map((e) => this.resolve(e._toCloudFormation()));
        for (const fragment of fragments) {
          merge(template, fragment);
        }
        const ret = this.resolve(template) || {};
        this._logicalIds.assertAllRenamesApplied();
        return ret;
      }
      prepareCrossReference(_sourceStack, reference) {
        return reference;
      }
      parseEnvironment(env = {}) {
        var _b, _c, _d, _e;
        const containingAssembly = stage_1.Stage.of(this);
        const account = (_c = (_b = env.account) !== null && _b !== void 0 ? _b : containingAssembly === null || containingAssembly === void 0 ? void 0 : containingAssembly.account) !== null && _c !== void 0 ? _c : cfn_pseudo_1.Aws.ACCOUNT_ID;
        const region = (_e = (_d = env.region) !== null && _d !== void 0 ? _d : containingAssembly === null || containingAssembly === void 0 ? void 0 : containingAssembly.region) !== null && _e !== void 0 ? _e : cfn_pseudo_1.Aws.REGION;
        const envAccount = !token_1.Token.isUnresolved(account) ? account : cxapi.UNKNOWN_ACCOUNT;
        const envRegion = !token_1.Token.isUnresolved(region) ? region : cxapi.UNKNOWN_REGION;
        return {
          account,
          region,
          environment: cxapi.EnvironmentUtils.format(envAccount, envRegion)
        };
      }
      get maxResources() {
        const contextLimit = this.node.tryGetContext(exports2.STACK_RESOURCE_LIMIT_CONTEXT);
        return contextLimit !== void 0 ? parseInt(contextLimit, 10) : MAX_RESOURCES;
      }
      stackDependencyReasons(other) {
        if (this === other) {
          return [];
        }
        for (const dep of Object.values(this._stackDependencies)) {
          const ret = dep.stack.stackDependencyReasons(other);
          if (ret !== void 0) {
            return [...dep.reasons, ...ret];
          }
        }
        return void 0;
      }
      generateStackName() {
        const assembly = stage_1.Stage.of(this);
        const prefix = assembly && assembly.stageName ? `${assembly.stageName}-` : "";
        return `${prefix}${this.generateStackId(assembly)}`;
      }
      generateStackArtifactId() {
        return this.generateStackId(this.node.root);
      }
      generateStackId(container) {
        const rootPath = rootPathTo(this, container);
        const ids = rootPath.map((c) => constructs_1.Node.of(c).id);
        if (ids.length === 1 && !ids[0]) {
          throw new Error("unexpected: stack id must always be defined");
        }
        return makeStackName(ids);
      }
    };
    exports2.Stack = Stack;
    _a = JSII_RTTI_SYMBOL_1;
    Stack[_a] = { fqn: "@aws-cdk/core.Stack", version: "1.132.0" };
    function merge(template, fragment) {
      for (const section of Object.keys(fragment)) {
        const src = fragment[section];
        const dest = template[section];
        if (!dest) {
          template[section] = src;
        } else {
          template[section] = mergeSection(section, dest, src);
        }
      }
    }
    function mergeSection(section, val1, val2) {
      switch (section) {
        case "Description":
          return `${val1}
${val2}`;
        case "AWSTemplateFormatVersion":
          if (val1 != null && val2 != null && val1 !== val2) {
            throw new Error(`Conflicting CloudFormation template versions provided: '${val1}' and '${val2}`);
          }
          return val1 !== null && val1 !== void 0 ? val1 : val2;
        case "Transform":
          return mergeSets(val1, val2);
        default:
          return mergeObjectsWithoutDuplicates(section, val1, val2);
      }
    }
    function mergeSets(val1, val2) {
      const array1 = val1 == null ? [] : Array.isArray(val1) ? val1 : [val1];
      const array2 = val2 == null ? [] : Array.isArray(val2) ? val2 : [val2];
      for (const value of array2) {
        if (!array1.includes(value)) {
          array1.push(value);
        }
      }
      return array1.length === 1 ? array1[0] : array1;
    }
    function mergeObjectsWithoutDuplicates(section, dest, src) {
      if (typeof dest !== "object") {
        throw new Error(`Expecting ${JSON.stringify(dest)} to be an object`);
      }
      if (typeof src !== "object") {
        throw new Error(`Expecting ${JSON.stringify(src)} to be an object`);
      }
      for (const id of Object.keys(src)) {
        if (id in dest) {
          throw new Error(`section '${section}' already contains '${id}'`);
        }
        dest[id] = src[id];
      }
      return dest;
    }
    function cfnElements(node, into = []) {
      if (cfn_element_1.CfnElement.isCfnElement(node)) {
        into.push(node);
      }
      for (const child of constructs_1.Node.of(node).children) {
        if (Stack.isStack(child)) {
          continue;
        }
        cfnElements(child, into);
      }
      return into;
    }
    function rootPathTo(construct, ancestor) {
      const scopes = constructs_1.Node.of(construct).scopes;
      for (let i = scopes.length - 2; i >= 0; i--) {
        if (scopes[i] === ancestor) {
          return scopes.slice(i + 1);
        }
      }
      return scopes;
    }
    exports2.rootPathTo = rootPathTo;
    function makeStackName(components) {
      if (components.length === 1) {
        return components[0];
      }
      return uniqueid_1.makeUniqueId(components);
    }
    function getCreateExportsScope(stack) {
      const exportsName = "Exports";
      let stackExports = stack.node.tryFindChild(exportsName);
      if (stackExports === void 0) {
        stackExports = new construct_compat_1.Construct(stack, exportsName);
      }
      return stackExports;
    }
    function generateExportName(stackExports, id) {
      const stackRelativeExports = feature_flags_1.FeatureFlags.of(stackExports).isEnabled(cxapi.STACK_RELATIVE_EXPORTS_CONTEXT);
      const stack = Stack.of(stackExports);
      const components = [
        ...stackExports.node.scopes.slice(stackRelativeExports ? stack.node.scopes.length : 2).map((c) => c.node.id),
        id
      ];
      const prefix = stack.stackName ? stack.stackName + ":" : "";
      const localPart = uniqueid_1.makeUniqueId(components);
      const maxLength = 255;
      return prefix + localPart.slice(Math.max(0, localPart.length - maxLength + prefix.length));
    }
    var cfn_output_1 = require_cfn_output();
    var deps_1 = require_deps();
    var fs_1 = require_fs2();
    var names_1 = require_names();
    var reference_1 = require_reference();
    var stack_synthesizers_1 = require_stack_synthesizers();
    var stage_1 = require_stage();
    var tag_manager_1 = require_tag_manager();
    var token_1 = require_token();
    var refs_1 = require_refs();
  }
});

// asset-input/node_modules/@aws-cdk/region-info/lib/default.js
var require_default = __commonJS({
  "asset-input/node_modules/@aws-cdk/region-info/lib/default.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Default = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var Default = class {
      constructor() {
      }
      static servicePrincipal(service, region, urlSuffix) {
        const matches = service.match(/^([^.]+)(?:(?:\.amazonaws\.com(?:\.cn)?)|(?:\.c2s\.ic\.gov)|(?:\.sc2s\.sgov\.gov))?$/);
        if (!matches) {
          return service;
        }
        service = matches[1];
        const US_ISO_EXCEPTIONS = new Set([
          "cloudhsm",
          "config",
          "states",
          "workspaces"
        ]);
        const US_ISOB_EXCEPTIONS = new Set([
          "dms",
          "states"
        ]);
        if (region.startsWith("us-iso-") && US_ISO_EXCEPTIONS.has(service)) {
          switch (service) {
            case "states":
              return `${service}.amazonaws.com`;
            default:
              return `${service}.${urlSuffix}`;
          }
        }
        if (region.startsWith("us-isob-") && US_ISOB_EXCEPTIONS.has(service)) {
          switch (service) {
            case "states":
              return `${service}.amazonaws.com`;
            default:
              return `${service}.${urlSuffix}`;
          }
        }
        switch (service) {
          case "codedeploy":
          case "logs":
            return `${service}.${region}.${urlSuffix}`;
          case "states":
            return `${service}.${region}.amazonaws.com`;
          case "ec2":
            return `${service}.${urlSuffix}`;
          default:
            return `${service}.amazonaws.com`;
        }
      }
    };
    exports2.Default = Default;
    _a = JSII_RTTI_SYMBOL_1;
    Default[_a] = { fqn: "@aws-cdk/region-info.Default", version: "1.132.0" };
    Default.VPC_ENDPOINT_SERVICE_NAME_PREFIX = "com.amazonaws.vpce";
  }
});

// asset-input/node_modules/@aws-cdk/region-info/lib/fact.js
var require_fact = __commonJS({
  "asset-input/node_modules/@aws-cdk/region-info/lib/fact.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FactName = exports2.Fact = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var Fact = class {
      constructor() {
        throw new Error("Use the static methods of Fact instead!");
      }
      static get regions() {
        return Object.keys(this.database);
      }
      static find(region, name) {
        const regionFacts = this.database[region];
        return regionFacts && regionFacts[name];
      }
      static requireFact(region, name) {
        const foundFact = this.find(region, name);
        if (!foundFact) {
          throw new Error(`No fact ${name} could be found for region: ${region} and name: ${name}`);
        }
        return foundFact;
      }
      static register(fact, allowReplacing = false) {
        const regionFacts = this.database[fact.region] || (this.database[fact.region] = {});
        if (fact.name in regionFacts && regionFacts[fact.name] !== fact.value && !allowReplacing) {
          throw new Error(`Region ${fact.region} already has a fact ${fact.name}, with value ${regionFacts[fact.name]}`);
        }
        if (fact.value !== void 0) {
          regionFacts[fact.name] = fact.value;
        }
      }
      static unregister(region, name, value) {
        const regionFacts = this.database[region] || {};
        if (name in regionFacts && value && regionFacts[name] !== value) {
          throw new Error(`Attempted to remove ${name} from ${region} with value ${value}, but the fact's value is ${regionFacts[name]}`);
        }
        delete regionFacts[name];
      }
    };
    exports2.Fact = Fact;
    _a = JSII_RTTI_SYMBOL_1;
    Fact[_a] = { fqn: "@aws-cdk/region-info.Fact", version: "1.132.0" };
    Fact.database = {};
    var FactName = class {
      static cloudwatchLambdaInsightsVersion(version) {
        return `cloudwatch-lambda-insights-version:${version.split(".").join("_")}`;
      }
      static servicePrincipal(service) {
        return `service-principal:${service.replace(/\.amazonaws\.com(\.cn)?$/, "")}`;
      }
    };
    exports2.FactName = FactName;
    _b = JSII_RTTI_SYMBOL_1;
    FactName[_b] = { fqn: "@aws-cdk/region-info.FactName", version: "1.132.0" };
    FactName.PARTITION = "partition";
    FactName.DOMAIN_SUFFIX = "domainSuffix";
    FactName.CDK_METADATA_RESOURCE_AVAILABLE = "cdk:metadata-resource:available";
    FactName.S3_STATIC_WEBSITE_ENDPOINT = "s3-static-website:endpoint";
    FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID = "s3-static-website:route-53-hosted-zone-id";
    FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID = "ebs-environment:route-53-hosted-zone-id";
    FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX = "vpcEndpointServiceNamePrefix";
    FactName.ELBV2_ACCOUNT = "elbv2Account";
    FactName.DLC_REPOSITORY_ACCOUNT = "dlcRepositoryAccount";
    FactName.APPMESH_ECR_ACCOUNT = "appMeshRepositoryAccount";
    FactName.FIREHOSE_CIDR_BLOCK = "firehoseCidrBlock";
  }
});

// asset-input/node_modules/@aws-cdk/region-info/lib/region-info.js
var require_region_info = __commonJS({
  "asset-input/node_modules/@aws-cdk/region-info/lib/region-info.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RegionInfo = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var fact_1 = require_fact();
    var RegionInfo = class {
      constructor(name) {
        this.name = name;
      }
      static get regions() {
        return fact_1.Fact.regions.map(RegionInfo.get);
      }
      static regionMap(factName) {
        const ret = {};
        for (const regionInfo of RegionInfo.regions) {
          const fact = fact_1.Fact.find(regionInfo.name, factName);
          if (fact) {
            ret[regionInfo.name] = fact;
          }
        }
        return ret;
      }
      static get(name) {
        return new RegionInfo(name);
      }
      get cdkMetadataResourceAvailable() {
        return fact_1.Fact.find(this.name, fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE) === "YES";
      }
      get domainSuffix() {
        return fact_1.Fact.find(this.name, fact_1.FactName.DOMAIN_SUFFIX);
      }
      get partition() {
        return fact_1.Fact.find(this.name, fact_1.FactName.PARTITION);
      }
      get s3StaticWebsiteEndpoint() {
        return fact_1.Fact.find(this.name, fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT);
      }
      get s3StaticWebsiteHostedZoneId() {
        return fact_1.Fact.find(this.name, fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID);
      }
      get ebsEnvEndpointHostedZoneId() {
        return fact_1.Fact.find(this.name, fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID);
      }
      get vpcEndpointServiceNamePrefix() {
        return fact_1.Fact.find(this.name, fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX);
      }
      servicePrincipal(service) {
        return fact_1.Fact.find(this.name, fact_1.FactName.servicePrincipal(service));
      }
      get elbv2Account() {
        return fact_1.Fact.find(this.name, fact_1.FactName.ELBV2_ACCOUNT);
      }
      get dlcRepositoryAccount() {
        return fact_1.Fact.find(this.name, fact_1.FactName.DLC_REPOSITORY_ACCOUNT);
      }
      cloudwatchLambdaInsightsArn(insightsVersion) {
        return fact_1.Fact.find(this.name, fact_1.FactName.cloudwatchLambdaInsightsVersion(insightsVersion));
      }
      get appMeshRepositoryAccount() {
        return fact_1.Fact.find(this.name, fact_1.FactName.APPMESH_ECR_ACCOUNT);
      }
      get firehoseCidrBlock() {
        return fact_1.Fact.find(this.name, fact_1.FactName.FIREHOSE_CIDR_BLOCK);
      }
    };
    exports2.RegionInfo = RegionInfo;
    _a = JSII_RTTI_SYMBOL_1;
    RegionInfo[_a] = { fqn: "@aws-cdk/region-info.RegionInfo", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/region-info/lib/built-ins.generated.js
var require_built_ins_generated = __commonJS({
  "asset-input/node_modules/@aws-cdk/region-info/lib/built-ins.generated.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BuiltIns = void 0;
    var fact_1 = require_fact();
    var BuiltIns = class {
      static register() {
        fact_1.Fact.register({ region: "af-south-1", name: fact_1.FactName.PARTITION, value: "aws" });
        fact_1.Fact.register({ region: "af-south-1", name: fact_1.FactName.DOMAIN_SUFFIX, value: "amazonaws.com" });
        fact_1.Fact.register({ region: "af-south-1", name: fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE, value: "YES" });
        fact_1.Fact.register({ region: "af-south-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT, value: "s3-website.af-south-1.amazonaws.com" });
        fact_1.Fact.register({ region: "af-south-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID, value: "Z11KHD8FBVPUYU" });
        fact_1.Fact.register({ region: "af-south-1", name: fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID, value: "Z1EI3BVKMKK4AM" });
        fact_1.Fact.register({ region: "af-south-1", name: fact_1.FactName.ELBV2_ACCOUNT, value: "098369216593" });
        fact_1.Fact.register({ region: "af-south-1", name: fact_1.FactName.DLC_REPOSITORY_ACCOUNT, value: void 0 });
        fact_1.Fact.register({ region: "af-south-1", name: fact_1.FactName.APPMESH_ECR_ACCOUNT, value: "924023996002" });
        fact_1.Fact.register({ region: "af-south-1", name: fact_1.FactName.FIREHOSE_CIDR_BLOCK, value: "13.244.121.224/27" });
        fact_1.Fact.register({ region: "af-south-1", name: fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX, value: "com.amazonaws.vpce" });
        fact_1.Fact.register({ region: "af-south-1", name: fact_1.FactName.servicePrincipal("application-autoscaling"), value: "application-autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "af-south-1", name: fact_1.FactName.servicePrincipal("autoscaling"), value: "autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "af-south-1", name: fact_1.FactName.servicePrincipal("codedeploy"), value: "codedeploy.af-south-1.amazonaws.com" });
        fact_1.Fact.register({ region: "af-south-1", name: fact_1.FactName.servicePrincipal("ec2"), value: "ec2.amazonaws.com" });
        fact_1.Fact.register({ region: "af-south-1", name: fact_1.FactName.servicePrincipal("events"), value: "events.amazonaws.com" });
        fact_1.Fact.register({ region: "af-south-1", name: fact_1.FactName.servicePrincipal("lambda"), value: "lambda.amazonaws.com" });
        fact_1.Fact.register({ region: "af-south-1", name: fact_1.FactName.servicePrincipal("logs"), value: "logs.af-south-1.amazonaws.com" });
        fact_1.Fact.register({ region: "af-south-1", name: fact_1.FactName.servicePrincipal("s3"), value: "s3.amazonaws.com" });
        fact_1.Fact.register({ region: "af-south-1", name: fact_1.FactName.servicePrincipal("sns"), value: "sns.amazonaws.com" });
        fact_1.Fact.register({ region: "af-south-1", name: fact_1.FactName.servicePrincipal("sqs"), value: "sqs.amazonaws.com" });
        fact_1.Fact.register({ region: "af-south-1", name: fact_1.FactName.servicePrincipal("states"), value: "states.af-south-1.amazonaws.com" });
        fact_1.Fact.register({ region: "af-south-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.98.0"), value: "arn:aws:lambda:af-south-1:012438385374:layer:LambdaInsightsExtension:8" });
        fact_1.Fact.register({ region: "af-south-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.89.0"), value: void 0 });
        fact_1.Fact.register({ region: "af-south-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.86.0"), value: void 0 });
        fact_1.Fact.register({ region: "af-south-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.54.0"), value: void 0 });
        fact_1.Fact.register({ region: "ap-east-1", name: fact_1.FactName.PARTITION, value: "aws" });
        fact_1.Fact.register({ region: "ap-east-1", name: fact_1.FactName.DOMAIN_SUFFIX, value: "amazonaws.com" });
        fact_1.Fact.register({ region: "ap-east-1", name: fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE, value: "YES" });
        fact_1.Fact.register({ region: "ap-east-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT, value: "s3-website.ap-east-1.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-east-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID, value: "ZNB98KWMFR0R6" });
        fact_1.Fact.register({ region: "ap-east-1", name: fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID, value: "ZPWYUBWRU171A" });
        fact_1.Fact.register({ region: "ap-east-1", name: fact_1.FactName.ELBV2_ACCOUNT, value: "754344448648" });
        fact_1.Fact.register({ region: "ap-east-1", name: fact_1.FactName.DLC_REPOSITORY_ACCOUNT, value: "871362719292" });
        fact_1.Fact.register({ region: "ap-east-1", name: fact_1.FactName.APPMESH_ECR_ACCOUNT, value: "856666278305" });
        fact_1.Fact.register({ region: "ap-east-1", name: fact_1.FactName.FIREHOSE_CIDR_BLOCK, value: "18.162.221.32/27" });
        fact_1.Fact.register({ region: "ap-east-1", name: fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX, value: "com.amazonaws.vpce" });
        fact_1.Fact.register({ region: "ap-east-1", name: fact_1.FactName.servicePrincipal("application-autoscaling"), value: "application-autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-east-1", name: fact_1.FactName.servicePrincipal("autoscaling"), value: "autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-east-1", name: fact_1.FactName.servicePrincipal("codedeploy"), value: "codedeploy.ap-east-1.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-east-1", name: fact_1.FactName.servicePrincipal("ec2"), value: "ec2.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-east-1", name: fact_1.FactName.servicePrincipal("events"), value: "events.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-east-1", name: fact_1.FactName.servicePrincipal("lambda"), value: "lambda.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-east-1", name: fact_1.FactName.servicePrincipal("logs"), value: "logs.ap-east-1.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-east-1", name: fact_1.FactName.servicePrincipal("s3"), value: "s3.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-east-1", name: fact_1.FactName.servicePrincipal("sns"), value: "sns.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-east-1", name: fact_1.FactName.servicePrincipal("sqs"), value: "sqs.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-east-1", name: fact_1.FactName.servicePrincipal("states"), value: "states.ap-east-1.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-east-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.98.0"), value: "arn:aws:lambda:ap-east-1:519774774795:layer:LambdaInsightsExtension:8" });
        fact_1.Fact.register({ region: "ap-east-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.89.0"), value: void 0 });
        fact_1.Fact.register({ region: "ap-east-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.86.0"), value: void 0 });
        fact_1.Fact.register({ region: "ap-east-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.54.0"), value: void 0 });
        fact_1.Fact.register({ region: "ap-northeast-1", name: fact_1.FactName.PARTITION, value: "aws" });
        fact_1.Fact.register({ region: "ap-northeast-1", name: fact_1.FactName.DOMAIN_SUFFIX, value: "amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-1", name: fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE, value: "YES" });
        fact_1.Fact.register({ region: "ap-northeast-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT, value: "s3-website-ap-northeast-1.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID, value: "Z2M4EHUR26P7ZW" });
        fact_1.Fact.register({ region: "ap-northeast-1", name: fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID, value: "Z1R25G3KIG2GBW" });
        fact_1.Fact.register({ region: "ap-northeast-1", name: fact_1.FactName.ELBV2_ACCOUNT, value: "582318560864" });
        fact_1.Fact.register({ region: "ap-northeast-1", name: fact_1.FactName.DLC_REPOSITORY_ACCOUNT, value: "763104351884" });
        fact_1.Fact.register({ region: "ap-northeast-1", name: fact_1.FactName.APPMESH_ECR_ACCOUNT, value: "840364872350" });
        fact_1.Fact.register({ region: "ap-northeast-1", name: fact_1.FactName.FIREHOSE_CIDR_BLOCK, value: "13.113.196.224/27" });
        fact_1.Fact.register({ region: "ap-northeast-1", name: fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX, value: "com.amazonaws.vpce" });
        fact_1.Fact.register({ region: "ap-northeast-1", name: fact_1.FactName.servicePrincipal("application-autoscaling"), value: "application-autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-1", name: fact_1.FactName.servicePrincipal("autoscaling"), value: "autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-1", name: fact_1.FactName.servicePrincipal("codedeploy"), value: "codedeploy.ap-northeast-1.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-1", name: fact_1.FactName.servicePrincipal("ec2"), value: "ec2.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-1", name: fact_1.FactName.servicePrincipal("events"), value: "events.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-1", name: fact_1.FactName.servicePrincipal("lambda"), value: "lambda.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-1", name: fact_1.FactName.servicePrincipal("logs"), value: "logs.ap-northeast-1.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-1", name: fact_1.FactName.servicePrincipal("s3"), value: "s3.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-1", name: fact_1.FactName.servicePrincipal("sns"), value: "sns.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-1", name: fact_1.FactName.servicePrincipal("sqs"), value: "sqs.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-1", name: fact_1.FactName.servicePrincipal("states"), value: "states.ap-northeast-1.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.98.0"), value: "arn:aws:lambda:ap-northeast-1:580247275435:layer:LambdaInsightsExtension:14" });
        fact_1.Fact.register({ region: "ap-northeast-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.89.0"), value: "arn:aws:lambda:ap-northeast-1:580247275435:layer:LambdaInsightsExtension:12" });
        fact_1.Fact.register({ region: "ap-northeast-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.86.0"), value: "arn:aws:lambda:ap-northeast-1:580247275435:layer:LambdaInsightsExtension:11" });
        fact_1.Fact.register({ region: "ap-northeast-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.54.0"), value: "arn:aws:lambda:ap-northeast-1:580247275435:layer:LambdaInsightsExtension:2" });
        fact_1.Fact.register({ region: "ap-northeast-2", name: fact_1.FactName.PARTITION, value: "aws" });
        fact_1.Fact.register({ region: "ap-northeast-2", name: fact_1.FactName.DOMAIN_SUFFIX, value: "amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-2", name: fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE, value: "YES" });
        fact_1.Fact.register({ region: "ap-northeast-2", name: fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT, value: "s3-website.ap-northeast-2.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-2", name: fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID, value: "Z3W03O7B5YMIYP" });
        fact_1.Fact.register({ region: "ap-northeast-2", name: fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID, value: "Z3JE5OI70TWKCP" });
        fact_1.Fact.register({ region: "ap-northeast-2", name: fact_1.FactName.ELBV2_ACCOUNT, value: "600734575887" });
        fact_1.Fact.register({ region: "ap-northeast-2", name: fact_1.FactName.DLC_REPOSITORY_ACCOUNT, value: "763104351884" });
        fact_1.Fact.register({ region: "ap-northeast-2", name: fact_1.FactName.APPMESH_ECR_ACCOUNT, value: "840364872350" });
        fact_1.Fact.register({ region: "ap-northeast-2", name: fact_1.FactName.FIREHOSE_CIDR_BLOCK, value: "13.209.1.64/27" });
        fact_1.Fact.register({ region: "ap-northeast-2", name: fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX, value: "com.amazonaws.vpce" });
        fact_1.Fact.register({ region: "ap-northeast-2", name: fact_1.FactName.servicePrincipal("application-autoscaling"), value: "application-autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-2", name: fact_1.FactName.servicePrincipal("autoscaling"), value: "autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-2", name: fact_1.FactName.servicePrincipal("codedeploy"), value: "codedeploy.ap-northeast-2.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-2", name: fact_1.FactName.servicePrincipal("ec2"), value: "ec2.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-2", name: fact_1.FactName.servicePrincipal("events"), value: "events.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-2", name: fact_1.FactName.servicePrincipal("lambda"), value: "lambda.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-2", name: fact_1.FactName.servicePrincipal("logs"), value: "logs.ap-northeast-2.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-2", name: fact_1.FactName.servicePrincipal("s3"), value: "s3.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-2", name: fact_1.FactName.servicePrincipal("sns"), value: "sns.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-2", name: fact_1.FactName.servicePrincipal("sqs"), value: "sqs.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-2", name: fact_1.FactName.servicePrincipal("states"), value: "states.ap-northeast-2.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-2", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.98.0"), value: "arn:aws:lambda:ap-northeast-2:580247275435:layer:LambdaInsightsExtension:14" });
        fact_1.Fact.register({ region: "ap-northeast-2", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.89.0"), value: "arn:aws:lambda:ap-northeast-2:580247275435:layer:LambdaInsightsExtension:12" });
        fact_1.Fact.register({ region: "ap-northeast-2", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.86.0"), value: "arn:aws:lambda:ap-northeast-2:580247275435:layer:LambdaInsightsExtension:11" });
        fact_1.Fact.register({ region: "ap-northeast-2", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.54.0"), value: "arn:aws:lambda:ap-northeast-2:580247275435:layer:LambdaInsightsExtension:2" });
        fact_1.Fact.register({ region: "ap-northeast-3", name: fact_1.FactName.PARTITION, value: "aws" });
        fact_1.Fact.register({ region: "ap-northeast-3", name: fact_1.FactName.DOMAIN_SUFFIX, value: "amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-3", name: fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE, value: "NO" });
        fact_1.Fact.register({ region: "ap-northeast-3", name: fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT, value: "s3-website.ap-northeast-3.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-3", name: fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID, value: "Z2YQB5RD63NC85" });
        fact_1.Fact.register({ region: "ap-northeast-3", name: fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID, value: "ZNE5GEY1TIAGY" });
        fact_1.Fact.register({ region: "ap-northeast-3", name: fact_1.FactName.ELBV2_ACCOUNT, value: "383597477331" });
        fact_1.Fact.register({ region: "ap-northeast-3", name: fact_1.FactName.DLC_REPOSITORY_ACCOUNT, value: void 0 });
        fact_1.Fact.register({ region: "ap-northeast-3", name: fact_1.FactName.APPMESH_ECR_ACCOUNT, value: "840364872350" });
        fact_1.Fact.register({ region: "ap-northeast-3", name: fact_1.FactName.FIREHOSE_CIDR_BLOCK, value: "13.208.177.192/27" });
        fact_1.Fact.register({ region: "ap-northeast-3", name: fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX, value: "com.amazonaws.vpce" });
        fact_1.Fact.register({ region: "ap-northeast-3", name: fact_1.FactName.servicePrincipal("application-autoscaling"), value: "application-autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-3", name: fact_1.FactName.servicePrincipal("autoscaling"), value: "autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-3", name: fact_1.FactName.servicePrincipal("codedeploy"), value: "codedeploy.ap-northeast-3.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-3", name: fact_1.FactName.servicePrincipal("ec2"), value: "ec2.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-3", name: fact_1.FactName.servicePrincipal("events"), value: "events.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-3", name: fact_1.FactName.servicePrincipal("lambda"), value: "lambda.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-3", name: fact_1.FactName.servicePrincipal("logs"), value: "logs.ap-northeast-3.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-3", name: fact_1.FactName.servicePrincipal("s3"), value: "s3.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-3", name: fact_1.FactName.servicePrincipal("sns"), value: "sns.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-3", name: fact_1.FactName.servicePrincipal("sqs"), value: "sqs.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-3", name: fact_1.FactName.servicePrincipal("states"), value: "states.ap-northeast-3.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-northeast-3", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.98.0"), value: void 0 });
        fact_1.Fact.register({ region: "ap-northeast-3", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.89.0"), value: void 0 });
        fact_1.Fact.register({ region: "ap-northeast-3", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.86.0"), value: void 0 });
        fact_1.Fact.register({ region: "ap-northeast-3", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.54.0"), value: void 0 });
        fact_1.Fact.register({ region: "ap-south-1", name: fact_1.FactName.PARTITION, value: "aws" });
        fact_1.Fact.register({ region: "ap-south-1", name: fact_1.FactName.DOMAIN_SUFFIX, value: "amazonaws.com" });
        fact_1.Fact.register({ region: "ap-south-1", name: fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE, value: "YES" });
        fact_1.Fact.register({ region: "ap-south-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT, value: "s3-website.ap-south-1.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-south-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID, value: "Z11RGJOFQNVJUP" });
        fact_1.Fact.register({ region: "ap-south-1", name: fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID, value: "Z18NTBI3Y7N9TZ" });
        fact_1.Fact.register({ region: "ap-south-1", name: fact_1.FactName.ELBV2_ACCOUNT, value: "718504428378" });
        fact_1.Fact.register({ region: "ap-south-1", name: fact_1.FactName.DLC_REPOSITORY_ACCOUNT, value: "763104351884" });
        fact_1.Fact.register({ region: "ap-south-1", name: fact_1.FactName.APPMESH_ECR_ACCOUNT, value: "840364872350" });
        fact_1.Fact.register({ region: "ap-south-1", name: fact_1.FactName.FIREHOSE_CIDR_BLOCK, value: "13.232.67.32/27" });
        fact_1.Fact.register({ region: "ap-south-1", name: fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX, value: "com.amazonaws.vpce" });
        fact_1.Fact.register({ region: "ap-south-1", name: fact_1.FactName.servicePrincipal("application-autoscaling"), value: "application-autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-south-1", name: fact_1.FactName.servicePrincipal("autoscaling"), value: "autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-south-1", name: fact_1.FactName.servicePrincipal("codedeploy"), value: "codedeploy.ap-south-1.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-south-1", name: fact_1.FactName.servicePrincipal("ec2"), value: "ec2.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-south-1", name: fact_1.FactName.servicePrincipal("events"), value: "events.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-south-1", name: fact_1.FactName.servicePrincipal("lambda"), value: "lambda.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-south-1", name: fact_1.FactName.servicePrincipal("logs"), value: "logs.ap-south-1.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-south-1", name: fact_1.FactName.servicePrincipal("s3"), value: "s3.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-south-1", name: fact_1.FactName.servicePrincipal("sns"), value: "sns.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-south-1", name: fact_1.FactName.servicePrincipal("sqs"), value: "sqs.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-south-1", name: fact_1.FactName.servicePrincipal("states"), value: "states.ap-south-1.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-south-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.98.0"), value: "arn:aws:lambda:ap-south-1:580247275435:layer:LambdaInsightsExtension:14" });
        fact_1.Fact.register({ region: "ap-south-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.89.0"), value: "arn:aws:lambda:ap-south-1:580247275435:layer:LambdaInsightsExtension:12" });
        fact_1.Fact.register({ region: "ap-south-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.86.0"), value: "arn:aws:lambda:ap-south-1:580247275435:layer:LambdaInsightsExtension:11" });
        fact_1.Fact.register({ region: "ap-south-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.54.0"), value: "arn:aws:lambda:ap-south-1:580247275435:layer:LambdaInsightsExtension:2" });
        fact_1.Fact.register({ region: "ap-southeast-1", name: fact_1.FactName.PARTITION, value: "aws" });
        fact_1.Fact.register({ region: "ap-southeast-1", name: fact_1.FactName.DOMAIN_SUFFIX, value: "amazonaws.com" });
        fact_1.Fact.register({ region: "ap-southeast-1", name: fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE, value: "YES" });
        fact_1.Fact.register({ region: "ap-southeast-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT, value: "s3-website-ap-southeast-1.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-southeast-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID, value: "Z3O0J2DXBE1FTB" });
        fact_1.Fact.register({ region: "ap-southeast-1", name: fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID, value: "Z16FZ9L249IFLT" });
        fact_1.Fact.register({ region: "ap-southeast-1", name: fact_1.FactName.ELBV2_ACCOUNT, value: "114774131450" });
        fact_1.Fact.register({ region: "ap-southeast-1", name: fact_1.FactName.DLC_REPOSITORY_ACCOUNT, value: "763104351884" });
        fact_1.Fact.register({ region: "ap-southeast-1", name: fact_1.FactName.APPMESH_ECR_ACCOUNT, value: "840364872350" });
        fact_1.Fact.register({ region: "ap-southeast-1", name: fact_1.FactName.FIREHOSE_CIDR_BLOCK, value: "13.228.64.192/27" });
        fact_1.Fact.register({ region: "ap-southeast-1", name: fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX, value: "com.amazonaws.vpce" });
        fact_1.Fact.register({ region: "ap-southeast-1", name: fact_1.FactName.servicePrincipal("application-autoscaling"), value: "application-autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-southeast-1", name: fact_1.FactName.servicePrincipal("autoscaling"), value: "autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-southeast-1", name: fact_1.FactName.servicePrincipal("codedeploy"), value: "codedeploy.ap-southeast-1.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-southeast-1", name: fact_1.FactName.servicePrincipal("ec2"), value: "ec2.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-southeast-1", name: fact_1.FactName.servicePrincipal("events"), value: "events.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-southeast-1", name: fact_1.FactName.servicePrincipal("lambda"), value: "lambda.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-southeast-1", name: fact_1.FactName.servicePrincipal("logs"), value: "logs.ap-southeast-1.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-southeast-1", name: fact_1.FactName.servicePrincipal("s3"), value: "s3.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-southeast-1", name: fact_1.FactName.servicePrincipal("sns"), value: "sns.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-southeast-1", name: fact_1.FactName.servicePrincipal("sqs"), value: "sqs.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-southeast-1", name: fact_1.FactName.servicePrincipal("states"), value: "states.ap-southeast-1.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-southeast-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.98.0"), value: "arn:aws:lambda:ap-southeast-1:580247275435:layer:LambdaInsightsExtension:14" });
        fact_1.Fact.register({ region: "ap-southeast-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.89.0"), value: "arn:aws:lambda:ap-southeast-1:580247275435:layer:LambdaInsightsExtension:12" });
        fact_1.Fact.register({ region: "ap-southeast-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.86.0"), value: "arn:aws:lambda:ap-southeast-1:580247275435:layer:LambdaInsightsExtension:11" });
        fact_1.Fact.register({ region: "ap-southeast-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.54.0"), value: "arn:aws:lambda:ap-southeast-1:580247275435:layer:LambdaInsightsExtension:2" });
        fact_1.Fact.register({ region: "ap-southeast-2", name: fact_1.FactName.PARTITION, value: "aws" });
        fact_1.Fact.register({ region: "ap-southeast-2", name: fact_1.FactName.DOMAIN_SUFFIX, value: "amazonaws.com" });
        fact_1.Fact.register({ region: "ap-southeast-2", name: fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE, value: "YES" });
        fact_1.Fact.register({ region: "ap-southeast-2", name: fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT, value: "s3-website-ap-southeast-2.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-southeast-2", name: fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID, value: "Z1WCIGYICN2BYD" });
        fact_1.Fact.register({ region: "ap-southeast-2", name: fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID, value: "Z2PCDNR3VC2G1N" });
        fact_1.Fact.register({ region: "ap-southeast-2", name: fact_1.FactName.ELBV2_ACCOUNT, value: "783225319266" });
        fact_1.Fact.register({ region: "ap-southeast-2", name: fact_1.FactName.DLC_REPOSITORY_ACCOUNT, value: "763104351884" });
        fact_1.Fact.register({ region: "ap-southeast-2", name: fact_1.FactName.APPMESH_ECR_ACCOUNT, value: "840364872350" });
        fact_1.Fact.register({ region: "ap-southeast-2", name: fact_1.FactName.FIREHOSE_CIDR_BLOCK, value: "13.210.67.224/27" });
        fact_1.Fact.register({ region: "ap-southeast-2", name: fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX, value: "com.amazonaws.vpce" });
        fact_1.Fact.register({ region: "ap-southeast-2", name: fact_1.FactName.servicePrincipal("application-autoscaling"), value: "application-autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-southeast-2", name: fact_1.FactName.servicePrincipal("autoscaling"), value: "autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-southeast-2", name: fact_1.FactName.servicePrincipal("codedeploy"), value: "codedeploy.ap-southeast-2.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-southeast-2", name: fact_1.FactName.servicePrincipal("ec2"), value: "ec2.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-southeast-2", name: fact_1.FactName.servicePrincipal("events"), value: "events.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-southeast-2", name: fact_1.FactName.servicePrincipal("lambda"), value: "lambda.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-southeast-2", name: fact_1.FactName.servicePrincipal("logs"), value: "logs.ap-southeast-2.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-southeast-2", name: fact_1.FactName.servicePrincipal("s3"), value: "s3.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-southeast-2", name: fact_1.FactName.servicePrincipal("sns"), value: "sns.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-southeast-2", name: fact_1.FactName.servicePrincipal("sqs"), value: "sqs.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-southeast-2", name: fact_1.FactName.servicePrincipal("states"), value: "states.ap-southeast-2.amazonaws.com" });
        fact_1.Fact.register({ region: "ap-southeast-2", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.98.0"), value: "arn:aws:lambda:ap-southeast-2:580247275435:layer:LambdaInsightsExtension:14" });
        fact_1.Fact.register({ region: "ap-southeast-2", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.89.0"), value: "arn:aws:lambda:ap-southeast-2:580247275435:layer:LambdaInsightsExtension:12" });
        fact_1.Fact.register({ region: "ap-southeast-2", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.86.0"), value: "arn:aws:lambda:ap-southeast-2:580247275435:layer:LambdaInsightsExtension:11" });
        fact_1.Fact.register({ region: "ap-southeast-2", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.54.0"), value: "arn:aws:lambda:ap-southeast-2:580247275435:layer:LambdaInsightsExtension:2" });
        fact_1.Fact.register({ region: "ca-central-1", name: fact_1.FactName.PARTITION, value: "aws" });
        fact_1.Fact.register({ region: "ca-central-1", name: fact_1.FactName.DOMAIN_SUFFIX, value: "amazonaws.com" });
        fact_1.Fact.register({ region: "ca-central-1", name: fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE, value: "YES" });
        fact_1.Fact.register({ region: "ca-central-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT, value: "s3-website.ca-central-1.amazonaws.com" });
        fact_1.Fact.register({ region: "ca-central-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID, value: "Z1QDHH18159H29" });
        fact_1.Fact.register({ region: "ca-central-1", name: fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID, value: "ZJFCZL7SSZB5I" });
        fact_1.Fact.register({ region: "ca-central-1", name: fact_1.FactName.ELBV2_ACCOUNT, value: "985666609251" });
        fact_1.Fact.register({ region: "ca-central-1", name: fact_1.FactName.DLC_REPOSITORY_ACCOUNT, value: "763104351884" });
        fact_1.Fact.register({ region: "ca-central-1", name: fact_1.FactName.APPMESH_ECR_ACCOUNT, value: "840364872350" });
        fact_1.Fact.register({ region: "ca-central-1", name: fact_1.FactName.FIREHOSE_CIDR_BLOCK, value: "35.183.92.128/27" });
        fact_1.Fact.register({ region: "ca-central-1", name: fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX, value: "com.amazonaws.vpce" });
        fact_1.Fact.register({ region: "ca-central-1", name: fact_1.FactName.servicePrincipal("application-autoscaling"), value: "application-autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "ca-central-1", name: fact_1.FactName.servicePrincipal("autoscaling"), value: "autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "ca-central-1", name: fact_1.FactName.servicePrincipal("codedeploy"), value: "codedeploy.ca-central-1.amazonaws.com" });
        fact_1.Fact.register({ region: "ca-central-1", name: fact_1.FactName.servicePrincipal("ec2"), value: "ec2.amazonaws.com" });
        fact_1.Fact.register({ region: "ca-central-1", name: fact_1.FactName.servicePrincipal("events"), value: "events.amazonaws.com" });
        fact_1.Fact.register({ region: "ca-central-1", name: fact_1.FactName.servicePrincipal("lambda"), value: "lambda.amazonaws.com" });
        fact_1.Fact.register({ region: "ca-central-1", name: fact_1.FactName.servicePrincipal("logs"), value: "logs.ca-central-1.amazonaws.com" });
        fact_1.Fact.register({ region: "ca-central-1", name: fact_1.FactName.servicePrincipal("s3"), value: "s3.amazonaws.com" });
        fact_1.Fact.register({ region: "ca-central-1", name: fact_1.FactName.servicePrincipal("sns"), value: "sns.amazonaws.com" });
        fact_1.Fact.register({ region: "ca-central-1", name: fact_1.FactName.servicePrincipal("sqs"), value: "sqs.amazonaws.com" });
        fact_1.Fact.register({ region: "ca-central-1", name: fact_1.FactName.servicePrincipal("states"), value: "states.ca-central-1.amazonaws.com" });
        fact_1.Fact.register({ region: "ca-central-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.98.0"), value: "arn:aws:lambda:ca-central-1:580247275435:layer:LambdaInsightsExtension:14" });
        fact_1.Fact.register({ region: "ca-central-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.89.0"), value: "arn:aws:lambda:ca-central-1:580247275435:layer:LambdaInsightsExtension:12" });
        fact_1.Fact.register({ region: "ca-central-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.86.0"), value: "arn:aws:lambda:ca-central-1:580247275435:layer:LambdaInsightsExtension:11" });
        fact_1.Fact.register({ region: "ca-central-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.54.0"), value: "arn:aws:lambda:ca-central-1:580247275435:layer:LambdaInsightsExtension:2" });
        fact_1.Fact.register({ region: "cn-north-1", name: fact_1.FactName.PARTITION, value: "aws-cn" });
        fact_1.Fact.register({ region: "cn-north-1", name: fact_1.FactName.DOMAIN_SUFFIX, value: "amazonaws.com.cn" });
        fact_1.Fact.register({ region: "cn-north-1", name: fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE, value: "YES" });
        fact_1.Fact.register({ region: "cn-north-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT, value: "s3-website.cn-north-1.amazonaws.com.cn" });
        fact_1.Fact.register({ region: "cn-north-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID, value: "" });
        fact_1.Fact.register({ region: "cn-north-1", name: fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID, value: "" });
        fact_1.Fact.register({ region: "cn-north-1", name: fact_1.FactName.ELBV2_ACCOUNT, value: "638102146993" });
        fact_1.Fact.register({ region: "cn-north-1", name: fact_1.FactName.DLC_REPOSITORY_ACCOUNT, value: "727897471807" });
        fact_1.Fact.register({ region: "cn-north-1", name: fact_1.FactName.APPMESH_ECR_ACCOUNT, value: "919366029133" });
        fact_1.Fact.register({ region: "cn-north-1", name: fact_1.FactName.FIREHOSE_CIDR_BLOCK, value: "52.81.151.32/27" });
        fact_1.Fact.register({ region: "cn-north-1", name: fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX, value: "cn.com.amazonaws.vpce" });
        fact_1.Fact.register({ region: "cn-north-1", name: fact_1.FactName.servicePrincipal("application-autoscaling"), value: "application-autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "cn-north-1", name: fact_1.FactName.servicePrincipal("autoscaling"), value: "autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "cn-north-1", name: fact_1.FactName.servicePrincipal("codedeploy"), value: "codedeploy.cn-north-1.amazonaws.com.cn" });
        fact_1.Fact.register({ region: "cn-north-1", name: fact_1.FactName.servicePrincipal("ec2"), value: "ec2.amazonaws.com.cn" });
        fact_1.Fact.register({ region: "cn-north-1", name: fact_1.FactName.servicePrincipal("events"), value: "events.amazonaws.com" });
        fact_1.Fact.register({ region: "cn-north-1", name: fact_1.FactName.servicePrincipal("lambda"), value: "lambda.amazonaws.com" });
        fact_1.Fact.register({ region: "cn-north-1", name: fact_1.FactName.servicePrincipal("logs"), value: "logs.cn-north-1.amazonaws.com.cn" });
        fact_1.Fact.register({ region: "cn-north-1", name: fact_1.FactName.servicePrincipal("s3"), value: "s3.amazonaws.com" });
        fact_1.Fact.register({ region: "cn-north-1", name: fact_1.FactName.servicePrincipal("sns"), value: "sns.amazonaws.com" });
        fact_1.Fact.register({ region: "cn-north-1", name: fact_1.FactName.servicePrincipal("sqs"), value: "sqs.amazonaws.com" });
        fact_1.Fact.register({ region: "cn-north-1", name: fact_1.FactName.servicePrincipal("states"), value: "states.cn-north-1.amazonaws.com" });
        fact_1.Fact.register({ region: "cn-north-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.98.0"), value: "arn:aws-cn:lambda:cn-north-1:488211338238:layer:LambdaInsightsExtension:8" });
        fact_1.Fact.register({ region: "cn-north-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.89.0"), value: void 0 });
        fact_1.Fact.register({ region: "cn-north-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.86.0"), value: void 0 });
        fact_1.Fact.register({ region: "cn-north-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.54.0"), value: void 0 });
        fact_1.Fact.register({ region: "cn-northwest-1", name: fact_1.FactName.PARTITION, value: "aws-cn" });
        fact_1.Fact.register({ region: "cn-northwest-1", name: fact_1.FactName.DOMAIN_SUFFIX, value: "amazonaws.com.cn" });
        fact_1.Fact.register({ region: "cn-northwest-1", name: fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE, value: "YES" });
        fact_1.Fact.register({ region: "cn-northwest-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT, value: "s3-website.cn-northwest-1.amazonaws.com.cn" });
        fact_1.Fact.register({ region: "cn-northwest-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID, value: "Z282HJ1KT0DH03" });
        fact_1.Fact.register({ region: "cn-northwest-1", name: fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID, value: "" });
        fact_1.Fact.register({ region: "cn-northwest-1", name: fact_1.FactName.ELBV2_ACCOUNT, value: "037604701340" });
        fact_1.Fact.register({ region: "cn-northwest-1", name: fact_1.FactName.DLC_REPOSITORY_ACCOUNT, value: "727897471807" });
        fact_1.Fact.register({ region: "cn-northwest-1", name: fact_1.FactName.APPMESH_ECR_ACCOUNT, value: "919830735681" });
        fact_1.Fact.register({ region: "cn-northwest-1", name: fact_1.FactName.FIREHOSE_CIDR_BLOCK, value: "161.189.23.64/27" });
        fact_1.Fact.register({ region: "cn-northwest-1", name: fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX, value: "cn.com.amazonaws.vpce" });
        fact_1.Fact.register({ region: "cn-northwest-1", name: fact_1.FactName.servicePrincipal("application-autoscaling"), value: "application-autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "cn-northwest-1", name: fact_1.FactName.servicePrincipal("autoscaling"), value: "autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "cn-northwest-1", name: fact_1.FactName.servicePrincipal("codedeploy"), value: "codedeploy.cn-northwest-1.amazonaws.com.cn" });
        fact_1.Fact.register({ region: "cn-northwest-1", name: fact_1.FactName.servicePrincipal("ec2"), value: "ec2.amazonaws.com.cn" });
        fact_1.Fact.register({ region: "cn-northwest-1", name: fact_1.FactName.servicePrincipal("events"), value: "events.amazonaws.com" });
        fact_1.Fact.register({ region: "cn-northwest-1", name: fact_1.FactName.servicePrincipal("lambda"), value: "lambda.amazonaws.com" });
        fact_1.Fact.register({ region: "cn-northwest-1", name: fact_1.FactName.servicePrincipal("logs"), value: "logs.cn-northwest-1.amazonaws.com.cn" });
        fact_1.Fact.register({ region: "cn-northwest-1", name: fact_1.FactName.servicePrincipal("s3"), value: "s3.amazonaws.com" });
        fact_1.Fact.register({ region: "cn-northwest-1", name: fact_1.FactName.servicePrincipal("sns"), value: "sns.amazonaws.com" });
        fact_1.Fact.register({ region: "cn-northwest-1", name: fact_1.FactName.servicePrincipal("sqs"), value: "sqs.amazonaws.com" });
        fact_1.Fact.register({ region: "cn-northwest-1", name: fact_1.FactName.servicePrincipal("states"), value: "states.cn-northwest-1.amazonaws.com" });
        fact_1.Fact.register({ region: "cn-northwest-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.98.0"), value: "arn:aws-cn:lambda:cn-northwest-1:488211338238:layer:LambdaInsightsExtension:8" });
        fact_1.Fact.register({ region: "cn-northwest-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.89.0"), value: void 0 });
        fact_1.Fact.register({ region: "cn-northwest-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.86.0"), value: void 0 });
        fact_1.Fact.register({ region: "cn-northwest-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.54.0"), value: void 0 });
        fact_1.Fact.register({ region: "eu-central-1", name: fact_1.FactName.PARTITION, value: "aws" });
        fact_1.Fact.register({ region: "eu-central-1", name: fact_1.FactName.DOMAIN_SUFFIX, value: "amazonaws.com" });
        fact_1.Fact.register({ region: "eu-central-1", name: fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE, value: "YES" });
        fact_1.Fact.register({ region: "eu-central-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT, value: "s3-website.eu-central-1.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-central-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID, value: "Z21DNDUVLTQW6Q" });
        fact_1.Fact.register({ region: "eu-central-1", name: fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID, value: "Z1FRNW7UH4DEZJ" });
        fact_1.Fact.register({ region: "eu-central-1", name: fact_1.FactName.ELBV2_ACCOUNT, value: "054676820928" });
        fact_1.Fact.register({ region: "eu-central-1", name: fact_1.FactName.DLC_REPOSITORY_ACCOUNT, value: "763104351884" });
        fact_1.Fact.register({ region: "eu-central-1", name: fact_1.FactName.APPMESH_ECR_ACCOUNT, value: "840364872350" });
        fact_1.Fact.register({ region: "eu-central-1", name: fact_1.FactName.FIREHOSE_CIDR_BLOCK, value: "35.158.127.160/27" });
        fact_1.Fact.register({ region: "eu-central-1", name: fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX, value: "com.amazonaws.vpce" });
        fact_1.Fact.register({ region: "eu-central-1", name: fact_1.FactName.servicePrincipal("application-autoscaling"), value: "application-autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-central-1", name: fact_1.FactName.servicePrincipal("autoscaling"), value: "autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-central-1", name: fact_1.FactName.servicePrincipal("codedeploy"), value: "codedeploy.eu-central-1.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-central-1", name: fact_1.FactName.servicePrincipal("ec2"), value: "ec2.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-central-1", name: fact_1.FactName.servicePrincipal("events"), value: "events.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-central-1", name: fact_1.FactName.servicePrincipal("lambda"), value: "lambda.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-central-1", name: fact_1.FactName.servicePrincipal("logs"), value: "logs.eu-central-1.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-central-1", name: fact_1.FactName.servicePrincipal("s3"), value: "s3.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-central-1", name: fact_1.FactName.servicePrincipal("sns"), value: "sns.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-central-1", name: fact_1.FactName.servicePrincipal("sqs"), value: "sqs.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-central-1", name: fact_1.FactName.servicePrincipal("states"), value: "states.eu-central-1.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-central-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.98.0"), value: "arn:aws:lambda:eu-central-1:580247275435:layer:LambdaInsightsExtension:14" });
        fact_1.Fact.register({ region: "eu-central-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.89.0"), value: "arn:aws:lambda:eu-central-1:580247275435:layer:LambdaInsightsExtension:12" });
        fact_1.Fact.register({ region: "eu-central-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.86.0"), value: "arn:aws:lambda:eu-central-1:580247275435:layer:LambdaInsightsExtension:11" });
        fact_1.Fact.register({ region: "eu-central-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.54.0"), value: "arn:aws:lambda:eu-central-1:580247275435:layer:LambdaInsightsExtension:2" });
        fact_1.Fact.register({ region: "eu-north-1", name: fact_1.FactName.PARTITION, value: "aws" });
        fact_1.Fact.register({ region: "eu-north-1", name: fact_1.FactName.DOMAIN_SUFFIX, value: "amazonaws.com" });
        fact_1.Fact.register({ region: "eu-north-1", name: fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE, value: "YES" });
        fact_1.Fact.register({ region: "eu-north-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT, value: "s3-website.eu-north-1.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-north-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID, value: "Z3BAZG2TWCNX0D" });
        fact_1.Fact.register({ region: "eu-north-1", name: fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID, value: "Z23GO28BZ5AETM" });
        fact_1.Fact.register({ region: "eu-north-1", name: fact_1.FactName.ELBV2_ACCOUNT, value: "897822967062" });
        fact_1.Fact.register({ region: "eu-north-1", name: fact_1.FactName.DLC_REPOSITORY_ACCOUNT, value: "763104351884" });
        fact_1.Fact.register({ region: "eu-north-1", name: fact_1.FactName.APPMESH_ECR_ACCOUNT, value: "840364872350" });
        fact_1.Fact.register({ region: "eu-north-1", name: fact_1.FactName.FIREHOSE_CIDR_BLOCK, value: "13.53.63.224/27" });
        fact_1.Fact.register({ region: "eu-north-1", name: fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX, value: "com.amazonaws.vpce" });
        fact_1.Fact.register({ region: "eu-north-1", name: fact_1.FactName.servicePrincipal("application-autoscaling"), value: "application-autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-north-1", name: fact_1.FactName.servicePrincipal("autoscaling"), value: "autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-north-1", name: fact_1.FactName.servicePrincipal("codedeploy"), value: "codedeploy.eu-north-1.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-north-1", name: fact_1.FactName.servicePrincipal("ec2"), value: "ec2.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-north-1", name: fact_1.FactName.servicePrincipal("events"), value: "events.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-north-1", name: fact_1.FactName.servicePrincipal("lambda"), value: "lambda.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-north-1", name: fact_1.FactName.servicePrincipal("logs"), value: "logs.eu-north-1.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-north-1", name: fact_1.FactName.servicePrincipal("s3"), value: "s3.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-north-1", name: fact_1.FactName.servicePrincipal("sns"), value: "sns.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-north-1", name: fact_1.FactName.servicePrincipal("sqs"), value: "sqs.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-north-1", name: fact_1.FactName.servicePrincipal("states"), value: "states.eu-north-1.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-north-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.98.0"), value: "arn:aws:lambda:eu-north-1:580247275435:layer:LambdaInsightsExtension:14" });
        fact_1.Fact.register({ region: "eu-north-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.89.0"), value: "arn:aws:lambda:eu-north-1:580247275435:layer:LambdaInsightsExtension:12" });
        fact_1.Fact.register({ region: "eu-north-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.86.0"), value: "arn:aws:lambda:eu-north-1:580247275435:layer:LambdaInsightsExtension:11" });
        fact_1.Fact.register({ region: "eu-north-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.54.0"), value: "arn:aws:lambda:eu-north-1:580247275435:layer:LambdaInsightsExtension:2" });
        fact_1.Fact.register({ region: "eu-south-1", name: fact_1.FactName.PARTITION, value: "aws" });
        fact_1.Fact.register({ region: "eu-south-1", name: fact_1.FactName.DOMAIN_SUFFIX, value: "amazonaws.com" });
        fact_1.Fact.register({ region: "eu-south-1", name: fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE, value: "YES" });
        fact_1.Fact.register({ region: "eu-south-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT, value: "s3-website.eu-south-1.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-south-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID, value: "Z3IXVV8C73GIO3" });
        fact_1.Fact.register({ region: "eu-south-1", name: fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID, value: "Z10VDYYOA2JFKM" });
        fact_1.Fact.register({ region: "eu-south-1", name: fact_1.FactName.ELBV2_ACCOUNT, value: "635631232127" });
        fact_1.Fact.register({ region: "eu-south-1", name: fact_1.FactName.DLC_REPOSITORY_ACCOUNT, value: void 0 });
        fact_1.Fact.register({ region: "eu-south-1", name: fact_1.FactName.APPMESH_ECR_ACCOUNT, value: "422531588944" });
        fact_1.Fact.register({ region: "eu-south-1", name: fact_1.FactName.FIREHOSE_CIDR_BLOCK, value: "15.161.135.128/27" });
        fact_1.Fact.register({ region: "eu-south-1", name: fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX, value: "com.amazonaws.vpce" });
        fact_1.Fact.register({ region: "eu-south-1", name: fact_1.FactName.servicePrincipal("application-autoscaling"), value: "application-autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-south-1", name: fact_1.FactName.servicePrincipal("autoscaling"), value: "autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-south-1", name: fact_1.FactName.servicePrincipal("codedeploy"), value: "codedeploy.eu-south-1.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-south-1", name: fact_1.FactName.servicePrincipal("ec2"), value: "ec2.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-south-1", name: fact_1.FactName.servicePrincipal("events"), value: "events.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-south-1", name: fact_1.FactName.servicePrincipal("lambda"), value: "lambda.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-south-1", name: fact_1.FactName.servicePrincipal("logs"), value: "logs.eu-south-1.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-south-1", name: fact_1.FactName.servicePrincipal("s3"), value: "s3.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-south-1", name: fact_1.FactName.servicePrincipal("sns"), value: "sns.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-south-1", name: fact_1.FactName.servicePrincipal("sqs"), value: "sqs.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-south-1", name: fact_1.FactName.servicePrincipal("states"), value: "states.eu-south-1.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-south-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.98.0"), value: "arn:aws:lambda:eu-south-1:339249233099:layer:LambdaInsightsExtension:8" });
        fact_1.Fact.register({ region: "eu-south-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.89.0"), value: void 0 });
        fact_1.Fact.register({ region: "eu-south-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.86.0"), value: void 0 });
        fact_1.Fact.register({ region: "eu-south-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.54.0"), value: void 0 });
        fact_1.Fact.register({ region: "eu-west-1", name: fact_1.FactName.PARTITION, value: "aws" });
        fact_1.Fact.register({ region: "eu-west-1", name: fact_1.FactName.DOMAIN_SUFFIX, value: "amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-1", name: fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE, value: "YES" });
        fact_1.Fact.register({ region: "eu-west-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT, value: "s3-website-eu-west-1.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID, value: "Z1BKCTXD74EZPE" });
        fact_1.Fact.register({ region: "eu-west-1", name: fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID, value: "Z2NYPWQ7DFZAZH" });
        fact_1.Fact.register({ region: "eu-west-1", name: fact_1.FactName.ELBV2_ACCOUNT, value: "156460612806" });
        fact_1.Fact.register({ region: "eu-west-1", name: fact_1.FactName.DLC_REPOSITORY_ACCOUNT, value: "763104351884" });
        fact_1.Fact.register({ region: "eu-west-1", name: fact_1.FactName.APPMESH_ECR_ACCOUNT, value: "840364872350" });
        fact_1.Fact.register({ region: "eu-west-1", name: fact_1.FactName.FIREHOSE_CIDR_BLOCK, value: "52.19.239.192/27" });
        fact_1.Fact.register({ region: "eu-west-1", name: fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX, value: "com.amazonaws.vpce" });
        fact_1.Fact.register({ region: "eu-west-1", name: fact_1.FactName.servicePrincipal("application-autoscaling"), value: "application-autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-1", name: fact_1.FactName.servicePrincipal("autoscaling"), value: "autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-1", name: fact_1.FactName.servicePrincipal("codedeploy"), value: "codedeploy.eu-west-1.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-1", name: fact_1.FactName.servicePrincipal("ec2"), value: "ec2.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-1", name: fact_1.FactName.servicePrincipal("events"), value: "events.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-1", name: fact_1.FactName.servicePrincipal("lambda"), value: "lambda.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-1", name: fact_1.FactName.servicePrincipal("logs"), value: "logs.eu-west-1.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-1", name: fact_1.FactName.servicePrincipal("s3"), value: "s3.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-1", name: fact_1.FactName.servicePrincipal("sns"), value: "sns.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-1", name: fact_1.FactName.servicePrincipal("sqs"), value: "sqs.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-1", name: fact_1.FactName.servicePrincipal("states"), value: "states.eu-west-1.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.98.0"), value: "arn:aws:lambda:eu-west-1:580247275435:layer:LambdaInsightsExtension:14" });
        fact_1.Fact.register({ region: "eu-west-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.89.0"), value: "arn:aws:lambda:eu-west-1:580247275435:layer:LambdaInsightsExtension:12" });
        fact_1.Fact.register({ region: "eu-west-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.86.0"), value: "arn:aws:lambda:eu-west-1:580247275435:layer:LambdaInsightsExtension:11" });
        fact_1.Fact.register({ region: "eu-west-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.54.0"), value: "arn:aws:lambda:eu-west-1:580247275435:layer:LambdaInsightsExtension:2" });
        fact_1.Fact.register({ region: "eu-west-2", name: fact_1.FactName.PARTITION, value: "aws" });
        fact_1.Fact.register({ region: "eu-west-2", name: fact_1.FactName.DOMAIN_SUFFIX, value: "amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-2", name: fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE, value: "YES" });
        fact_1.Fact.register({ region: "eu-west-2", name: fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT, value: "s3-website.eu-west-2.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-2", name: fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID, value: "Z3GKZC51ZF0DB4" });
        fact_1.Fact.register({ region: "eu-west-2", name: fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID, value: "Z1GKAAAUGATPF1" });
        fact_1.Fact.register({ region: "eu-west-2", name: fact_1.FactName.ELBV2_ACCOUNT, value: "652711504416" });
        fact_1.Fact.register({ region: "eu-west-2", name: fact_1.FactName.DLC_REPOSITORY_ACCOUNT, value: "763104351884" });
        fact_1.Fact.register({ region: "eu-west-2", name: fact_1.FactName.APPMESH_ECR_ACCOUNT, value: "840364872350" });
        fact_1.Fact.register({ region: "eu-west-2", name: fact_1.FactName.FIREHOSE_CIDR_BLOCK, value: "18.130.1.96/27" });
        fact_1.Fact.register({ region: "eu-west-2", name: fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX, value: "com.amazonaws.vpce" });
        fact_1.Fact.register({ region: "eu-west-2", name: fact_1.FactName.servicePrincipal("application-autoscaling"), value: "application-autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-2", name: fact_1.FactName.servicePrincipal("autoscaling"), value: "autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-2", name: fact_1.FactName.servicePrincipal("codedeploy"), value: "codedeploy.eu-west-2.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-2", name: fact_1.FactName.servicePrincipal("ec2"), value: "ec2.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-2", name: fact_1.FactName.servicePrincipal("events"), value: "events.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-2", name: fact_1.FactName.servicePrincipal("lambda"), value: "lambda.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-2", name: fact_1.FactName.servicePrincipal("logs"), value: "logs.eu-west-2.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-2", name: fact_1.FactName.servicePrincipal("s3"), value: "s3.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-2", name: fact_1.FactName.servicePrincipal("sns"), value: "sns.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-2", name: fact_1.FactName.servicePrincipal("sqs"), value: "sqs.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-2", name: fact_1.FactName.servicePrincipal("states"), value: "states.eu-west-2.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-2", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.98.0"), value: "arn:aws:lambda:eu-west-2:580247275435:layer:LambdaInsightsExtension:14" });
        fact_1.Fact.register({ region: "eu-west-2", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.89.0"), value: "arn:aws:lambda:eu-west-2:580247275435:layer:LambdaInsightsExtension:12" });
        fact_1.Fact.register({ region: "eu-west-2", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.86.0"), value: "arn:aws:lambda:eu-west-2:580247275435:layer:LambdaInsightsExtension:11" });
        fact_1.Fact.register({ region: "eu-west-2", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.54.0"), value: "arn:aws:lambda:eu-west-2:580247275435:layer:LambdaInsightsExtension:2" });
        fact_1.Fact.register({ region: "eu-west-3", name: fact_1.FactName.PARTITION, value: "aws" });
        fact_1.Fact.register({ region: "eu-west-3", name: fact_1.FactName.DOMAIN_SUFFIX, value: "amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-3", name: fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE, value: "YES" });
        fact_1.Fact.register({ region: "eu-west-3", name: fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT, value: "s3-website.eu-west-3.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-3", name: fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID, value: "Z3R1K369G5AVDG" });
        fact_1.Fact.register({ region: "eu-west-3", name: fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID, value: "Z5WN6GAYWG5OB" });
        fact_1.Fact.register({ region: "eu-west-3", name: fact_1.FactName.ELBV2_ACCOUNT, value: "009996457667" });
        fact_1.Fact.register({ region: "eu-west-3", name: fact_1.FactName.DLC_REPOSITORY_ACCOUNT, value: "763104351884" });
        fact_1.Fact.register({ region: "eu-west-3", name: fact_1.FactName.APPMESH_ECR_ACCOUNT, value: "840364872350" });
        fact_1.Fact.register({ region: "eu-west-3", name: fact_1.FactName.FIREHOSE_CIDR_BLOCK, value: "35.180.1.96/27" });
        fact_1.Fact.register({ region: "eu-west-3", name: fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX, value: "com.amazonaws.vpce" });
        fact_1.Fact.register({ region: "eu-west-3", name: fact_1.FactName.servicePrincipal("application-autoscaling"), value: "application-autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-3", name: fact_1.FactName.servicePrincipal("autoscaling"), value: "autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-3", name: fact_1.FactName.servicePrincipal("codedeploy"), value: "codedeploy.eu-west-3.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-3", name: fact_1.FactName.servicePrincipal("ec2"), value: "ec2.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-3", name: fact_1.FactName.servicePrincipal("events"), value: "events.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-3", name: fact_1.FactName.servicePrincipal("lambda"), value: "lambda.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-3", name: fact_1.FactName.servicePrincipal("logs"), value: "logs.eu-west-3.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-3", name: fact_1.FactName.servicePrincipal("s3"), value: "s3.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-3", name: fact_1.FactName.servicePrincipal("sns"), value: "sns.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-3", name: fact_1.FactName.servicePrincipal("sqs"), value: "sqs.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-3", name: fact_1.FactName.servicePrincipal("states"), value: "states.eu-west-3.amazonaws.com" });
        fact_1.Fact.register({ region: "eu-west-3", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.98.0"), value: "arn:aws:lambda:eu-west-3:580247275435:layer:LambdaInsightsExtension:14" });
        fact_1.Fact.register({ region: "eu-west-3", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.89.0"), value: "arn:aws:lambda:eu-west-3:580247275435:layer:LambdaInsightsExtension:12" });
        fact_1.Fact.register({ region: "eu-west-3", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.86.0"), value: "arn:aws:lambda:eu-west-3:580247275435:layer:LambdaInsightsExtension:11" });
        fact_1.Fact.register({ region: "eu-west-3", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.54.0"), value: "arn:aws:lambda:eu-west-3:580247275435:layer:LambdaInsightsExtension:2" });
        fact_1.Fact.register({ region: "me-south-1", name: fact_1.FactName.PARTITION, value: "aws" });
        fact_1.Fact.register({ region: "me-south-1", name: fact_1.FactName.DOMAIN_SUFFIX, value: "amazonaws.com" });
        fact_1.Fact.register({ region: "me-south-1", name: fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE, value: "YES" });
        fact_1.Fact.register({ region: "me-south-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT, value: "s3-website.me-south-1.amazonaws.com" });
        fact_1.Fact.register({ region: "me-south-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID, value: "Z1MPMWCPA7YB62" });
        fact_1.Fact.register({ region: "me-south-1", name: fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID, value: "Z2BBTEKR2I36N2" });
        fact_1.Fact.register({ region: "me-south-1", name: fact_1.FactName.ELBV2_ACCOUNT, value: "076674570225" });
        fact_1.Fact.register({ region: "me-south-1", name: fact_1.FactName.DLC_REPOSITORY_ACCOUNT, value: "217643126080" });
        fact_1.Fact.register({ region: "me-south-1", name: fact_1.FactName.APPMESH_ECR_ACCOUNT, value: "772975370895" });
        fact_1.Fact.register({ region: "me-south-1", name: fact_1.FactName.FIREHOSE_CIDR_BLOCK, value: "15.185.91.0/27" });
        fact_1.Fact.register({ region: "me-south-1", name: fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX, value: "com.amazonaws.vpce" });
        fact_1.Fact.register({ region: "me-south-1", name: fact_1.FactName.servicePrincipal("application-autoscaling"), value: "application-autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "me-south-1", name: fact_1.FactName.servicePrincipal("autoscaling"), value: "autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "me-south-1", name: fact_1.FactName.servicePrincipal("codedeploy"), value: "codedeploy.me-south-1.amazonaws.com" });
        fact_1.Fact.register({ region: "me-south-1", name: fact_1.FactName.servicePrincipal("ec2"), value: "ec2.amazonaws.com" });
        fact_1.Fact.register({ region: "me-south-1", name: fact_1.FactName.servicePrincipal("events"), value: "events.amazonaws.com" });
        fact_1.Fact.register({ region: "me-south-1", name: fact_1.FactName.servicePrincipal("lambda"), value: "lambda.amazonaws.com" });
        fact_1.Fact.register({ region: "me-south-1", name: fact_1.FactName.servicePrincipal("logs"), value: "logs.me-south-1.amazonaws.com" });
        fact_1.Fact.register({ region: "me-south-1", name: fact_1.FactName.servicePrincipal("s3"), value: "s3.amazonaws.com" });
        fact_1.Fact.register({ region: "me-south-1", name: fact_1.FactName.servicePrincipal("sns"), value: "sns.amazonaws.com" });
        fact_1.Fact.register({ region: "me-south-1", name: fact_1.FactName.servicePrincipal("sqs"), value: "sqs.amazonaws.com" });
        fact_1.Fact.register({ region: "me-south-1", name: fact_1.FactName.servicePrincipal("states"), value: "states.me-south-1.amazonaws.com" });
        fact_1.Fact.register({ region: "me-south-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.98.0"), value: "arn:aws:lambda:me-south-1:285320876703:layer:LambdaInsightsExtension:8" });
        fact_1.Fact.register({ region: "me-south-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.89.0"), value: void 0 });
        fact_1.Fact.register({ region: "me-south-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.86.0"), value: void 0 });
        fact_1.Fact.register({ region: "me-south-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.54.0"), value: void 0 });
        fact_1.Fact.register({ region: "sa-east-1", name: fact_1.FactName.PARTITION, value: "aws" });
        fact_1.Fact.register({ region: "sa-east-1", name: fact_1.FactName.DOMAIN_SUFFIX, value: "amazonaws.com" });
        fact_1.Fact.register({ region: "sa-east-1", name: fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE, value: "YES" });
        fact_1.Fact.register({ region: "sa-east-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT, value: "s3-website-sa-east-1.amazonaws.com" });
        fact_1.Fact.register({ region: "sa-east-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID, value: "Z7KQH4QJS55SO" });
        fact_1.Fact.register({ region: "sa-east-1", name: fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID, value: "Z10X7K2B4QSOFV" });
        fact_1.Fact.register({ region: "sa-east-1", name: fact_1.FactName.ELBV2_ACCOUNT, value: "507241528517" });
        fact_1.Fact.register({ region: "sa-east-1", name: fact_1.FactName.DLC_REPOSITORY_ACCOUNT, value: "763104351884" });
        fact_1.Fact.register({ region: "sa-east-1", name: fact_1.FactName.APPMESH_ECR_ACCOUNT, value: "840364872350" });
        fact_1.Fact.register({ region: "sa-east-1", name: fact_1.FactName.FIREHOSE_CIDR_BLOCK, value: "18.228.1.128/27" });
        fact_1.Fact.register({ region: "sa-east-1", name: fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX, value: "com.amazonaws.vpce" });
        fact_1.Fact.register({ region: "sa-east-1", name: fact_1.FactName.servicePrincipal("application-autoscaling"), value: "application-autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "sa-east-1", name: fact_1.FactName.servicePrincipal("autoscaling"), value: "autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "sa-east-1", name: fact_1.FactName.servicePrincipal("codedeploy"), value: "codedeploy.sa-east-1.amazonaws.com" });
        fact_1.Fact.register({ region: "sa-east-1", name: fact_1.FactName.servicePrincipal("ec2"), value: "ec2.amazonaws.com" });
        fact_1.Fact.register({ region: "sa-east-1", name: fact_1.FactName.servicePrincipal("events"), value: "events.amazonaws.com" });
        fact_1.Fact.register({ region: "sa-east-1", name: fact_1.FactName.servicePrincipal("lambda"), value: "lambda.amazonaws.com" });
        fact_1.Fact.register({ region: "sa-east-1", name: fact_1.FactName.servicePrincipal("logs"), value: "logs.sa-east-1.amazonaws.com" });
        fact_1.Fact.register({ region: "sa-east-1", name: fact_1.FactName.servicePrincipal("s3"), value: "s3.amazonaws.com" });
        fact_1.Fact.register({ region: "sa-east-1", name: fact_1.FactName.servicePrincipal("sns"), value: "sns.amazonaws.com" });
        fact_1.Fact.register({ region: "sa-east-1", name: fact_1.FactName.servicePrincipal("sqs"), value: "sqs.amazonaws.com" });
        fact_1.Fact.register({ region: "sa-east-1", name: fact_1.FactName.servicePrincipal("states"), value: "states.sa-east-1.amazonaws.com" });
        fact_1.Fact.register({ region: "sa-east-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.98.0"), value: "arn:aws:lambda:sa-east-1:580247275435:layer:LambdaInsightsExtension:14" });
        fact_1.Fact.register({ region: "sa-east-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.89.0"), value: "arn:aws:lambda:sa-east-1:580247275435:layer:LambdaInsightsExtension:12" });
        fact_1.Fact.register({ region: "sa-east-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.86.0"), value: "arn:aws:lambda:sa-east-1:580247275435:layer:LambdaInsightsExtension:11" });
        fact_1.Fact.register({ region: "sa-east-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.54.0"), value: "arn:aws:lambda:sa-east-1:580247275435:layer:LambdaInsightsExtension:2" });
        fact_1.Fact.register({ region: "us-east-1", name: fact_1.FactName.PARTITION, value: "aws" });
        fact_1.Fact.register({ region: "us-east-1", name: fact_1.FactName.DOMAIN_SUFFIX, value: "amazonaws.com" });
        fact_1.Fact.register({ region: "us-east-1", name: fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE, value: "YES" });
        fact_1.Fact.register({ region: "us-east-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT, value: "s3-website-us-east-1.amazonaws.com" });
        fact_1.Fact.register({ region: "us-east-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID, value: "Z3AQBSTGFYJSTF" });
        fact_1.Fact.register({ region: "us-east-1", name: fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID, value: "Z117KPS5GTRQ2G" });
        fact_1.Fact.register({ region: "us-east-1", name: fact_1.FactName.ELBV2_ACCOUNT, value: "127311923021" });
        fact_1.Fact.register({ region: "us-east-1", name: fact_1.FactName.DLC_REPOSITORY_ACCOUNT, value: "763104351884" });
        fact_1.Fact.register({ region: "us-east-1", name: fact_1.FactName.APPMESH_ECR_ACCOUNT, value: "840364872350" });
        fact_1.Fact.register({ region: "us-east-1", name: fact_1.FactName.FIREHOSE_CIDR_BLOCK, value: "52.70.63.192/27" });
        fact_1.Fact.register({ region: "us-east-1", name: fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX, value: "com.amazonaws.vpce" });
        fact_1.Fact.register({ region: "us-east-1", name: fact_1.FactName.servicePrincipal("application-autoscaling"), value: "application-autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "us-east-1", name: fact_1.FactName.servicePrincipal("autoscaling"), value: "autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "us-east-1", name: fact_1.FactName.servicePrincipal("codedeploy"), value: "codedeploy.us-east-1.amazonaws.com" });
        fact_1.Fact.register({ region: "us-east-1", name: fact_1.FactName.servicePrincipal("ec2"), value: "ec2.amazonaws.com" });
        fact_1.Fact.register({ region: "us-east-1", name: fact_1.FactName.servicePrincipal("events"), value: "events.amazonaws.com" });
        fact_1.Fact.register({ region: "us-east-1", name: fact_1.FactName.servicePrincipal("lambda"), value: "lambda.amazonaws.com" });
        fact_1.Fact.register({ region: "us-east-1", name: fact_1.FactName.servicePrincipal("logs"), value: "logs.us-east-1.amazonaws.com" });
        fact_1.Fact.register({ region: "us-east-1", name: fact_1.FactName.servicePrincipal("s3"), value: "s3.amazonaws.com" });
        fact_1.Fact.register({ region: "us-east-1", name: fact_1.FactName.servicePrincipal("sns"), value: "sns.amazonaws.com" });
        fact_1.Fact.register({ region: "us-east-1", name: fact_1.FactName.servicePrincipal("sqs"), value: "sqs.amazonaws.com" });
        fact_1.Fact.register({ region: "us-east-1", name: fact_1.FactName.servicePrincipal("states"), value: "states.us-east-1.amazonaws.com" });
        fact_1.Fact.register({ region: "us-east-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.98.0"), value: "arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:14" });
        fact_1.Fact.register({ region: "us-east-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.89.0"), value: "arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:12" });
        fact_1.Fact.register({ region: "us-east-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.86.0"), value: "arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:11" });
        fact_1.Fact.register({ region: "us-east-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.54.0"), value: "arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:2" });
        fact_1.Fact.register({ region: "us-east-2", name: fact_1.FactName.PARTITION, value: "aws" });
        fact_1.Fact.register({ region: "us-east-2", name: fact_1.FactName.DOMAIN_SUFFIX, value: "amazonaws.com" });
        fact_1.Fact.register({ region: "us-east-2", name: fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE, value: "YES" });
        fact_1.Fact.register({ region: "us-east-2", name: fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT, value: "s3-website.us-east-2.amazonaws.com" });
        fact_1.Fact.register({ region: "us-east-2", name: fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID, value: "Z2O1EMRO9K5GLX" });
        fact_1.Fact.register({ region: "us-east-2", name: fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID, value: "Z14LCN19Q5QHIC" });
        fact_1.Fact.register({ region: "us-east-2", name: fact_1.FactName.ELBV2_ACCOUNT, value: "033677994240" });
        fact_1.Fact.register({ region: "us-east-2", name: fact_1.FactName.DLC_REPOSITORY_ACCOUNT, value: "763104351884" });
        fact_1.Fact.register({ region: "us-east-2", name: fact_1.FactName.APPMESH_ECR_ACCOUNT, value: "840364872350" });
        fact_1.Fact.register({ region: "us-east-2", name: fact_1.FactName.FIREHOSE_CIDR_BLOCK, value: "13.58.135.96/27" });
        fact_1.Fact.register({ region: "us-east-2", name: fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX, value: "com.amazonaws.vpce" });
        fact_1.Fact.register({ region: "us-east-2", name: fact_1.FactName.servicePrincipal("application-autoscaling"), value: "application-autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "us-east-2", name: fact_1.FactName.servicePrincipal("autoscaling"), value: "autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "us-east-2", name: fact_1.FactName.servicePrincipal("codedeploy"), value: "codedeploy.us-east-2.amazonaws.com" });
        fact_1.Fact.register({ region: "us-east-2", name: fact_1.FactName.servicePrincipal("ec2"), value: "ec2.amazonaws.com" });
        fact_1.Fact.register({ region: "us-east-2", name: fact_1.FactName.servicePrincipal("events"), value: "events.amazonaws.com" });
        fact_1.Fact.register({ region: "us-east-2", name: fact_1.FactName.servicePrincipal("lambda"), value: "lambda.amazonaws.com" });
        fact_1.Fact.register({ region: "us-east-2", name: fact_1.FactName.servicePrincipal("logs"), value: "logs.us-east-2.amazonaws.com" });
        fact_1.Fact.register({ region: "us-east-2", name: fact_1.FactName.servicePrincipal("s3"), value: "s3.amazonaws.com" });
        fact_1.Fact.register({ region: "us-east-2", name: fact_1.FactName.servicePrincipal("sns"), value: "sns.amazonaws.com" });
        fact_1.Fact.register({ region: "us-east-2", name: fact_1.FactName.servicePrincipal("sqs"), value: "sqs.amazonaws.com" });
        fact_1.Fact.register({ region: "us-east-2", name: fact_1.FactName.servicePrincipal("states"), value: "states.us-east-2.amazonaws.com" });
        fact_1.Fact.register({ region: "us-east-2", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.98.0"), value: "arn:aws:lambda:us-east-2:580247275435:layer:LambdaInsightsExtension:14" });
        fact_1.Fact.register({ region: "us-east-2", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.89.0"), value: "arn:aws:lambda:us-east-2:580247275435:layer:LambdaInsightsExtension:12" });
        fact_1.Fact.register({ region: "us-east-2", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.86.0"), value: "arn:aws:lambda:us-east-2:580247275435:layer:LambdaInsightsExtension:11" });
        fact_1.Fact.register({ region: "us-east-2", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.54.0"), value: "arn:aws:lambda:us-east-2:580247275435:layer:LambdaInsightsExtension:2" });
        fact_1.Fact.register({ region: "us-gov-east-1", name: fact_1.FactName.PARTITION, value: "aws-us-gov" });
        fact_1.Fact.register({ region: "us-gov-east-1", name: fact_1.FactName.DOMAIN_SUFFIX, value: "amazonaws.com" });
        fact_1.Fact.register({ region: "us-gov-east-1", name: fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE, value: "NO" });
        fact_1.Fact.register({ region: "us-gov-east-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT, value: "s3-website.us-gov-east-1.amazonaws.com" });
        fact_1.Fact.register({ region: "us-gov-east-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID, value: "Z2NIFVYYW2VKV1" });
        fact_1.Fact.register({ region: "us-gov-east-1", name: fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID, value: "Z35TSARG0EJ4VU" });
        fact_1.Fact.register({ region: "us-gov-east-1", name: fact_1.FactName.ELBV2_ACCOUNT, value: "190560391635" });
        fact_1.Fact.register({ region: "us-gov-east-1", name: fact_1.FactName.DLC_REPOSITORY_ACCOUNT, value: void 0 });
        fact_1.Fact.register({ region: "us-gov-east-1", name: fact_1.FactName.APPMESH_ECR_ACCOUNT, value: void 0 });
        fact_1.Fact.register({ region: "us-gov-east-1", name: fact_1.FactName.FIREHOSE_CIDR_BLOCK, value: "18.253.138.96/27" });
        fact_1.Fact.register({ region: "us-gov-east-1", name: fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX, value: "com.amazonaws.vpce" });
        fact_1.Fact.register({ region: "us-gov-east-1", name: fact_1.FactName.servicePrincipal("application-autoscaling"), value: "application-autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "us-gov-east-1", name: fact_1.FactName.servicePrincipal("autoscaling"), value: "autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "us-gov-east-1", name: fact_1.FactName.servicePrincipal("codedeploy"), value: "codedeploy.us-gov-east-1.amazonaws.com" });
        fact_1.Fact.register({ region: "us-gov-east-1", name: fact_1.FactName.servicePrincipal("ec2"), value: "ec2.amazonaws.com" });
        fact_1.Fact.register({ region: "us-gov-east-1", name: fact_1.FactName.servicePrincipal("events"), value: "events.amazonaws.com" });
        fact_1.Fact.register({ region: "us-gov-east-1", name: fact_1.FactName.servicePrincipal("lambda"), value: "lambda.amazonaws.com" });
        fact_1.Fact.register({ region: "us-gov-east-1", name: fact_1.FactName.servicePrincipal("logs"), value: "logs.us-gov-east-1.amazonaws.com" });
        fact_1.Fact.register({ region: "us-gov-east-1", name: fact_1.FactName.servicePrincipal("s3"), value: "s3.amazonaws.com" });
        fact_1.Fact.register({ region: "us-gov-east-1", name: fact_1.FactName.servicePrincipal("sns"), value: "sns.amazonaws.com" });
        fact_1.Fact.register({ region: "us-gov-east-1", name: fact_1.FactName.servicePrincipal("sqs"), value: "sqs.amazonaws.com" });
        fact_1.Fact.register({ region: "us-gov-east-1", name: fact_1.FactName.servicePrincipal("states"), value: "states.us-gov-east-1.amazonaws.com" });
        fact_1.Fact.register({ region: "us-gov-east-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.98.0"), value: void 0 });
        fact_1.Fact.register({ region: "us-gov-east-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.89.0"), value: void 0 });
        fact_1.Fact.register({ region: "us-gov-east-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.86.0"), value: void 0 });
        fact_1.Fact.register({ region: "us-gov-east-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.54.0"), value: void 0 });
        fact_1.Fact.register({ region: "us-gov-west-1", name: fact_1.FactName.PARTITION, value: "aws-us-gov" });
        fact_1.Fact.register({ region: "us-gov-west-1", name: fact_1.FactName.DOMAIN_SUFFIX, value: "amazonaws.com" });
        fact_1.Fact.register({ region: "us-gov-west-1", name: fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE, value: "NO" });
        fact_1.Fact.register({ region: "us-gov-west-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT, value: "s3-website-us-gov-west-1.amazonaws.com" });
        fact_1.Fact.register({ region: "us-gov-west-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID, value: "Z31GFT0UA1I2HV" });
        fact_1.Fact.register({ region: "us-gov-west-1", name: fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID, value: "Z4KAURWC4UUUG" });
        fact_1.Fact.register({ region: "us-gov-west-1", name: fact_1.FactName.ELBV2_ACCOUNT, value: "048591011584" });
        fact_1.Fact.register({ region: "us-gov-west-1", name: fact_1.FactName.DLC_REPOSITORY_ACCOUNT, value: void 0 });
        fact_1.Fact.register({ region: "us-gov-west-1", name: fact_1.FactName.APPMESH_ECR_ACCOUNT, value: void 0 });
        fact_1.Fact.register({ region: "us-gov-west-1", name: fact_1.FactName.FIREHOSE_CIDR_BLOCK, value: "52.61.204.160/27" });
        fact_1.Fact.register({ region: "us-gov-west-1", name: fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX, value: "com.amazonaws.vpce" });
        fact_1.Fact.register({ region: "us-gov-west-1", name: fact_1.FactName.servicePrincipal("application-autoscaling"), value: "application-autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "us-gov-west-1", name: fact_1.FactName.servicePrincipal("autoscaling"), value: "autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "us-gov-west-1", name: fact_1.FactName.servicePrincipal("codedeploy"), value: "codedeploy.us-gov-west-1.amazonaws.com" });
        fact_1.Fact.register({ region: "us-gov-west-1", name: fact_1.FactName.servicePrincipal("ec2"), value: "ec2.amazonaws.com" });
        fact_1.Fact.register({ region: "us-gov-west-1", name: fact_1.FactName.servicePrincipal("events"), value: "events.amazonaws.com" });
        fact_1.Fact.register({ region: "us-gov-west-1", name: fact_1.FactName.servicePrincipal("lambda"), value: "lambda.amazonaws.com" });
        fact_1.Fact.register({ region: "us-gov-west-1", name: fact_1.FactName.servicePrincipal("logs"), value: "logs.us-gov-west-1.amazonaws.com" });
        fact_1.Fact.register({ region: "us-gov-west-1", name: fact_1.FactName.servicePrincipal("s3"), value: "s3.amazonaws.com" });
        fact_1.Fact.register({ region: "us-gov-west-1", name: fact_1.FactName.servicePrincipal("sns"), value: "sns.amazonaws.com" });
        fact_1.Fact.register({ region: "us-gov-west-1", name: fact_1.FactName.servicePrincipal("sqs"), value: "sqs.amazonaws.com" });
        fact_1.Fact.register({ region: "us-gov-west-1", name: fact_1.FactName.servicePrincipal("states"), value: "states.us-gov-west-1.amazonaws.com" });
        fact_1.Fact.register({ region: "us-gov-west-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.98.0"), value: void 0 });
        fact_1.Fact.register({ region: "us-gov-west-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.89.0"), value: void 0 });
        fact_1.Fact.register({ region: "us-gov-west-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.86.0"), value: void 0 });
        fact_1.Fact.register({ region: "us-gov-west-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.54.0"), value: void 0 });
        fact_1.Fact.register({ region: "us-iso-east-1", name: fact_1.FactName.PARTITION, value: "aws-iso" });
        fact_1.Fact.register({ region: "us-iso-east-1", name: fact_1.FactName.DOMAIN_SUFFIX, value: "c2s.ic.gov" });
        fact_1.Fact.register({ region: "us-iso-east-1", name: fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE, value: "NO" });
        fact_1.Fact.register({ region: "us-iso-east-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT, value: "s3-website.us-iso-east-1.c2s.ic.gov" });
        fact_1.Fact.register({ region: "us-iso-east-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID, value: "" });
        fact_1.Fact.register({ region: "us-iso-east-1", name: fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID, value: "" });
        fact_1.Fact.register({ region: "us-iso-east-1", name: fact_1.FactName.ELBV2_ACCOUNT, value: void 0 });
        fact_1.Fact.register({ region: "us-iso-east-1", name: fact_1.FactName.DLC_REPOSITORY_ACCOUNT, value: void 0 });
        fact_1.Fact.register({ region: "us-iso-east-1", name: fact_1.FactName.APPMESH_ECR_ACCOUNT, value: void 0 });
        fact_1.Fact.register({ region: "us-iso-east-1", name: fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX, value: "gov.ic.c2s.vpce" });
        fact_1.Fact.register({ region: "us-iso-east-1", name: fact_1.FactName.servicePrincipal("application-autoscaling"), value: "application-autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "us-iso-east-1", name: fact_1.FactName.servicePrincipal("autoscaling"), value: "autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "us-iso-east-1", name: fact_1.FactName.servicePrincipal("codedeploy"), value: "codedeploy.us-iso-east-1.c2s.ic.gov" });
        fact_1.Fact.register({ region: "us-iso-east-1", name: fact_1.FactName.servicePrincipal("ec2"), value: "ec2.c2s.ic.gov" });
        fact_1.Fact.register({ region: "us-iso-east-1", name: fact_1.FactName.servicePrincipal("events"), value: "events.amazonaws.com" });
        fact_1.Fact.register({ region: "us-iso-east-1", name: fact_1.FactName.servicePrincipal("lambda"), value: "lambda.amazonaws.com" });
        fact_1.Fact.register({ region: "us-iso-east-1", name: fact_1.FactName.servicePrincipal("logs"), value: "logs.us-iso-east-1.c2s.ic.gov" });
        fact_1.Fact.register({ region: "us-iso-east-1", name: fact_1.FactName.servicePrincipal("s3"), value: "s3.amazonaws.com" });
        fact_1.Fact.register({ region: "us-iso-east-1", name: fact_1.FactName.servicePrincipal("sns"), value: "sns.amazonaws.com" });
        fact_1.Fact.register({ region: "us-iso-east-1", name: fact_1.FactName.servicePrincipal("sqs"), value: "sqs.amazonaws.com" });
        fact_1.Fact.register({ region: "us-iso-east-1", name: fact_1.FactName.servicePrincipal("states"), value: "states.amazonaws.com" });
        fact_1.Fact.register({ region: "us-iso-east-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.98.0"), value: void 0 });
        fact_1.Fact.register({ region: "us-iso-east-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.89.0"), value: void 0 });
        fact_1.Fact.register({ region: "us-iso-east-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.86.0"), value: void 0 });
        fact_1.Fact.register({ region: "us-iso-east-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.54.0"), value: void 0 });
        fact_1.Fact.register({ region: "us-isob-east-1", name: fact_1.FactName.PARTITION, value: "aws-iso-b" });
        fact_1.Fact.register({ region: "us-isob-east-1", name: fact_1.FactName.DOMAIN_SUFFIX, value: "sc2s.sgov.gov" });
        fact_1.Fact.register({ region: "us-isob-east-1", name: fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE, value: "NO" });
        fact_1.Fact.register({ region: "us-isob-east-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT, value: "s3-website.us-isob-east-1.sc2s.sgov.gov" });
        fact_1.Fact.register({ region: "us-isob-east-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID, value: "" });
        fact_1.Fact.register({ region: "us-isob-east-1", name: fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID, value: "" });
        fact_1.Fact.register({ region: "us-isob-east-1", name: fact_1.FactName.ELBV2_ACCOUNT, value: void 0 });
        fact_1.Fact.register({ region: "us-isob-east-1", name: fact_1.FactName.DLC_REPOSITORY_ACCOUNT, value: void 0 });
        fact_1.Fact.register({ region: "us-isob-east-1", name: fact_1.FactName.APPMESH_ECR_ACCOUNT, value: void 0 });
        fact_1.Fact.register({ region: "us-isob-east-1", name: fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX, value: "gov.sgov.sc2s.vpce" });
        fact_1.Fact.register({ region: "us-isob-east-1", name: fact_1.FactName.servicePrincipal("application-autoscaling"), value: "application-autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "us-isob-east-1", name: fact_1.FactName.servicePrincipal("autoscaling"), value: "autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "us-isob-east-1", name: fact_1.FactName.servicePrincipal("codedeploy"), value: "codedeploy.us-isob-east-1.sc2s.sgov.gov" });
        fact_1.Fact.register({ region: "us-isob-east-1", name: fact_1.FactName.servicePrincipal("ec2"), value: "ec2.sc2s.sgov.gov" });
        fact_1.Fact.register({ region: "us-isob-east-1", name: fact_1.FactName.servicePrincipal("events"), value: "events.amazonaws.com" });
        fact_1.Fact.register({ region: "us-isob-east-1", name: fact_1.FactName.servicePrincipal("lambda"), value: "lambda.amazonaws.com" });
        fact_1.Fact.register({ region: "us-isob-east-1", name: fact_1.FactName.servicePrincipal("logs"), value: "logs.us-isob-east-1.sc2s.sgov.gov" });
        fact_1.Fact.register({ region: "us-isob-east-1", name: fact_1.FactName.servicePrincipal("s3"), value: "s3.amazonaws.com" });
        fact_1.Fact.register({ region: "us-isob-east-1", name: fact_1.FactName.servicePrincipal("sns"), value: "sns.amazonaws.com" });
        fact_1.Fact.register({ region: "us-isob-east-1", name: fact_1.FactName.servicePrincipal("sqs"), value: "sqs.amazonaws.com" });
        fact_1.Fact.register({ region: "us-isob-east-1", name: fact_1.FactName.servicePrincipal("states"), value: "states.amazonaws.com" });
        fact_1.Fact.register({ region: "us-isob-east-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.98.0"), value: void 0 });
        fact_1.Fact.register({ region: "us-isob-east-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.89.0"), value: void 0 });
        fact_1.Fact.register({ region: "us-isob-east-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.86.0"), value: void 0 });
        fact_1.Fact.register({ region: "us-isob-east-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.54.0"), value: void 0 });
        fact_1.Fact.register({ region: "us-west-1", name: fact_1.FactName.PARTITION, value: "aws" });
        fact_1.Fact.register({ region: "us-west-1", name: fact_1.FactName.DOMAIN_SUFFIX, value: "amazonaws.com" });
        fact_1.Fact.register({ region: "us-west-1", name: fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE, value: "YES" });
        fact_1.Fact.register({ region: "us-west-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT, value: "s3-website-us-west-1.amazonaws.com" });
        fact_1.Fact.register({ region: "us-west-1", name: fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID, value: "Z2F56UZL2M1ACD" });
        fact_1.Fact.register({ region: "us-west-1", name: fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID, value: "Z1LQECGX5PH1X" });
        fact_1.Fact.register({ region: "us-west-1", name: fact_1.FactName.ELBV2_ACCOUNT, value: "027434742980" });
        fact_1.Fact.register({ region: "us-west-1", name: fact_1.FactName.DLC_REPOSITORY_ACCOUNT, value: "763104351884" });
        fact_1.Fact.register({ region: "us-west-1", name: fact_1.FactName.APPMESH_ECR_ACCOUNT, value: "840364872350" });
        fact_1.Fact.register({ region: "us-west-1", name: fact_1.FactName.FIREHOSE_CIDR_BLOCK, value: "13.57.135.192/27" });
        fact_1.Fact.register({ region: "us-west-1", name: fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX, value: "com.amazonaws.vpce" });
        fact_1.Fact.register({ region: "us-west-1", name: fact_1.FactName.servicePrincipal("application-autoscaling"), value: "application-autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "us-west-1", name: fact_1.FactName.servicePrincipal("autoscaling"), value: "autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "us-west-1", name: fact_1.FactName.servicePrincipal("codedeploy"), value: "codedeploy.us-west-1.amazonaws.com" });
        fact_1.Fact.register({ region: "us-west-1", name: fact_1.FactName.servicePrincipal("ec2"), value: "ec2.amazonaws.com" });
        fact_1.Fact.register({ region: "us-west-1", name: fact_1.FactName.servicePrincipal("events"), value: "events.amazonaws.com" });
        fact_1.Fact.register({ region: "us-west-1", name: fact_1.FactName.servicePrincipal("lambda"), value: "lambda.amazonaws.com" });
        fact_1.Fact.register({ region: "us-west-1", name: fact_1.FactName.servicePrincipal("logs"), value: "logs.us-west-1.amazonaws.com" });
        fact_1.Fact.register({ region: "us-west-1", name: fact_1.FactName.servicePrincipal("s3"), value: "s3.amazonaws.com" });
        fact_1.Fact.register({ region: "us-west-1", name: fact_1.FactName.servicePrincipal("sns"), value: "sns.amazonaws.com" });
        fact_1.Fact.register({ region: "us-west-1", name: fact_1.FactName.servicePrincipal("sqs"), value: "sqs.amazonaws.com" });
        fact_1.Fact.register({ region: "us-west-1", name: fact_1.FactName.servicePrincipal("states"), value: "states.us-west-1.amazonaws.com" });
        fact_1.Fact.register({ region: "us-west-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.98.0"), value: "arn:aws:lambda:us-west-1:580247275435:layer:LambdaInsightsExtension:14" });
        fact_1.Fact.register({ region: "us-west-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.89.0"), value: "arn:aws:lambda:us-west-1:580247275435:layer:LambdaInsightsExtension:12" });
        fact_1.Fact.register({ region: "us-west-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.86.0"), value: "arn:aws:lambda:us-west-1:580247275435:layer:LambdaInsightsExtension:11" });
        fact_1.Fact.register({ region: "us-west-1", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.54.0"), value: "arn:aws:lambda:us-west-1:580247275435:layer:LambdaInsightsExtension:2" });
        fact_1.Fact.register({ region: "us-west-2", name: fact_1.FactName.PARTITION, value: "aws" });
        fact_1.Fact.register({ region: "us-west-2", name: fact_1.FactName.DOMAIN_SUFFIX, value: "amazonaws.com" });
        fact_1.Fact.register({ region: "us-west-2", name: fact_1.FactName.CDK_METADATA_RESOURCE_AVAILABLE, value: "YES" });
        fact_1.Fact.register({ region: "us-west-2", name: fact_1.FactName.S3_STATIC_WEBSITE_ENDPOINT, value: "s3-website-us-west-2.amazonaws.com" });
        fact_1.Fact.register({ region: "us-west-2", name: fact_1.FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID, value: "Z3BJ6K6RIION7M" });
        fact_1.Fact.register({ region: "us-west-2", name: fact_1.FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID, value: "Z38NKT9BP95V3O" });
        fact_1.Fact.register({ region: "us-west-2", name: fact_1.FactName.ELBV2_ACCOUNT, value: "797873946194" });
        fact_1.Fact.register({ region: "us-west-2", name: fact_1.FactName.DLC_REPOSITORY_ACCOUNT, value: "763104351884" });
        fact_1.Fact.register({ region: "us-west-2", name: fact_1.FactName.APPMESH_ECR_ACCOUNT, value: "840364872350" });
        fact_1.Fact.register({ region: "us-west-2", name: fact_1.FactName.FIREHOSE_CIDR_BLOCK, value: "52.89.255.224/27" });
        fact_1.Fact.register({ region: "us-west-2", name: fact_1.FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX, value: "com.amazonaws.vpce" });
        fact_1.Fact.register({ region: "us-west-2", name: fact_1.FactName.servicePrincipal("application-autoscaling"), value: "application-autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "us-west-2", name: fact_1.FactName.servicePrincipal("autoscaling"), value: "autoscaling.amazonaws.com" });
        fact_1.Fact.register({ region: "us-west-2", name: fact_1.FactName.servicePrincipal("codedeploy"), value: "codedeploy.us-west-2.amazonaws.com" });
        fact_1.Fact.register({ region: "us-west-2", name: fact_1.FactName.servicePrincipal("ec2"), value: "ec2.amazonaws.com" });
        fact_1.Fact.register({ region: "us-west-2", name: fact_1.FactName.servicePrincipal("events"), value: "events.amazonaws.com" });
        fact_1.Fact.register({ region: "us-west-2", name: fact_1.FactName.servicePrincipal("lambda"), value: "lambda.amazonaws.com" });
        fact_1.Fact.register({ region: "us-west-2", name: fact_1.FactName.servicePrincipal("logs"), value: "logs.us-west-2.amazonaws.com" });
        fact_1.Fact.register({ region: "us-west-2", name: fact_1.FactName.servicePrincipal("s3"), value: "s3.amazonaws.com" });
        fact_1.Fact.register({ region: "us-west-2", name: fact_1.FactName.servicePrincipal("sns"), value: "sns.amazonaws.com" });
        fact_1.Fact.register({ region: "us-west-2", name: fact_1.FactName.servicePrincipal("sqs"), value: "sqs.amazonaws.com" });
        fact_1.Fact.register({ region: "us-west-2", name: fact_1.FactName.servicePrincipal("states"), value: "states.us-west-2.amazonaws.com" });
        fact_1.Fact.register({ region: "us-west-2", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.98.0"), value: "arn:aws:lambda:us-west-2:580247275435:layer:LambdaInsightsExtension:14" });
        fact_1.Fact.register({ region: "us-west-2", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.89.0"), value: "arn:aws:lambda:us-west-2:580247275435:layer:LambdaInsightsExtension:12" });
        fact_1.Fact.register({ region: "us-west-2", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.86.0"), value: "arn:aws:lambda:us-west-2:580247275435:layer:LambdaInsightsExtension:11" });
        fact_1.Fact.register({ region: "us-west-2", name: fact_1.FactName.cloudwatchLambdaInsightsVersion("1.0.54.0"), value: "arn:aws:lambda:us-west-2:580247275435:layer:LambdaInsightsExtension:2" });
      }
      constructor() {
      }
    };
    exports2.BuiltIns = BuiltIns;
  }
});

// asset-input/node_modules/@aws-cdk/region-info/lib/index.js
var require_lib7 = __commonJS({
  "asset-input/node_modules/@aws-cdk/region-info/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_default(), exports2);
    __exportStar(require_fact(), exports2);
    __exportStar(require_region_info(), exports2);
    var built_ins_generated_1 = require_built_ins_generated();
    built_ins_generated_1.BuiltIns.register();
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/cfn-condition.js
var require_cfn_condition = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/cfn-condition.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnCondition = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cfn_element_1 = require_cfn_element();
    var CfnCondition = class extends cfn_element_1.CfnElement {
      constructor(scope, id, props) {
        super(scope, id);
        this.expression = props && props.expression;
      }
      _toCloudFormation() {
        if (!this.expression) {
          return {};
        }
        return {
          Conditions: {
            [this.logicalId]: this.expression
          }
        };
      }
      resolve(_context) {
        return { Condition: this.logicalId };
      }
    };
    exports2.CfnCondition = CfnCondition;
    _a = JSII_RTTI_SYMBOL_1;
    CfnCondition[_a] = { fqn: "@aws-cdk/core.CfnCondition", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/private/metadata-resource.js
var require_metadata_resource = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/private/metadata-resource.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatAnalytics = exports2.MetadataResource = void 0;
    var zlib = require("zlib");
    var region_info_1 = require_lib7();
    var cfn_condition_1 = require_cfn_condition();
    var cfn_fn_1 = require_cfn_fn();
    var cfn_pseudo_1 = require_cfn_pseudo();
    var cfn_resource_1 = require_cfn_resource();
    var construct_compat_1 = require_construct_compat();
    var lazy_1 = require_lazy();
    var token_1 = require_token();
    var runtime_info_1 = require_runtime_info();
    var MetadataResource = class extends construct_compat_1.Construct {
      constructor(scope, id) {
        super(scope, id);
        const metadataServiceExists = token_1.Token.isUnresolved(scope.region) || region_info_1.RegionInfo.get(scope.region).cdkMetadataResourceAvailable;
        if (metadataServiceExists) {
          const resource = new cfn_resource_1.CfnResource(this, "Default", {
            type: "AWS::CDK::Metadata",
            properties: {
              Analytics: lazy_1.Lazy.string({ produce: () => formatAnalytics(runtime_info_1.constructInfoFromStack(scope)) })
            }
          });
          if (token_1.Token.isUnresolved(scope.region)) {
            const condition = new cfn_condition_1.CfnCondition(this, "Condition", {
              expression: makeCdkMetadataAvailableCondition()
            });
            condition.overrideLogicalId("CDKMetadataAvailable");
            resource.cfnOptions.condition = condition;
          }
        }
      }
    };
    exports2.MetadataResource = MetadataResource;
    function makeCdkMetadataAvailableCondition() {
      return cfn_fn_1.Fn.conditionOr(...region_info_1.RegionInfo.regions.filter((ri) => ri.cdkMetadataResourceAvailable).map((ri) => cfn_fn_1.Fn.conditionEquals(cfn_pseudo_1.Aws.REGION, ri.name)));
    }
    var Trie = class extends Map {
    };
    function formatAnalytics(infos) {
      const trie = new Trie();
      infos.forEach((info) => insertFqnInTrie(`${info.version}!${info.fqn}`, trie));
      const plaintextEncodedConstructs = prefixEncodeTrie(trie);
      const compressedConstructsBuffer = zlib.gzipSync(Buffer.from(plaintextEncodedConstructs));
      setGzipOperatingSystemToUnknown(compressedConstructsBuffer);
      const compressedConstructs = compressedConstructsBuffer.toString("base64");
      return `v2:deflate64:${compressedConstructs}`;
    }
    exports2.formatAnalytics = formatAnalytics;
    function insertFqnInTrie(fqn, trie) {
      var _a;
      for (const fqnPart of fqn.replace(/[^a-z0-9]/gi, "$& ").split(" ")) {
        const nextLevelTreeRef = (_a = trie.get(fqnPart)) !== null && _a !== void 0 ? _a : new Trie();
        trie.set(fqnPart, nextLevelTreeRef);
        trie = nextLevelTreeRef;
      }
      return trie;
    }
    function prefixEncodeTrie(trie) {
      let prefixEncoded = "";
      let isFirstEntryAtLevel = true;
      [...trie.entries()].forEach(([key, value]) => {
        if (!isFirstEntryAtLevel) {
          prefixEncoded += ",";
        }
        isFirstEntryAtLevel = false;
        prefixEncoded += key;
        if (value.size > 1) {
          prefixEncoded += "{";
          prefixEncoded += prefixEncodeTrie(value);
          prefixEncoded += "}";
        } else {
          prefixEncoded += prefixEncodeTrie(value);
        }
      });
      return prefixEncoded;
    }
    function setGzipOperatingSystemToUnknown(gzipBuffer) {
      if (gzipBuffer[0] !== 31 || gzipBuffer[1] !== 139) {
        throw new Error("Expecting a gzip buffer (must start with 0x1f8b)");
      }
      gzipBuffer[9] = 255;
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/private/prepare-app.js
var require_prepare_app = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/private/prepare-app.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.prepareApp = void 0;
    var constructs_1 = require_lib4();
    var cfn_resource_1 = require_cfn_resource();
    var stack_1 = require_stack();
    var stage_1 = require_stage();
    var refs_1 = require_refs();
    function prepareApp(root) {
      for (const dependency of root.node.dependencies) {
        const targetCfnResources = findCfnResources(dependency.target);
        const sourceCfnResources = findCfnResources(dependency.source);
        for (const target of targetCfnResources) {
          for (const source of sourceCfnResources) {
            source.addDependsOn(target);
          }
        }
      }
      refs_1.resolveReferences(root);
      const queue = findAllNestedStacks(root);
      if (queue.length > 0) {
        while (queue.length > 0) {
          const nested = queue.shift();
          defineNestedStackAsset(nested);
        }
        refs_1.resolveReferences(root);
      }
    }
    exports2.prepareApp = prepareApp;
    function defineNestedStackAsset(nestedStack) {
      const nested = nestedStack;
      nested._prepareTemplateAsset();
    }
    function findAllNestedStacks(root) {
      const result = new Array();
      const includeStack = (stack) => {
        if (!stack_1.Stack.isStack(stack)) {
          return false;
        }
        if (!stack.nested) {
          return false;
        }
        if (!stage_1.Stage.of(stack)) {
          return true;
        }
        return stage_1.Stage.of(stack) === root;
      };
      for (const stack of root.node.findAll(constructs_1.ConstructOrder.POSTORDER)) {
        if (includeStack(stack)) {
          result.push(stack);
        }
      }
      return result;
    }
    function findCfnResources(root) {
      return root.node.findAll().filter(cfn_resource_1.CfnResource.isCfnResource);
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/private/synthesis.js
var require_synthesis = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/private/synthesis.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.addCustomSynthesis = exports2.synthesize = void 0;
    var cxapi = require_lib5();
    var constructs = require_lib4();
    var annotations_1 = require_annotations();
    var aspect_1 = require_aspect();
    var stack_1 = require_stack();
    var stage_1 = require_stage();
    var metadata_resource_1 = require_metadata_resource();
    var prepare_app_1 = require_prepare_app();
    var tree_metadata_1 = require_tree_metadata();
    function synthesize(root, options = {}) {
      synthNestedAssemblies(root, options);
      invokeAspects(root);
      injectMetadataResources(root);
      prepareTree(root);
      prepare_app_1.prepareApp(root);
      if (!options.skipValidation) {
        validateTree(root);
      }
      const builder = stage_1.Stage.isStage(root) ? root._assemblyBuilder : new cxapi.CloudAssemblyBuilder(options.outdir);
      synthesizeTree(root, builder, options.validateOnSynthesis);
      return builder.buildAssembly();
    }
    exports2.synthesize = synthesize;
    var CUSTOM_SYNTHESIS_SYM = Symbol.for("@aws-cdk/core:customSynthesis");
    function addCustomSynthesis(construct, synthesis) {
      Object.defineProperty(construct, CUSTOM_SYNTHESIS_SYM, {
        value: synthesis,
        enumerable: false
      });
    }
    exports2.addCustomSynthesis = addCustomSynthesis;
    function getCustomSynthesis(construct) {
      return construct[CUSTOM_SYNTHESIS_SYM];
    }
    function synthNestedAssemblies(root, options) {
      for (const child of root.node.children) {
        if (stage_1.Stage.isStage(child)) {
          child.synth(options);
        } else {
          synthNestedAssemblies(child, options);
        }
      }
    }
    function invokeAspects(root) {
      const invokedByPath = {};
      let nestedAspectWarning = false;
      recurse(root, []);
      function recurse(construct, inheritedAspects) {
        const node = construct.node;
        const aspects = aspect_1.Aspects.of(construct);
        const allAspectsHere = [...inheritedAspects !== null && inheritedAspects !== void 0 ? inheritedAspects : [], ...aspects.aspects];
        const nodeAspectsCount = aspects.aspects.length;
        for (const aspect of allAspectsHere) {
          let invoked = invokedByPath[node.path];
          if (!invoked) {
            invoked = invokedByPath[node.path] = [];
          }
          if (invoked.includes(aspect)) {
            continue;
          }
          aspect.visit(construct);
          if (!nestedAspectWarning && nodeAspectsCount !== aspects.aspects.length) {
            annotations_1.Annotations.of(construct).addWarning("We detected an Aspect was added via another Aspect, and will not be applied");
            nestedAspectWarning = true;
          }
          invoked.push(aspect);
        }
        for (const child of construct.node.children) {
          if (!stage_1.Stage.isStage(child)) {
            recurse(child, allAspectsHere);
          }
        }
      }
    }
    function prepareTree(root) {
      visit(root, "post", (construct) => construct.onPrepare());
    }
    function injectMetadataResources(root) {
      visit(root, "post", (construct) => {
        if (!stack_1.Stack.isStack(construct) || !construct._versionReportingEnabled) {
          return;
        }
        const CDKMetadata = "CDKMetadata";
        if (construct.node.tryFindChild(CDKMetadata)) {
          return;
        }
        new metadata_resource_1.MetadataResource(construct, CDKMetadata);
      });
    }
    function synthesizeTree(root, builder, validateOnSynth = false) {
      visit(root, "post", (construct) => {
        const session = {
          outdir: builder.outdir,
          assembly: builder,
          validateOnSynth
        };
        if (stack_1.Stack.isStack(construct)) {
          construct.synthesizer.synthesize(session);
        } else if (construct instanceof tree_metadata_1.TreeMetadata) {
          construct._synthesizeTree(session);
        } else {
          const custom = getCustomSynthesis(construct);
          custom === null || custom === void 0 ? void 0 : custom.onSynthesize(session);
        }
        construct.onSynthesize(session);
      });
    }
    function validateTree(root) {
      const errors = new Array();
      errors.push(...constructs.Node.of(root).validate().map((e) => ({
        message: e.message,
        source: e.source
      })));
      if (errors.length > 0) {
        const errorList = errors.map((e) => `[${e.source.node.path}] ${e.message}`).join("\n  ");
        throw new Error(`Validation failed with the following errors:
  ${errorList}`);
      }
    }
    function visit(root, order, cb) {
      if (order === "pre") {
        cb(root);
      }
      for (const child of root.node.children) {
        if (stage_1.Stage.isStage(child)) {
          continue;
        }
        visit(child, order, cb);
      }
      if (order === "post") {
        cb(root);
      }
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/construct-compat.js
var require_construct_compat = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/construct-compat.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ConstructNode = exports2.ConstructOrder = exports2.Construct = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cxapi = require_lib5();
    var constructs = require_lib4();
    var annotations_1 = require_annotations();
    var aspect_1 = require_aspect();
    var token_1 = require_token();
    var ORIGINAL_CONSTRUCT_NODE_SYMBOL = Symbol.for("@aws-cdk/core.ConstructNode");
    var CONSTRUCT_SYMBOL = Symbol.for("@aws-cdk/core.Construct");
    var Construct = class extends constructs.Construct {
      constructor(scope, id) {
        super(scope, id, {
          nodeFactory: {
            createNode: (h, s, i) => new ConstructNode(h, s, i)._actualNode
          }
        });
        if (token_1.Token.isUnresolved(id)) {
          throw new Error(`Cannot use tokens in construct ID: ${id}`);
        }
        Object.defineProperty(this, CONSTRUCT_SYMBOL, { value: true });
        this.node = ConstructNode._unwrap(constructs.Node.of(this));
        const disableTrace = this.node.tryGetContext(cxapi.DISABLE_METADATA_STACK_TRACE) || this.node.tryGetContext(constructs.ConstructMetadata.DISABLE_STACK_TRACE_IN_METADATA) || process.env.CDK_DISABLE_STACK_TRACE;
        if (disableTrace) {
          this.node.setContext(cxapi.DISABLE_METADATA_STACK_TRACE, true);
          this.node.setContext(constructs.ConstructMetadata.DISABLE_STACK_TRACE_IN_METADATA, true);
          process.env.CDK_DISABLE_STACK_TRACE = "1";
        }
      }
      static isConstruct(x) {
        return typeof x === "object" && x !== null && CONSTRUCT_SYMBOL in x;
      }
      onValidate() {
        return this.validate();
      }
      onPrepare() {
        this.prepare();
      }
      onSynthesize(session) {
        this.synthesize({
          outdir: session.outdir,
          assembly: session.assembly
        });
      }
      validate() {
        return [];
      }
      prepare() {
        return;
      }
      synthesize(session) {
        ignore(session);
      }
    };
    exports2.Construct = Construct;
    _a = JSII_RTTI_SYMBOL_1;
    Construct[_a] = { fqn: "@aws-cdk/core.Construct", version: "1.132.0" };
    var ConstructOrder;
    (function(ConstructOrder2) {
      ConstructOrder2[ConstructOrder2["PREORDER"] = 0] = "PREORDER";
      ConstructOrder2[ConstructOrder2["POSTORDER"] = 1] = "POSTORDER";
    })(ConstructOrder = exports2.ConstructOrder || (exports2.ConstructOrder = {}));
    var ConstructNode = class {
      constructor(host, scope, id) {
        this.host = host;
        this._actualNode = new constructs.Node(host, scope, id);
        Object.defineProperty(this._actualNode, ORIGINAL_CONSTRUCT_NODE_SYMBOL, {
          value: this,
          configurable: false,
          enumerable: false
        });
      }
      static _unwrap(c) {
        const x = c[ORIGINAL_CONSTRUCT_NODE_SYMBOL];
        if (!x) {
          throw new Error("invalid ConstructNode type");
        }
        return x;
      }
      static synth(node, options = {}) {
        const a = require_synthesis();
        return a.synthesize(node.root, options);
      }
      static prepare(node) {
        const p = require_prepare_app();
        p.prepareApp(node.root);
        return node._actualNode.prepare();
      }
      static validate(node) {
        return node._actualNode.validate().map((e) => ({ source: e.source, message: e.message }));
      }
      get scope() {
        return this._actualNode.scope;
      }
      get id() {
        return this._actualNode.id;
      }
      get path() {
        return this._actualNode.path;
      }
      get uniqueId() {
        return this._actualNode.uniqueId;
      }
      get addr() {
        return this._actualNode.addr;
      }
      tryFindChild(id) {
        return this._actualNode.tryFindChild(id);
      }
      findChild(id) {
        return this._actualNode.findChild(id);
      }
      get defaultChild() {
        return this._actualNode.defaultChild;
      }
      set defaultChild(value) {
        this._actualNode.defaultChild = value;
      }
      get children() {
        return this._actualNode.children;
      }
      findAll(order = ConstructOrder.PREORDER) {
        return this._actualNode.findAll(order);
      }
      setContext(key, value) {
        if (token_1.Token.isUnresolved(key)) {
          throw new Error("Invalid context key: context keys can't include tokens");
        }
        this._actualNode.setContext(key, value);
      }
      tryGetContext(key) {
        if (token_1.Token.isUnresolved(key)) {
          throw new Error("Invalid context key: context keys can't include tokens");
        }
        return this._actualNode.tryGetContext(key);
      }
      get metadata() {
        return this._actualNode.metadata;
      }
      get metadataEntry() {
        return this._actualNode.metadata;
      }
      addMetadata(type, data, fromFunction) {
        this._actualNode.addMetadata(type, data, fromFunction);
      }
      addInfo(message) {
        annotations_1.Annotations.of(this.host).addInfo(message);
      }
      addWarning(message) {
        annotations_1.Annotations.of(this.host).addWarning(message);
      }
      addError(message) {
        annotations_1.Annotations.of(this.host).addError(message);
      }
      applyAspect(aspect) {
        annotations_1.Annotations.of(this.host).addDeprecation("@aws-cdk/core.ConstructNode.applyAspect", 'Use "Aspects.of(construct).add(aspect)" instead');
        aspect_1.Aspects.of(this.host).add(aspect);
      }
      addValidation(validation) {
        this._actualNode.addValidation(validation);
      }
      get scopes() {
        return this._actualNode.scopes;
      }
      get root() {
        return this._actualNode.root;
      }
      get locked() {
        return this._actualNode.locked;
      }
      addDependency(...dependencies) {
        this._actualNode.addDependency(...dependencies);
      }
      get dependencies() {
        return this._actualNode.dependencies;
      }
      tryRemoveChild(childName) {
        return this._actualNode.tryRemoveChild(childName);
      }
    };
    exports2.ConstructNode = ConstructNode;
    _b = JSII_RTTI_SYMBOL_1;
    ConstructNode[_b] = { fqn: "@aws-cdk/core.ConstructNode", version: "1.132.0" };
    ConstructNode.PATH_SEP = "/";
    function ignore(_x) {
      return;
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/cfn-element.js
var require_cfn_element = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/cfn-element.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnRefElement = exports2.CfnElement = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cxschema = require_lib3();
    var constructs_1 = require_lib4();
    var construct_compat_1 = require_construct_compat();
    var lazy_1 = require_lazy();
    var CFN_ELEMENT_SYMBOL = Symbol.for("@aws-cdk/core.CfnElement");
    var CfnElement = class extends construct_compat_1.Construct {
      constructor(scope, id) {
        super(scope, id);
        Object.defineProperty(this, CFN_ELEMENT_SYMBOL, { value: true });
        this.stack = stack_1.Stack.of(this);
        this.logicalId = lazy_1.Lazy.uncachedString({ produce: () => this.synthesizeLogicalId() }, {
          displayHint: `${notTooLong(constructs_1.Node.of(this).path)}.LogicalID`
        });
        constructs_1.Node.of(this).addMetadata(cxschema.ArtifactMetadataEntryType.LOGICAL_ID, this.logicalId, this.constructor);
      }
      static isCfnElement(x) {
        return CFN_ELEMENT_SYMBOL in x;
      }
      overrideLogicalId(newLogicalId) {
        this._logicalIdOverride = newLogicalId;
      }
      get creationStack() {
        const trace = constructs_1.Node.of(this).metadata.find((md) => md.type === cxschema.ArtifactMetadataEntryType.LOGICAL_ID).trace;
        if (!trace) {
          return [];
        }
        return filterStackTrace(trace);
        function filterStackTrace(stack) {
          const result = Array.of(...stack);
          while (result.length > 0 && shouldFilter(result[result.length - 1])) {
            result.pop();
          }
          return result.length === 0 ? stack : result;
        }
        function shouldFilter(str) {
          return str.match(/[^(]+\(internal\/.*/) !== null;
        }
      }
      synthesizeLogicalId() {
        if (this._logicalIdOverride) {
          return this._logicalIdOverride;
        } else {
          return this.stack.getLogicalId(this);
        }
      }
    };
    exports2.CfnElement = CfnElement;
    _a = JSII_RTTI_SYMBOL_1;
    CfnElement[_a] = { fqn: "@aws-cdk/core.CfnElement", version: "1.132.0" };
    var CfnRefElement = class extends CfnElement {
      get ref() {
        return token_1.Token.asString(cfn_reference_1.CfnReference.for(this, "Ref"));
      }
    };
    exports2.CfnRefElement = CfnRefElement;
    _b = JSII_RTTI_SYMBOL_1;
    CfnRefElement[_b] = { fqn: "@aws-cdk/core.CfnRefElement", version: "1.132.0" };
    function notTooLong(x) {
      if (x.length < 100) {
        return x;
      }
      return x.substr(0, 47) + "..." + x.substr(x.length - 47);
    }
    var cfn_reference_1 = require_cfn_reference();
    var stack_1 = require_stack();
    var token_1 = require_token();
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/cfn-resource-policy.js
var require_cfn_resource_policy = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/cfn-resource-policy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnDeletionPolicy = void 0;
    var CfnDeletionPolicy;
    (function(CfnDeletionPolicy2) {
      CfnDeletionPolicy2["DELETE"] = "Delete";
      CfnDeletionPolicy2["RETAIN"] = "Retain";
      CfnDeletionPolicy2["SNAPSHOT"] = "Snapshot";
    })(CfnDeletionPolicy = exports2.CfnDeletionPolicy || (exports2.CfnDeletionPolicy = {}));
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/cfn-resource.js
var require_cfn_resource = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/cfn-resource.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TagType = exports2.CfnResource = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cxapi = require_lib5();
    var cfn_element_1 = require_cfn_element();
    var cfn_resource_policy_1 = require_cfn_resource_policy();
    var constructs_1 = require_lib4();
    var deps_1 = require_deps();
    var cfn_reference_1 = require_cfn_reference();
    var cloudformation_lang_1 = require_cloudformation_lang();
    var removal_policy_1 = require_removal_policy();
    var tag_manager_1 = require_tag_manager();
    var token_1 = require_token();
    var util_1 = require_util();
    var CfnResource = class extends cfn_element_1.CfnRefElement {
      constructor(scope, id, props) {
        super(scope, id);
        this.cfnOptions = {};
        this.rawOverrides = {};
        this.dependsOn = new Set();
        if (!props.type) {
          throw new Error("The `type` property is required");
        }
        this.cfnResourceType = props.type;
        this._cfnProperties = props.properties || {};
        if (constructs_1.Node.of(this).tryGetContext(cxapi.PATH_METADATA_ENABLE_CONTEXT)) {
          this.addMetadata(cxapi.PATH_METADATA_KEY, constructs_1.Node.of(this).path);
        }
      }
      static isCfnResource(construct) {
        return construct.cfnResourceType !== void 0;
      }
      applyRemovalPolicy(policy, options = {}) {
        policy = policy || options.default || removal_policy_1.RemovalPolicy.RETAIN;
        let deletionPolicy;
        switch (policy) {
          case removal_policy_1.RemovalPolicy.DESTROY:
            deletionPolicy = cfn_resource_policy_1.CfnDeletionPolicy.DELETE;
            break;
          case removal_policy_1.RemovalPolicy.RETAIN:
            deletionPolicy = cfn_resource_policy_1.CfnDeletionPolicy.RETAIN;
            break;
          case removal_policy_1.RemovalPolicy.SNAPSHOT:
            deletionPolicy = cfn_resource_policy_1.CfnDeletionPolicy.SNAPSHOT;
            break;
          default:
            throw new Error(`Invalid removal policy: ${policy}`);
        }
        this.cfnOptions.deletionPolicy = deletionPolicy;
        if (options.applyToUpdateReplacePolicy !== false) {
          this.cfnOptions.updateReplacePolicy = deletionPolicy;
        }
      }
      getAtt(attributeName) {
        return cfn_reference_1.CfnReference.for(this, attributeName);
      }
      addOverride(path, value) {
        const parts = splitOnPeriods(path);
        let curr = this.rawOverrides;
        while (parts.length > 1) {
          const key = parts.shift();
          const isObject = curr[key] != null && typeof curr[key] === "object" && !Array.isArray(curr[key]);
          if (!isObject) {
            curr[key] = {};
          }
          curr = curr[key];
        }
        const lastKey = parts.shift();
        curr[lastKey] = value;
      }
      addDeletionOverride(path) {
        this.addOverride(path, void 0);
      }
      addPropertyOverride(propertyPath, value) {
        this.addOverride(`Properties.${propertyPath}`, value);
      }
      addPropertyDeletionOverride(propertyPath) {
        this.addPropertyOverride(propertyPath, void 0);
      }
      addDependsOn(target) {
        if (!target.shouldSynthesize()) {
          return;
        }
        deps_1.addDependency(this, target, `"${constructs_1.Node.of(this).path}" depends on "${constructs_1.Node.of(target).path}"`);
      }
      addMetadata(key, value) {
        if (!this.cfnOptions.metadata) {
          this.cfnOptions.metadata = {};
        }
        this.cfnOptions.metadata[key] = value;
      }
      getMetadata(key) {
        var _b;
        return (_b = this.cfnOptions.metadata) === null || _b === void 0 ? void 0 : _b[key];
      }
      toString() {
        return `${super.toString()} [${this.cfnResourceType}]`;
      }
      _addResourceDependency(target) {
        this.dependsOn.add(target);
      }
      _toCloudFormation() {
        if (!this.shouldSynthesize()) {
          return {};
        }
        try {
          const ret = {
            Resources: {
              [this.logicalId]: new util_1.PostResolveToken({
                Type: this.cfnResourceType,
                Properties: util_1.ignoreEmpty(this.cfnProperties),
                DependsOn: util_1.ignoreEmpty(renderDependsOn(this.dependsOn)),
                CreationPolicy: util_1.capitalizePropertyNames(this, renderCreationPolicy(this.cfnOptions.creationPolicy)),
                UpdatePolicy: util_1.capitalizePropertyNames(this, this.cfnOptions.updatePolicy),
                UpdateReplacePolicy: util_1.capitalizePropertyNames(this, this.cfnOptions.updateReplacePolicy),
                DeletionPolicy: util_1.capitalizePropertyNames(this, this.cfnOptions.deletionPolicy),
                Version: this.cfnOptions.version,
                Description: this.cfnOptions.description,
                Metadata: util_1.ignoreEmpty(this.cfnOptions.metadata),
                Condition: this.cfnOptions.condition && this.cfnOptions.condition.logicalId
              }, (resourceDef) => {
                const renderedProps = this.renderProperties(resourceDef.Properties || {});
                if (renderedProps) {
                  const hasDefined = Object.values(renderedProps).find((v) => v !== void 0);
                  resourceDef.Properties = hasDefined !== void 0 ? renderedProps : void 0;
                }
                const resolvedRawOverrides = token_1.Tokenization.resolve(this.rawOverrides, {
                  scope: this,
                  resolver: cloudformation_lang_1.CLOUDFORMATION_TOKEN_RESOLVER,
                  removeEmpty: false
                });
                return deepMerge(resourceDef, resolvedRawOverrides);
              })
            }
          };
          return ret;
        } catch (e) {
          e.message = `While synthesizing ${this.node.path}: ${e.message}`;
          const trace = this.creationStack;
          if (trace) {
            const creationStack = ["--- resource created at ---", ...trace].join("\n  at ");
            const problemTrace = e.stack.substr(e.stack.indexOf(e.message) + e.message.length);
            e.stack = `${e.message}
  ${creationStack}
  --- problem discovered at ---${problemTrace}`;
          }
          throw e;
        }
        function renderDependsOn(dependsOn) {
          return Array.from(dependsOn).sort((x, y) => x.node.path.localeCompare(y.node.path)).map((r) => r.logicalId);
        }
        function renderCreationPolicy(policy) {
          if (!policy) {
            return void 0;
          }
          const result = __spreadValues({}, policy);
          if (policy.resourceSignal && policy.resourceSignal.timeout) {
            result.resourceSignal = policy.resourceSignal;
          }
          return result;
        }
      }
      get cfnProperties() {
        const props = this._cfnProperties || {};
        if (tag_manager_1.TagManager.isTaggable(this)) {
          const tagsProp = {};
          tagsProp[this.tags.tagPropertyName] = this.tags.renderTags();
          return deepMerge(props, tagsProp);
        }
        return props;
      }
      renderProperties(props) {
        return props;
      }
      get updatedProperites() {
        return this._cfnProperties;
      }
      validateProperties(_properties) {
      }
      shouldSynthesize() {
        return true;
      }
    };
    exports2.CfnResource = CfnResource;
    _a = JSII_RTTI_SYMBOL_1;
    CfnResource[_a] = { fqn: "@aws-cdk/core.CfnResource", version: "1.132.0" };
    var TagType;
    (function(TagType2) {
      TagType2["STANDARD"] = "StandardTag";
      TagType2["AUTOSCALING_GROUP"] = "AutoScalingGroupTag";
      TagType2["MAP"] = "StringToStringMap";
      TagType2["KEY_VALUE"] = "KeyValue";
      TagType2["NOT_TAGGABLE"] = "NotTaggable";
    })(TagType = exports2.TagType || (exports2.TagType = {}));
    function deepMerge(target, ...sources) {
      for (const source of sources) {
        if (typeof source !== "object" || typeof target !== "object") {
          throw new Error(`Invalid usage. Both source (${JSON.stringify(source)}) and target (${JSON.stringify(target)}) must be objects`);
        }
        for (const key of Object.keys(source)) {
          const value = source[key];
          if (typeof value === "object" && value != null && !Array.isArray(value)) {
            if (typeof target[key] !== "object") {
              target[key] = {};
            }
            deepMerge(target[key], value);
            const output = target[key];
            if (typeof output === "object" && Object.keys(output).length === 0) {
              delete target[key];
            }
          } else if (value === void 0) {
            delete target[key];
          } else {
            target[key] = value;
          }
        }
      }
      return target;
    }
    function splitOnPeriods(x) {
      const ret = [""];
      for (let i = 0; i < x.length; i++) {
        if (x[i] === "\\" && i + 1 < x.length) {
          ret[0] += x[i + 1];
          i++;
        } else if (x[i] === ".") {
          ret.unshift("");
        } else {
          ret[0] += x[i];
        }
      }
      ret.reverse();
      return ret;
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/tag-manager.js
var require_tag_manager = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/tag-manager.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TagManager = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cfn_resource_1 = require_cfn_resource();
    var lazy_1 = require_lazy();
    var StandardFormatter = class {
      parseTags(cfnPropertyTags, priority) {
        if (!Array.isArray(cfnPropertyTags)) {
          throw new Error(`Invalid tag input expected array of {key, value} have ${JSON.stringify(cfnPropertyTags)}`);
        }
        const tags = [];
        for (const tag of cfnPropertyTags) {
          if (tag.key === void 0 || tag.value === void 0) {
            throw new Error(`Invalid tag input expected {key, value} have ${JSON.stringify(tag)}`);
          }
          tags.push({
            key: `${tag.key}`,
            value: `${tag.value}`,
            priority
          });
        }
        return tags;
      }
      formatTags(tags) {
        const cfnTags = [];
        for (const tag of tags) {
          cfnTags.push({
            key: tag.key,
            value: tag.value
          });
        }
        return cfnTags.length === 0 ? void 0 : cfnTags;
      }
    };
    var AsgFormatter = class {
      parseTags(cfnPropertyTags, priority) {
        const tags = [];
        if (!Array.isArray(cfnPropertyTags)) {
          throw new Error(`Invalid tag input expected array of {key, value, propagateAtLaunch} have ${JSON.stringify(cfnPropertyTags)}`);
        }
        for (const tag of cfnPropertyTags) {
          if (tag.key === void 0 || tag.value === void 0 || tag.propagateAtLaunch === void 0) {
            throw new Error(`Invalid tag input expected {key, value, propagateAtLaunch} have ${JSON.stringify(tag)}`);
          }
          tags.push({
            key: `${tag.key}`,
            value: `${tag.value}`,
            priority,
            applyToLaunchedInstances: !!tag.propagateAtLaunch
          });
        }
        return tags;
      }
      formatTags(tags) {
        const cfnTags = [];
        for (const tag of tags) {
          cfnTags.push({
            key: tag.key,
            value: tag.value,
            propagateAtLaunch: tag.applyToLaunchedInstances !== false
          });
        }
        return cfnTags.length === 0 ? void 0 : cfnTags;
      }
    };
    var MapFormatter = class {
      parseTags(cfnPropertyTags, priority) {
        const tags = [];
        if (Array.isArray(cfnPropertyTags) || typeof cfnPropertyTags !== "object") {
          throw new Error(`Invalid tag input expected map of {key: value} have ${JSON.stringify(cfnPropertyTags)}`);
        }
        for (const [key, value] of Object.entries(cfnPropertyTags)) {
          tags.push({
            key,
            value: `${value}`,
            priority
          });
        }
        return tags;
      }
      formatTags(tags) {
        const cfnTags = {};
        for (const tag of tags) {
          cfnTags[`${tag.key}`] = `${tag.value}`;
        }
        return Object.keys(cfnTags).length === 0 ? void 0 : cfnTags;
      }
    };
    var KeyValueFormatter = class {
      parseTags(keyValueTags, priority) {
        const tags = [];
        for (const key in keyValueTags) {
          if (keyValueTags.hasOwnProperty(key)) {
            const value = keyValueTags[key];
            tags.push({
              key,
              value,
              priority
            });
          }
        }
        return tags;
      }
      formatTags(unformattedTags) {
        const tags = [];
        unformattedTags.forEach((tag) => {
          tags.push({
            Key: tag.key,
            Value: tag.value
          });
        });
        return tags.length > 0 ? tags : void 0;
      }
    };
    var NoFormat = class {
      parseTags(_cfnPropertyTags) {
        return [];
      }
      formatTags(_tags) {
        return void 0;
      }
    };
    var _tagFormattersCache;
    function TAG_FORMATTERS() {
      return _tagFormattersCache !== null && _tagFormattersCache !== void 0 ? _tagFormattersCache : _tagFormattersCache = {
        [cfn_resource_1.TagType.AUTOSCALING_GROUP]: new AsgFormatter(),
        [cfn_resource_1.TagType.STANDARD]: new StandardFormatter(),
        [cfn_resource_1.TagType.MAP]: new MapFormatter(),
        [cfn_resource_1.TagType.KEY_VALUE]: new KeyValueFormatter(),
        [cfn_resource_1.TagType.NOT_TAGGABLE]: new NoFormat()
      };
    }
    var TagManager = class {
      constructor(tagType, resourceTypeName, tagStructure, options = {}) {
        this.tags = new Map();
        this.priorities = new Map();
        this.initialTagPriority = 50;
        this.resourceTypeName = resourceTypeName;
        this.tagFormatter = TAG_FORMATTERS()[tagType];
        if (tagStructure !== void 0) {
          this._setTag(...this.tagFormatter.parseTags(tagStructure, this.initialTagPriority));
        }
        this.tagPropertyName = options.tagPropertyName || "tags";
        this.renderedTags = lazy_1.Lazy.any({ produce: () => this.renderTags() });
      }
      static isTaggable(construct) {
        return construct.tags !== void 0;
      }
      setTag(key, value, priority = 0, applyToLaunchedInstances = true) {
        this._setTag({ key, value, priority, applyToLaunchedInstances });
      }
      removeTag(key, priority) {
        if (priority >= (this.priorities.get(key) || 0)) {
          this.tags.delete(key);
          this.priorities.set(key, priority);
        }
      }
      renderTags() {
        return this.tagFormatter.formatTags(this.sortedTags);
      }
      tagValues() {
        const ret = {};
        for (const tag of this.sortedTags) {
          ret[tag.key] = tag.value;
        }
        return ret;
      }
      applyTagAspectHere(include, exclude) {
        if (exclude && exclude.length > 0 && exclude.indexOf(this.resourceTypeName) !== -1) {
          return false;
        }
        if (include && include.length > 0 && include.indexOf(this.resourceTypeName) === -1) {
          return false;
        }
        return true;
      }
      hasTags() {
        return this.tags.size > 0;
      }
      _setTag(...tags) {
        for (const tag of tags) {
          if (tag.priority >= (this.priorities.get(tag.key) || 0)) {
            this.tags.set(tag.key, tag);
            this.priorities.set(tag.key, tag.priority);
          }
        }
      }
      get sortedTags() {
        return Array.from(this.tags.values()).sort((a, b) => a.key.localeCompare(b.key));
      }
    };
    exports2.TagManager = TagManager;
    _a = JSII_RTTI_SYMBOL_1;
    TagManager[_a] = { fqn: "@aws-cdk/core.TagManager", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/tag-aspect.js
var require_tag_aspect = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/tag-aspect.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RemoveTag = exports2.Tags = exports2.Tag = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var annotations_1 = require_annotations();
    var aspect_1 = require_aspect();
    var tag_manager_1 = require_tag_manager();
    var TagBase = class {
      constructor(key, props = {}) {
        this.key = key;
        this.props = props;
      }
      visit(construct) {
        if (tag_manager_1.TagManager.isTaggable(construct)) {
          this.applyTag(construct);
        }
      }
    };
    var Tag = class extends TagBase {
      constructor(key, value, props = {}) {
        super(key, props);
        this.defaultPriority = 100;
        if (value === void 0) {
          throw new Error("Tag must have a value");
        }
        this.value = value;
      }
      static add(scope, key, value, props = {}) {
        annotations_1.Annotations.of(scope).addDeprecation("@aws-cdk/core.Tag.add(scope,k,v)", 'Use "Tags.of(scope).add(k,v)" instead');
        Tags.of(scope).add(key, value, props);
      }
      static remove(scope, key, props = {}) {
        annotations_1.Annotations.of(scope).addDeprecation("@aws-cdk/core.Tag.remove(scope,k,v)", 'Use "Tags.of(scope).remove(k,v)" instead');
        Tags.of(scope).remove(key, props);
      }
      applyTag(resource) {
        var _d;
        if (resource.tags.applyTagAspectHere(this.props.includeResourceTypes, this.props.excludeResourceTypes)) {
          resource.tags.setTag(this.key, this.value, (_d = this.props.priority) !== null && _d !== void 0 ? _d : this.defaultPriority, this.props.applyToLaunchedInstances !== false);
        }
      }
    };
    exports2.Tag = Tag;
    _a = JSII_RTTI_SYMBOL_1;
    Tag[_a] = { fqn: "@aws-cdk/core.Tag", version: "1.132.0" };
    var Tags = class {
      constructor(scope) {
        this.scope = scope;
      }
      static of(scope) {
        return new Tags(scope);
      }
      add(key, value, props = {}) {
        aspect_1.Aspects.of(this.scope).add(new Tag(key, value, props));
      }
      remove(key, props = {}) {
        aspect_1.Aspects.of(this.scope).add(new RemoveTag(key, props));
      }
    };
    exports2.Tags = Tags;
    _b = JSII_RTTI_SYMBOL_1;
    Tags[_b] = { fqn: "@aws-cdk/core.Tags", version: "1.132.0" };
    var RemoveTag = class extends TagBase {
      constructor(key, props = {}) {
        super(key, props);
        this.defaultPriority = 200;
      }
      applyTag(resource) {
        var _d;
        if (resource.tags.applyTagAspectHere(this.props.includeResourceTypes, this.props.excludeResourceTypes)) {
          resource.tags.removeTag(this.key, (_d = this.props.priority) !== null && _d !== void 0 ? _d : this.defaultPriority);
        }
      }
    };
    exports2.RemoveTag = RemoveTag;
    _c = JSII_RTTI_SYMBOL_1;
    RemoveTag[_c] = { fqn: "@aws-cdk/core.RemoveTag", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/dependency.js
var require_dependency2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/dependency.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DependableTrait = exports2.ConcreteDependable = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var ConcreteDependable = class {
      constructor() {
        this._dependencyRoots = new Array();
        const self = this;
        DependableTrait.implement(this, {
          get dependencyRoots() {
            return self._dependencyRoots;
          }
        });
      }
      add(construct) {
        this._dependencyRoots.push(construct);
      }
    };
    exports2.ConcreteDependable = ConcreteDependable;
    _a = JSII_RTTI_SYMBOL_1;
    ConcreteDependable[_a] = { fqn: "@aws-cdk/core.ConcreteDependable", version: "1.132.0" };
    var DEPENDABLE_SYMBOL = Symbol.for("@aws-cdk/core.DependableTrait");
    var DependableTrait = class {
      static implement(instance, trait) {
        instance[DEPENDABLE_SYMBOL] = trait;
      }
      static get(instance) {
        const ret = instance[DEPENDABLE_SYMBOL];
        if (!ret) {
          throw new Error(`${instance} does not implement DependableTrait`);
        }
        return ret;
      }
    };
    exports2.DependableTrait = DependableTrait;
    _b = JSII_RTTI_SYMBOL_1;
    DependableTrait[_b] = { fqn: "@aws-cdk/core.DependableTrait", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/cfn-hook.js
var require_cfn_hook = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/cfn-hook.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnHook = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cfn_element_1 = require_cfn_element();
    var util_1 = require_util();
    var CfnHook = class extends cfn_element_1.CfnElement {
      constructor(scope, id, props) {
        super(scope, id);
        this.type = props.type;
        this._cfnHookProperties = props.properties;
      }
      _toCloudFormation() {
        return {
          Hooks: {
            [this.logicalId]: {
              Type: this.type,
              Properties: util_1.ignoreEmpty(this.renderProperties(this._cfnHookProperties))
            }
          }
        };
      }
      renderProperties(props) {
        return props;
      }
    };
    exports2.CfnHook = CfnHook;
    _a = JSII_RTTI_SYMBOL_1;
    CfnHook[_a] = { fqn: "@aws-cdk/core.CfnHook", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/cfn-codedeploy-blue-green-hook.js
var require_cfn_codedeploy_blue_green_hook = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/cfn-codedeploy-blue-green-hook.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnCodeDeployBlueGreenHook = exports2.CfnTrafficRoutingType = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cfn_hook_1 = require_cfn_hook();
    var util_1 = require_util();
    var CfnTrafficRoutingType;
    (function(CfnTrafficRoutingType2) {
      CfnTrafficRoutingType2["ALL_AT_ONCE"] = "AllAtOnce";
      CfnTrafficRoutingType2["TIME_BASED_CANARY"] = "TimeBasedCanary";
      CfnTrafficRoutingType2["TIME_BASED_LINEAR"] = "TimeBasedLinear";
    })(CfnTrafficRoutingType = exports2.CfnTrafficRoutingType || (exports2.CfnTrafficRoutingType = {}));
    var CfnCodeDeployBlueGreenHook = class extends cfn_hook_1.CfnHook {
      constructor(scope, id, props) {
        super(scope, id, {
          type: "AWS::CodeDeploy::BlueGreen"
        });
        this._serviceRole = props.serviceRole;
        this._applications = props.applications;
        this._trafficRoutingConfig = props.trafficRoutingConfig;
        this._additionalOptions = props.additionalOptions;
        this._lifecycleEventHooks = props.lifecycleEventHooks;
      }
      static _fromCloudFormation(scope, id, hookAttributes, options) {
        var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
        hookAttributes = hookAttributes || {};
        const hookProperties = options.parser.parseValue(hookAttributes.Properties);
        return new CfnCodeDeployBlueGreenHook(scope, id, {
          serviceRole: hookProperties === null || hookProperties === void 0 ? void 0 : hookProperties.ServiceRole,
          applications: (_b = hookProperties === null || hookProperties === void 0 ? void 0 : hookProperties.Applications) === null || _b === void 0 ? void 0 : _b.map(applicationFromCloudFormation),
          trafficRoutingConfig: {
            type: (_c = hookProperties === null || hookProperties === void 0 ? void 0 : hookProperties.TrafficRoutingConfig) === null || _c === void 0 ? void 0 : _c.Type,
            timeBasedCanary: {
              stepPercentage: (_e = (_d = hookProperties === null || hookProperties === void 0 ? void 0 : hookProperties.TrafficRoutingConfig) === null || _d === void 0 ? void 0 : _d.TimeBasedCanary) === null || _e === void 0 ? void 0 : _e.StepPercentage,
              bakeTimeMins: (_g = (_f = hookProperties === null || hookProperties === void 0 ? void 0 : hookProperties.TrafficRoutingConfig) === null || _f === void 0 ? void 0 : _f.TimeBasedCanary) === null || _g === void 0 ? void 0 : _g.BakeTimeMins
            },
            timeBasedLinear: {
              stepPercentage: (_j = (_h = hookProperties === null || hookProperties === void 0 ? void 0 : hookProperties.TrafficRoutingConfig) === null || _h === void 0 ? void 0 : _h.TimeBasedLinear) === null || _j === void 0 ? void 0 : _j.StepPercentage,
              bakeTimeMins: (_l = (_k = hookProperties === null || hookProperties === void 0 ? void 0 : hookProperties.TrafficRoutingConfig) === null || _k === void 0 ? void 0 : _k.TimeBasedLinear) === null || _l === void 0 ? void 0 : _l.BakeTimeMins
            }
          },
          additionalOptions: {
            terminationWaitTimeInMinutes: (_m = hookProperties === null || hookProperties === void 0 ? void 0 : hookProperties.AdditionalOptions) === null || _m === void 0 ? void 0 : _m.TerminationWaitTimeInMinutes
          },
          lifecycleEventHooks: {
            beforeInstall: (_o = hookProperties === null || hookProperties === void 0 ? void 0 : hookProperties.LifecycleEventHooks) === null || _o === void 0 ? void 0 : _o.BeforeInstall,
            afterInstall: (_p = hookProperties === null || hookProperties === void 0 ? void 0 : hookProperties.LifecycleEventHooks) === null || _p === void 0 ? void 0 : _p.AfterInstall,
            afterAllowTestTraffic: (_q = hookProperties === null || hookProperties === void 0 ? void 0 : hookProperties.LifecycleEventHooks) === null || _q === void 0 ? void 0 : _q.AfterAllowTestTraffic,
            beforeAllowTraffic: (_r = hookProperties === null || hookProperties === void 0 ? void 0 : hookProperties.LifecycleEventHooks) === null || _r === void 0 ? void 0 : _r.BeforeAllowTraffic,
            afterAllowTraffic: (_s = hookProperties === null || hookProperties === void 0 ? void 0 : hookProperties.LifecycleEventHooks) === null || _s === void 0 ? void 0 : _s.AfterAllowTraffic
          }
        });
        function applicationFromCloudFormation(app) {
          var _b2, _c2, _d2, _e2, _f2, _g2, _h2, _j2, _k2, _l2, _m2, _o2, _p2, _q2, _r2, _s2, _t, _u, _v, _w, _x;
          const target = findResource((_b2 = app === null || app === void 0 ? void 0 : app.Target) === null || _b2 === void 0 ? void 0 : _b2.LogicalID);
          const taskDefinitions = (_d2 = (_c2 = app === null || app === void 0 ? void 0 : app.ECSAttributes) === null || _c2 === void 0 ? void 0 : _c2.TaskDefinitions) === null || _d2 === void 0 ? void 0 : _d2.map((td) => findResource(td));
          const taskSets = (_f2 = (_e2 = app === null || app === void 0 ? void 0 : app.ECSAttributes) === null || _e2 === void 0 ? void 0 : _e2.TaskSets) === null || _f2 === void 0 ? void 0 : _f2.map((ts) => findResource(ts));
          const prodTrafficRoute = findResource((_j2 = (_h2 = (_g2 = app === null || app === void 0 ? void 0 : app.ECSAttributes) === null || _g2 === void 0 ? void 0 : _g2.TrafficRouting) === null || _h2 === void 0 ? void 0 : _h2.ProdTrafficRoute) === null || _j2 === void 0 ? void 0 : _j2.LogicalID);
          const testTrafficRoute = findResource((_m2 = (_l2 = (_k2 = app === null || app === void 0 ? void 0 : app.ECSAttributes) === null || _k2 === void 0 ? void 0 : _k2.TrafficRouting) === null || _l2 === void 0 ? void 0 : _l2.TestTrafficRoute) === null || _m2 === void 0 ? void 0 : _m2.LogicalID);
          const targetGroups = (_q2 = (_p2 = (_o2 = app === null || app === void 0 ? void 0 : app.ECSAttributes) === null || _o2 === void 0 ? void 0 : _o2.TrafficRouting) === null || _p2 === void 0 ? void 0 : _p2.TargetGroups) === null || _q2 === void 0 ? void 0 : _q2.map((tg) => findResource(tg));
          return {
            target: {
              type: (_r2 = app === null || app === void 0 ? void 0 : app.Target) === null || _r2 === void 0 ? void 0 : _r2.Type,
              logicalId: target === null || target === void 0 ? void 0 : target.logicalId
            },
            ecsAttributes: {
              taskDefinitions: taskDefinitions === null || taskDefinitions === void 0 ? void 0 : taskDefinitions.map((td) => td === null || td === void 0 ? void 0 : td.logicalId),
              taskSets: taskSets === null || taskSets === void 0 ? void 0 : taskSets.map((ts) => ts === null || ts === void 0 ? void 0 : ts.logicalId),
              trafficRouting: {
                prodTrafficRoute: {
                  type: (_u = (_t = (_s2 = app === null || app === void 0 ? void 0 : app.ECSAttributes) === null || _s2 === void 0 ? void 0 : _s2.TrafficRouting) === null || _t === void 0 ? void 0 : _t.ProdTrafficRoute) === null || _u === void 0 ? void 0 : _u.Type,
                  logicalId: prodTrafficRoute === null || prodTrafficRoute === void 0 ? void 0 : prodTrafficRoute.logicalId
                },
                testTrafficRoute: {
                  type: (_x = (_w = (_v = app === null || app === void 0 ? void 0 : app.ECSAttributes) === null || _v === void 0 ? void 0 : _v.TrafficRouting) === null || _w === void 0 ? void 0 : _w.TestTrafficRoute) === null || _x === void 0 ? void 0 : _x.Type,
                  logicalId: testTrafficRoute === null || testTrafficRoute === void 0 ? void 0 : testTrafficRoute.logicalId
                },
                targetGroups: targetGroups === null || targetGroups === void 0 ? void 0 : targetGroups.map((tg) => tg === null || tg === void 0 ? void 0 : tg.logicalId)
              }
            }
          };
        }
        function findResource(logicalId) {
          if (logicalId == null) {
            return void 0;
          }
          const ret = options.parser.finder.findResource(logicalId);
          if (!ret) {
            throw new Error(`Hook '${id}' references resource '${logicalId}' that was not found in the template`);
          }
          return ret;
        }
      }
      get serviceRole() {
        return this._serviceRole;
      }
      set serviceRole(serviceRole) {
        this._serviceRole = serviceRole;
      }
      get applications() {
        return this._applications;
      }
      set applications(value) {
        this._applications = value;
      }
      get trafficRoutingConfig() {
        return this._trafficRoutingConfig;
      }
      set trafficRoutingConfig(value) {
        this._trafficRoutingConfig = value;
      }
      get additionalOptions() {
        return this._additionalOptions;
      }
      set additionalOptions(value) {
        this._additionalOptions = value;
      }
      get lifecycleEventHooks() {
        return this._lifecycleEventHooks;
      }
      set lifecycleEventHooks(value) {
        this._lifecycleEventHooks = value;
      }
      renderProperties(_props) {
        var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
        return {
          ServiceRole: this.serviceRole,
          Applications: this.applications.map((app) => ({
            Target: {
              Type: app.target.type,
              LogicalID: app.target.logicalId
            },
            ECSAttributes: {
              TaskDefinitions: app.ecsAttributes.taskDefinitions,
              TaskSets: app.ecsAttributes.taskSets,
              TrafficRouting: {
                ProdTrafficRoute: {
                  Type: app.ecsAttributes.trafficRouting.prodTrafficRoute.type,
                  LogicalID: app.ecsAttributes.trafficRouting.prodTrafficRoute.logicalId
                },
                TestTrafficRoute: {
                  Type: app.ecsAttributes.trafficRouting.testTrafficRoute.type,
                  LogicalID: app.ecsAttributes.trafficRouting.testTrafficRoute.logicalId
                },
                TargetGroups: app.ecsAttributes.trafficRouting.targetGroups
              }
            }
          })),
          TrafficRoutingConfig: util_1.undefinedIfAllValuesAreEmpty({
            Type: (_b = this.trafficRoutingConfig) === null || _b === void 0 ? void 0 : _b.type,
            TimeBasedCanary: util_1.undefinedIfAllValuesAreEmpty({
              StepPercentage: (_d = (_c = this.trafficRoutingConfig) === null || _c === void 0 ? void 0 : _c.timeBasedCanary) === null || _d === void 0 ? void 0 : _d.stepPercentage,
              BakeTimeMins: (_f = (_e = this.trafficRoutingConfig) === null || _e === void 0 ? void 0 : _e.timeBasedCanary) === null || _f === void 0 ? void 0 : _f.bakeTimeMins
            }),
            TimeBasedLinear: util_1.undefinedIfAllValuesAreEmpty({
              StepPercentage: (_h = (_g = this.trafficRoutingConfig) === null || _g === void 0 ? void 0 : _g.timeBasedLinear) === null || _h === void 0 ? void 0 : _h.stepPercentage,
              BakeTimeMins: (_k = (_j = this.trafficRoutingConfig) === null || _j === void 0 ? void 0 : _j.timeBasedLinear) === null || _k === void 0 ? void 0 : _k.bakeTimeMins
            })
          }),
          AdditionalOptions: util_1.undefinedIfAllValuesAreEmpty({
            TerminationWaitTimeInMinutes: (_l = this.additionalOptions) === null || _l === void 0 ? void 0 : _l.terminationWaitTimeInMinutes
          }),
          LifecycleEventHooks: util_1.undefinedIfAllValuesAreEmpty({
            BeforeInstall: (_m = this.lifecycleEventHooks) === null || _m === void 0 ? void 0 : _m.beforeInstall,
            AfterInstall: (_o = this.lifecycleEventHooks) === null || _o === void 0 ? void 0 : _o.afterInstall,
            AfterAllowTestTraffic: (_p = this.lifecycleEventHooks) === null || _p === void 0 ? void 0 : _p.afterAllowTestTraffic,
            BeforeAllowTraffic: (_q = this.lifecycleEventHooks) === null || _q === void 0 ? void 0 : _q.beforeAllowTraffic,
            AfterAllowTraffic: (_r = this.lifecycleEventHooks) === null || _r === void 0 ? void 0 : _r.afterAllowTraffic
          })
        };
      }
    };
    exports2.CfnCodeDeployBlueGreenHook = CfnCodeDeployBlueGreenHook;
    _a = JSII_RTTI_SYMBOL_1;
    CfnCodeDeployBlueGreenHook[_a] = { fqn: "@aws-cdk/core.CfnCodeDeployBlueGreenHook", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/cfn-include.js
var require_cfn_include = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/cfn-include.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnInclude = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cfn_element_1 = require_cfn_element();
    var CfnInclude = class extends cfn_element_1.CfnElement {
      constructor(scope, id, props) {
        super(scope, id);
        this.template = props.template;
      }
      _toCloudFormation() {
        return this.template;
      }
    };
    exports2.CfnInclude = CfnInclude;
    _a = JSII_RTTI_SYMBOL_1;
    CfnInclude[_a] = { fqn: "@aws-cdk/core.CfnInclude", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/cfn-mapping.js
var require_cfn_mapping = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/cfn-mapping.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnMapping = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var annotations_1 = require_annotations();
    var cfn_element_1 = require_cfn_element();
    var cfn_fn_1 = require_cfn_fn();
    var token_1 = require_token();
    var CfnMapping = class extends cfn_element_1.CfnRefElement {
      constructor(scope, id, props = {}) {
        var _b;
        super(scope, id);
        this.lazyRender = false;
        this.lazyInformed = false;
        this.mapping = (_b = props.mapping) !== null && _b !== void 0 ? _b : {};
        this.lazy = props.lazy;
      }
      setValue(key1, key2, value) {
        if (!(key1 in this.mapping)) {
          this.mapping[key1] = {};
        }
        this.mapping[key1][key2] = value;
      }
      findInMap(key1, key2) {
        let fullyResolved = false;
        if (!token_1.Token.isUnresolved(key1)) {
          if (!(key1 in this.mapping)) {
            throw new Error(`Mapping doesn't contain top-level key '${key1}'`);
          }
          if (!token_1.Token.isUnresolved(key2)) {
            if (!(key2 in this.mapping[key1])) {
              throw new Error(`Mapping doesn't contain second-level key '${key2}'`);
            }
            fullyResolved = true;
          }
        }
        if (fullyResolved) {
          if (this.lazy) {
            return this.mapping[key1][key2];
          }
        } else {
          this.lazyRender = true;
        }
        return cfn_fn_1.Fn.findInMap(this.logicalId, key1, key2);
      }
      _toCloudFormation() {
        if (this.lazy === void 0 && !this.lazyRender) {
          this.informLazyUse();
        }
        if (!this.lazy || this.lazy && this.lazyRender) {
          return {
            Mappings: {
              [this.logicalId]: this.mapping
            }
          };
        } else {
          return {};
        }
      }
      informLazyUse() {
        if (!this.lazyInformed) {
          annotations_1.Annotations.of(this).addInfo("Consider making this CfnMapping a lazy mapping by providing `lazy: true`: either no findInMap was called or every findInMap could be immediately resolved without using Fn::FindInMap");
        }
        this.lazyInformed = true;
      }
    };
    exports2.CfnMapping = CfnMapping;
    _a = JSII_RTTI_SYMBOL_1;
    CfnMapping[_a] = { fqn: "@aws-cdk/core.CfnMapping", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/cfn-dynamic-reference.js
var require_cfn_dynamic_reference = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/cfn-dynamic-reference.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnDynamicReferenceService = exports2.CfnDynamicReference = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var intrinsic_1 = require_intrinsic();
    var CfnDynamicReference = class extends intrinsic_1.Intrinsic {
      constructor(service, key) {
        super("{{resolve:" + service + ":" + key + "}}");
      }
    };
    exports2.CfnDynamicReference = CfnDynamicReference;
    _a = JSII_RTTI_SYMBOL_1;
    CfnDynamicReference[_a] = { fqn: "@aws-cdk/core.CfnDynamicReference", version: "1.132.0" };
    var CfnDynamicReferenceService;
    (function(CfnDynamicReferenceService2) {
      CfnDynamicReferenceService2["SSM"] = "ssm";
      CfnDynamicReferenceService2["SSM_SECURE"] = "ssm-secure";
      CfnDynamicReferenceService2["SECRETS_MANAGER"] = "secretsmanager";
    })(CfnDynamicReferenceService = exports2.CfnDynamicReferenceService || (exports2.CfnDynamicReferenceService = {}));
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/cfn-tag.js
var require_cfn_tag = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/cfn-tag.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/cfn-json.js
var require_cfn_json = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/cfn-json.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnJson = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var custom_resource_1 = require_custom_resource();
    var cfn_utils_provider_1 = require_cfn_utils_provider();
    var stack_1 = require_stack();
    var stack_trace_1 = require_stack_trace2();
    var construct_compat_1 = require_construct_compat();
    var CfnJson = class extends construct_compat_1.Construct {
      constructor(scope, id, props) {
        super(scope, id);
        this.creationStack = [];
        this.creationStack = stack_trace_1.captureStackTrace();
        this.jsonString = stack_1.Stack.of(this).toJsonString(props.value);
        const resource = new custom_resource_1.CustomResource(this, "Resource", {
          serviceToken: cfn_utils_provider_1.CfnUtilsProvider.getOrCreate(this),
          resourceType: "Custom::AWSCDKCfnJson",
          properties: {
            Value: this.jsonString
          }
        });
        this.value = resource.getAtt("Value");
      }
      toJSON() {
        return this.jsonString;
      }
      resolve(_) {
        return this.value;
      }
    };
    exports2.CfnJson = CfnJson;
    _a = JSII_RTTI_SYMBOL_1;
    CfnJson[_a] = { fqn: "@aws-cdk/core.CfnJson", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/expiration.js
var require_expiration = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/expiration.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Expiration = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var Expiration = class {
      constructor(date2) {
        this.date = date2;
      }
      static atDate(d) {
        return new Expiration(d);
      }
      static atTimestamp(t) {
        return Expiration.atDate(new Date(t));
      }
      static after(t) {
        return Expiration.atDate(new Date(Date.now() + t.toMilliseconds()));
      }
      static fromString(s) {
        return new Expiration(new Date(s));
      }
      toEpoch() {
        return Math.round(this.date.getTime() / 1e3);
      }
      isBefore(t) {
        return this.date < new Date(Date.now() + t.toMilliseconds());
      }
      isAfter(t) {
        return this.date > new Date(Date.now() + t.toMilliseconds());
      }
    };
    exports2.Expiration = Expiration;
    _a = JSII_RTTI_SYMBOL_1;
    Expiration[_a] = { fqn: "@aws-cdk/core.Expiration", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/environment.js
var require_environment2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/environment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/runtime.js
var require_runtime = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/runtime.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.unionValidator = exports2.requireProperty = exports2.requiredValidator = exports2.propertyValidator = exports2.hashValidator = exports2.listValidator = exports2.validateCfnTag = exports2.validateObject = exports2.validateDate = exports2.validateBoolean = exports2.validateNumber = exports2.validateString = exports2.canInspect = exports2.VALIDATION_SUCCESS = exports2.ValidationResults = exports2.ValidationResult = exports2.unionMapper = exports2.hashMapper = exports2.listMapper = exports2.cfnTagToCloudFormation = exports2.dateToCloudFormation = exports2.numberToCloudFormation = exports2.objectToCloudFormation = exports2.booleanToCloudFormation = exports2.stringToCloudFormation = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    function identity(x) {
      return x;
    }
    exports2.stringToCloudFormation = identity;
    exports2.booleanToCloudFormation = identity;
    exports2.objectToCloudFormation = identity;
    exports2.numberToCloudFormation = identity;
    function dateToCloudFormation(x) {
      if (!x) {
        return void 0;
      }
      return `${x.getUTCFullYear()}-${pad(x.getUTCMonth() + 1)}-${pad(x.getUTCDate())}T${pad(x.getUTCHours())}:${pad(x.getUTCMinutes())}:${pad(x.getUTCSeconds())}`;
    }
    exports2.dateToCloudFormation = dateToCloudFormation;
    function pad(x) {
      if (x < 10) {
        return "0" + x.toString();
      }
      return x.toString();
    }
    function cfnTagToCloudFormation(x) {
      return {
        Key: x.key,
        Value: x.value
      };
    }
    exports2.cfnTagToCloudFormation = cfnTagToCloudFormation;
    function listMapper(elementMapper) {
      return (x) => {
        if (!canInspect(x)) {
          return x;
        }
        return x.map(elementMapper);
      };
    }
    exports2.listMapper = listMapper;
    function hashMapper(elementMapper) {
      return (x) => {
        if (!canInspect(x)) {
          return x;
        }
        const ret = {};
        Object.keys(x).forEach((key) => {
          ret[key] = elementMapper(x[key]);
        });
        return ret;
      };
    }
    exports2.hashMapper = hashMapper;
    function unionMapper(validators, mappers) {
      if (validators.length !== mappers.length) {
        throw Error("Not the same amount of validators and mappers passed to unionMapper()");
      }
      return (x) => {
        if (!canInspect(x)) {
          return x;
        }
        for (let i = 0; i < validators.length; i++) {
          if (validators[i](x).isSuccess) {
            return mappers[i](x);
          }
        }
        throw new TypeError("No validators matched in the union()");
      };
    }
    exports2.unionMapper = unionMapper;
    var ValidationResult = class {
      constructor(errorMessage = "", results = new ValidationResults()) {
        this.errorMessage = errorMessage;
        this.results = results;
      }
      get isSuccess() {
        return !this.errorMessage && this.results.isSuccess;
      }
      assertSuccess() {
        if (!this.isSuccess) {
          let message = this.errorTree();
          message = message.substr(0, 1).toUpperCase() + message.substr(1);
          throw new CfnSynthesisError(message);
        }
      }
      errorTree() {
        const childMessages = this.results.errorTreeList();
        return this.errorMessage + (childMessages.length ? `
  ${childMessages.replace(/\n/g, "\n  ")}` : "");
      }
      prefix(message) {
        if (this.isSuccess) {
          return this;
        }
        return new ValidationResult(`${message}: ${this.errorMessage}`, this.results);
      }
    };
    exports2.ValidationResult = ValidationResult;
    _a = JSII_RTTI_SYMBOL_1;
    ValidationResult[_a] = { fqn: "@aws-cdk/core.ValidationResult", version: "1.132.0" };
    var ValidationResults = class {
      constructor(results = []) {
        this.results = results;
      }
      collect(result) {
        if (!result.isSuccess) {
          this.results.push(result);
        }
      }
      get isSuccess() {
        return this.results.every((x) => x.isSuccess);
      }
      errorTreeList() {
        return this.results.map((child) => child.errorTree()).join("\n");
      }
      wrap(message) {
        if (this.isSuccess) {
          return exports2.VALIDATION_SUCCESS;
        }
        return new ValidationResult(message, this);
      }
    };
    exports2.ValidationResults = ValidationResults;
    _b = JSII_RTTI_SYMBOL_1;
    ValidationResults[_b] = { fqn: "@aws-cdk/core.ValidationResults", version: "1.132.0" };
    exports2.VALIDATION_SUCCESS = new ValidationResult();
    function canInspect(x) {
      return x != null && !isCloudFormationIntrinsic(x) && !isCloudFormationDynamicReference(x);
    }
    exports2.canInspect = canInspect;
    function validateString(x) {
      if (canInspect(x) && typeof x !== "string") {
        return new ValidationResult(`${JSON.stringify(x)} should be a string`);
      }
      return exports2.VALIDATION_SUCCESS;
    }
    exports2.validateString = validateString;
    function validateNumber(x) {
      if (canInspect(x) && typeof x !== "number") {
        return new ValidationResult(`${JSON.stringify(x)} should be a number`);
      }
      return exports2.VALIDATION_SUCCESS;
    }
    exports2.validateNumber = validateNumber;
    function validateBoolean(x) {
      if (canInspect(x) && typeof x !== "boolean") {
        return new ValidationResult(`${JSON.stringify(x)} should be a boolean`);
      }
      return exports2.VALIDATION_SUCCESS;
    }
    exports2.validateBoolean = validateBoolean;
    function validateDate(x) {
      if (canInspect(x) && !(x instanceof Date)) {
        return new ValidationResult(`${JSON.stringify(x)} should be a Date`);
      }
      if (x !== void 0 && isNaN(x.getTime())) {
        return new ValidationResult("got an unparseable Date");
      }
      return exports2.VALIDATION_SUCCESS;
    }
    exports2.validateDate = validateDate;
    function validateObject(x) {
      if (canInspect(x) && typeof x !== "object") {
        return new ValidationResult(`${JSON.stringify(x)} should be an 'object'`);
      }
      return exports2.VALIDATION_SUCCESS;
    }
    exports2.validateObject = validateObject;
    function validateCfnTag(x) {
      if (!canInspect(x)) {
        return exports2.VALIDATION_SUCCESS;
      }
      if (x.key == null || x.value == null) {
        return new ValidationResult(`${JSON.stringify(x)} should have a 'key' and a 'value' property`);
      }
      return exports2.VALIDATION_SUCCESS;
    }
    exports2.validateCfnTag = validateCfnTag;
    function listValidator(elementValidator) {
      return (x) => {
        if (!canInspect(x)) {
          return exports2.VALIDATION_SUCCESS;
        }
        if (!x.forEach) {
          return new ValidationResult(`${JSON.stringify(x)} should be a list`);
        }
        for (let i = 0; i < x.length; i++) {
          const element = x[i];
          const result = elementValidator(element);
          if (!result.isSuccess) {
            return result.prefix(`element ${i}`);
          }
        }
        return exports2.VALIDATION_SUCCESS;
      };
    }
    exports2.listValidator = listValidator;
    function hashValidator(elementValidator) {
      return (x) => {
        if (!canInspect(x)) {
          return exports2.VALIDATION_SUCCESS;
        }
        for (const key of Object.keys(x)) {
          const result = elementValidator(x[key]);
          if (!result.isSuccess) {
            return result.prefix(`element '${key}'`);
          }
        }
        return exports2.VALIDATION_SUCCESS;
      };
    }
    exports2.hashValidator = hashValidator;
    function propertyValidator(propName, validator) {
      return (x) => {
        return validator(x).prefix(propName);
      };
    }
    exports2.propertyValidator = propertyValidator;
    function requiredValidator(x) {
      if (x == null) {
        return new ValidationResult("required but missing");
      }
      return exports2.VALIDATION_SUCCESS;
    }
    exports2.requiredValidator = requiredValidator;
    function requireProperty(props, name, context) {
      const value = props[name];
      if (value == null) {
        throw new Error(`${context.toString()} is missing required property: ${name}`);
      }
      return value;
    }
    exports2.requireProperty = requireProperty;
    function unionValidator(...validators) {
      return (x) => {
        const results = new ValidationResults();
        let eitherOr = "either";
        for (const validator of validators) {
          const result = validator(x);
          if (result.isSuccess) {
            return result;
          }
          results.collect(result.prefix(eitherOr));
          eitherOr = "or";
        }
        return results.wrap("not one of the possible types");
      };
    }
    exports2.unionValidator = unionValidator;
    function isCloudFormationIntrinsic(x) {
      if (!(typeof x === "object")) {
        return false;
      }
      const keys = Object.keys(x);
      if (keys.length !== 1) {
        return false;
      }
      return keys[0] === "Ref" || keys[0].substr(0, 4) === "Fn::";
    }
    function isCloudFormationDynamicReference(x) {
      return typeof x === "string" && x.startsWith("{{resolve:") && x.endsWith("}}");
    }
    var CfnSynthesisError = class extends Error {
      constructor() {
        super(...arguments);
        this.type = "CfnSynthesisError";
      }
    };
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/secret-value.js
var require_secret_value = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/secret-value.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SecretValue = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cfn_dynamic_reference_1 = require_cfn_dynamic_reference();
    var intrinsic_1 = require_intrinsic();
    var token_1 = require_token();
    var SecretValue = class extends intrinsic_1.Intrinsic {
      static plainText(secret) {
        return new SecretValue(secret);
      }
      static secretsManager(secretId, options = {}) {
        if (!secretId) {
          throw new Error("secretId cannot be empty");
        }
        if (!token_1.Token.isUnresolved(secretId) && !secretId.startsWith("arn:") && secretId.includes(":")) {
          throw new Error(`secret id "${secretId}" is not an ARN but contains ":"`);
        }
        if (options.versionStage && options.versionId) {
          throw new Error(`verionStage: '${options.versionStage}' and versionId: '${options.versionId}' were both provided but only one is allowed`);
        }
        const parts = [
          secretId,
          "SecretString",
          options.jsonField || "",
          options.versionStage || "",
          options.versionId || ""
        ];
        const dyref = new cfn_dynamic_reference_1.CfnDynamicReference(cfn_dynamic_reference_1.CfnDynamicReferenceService.SECRETS_MANAGER, parts.join(":"));
        return this.cfnDynamicReference(dyref);
      }
      static ssmSecure(parameterName, version) {
        const parts = [parameterName, version];
        return this.cfnDynamicReference(new cfn_dynamic_reference_1.CfnDynamicReference(cfn_dynamic_reference_1.CfnDynamicReferenceService.SSM_SECURE, parts.join(":")));
      }
      static cfnDynamicReference(ref) {
        return new SecretValue(ref);
      }
      static cfnParameter(param) {
        if (!param.noEcho) {
          throw new Error('CloudFormation parameter must be configured with "NoEcho"');
        }
        return new SecretValue(param.value);
      }
    };
    exports2.SecretValue = SecretValue;
    _a = JSII_RTTI_SYMBOL_1;
    SecretValue[_a] = { fqn: "@aws-cdk/core.SecretValue", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/physical-name.js
var require_physical_name = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/physical-name.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PhysicalName = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var physical_name_generator_1 = require_physical_name_generator();
    var token_1 = require_token();
    var PhysicalName = class {
      constructor() {
      }
    };
    exports2.PhysicalName = PhysicalName;
    _a = JSII_RTTI_SYMBOL_1;
    PhysicalName[_a] = { fqn: "@aws-cdk/core.PhysicalName", version: "1.132.0" };
    PhysicalName.GENERATE_IF_NEEDED = token_1.Token.asString(new physical_name_generator_1.GeneratedWhenNeededMarker());
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/cfn-parse.js
var require_cfn_parse = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/cfn-parse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnParser = exports2.CfnParsingContext = exports2.FromCloudFormation = exports2.FromCloudFormationPropertyObject = exports2.FromCloudFormationResult = void 0;
    var cfn_fn_1 = require_cfn_fn();
    var cfn_pseudo_1 = require_cfn_pseudo();
    var cfn_resource_policy_1 = require_cfn_resource_policy();
    var lazy_1 = require_lazy();
    var cfn_reference_1 = require_cfn_reference();
    var token_1 = require_token();
    var util_1 = require_util();
    var FromCloudFormationResult = class {
      constructor(value) {
        this.value = value;
        this.extraProperties = {};
      }
      appendExtraProperties(prefix, properties) {
        for (const [key, val] of Object.entries(properties !== null && properties !== void 0 ? properties : {})) {
          this.extraProperties[`${prefix}.${key}`] = val;
        }
      }
    };
    exports2.FromCloudFormationResult = FromCloudFormationResult;
    var FromCloudFormationPropertyObject = class extends FromCloudFormationResult {
      constructor() {
        super({});
        this.recognizedProperties = new Set();
      }
      addPropertyResult(cdkPropName, cfnPropName, result) {
        this.recognizedProperties.add(cfnPropName);
        if (!result) {
          return;
        }
        this.value[cdkPropName] = result.value;
        this.appendExtraProperties(cfnPropName, result.extraProperties);
      }
      addUnrecognizedPropertiesAsExtra(properties) {
        for (const [key, val] of Object.entries(properties)) {
          if (!this.recognizedProperties.has(key)) {
            this.extraProperties[key] = val;
          }
        }
      }
    };
    exports2.FromCloudFormationPropertyObject = FromCloudFormationPropertyObject;
    var FromCloudFormation = class {
      static getAny(value) {
        return new FromCloudFormationResult(value);
      }
      static getBoolean(value) {
        if (typeof value === "string") {
          switch (value) {
            case "true":
              return new FromCloudFormationResult(true);
            case "false":
              return new FromCloudFormationResult(false);
            default:
              throw new Error(`Expected 'true' or 'false' for boolean value, got: '${value}'`);
          }
        }
        return new FromCloudFormationResult(value);
      }
      static getDate(value) {
        if (token_1.isResolvableObject(value)) {
          return new FromCloudFormationResult(value);
        }
        if (typeof value === "string") {
          return new FromCloudFormationResult(new Date(value));
        }
        return new FromCloudFormationResult(value);
      }
      static getString(value) {
        if (token_1.isResolvableObject(value)) {
          return new FromCloudFormationResult(value.toString());
        }
        if (typeof value === "number") {
          return new FromCloudFormationResult(value.toString());
        }
        if (typeof value === "boolean") {
          return new FromCloudFormationResult(value.toString());
        }
        return new FromCloudFormationResult(value);
      }
      static getNumber(value) {
        if (token_1.isResolvableObject(value)) {
          return new FromCloudFormationResult(token_1.Token.asNumber(value));
        }
        if (typeof value === "string") {
          const parsedValue = parseFloat(value);
          if (!isNaN(parsedValue)) {
            return new FromCloudFormationResult(parsedValue);
          }
        }
        return new FromCloudFormationResult(value);
      }
      static getStringArray(value) {
        if (token_1.isResolvableObject(value)) {
          return new FromCloudFormationResult(token_1.Token.asList(value));
        }
        return this.getArray(this.getString)(value);
      }
      static getArray(mapper) {
        return (value) => {
          if (!Array.isArray(value)) {
            return new FromCloudFormationResult(value);
          }
          const values = new Array();
          const ret = new FromCloudFormationResult(values);
          for (let i = 0; i < value.length; i++) {
            const result = mapper(value[i]);
            values.push(result.value);
            ret.appendExtraProperties(`${i}`, result.extraProperties);
          }
          return ret;
        };
      }
      static getMap(mapper) {
        return (value) => {
          if (typeof value !== "object") {
            return new FromCloudFormationResult(value);
          }
          const values = {};
          const ret = new FromCloudFormationResult(values);
          for (const [key, val] of Object.entries(value)) {
            const result = mapper(val);
            values[key] = result.value;
            ret.appendExtraProperties(key, result.extraProperties);
          }
          return ret;
        };
      }
      static getCfnTag(tag) {
        return tag == null ? new FromCloudFormationResult({}) : new FromCloudFormationResult({
          key: tag.Key,
          value: tag.Value
        });
      }
      static getTypeUnion(validators, mappers) {
        return (value) => {
          for (let i = 0; i < validators.length; i++) {
            const candidate = mappers[i](value);
            if (validators[i](candidate.value).isSuccess) {
              return candidate;
            }
          }
          return new FromCloudFormationResult(value);
        };
      }
    };
    exports2.FromCloudFormation = FromCloudFormation;
    var CfnParsingContext;
    (function(CfnParsingContext2) {
      CfnParsingContext2[CfnParsingContext2["CONDITIONS"] = 0] = "CONDITIONS";
      CfnParsingContext2[CfnParsingContext2["RULES"] = 1] = "RULES";
    })(CfnParsingContext = exports2.CfnParsingContext || (exports2.CfnParsingContext = {}));
    var CfnParser = class {
      constructor(options) {
        this.options = options;
      }
      handleAttributes(resource, resourceAttributes, logicalId) {
        var _a;
        const cfnOptions = resource.cfnOptions;
        cfnOptions.creationPolicy = this.parseCreationPolicy(resourceAttributes.CreationPolicy);
        cfnOptions.updatePolicy = this.parseUpdatePolicy(resourceAttributes.UpdatePolicy);
        cfnOptions.deletionPolicy = this.parseDeletionPolicy(resourceAttributes.DeletionPolicy);
        cfnOptions.updateReplacePolicy = this.parseDeletionPolicy(resourceAttributes.UpdateReplacePolicy);
        cfnOptions.version = this.parseValue(resourceAttributes.Version);
        cfnOptions.description = this.parseValue(resourceAttributes.Description);
        cfnOptions.metadata = this.parseValue(resourceAttributes.Metadata);
        if (resourceAttributes.Condition) {
          const condition = this.finder.findCondition(resourceAttributes.Condition);
          if (!condition) {
            throw new Error(`Resource '${logicalId}' uses Condition '${resourceAttributes.Condition}' that doesn't exist`);
          }
          cfnOptions.condition = condition;
        }
        resourceAttributes.DependsOn = (_a = resourceAttributes.DependsOn) !== null && _a !== void 0 ? _a : [];
        const dependencies = Array.isArray(resourceAttributes.DependsOn) ? resourceAttributes.DependsOn : [resourceAttributes.DependsOn];
        for (const dep of dependencies) {
          const depResource = this.finder.findResource(dep);
          if (!depResource) {
            throw new Error(`Resource '${logicalId}' depends on '${dep}' that doesn't exist`);
          }
          resource.node.addDependency(depResource);
        }
      }
      parseCreationPolicy(policy) {
        if (typeof policy !== "object") {
          return void 0;
        }
        policy = this.parseValue(policy);
        return util_1.undefinedIfAllValuesAreEmpty({
          autoScalingCreationPolicy: parseAutoScalingCreationPolicy(policy.AutoScalingCreationPolicy),
          resourceSignal: parseResourceSignal(policy.ResourceSignal)
        });
        function parseAutoScalingCreationPolicy(p) {
          if (typeof p !== "object") {
            return void 0;
          }
          return util_1.undefinedIfAllValuesAreEmpty({
            minSuccessfulInstancesPercent: FromCloudFormation.getNumber(p.MinSuccessfulInstancesPercent).value
          });
        }
        function parseResourceSignal(p) {
          if (typeof p !== "object") {
            return void 0;
          }
          return util_1.undefinedIfAllValuesAreEmpty({
            count: FromCloudFormation.getNumber(p.Count).value,
            timeout: FromCloudFormation.getString(p.Timeout).value
          });
        }
      }
      parseUpdatePolicy(policy) {
        if (typeof policy !== "object") {
          return void 0;
        }
        policy = this.parseValue(policy);
        return util_1.undefinedIfAllValuesAreEmpty({
          autoScalingReplacingUpdate: parseAutoScalingReplacingUpdate(policy.AutoScalingReplacingUpdate),
          autoScalingRollingUpdate: parseAutoScalingRollingUpdate(policy.AutoScalingRollingUpdate),
          autoScalingScheduledAction: parseAutoScalingScheduledAction(policy.AutoScalingScheduledAction),
          codeDeployLambdaAliasUpdate: parseCodeDeployLambdaAliasUpdate(policy.CodeDeployLambdaAliasUpdate),
          enableVersionUpgrade: FromCloudFormation.getBoolean(policy.EnableVersionUpgrade).value,
          useOnlineResharding: FromCloudFormation.getBoolean(policy.UseOnlineResharding).value
        });
        function parseAutoScalingReplacingUpdate(p) {
          if (typeof p !== "object") {
            return void 0;
          }
          return util_1.undefinedIfAllValuesAreEmpty({
            willReplace: p.WillReplace
          });
        }
        function parseAutoScalingRollingUpdate(p) {
          if (typeof p !== "object") {
            return void 0;
          }
          return util_1.undefinedIfAllValuesAreEmpty({
            maxBatchSize: FromCloudFormation.getNumber(p.MaxBatchSize).value,
            minInstancesInService: FromCloudFormation.getNumber(p.MinInstancesInService).value,
            minSuccessfulInstancesPercent: FromCloudFormation.getNumber(p.MinSuccessfulInstancesPercent).value,
            pauseTime: FromCloudFormation.getString(p.PauseTime).value,
            suspendProcesses: FromCloudFormation.getStringArray(p.SuspendProcesses).value,
            waitOnResourceSignals: FromCloudFormation.getBoolean(p.WaitOnResourceSignals).value
          });
        }
        function parseCodeDeployLambdaAliasUpdate(p) {
          if (typeof p !== "object") {
            return void 0;
          }
          return {
            beforeAllowTrafficHook: FromCloudFormation.getString(p.BeforeAllowTrafficHook).value,
            afterAllowTrafficHook: FromCloudFormation.getString(p.AfterAllowTrafficHook).value,
            applicationName: FromCloudFormation.getString(p.ApplicationName).value,
            deploymentGroupName: FromCloudFormation.getString(p.DeploymentGroupName).value
          };
        }
        function parseAutoScalingScheduledAction(p) {
          if (typeof p !== "object") {
            return void 0;
          }
          return util_1.undefinedIfAllValuesAreEmpty({
            ignoreUnmodifiedGroupSizeProperties: FromCloudFormation.getBoolean(p.IgnoreUnmodifiedGroupSizeProperties).value
          });
        }
      }
      parseDeletionPolicy(policy) {
        switch (policy) {
          case null:
            return void 0;
          case void 0:
            return void 0;
          case "Delete":
            return cfn_resource_policy_1.CfnDeletionPolicy.DELETE;
          case "Retain":
            return cfn_resource_policy_1.CfnDeletionPolicy.RETAIN;
          case "Snapshot":
            return cfn_resource_policy_1.CfnDeletionPolicy.SNAPSHOT;
          default:
            throw new Error(`Unrecognized DeletionPolicy '${policy}'`);
        }
      }
      parseValue(cfnValue) {
        if (cfnValue == null) {
          return void 0;
        }
        if (token_1.isResolvableObject(cfnValue)) {
          return cfnValue;
        }
        if (Array.isArray(cfnValue)) {
          return cfnValue.map((el) => this.parseValue(el));
        }
        if (typeof cfnValue === "object") {
          const cfnIntrinsic = this.parseIfCfnIntrinsic(cfnValue);
          if (cfnIntrinsic !== void 0) {
            return cfnIntrinsic;
          }
          const ret = {};
          for (const [key, val] of Object.entries(cfnValue)) {
            ret[key] = this.parseValue(val);
          }
          return ret;
        }
        return cfnValue;
      }
      get finder() {
        return this.options.finder;
      }
      parseIfCfnIntrinsic(object) {
        const key = this.looksLikeCfnIntrinsic(object);
        switch (key) {
          case void 0:
            return void 0;
          case "Ref": {
            const refTarget = object[key];
            const specialRef = this.specialCaseRefs(refTarget);
            if (specialRef !== void 0) {
              return specialRef;
            } else {
              const refElement = this.finder.findRefTarget(refTarget);
              if (!refElement) {
                throw new Error(`Element used in Ref expression with logical ID: '${refTarget}' not found`);
              }
              return cfn_reference_1.CfnReference.for(refElement, "Ref");
            }
          }
          case "Fn::GetAtt": {
            const value = object[key];
            let logicalId, attributeName, stringForm;
            if (typeof value === "string") {
              const dotIndex = value.indexOf(".");
              if (dotIndex === -1) {
                throw new Error(`Short-form Fn::GetAtt must contain a '.' in its string argument, got: '${value}'`);
              }
              logicalId = value.substr(0, dotIndex);
              attributeName = value.substr(dotIndex + 1);
              stringForm = true;
            } else {
              logicalId = value[0];
              attributeName = value[1];
              stringForm = false;
            }
            const target = this.finder.findResource(logicalId);
            if (!target) {
              throw new Error(`Resource used in GetAtt expression with logical ID: '${logicalId}' not found`);
            }
            return cfn_reference_1.CfnReference.for(target, attributeName, stringForm ? cfn_reference_1.ReferenceRendering.GET_ATT_STRING : void 0);
          }
          case "Fn::Join": {
            const value = this.parseValue(object[key]);
            return cfn_fn_1.Fn.join(value[0], lazy_1.Lazy.list({ produce: () => value[1] }));
          }
          case "Fn::Cidr": {
            const value = this.parseValue(object[key]);
            return cfn_fn_1.Fn.cidr(value[0], value[1], value[2]);
          }
          case "Fn::FindInMap": {
            const value = this.parseValue(object[key]);
            let mappingName;
            if (token_1.Token.isUnresolved(value[0])) {
              mappingName = value[0];
            } else {
              const mapping = this.finder.findMapping(value[0]);
              if (!mapping) {
                throw new Error(`Mapping used in FindInMap expression with name '${value[0]}' was not found in the template`);
              }
              mappingName = mapping.logicalId;
            }
            return cfn_fn_1.Fn._findInMap(mappingName, value[1], value[2]);
          }
          case "Fn::Select": {
            const value = this.parseValue(object[key]);
            return cfn_fn_1.Fn.select(value[0], value[1]);
          }
          case "Fn::GetAZs": {
            const value = this.parseValue(object[key]);
            return cfn_fn_1.Fn.getAzs(value);
          }
          case "Fn::ImportValue": {
            const value = this.parseValue(object[key]);
            return cfn_fn_1.Fn.importValue(value);
          }
          case "Fn::Split": {
            const value = this.parseValue(object[key]);
            return cfn_fn_1.Fn.split(value[0], value[1]);
          }
          case "Fn::Transform": {
            const value = this.parseValue(object[key]);
            return cfn_fn_1.Fn.transform(value.Name, value.Parameters);
          }
          case "Fn::Base64": {
            const value = this.parseValue(object[key]);
            return cfn_fn_1.Fn.base64(value);
          }
          case "Fn::If": {
            const value = this.parseValue(object[key]);
            const condition = this.finder.findCondition(value[0]);
            if (!condition) {
              throw new Error(`Condition '${value[0]}' used in an Fn::If expression does not exist in the template`);
            }
            return cfn_fn_1.Fn.conditionIf(condition.logicalId, value[1], value[2]);
          }
          case "Fn::Equals": {
            const value = this.parseValue(object[key]);
            return cfn_fn_1.Fn.conditionEquals(value[0], value[1]);
          }
          case "Fn::And": {
            const value = this.parseValue(object[key]);
            return cfn_fn_1.Fn.conditionAnd(...value);
          }
          case "Fn::Not": {
            const value = this.parseValue(object[key]);
            return cfn_fn_1.Fn.conditionNot(value[0]);
          }
          case "Fn::Or": {
            const value = this.parseValue(object[key]);
            return cfn_fn_1.Fn.conditionOr(...value);
          }
          case "Fn::Sub": {
            const value = this.parseValue(object[key]);
            let fnSubString;
            let map;
            if (typeof value === "string") {
              fnSubString = value;
              map = void 0;
            } else {
              fnSubString = value[0];
              map = value[1];
            }
            return this.parseFnSubString(fnSubString, map);
          }
          case "Condition": {
            const condition = this.finder.findCondition(object[key]);
            if (!condition) {
              throw new Error(`Referenced Condition with name '${object[key]}' was not found in the template`);
            }
            return { Condition: condition.logicalId };
          }
          default:
            if (this.options.context === CfnParsingContext.RULES) {
              return this.handleRulesIntrinsic(key, object);
            } else {
              throw new Error(`Unsupported CloudFormation function '${key}'`);
            }
        }
      }
      looksLikeCfnIntrinsic(object) {
        const objectKeys = Object.keys(object);
        if (objectKeys.length !== 1) {
          return void 0;
        }
        const key = objectKeys[0];
        return key === "Ref" || key.startsWith("Fn::") || this.options.context === CfnParsingContext.CONDITIONS && key === "Condition" ? key : void 0;
      }
      parseFnSubString(templateString, expressionMap) {
        const map = expressionMap !== null && expressionMap !== void 0 ? expressionMap : {};
        const self = this;
        return cfn_fn_1.Fn.sub(go(templateString), Object.keys(map).length === 0 ? expressionMap : map);
        function go(value) {
          const leftBrace = value.indexOf("${");
          if (leftBrace === -1) {
            return value;
          }
          const rightBrace = value.indexOf("}", leftBrace);
          if (rightBrace === -1) {
            return value;
          }
          const leftHalf = value.substring(0, leftBrace);
          const rightHalf = value.substring(rightBrace + 1);
          const refTarget = value.substring(leftBrace + 2, rightBrace).trim();
          if (refTarget[0] === "!") {
            return value.substring(0, rightBrace + 1) + go(rightHalf);
          }
          if (refTarget in map) {
            return leftHalf + "${" + refTarget + "}" + go(rightHalf);
          }
          const specialRef = self.specialCaseSubRefs(refTarget);
          if (specialRef !== void 0) {
            if (token_1.Token.isUnresolved(specialRef)) {
              map[refTarget] = specialRef;
              return leftHalf + "${" + refTarget + "}" + go(rightHalf);
            } else {
              return leftHalf + specialRef + go(rightHalf);
            }
          }
          const dotIndex = refTarget.indexOf(".");
          const isRef = dotIndex === -1;
          if (isRef) {
            const refElement = self.finder.findRefTarget(refTarget);
            if (!refElement) {
              throw new Error(`Element referenced in Fn::Sub expression with logical ID: '${refTarget}' was not found in the template`);
            }
            return leftHalf + cfn_reference_1.CfnReference.for(refElement, "Ref", cfn_reference_1.ReferenceRendering.FN_SUB).toString() + go(rightHalf);
          } else {
            const targetId = refTarget.substring(0, dotIndex);
            const refResource = self.finder.findResource(targetId);
            if (!refResource) {
              throw new Error(`Resource referenced in Fn::Sub expression with logical ID: '${targetId}' was not found in the template`);
            }
            const attribute = refTarget.substring(dotIndex + 1);
            return leftHalf + cfn_reference_1.CfnReference.for(refResource, attribute, cfn_reference_1.ReferenceRendering.FN_SUB).toString() + go(rightHalf);
          }
        }
      }
      handleRulesIntrinsic(key, object) {
        switch (key) {
          case "Fn::ValueOf": {
            const value = this.parseValue(object[key]);
            const parameterName = value[0];
            if (parameterName in this.parameters) {
              throw new Error(`Cannot substitute parameter '${parameterName}' used in Fn::ValueOf expression with attribute '${value[1]}'`);
            }
            const param = this.finder.findRefTarget(parameterName);
            if (!param) {
              throw new Error(`Rule references parameter '${parameterName}' which was not found in the template`);
            }
            return lazy_1.Lazy.any({ produce: () => ({ "Fn::ValueOf": [param.logicalId, value[1]] }) });
          }
          default:
            return void 0;
        }
      }
      specialCaseRefs(value) {
        if (value in this.parameters) {
          return this.parameters[value];
        }
        switch (value) {
          case "AWS::AccountId":
            return cfn_pseudo_1.Aws.ACCOUNT_ID;
          case "AWS::Region":
            return cfn_pseudo_1.Aws.REGION;
          case "AWS::Partition":
            return cfn_pseudo_1.Aws.PARTITION;
          case "AWS::URLSuffix":
            return cfn_pseudo_1.Aws.URL_SUFFIX;
          case "AWS::NotificationARNs":
            return cfn_pseudo_1.Aws.NOTIFICATION_ARNS;
          case "AWS::StackId":
            return cfn_pseudo_1.Aws.STACK_ID;
          case "AWS::StackName":
            return cfn_pseudo_1.Aws.STACK_NAME;
          case "AWS::NoValue":
            return cfn_pseudo_1.Aws.NO_VALUE;
          default:
            return void 0;
        }
      }
      specialCaseSubRefs(value) {
        if (value in this.parameters) {
          return this.parameters[value];
        }
        return value.indexOf("::") === -1 ? void 0 : "${" + value + "}";
      }
      get parameters() {
        return this.options.parameters || {};
      }
    };
    exports2.CfnParser = CfnParser;
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/cloudformation.generated.js
var require_cloudformation_generated = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/cloudformation.generated.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    var _d;
    var _e;
    var _f;
    var _g;
    var _h;
    var _j;
    var _k;
    var _l;
    var _m;
    var _o;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnWaitConditionHandle = exports2.CfnWaitCondition = exports2.CfnTypeActivation = exports2.CfnStackSet = exports2.CfnStack = exports2.CfnResourceVersion = exports2.CfnResourceDefaultVersion = exports2.CfnPublisher = exports2.CfnPublicTypeVersion = exports2.CfnModuleVersion = exports2.CfnModuleDefaultVersion = exports2.CfnMacro = exports2.CfnCustomResource = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var cfn_parse = require_cfn_parse();
    function CfnCustomResourcePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("serviceToken", cdk.requiredValidator)(properties.serviceToken));
      errors.collect(cdk.propertyValidator("serviceToken", cdk.validateString)(properties.serviceToken));
      return errors.wrap('supplied properties not correct for "CfnCustomResourceProps"');
    }
    function cfnCustomResourcePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnCustomResourcePropsValidator(properties).assertSuccess();
      return {
        ServiceToken: cdk.stringToCloudFormation(properties.serviceToken)
      };
    }
    function CfnCustomResourcePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("serviceToken", "ServiceToken", cfn_parse.FromCloudFormation.getString(properties.ServiceToken));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnCustomResource = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnCustomResource.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "serviceToken", this);
        this.serviceToken = props.serviceToken;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnCustomResourcePropsFromCloudFormation(resourceProperties);
        const ret = new CfnCustomResource(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnCustomResource.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          serviceToken: this.serviceToken
        };
      }
      renderProperties(props) {
        return cfnCustomResourcePropsToCloudFormation(props);
      }
    };
    exports2.CfnCustomResource = CfnCustomResource;
    _a = JSII_RTTI_SYMBOL_1;
    CfnCustomResource[_a] = { fqn: "@aws-cdk/core.CfnCustomResource", version: "1.132.0" };
    CfnCustomResource.CFN_RESOURCE_TYPE_NAME = "AWS::CloudFormation::CustomResource";
    function CfnMacroPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("functionName", cdk.requiredValidator)(properties.functionName));
      errors.collect(cdk.propertyValidator("functionName", cdk.validateString)(properties.functionName));
      errors.collect(cdk.propertyValidator("logGroupName", cdk.validateString)(properties.logGroupName));
      errors.collect(cdk.propertyValidator("logRoleArn", cdk.validateString)(properties.logRoleArn));
      errors.collect(cdk.propertyValidator("name", cdk.requiredValidator)(properties.name));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      return errors.wrap('supplied properties not correct for "CfnMacroProps"');
    }
    function cfnMacroPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnMacroPropsValidator(properties).assertSuccess();
      return {
        FunctionName: cdk.stringToCloudFormation(properties.functionName),
        Name: cdk.stringToCloudFormation(properties.name),
        Description: cdk.stringToCloudFormation(properties.description),
        LogGroupName: cdk.stringToCloudFormation(properties.logGroupName),
        LogRoleARN: cdk.stringToCloudFormation(properties.logRoleArn)
      };
    }
    function CfnMacroPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("functionName", "FunctionName", cfn_parse.FromCloudFormation.getString(properties.FunctionName));
      ret.addPropertyResult("name", "Name", cfn_parse.FromCloudFormation.getString(properties.Name));
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("logGroupName", "LogGroupName", properties.LogGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.LogGroupName) : void 0);
      ret.addPropertyResult("logRoleArn", "LogRoleARN", properties.LogRoleARN != null ? cfn_parse.FromCloudFormation.getString(properties.LogRoleARN) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnMacro = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnMacro.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "functionName", this);
        cdk.requireProperty(props, "name", this);
        this.functionName = props.functionName;
        this.name = props.name;
        this.description = props.description;
        this.logGroupName = props.logGroupName;
        this.logRoleArn = props.logRoleArn;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnMacroPropsFromCloudFormation(resourceProperties);
        const ret = new CfnMacro(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnMacro.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          functionName: this.functionName,
          name: this.name,
          description: this.description,
          logGroupName: this.logGroupName,
          logRoleArn: this.logRoleArn
        };
      }
      renderProperties(props) {
        return cfnMacroPropsToCloudFormation(props);
      }
    };
    exports2.CfnMacro = CfnMacro;
    _b = JSII_RTTI_SYMBOL_1;
    CfnMacro[_b] = { fqn: "@aws-cdk/core.CfnMacro", version: "1.132.0" };
    CfnMacro.CFN_RESOURCE_TYPE_NAME = "AWS::CloudFormation::Macro";
    function CfnModuleDefaultVersionPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("arn", cdk.validateString)(properties.arn));
      errors.collect(cdk.propertyValidator("moduleName", cdk.validateString)(properties.moduleName));
      errors.collect(cdk.propertyValidator("versionId", cdk.validateString)(properties.versionId));
      return errors.wrap('supplied properties not correct for "CfnModuleDefaultVersionProps"');
    }
    function cfnModuleDefaultVersionPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnModuleDefaultVersionPropsValidator(properties).assertSuccess();
      return {
        Arn: cdk.stringToCloudFormation(properties.arn),
        ModuleName: cdk.stringToCloudFormation(properties.moduleName),
        VersionId: cdk.stringToCloudFormation(properties.versionId)
      };
    }
    function CfnModuleDefaultVersionPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("arn", "Arn", properties.Arn != null ? cfn_parse.FromCloudFormation.getString(properties.Arn) : void 0);
      ret.addPropertyResult("moduleName", "ModuleName", properties.ModuleName != null ? cfn_parse.FromCloudFormation.getString(properties.ModuleName) : void 0);
      ret.addPropertyResult("versionId", "VersionId", properties.VersionId != null ? cfn_parse.FromCloudFormation.getString(properties.VersionId) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnModuleDefaultVersion = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnModuleDefaultVersion.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.arn = props.arn;
        this.moduleName = props.moduleName;
        this.versionId = props.versionId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnModuleDefaultVersionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnModuleDefaultVersion(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnModuleDefaultVersion.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          arn: this.arn,
          moduleName: this.moduleName,
          versionId: this.versionId
        };
      }
      renderProperties(props) {
        return cfnModuleDefaultVersionPropsToCloudFormation(props);
      }
    };
    exports2.CfnModuleDefaultVersion = CfnModuleDefaultVersion;
    _c = JSII_RTTI_SYMBOL_1;
    CfnModuleDefaultVersion[_c] = { fqn: "@aws-cdk/core.CfnModuleDefaultVersion", version: "1.132.0" };
    CfnModuleDefaultVersion.CFN_RESOURCE_TYPE_NAME = "AWS::CloudFormation::ModuleDefaultVersion";
    function CfnModuleVersionPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("moduleName", cdk.requiredValidator)(properties.moduleName));
      errors.collect(cdk.propertyValidator("moduleName", cdk.validateString)(properties.moduleName));
      errors.collect(cdk.propertyValidator("modulePackage", cdk.requiredValidator)(properties.modulePackage));
      errors.collect(cdk.propertyValidator("modulePackage", cdk.validateString)(properties.modulePackage));
      return errors.wrap('supplied properties not correct for "CfnModuleVersionProps"');
    }
    function cfnModuleVersionPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnModuleVersionPropsValidator(properties).assertSuccess();
      return {
        ModuleName: cdk.stringToCloudFormation(properties.moduleName),
        ModulePackage: cdk.stringToCloudFormation(properties.modulePackage)
      };
    }
    function CfnModuleVersionPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("moduleName", "ModuleName", cfn_parse.FromCloudFormation.getString(properties.ModuleName));
      ret.addPropertyResult("modulePackage", "ModulePackage", cfn_parse.FromCloudFormation.getString(properties.ModulePackage));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnModuleVersion = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnModuleVersion.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "moduleName", this);
        cdk.requireProperty(props, "modulePackage", this);
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.attrDescription = cdk.Token.asString(this.getAtt("Description"));
        this.attrDocumentationUrl = cdk.Token.asString(this.getAtt("DocumentationUrl"));
        this.attrIsDefaultVersion = this.getAtt("IsDefaultVersion");
        this.attrSchema = cdk.Token.asString(this.getAtt("Schema"));
        this.attrTimeCreated = cdk.Token.asString(this.getAtt("TimeCreated"));
        this.attrVersionId = cdk.Token.asString(this.getAtt("VersionId"));
        this.attrVisibility = cdk.Token.asString(this.getAtt("Visibility"));
        this.moduleName = props.moduleName;
        this.modulePackage = props.modulePackage;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnModuleVersionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnModuleVersion(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnModuleVersion.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          moduleName: this.moduleName,
          modulePackage: this.modulePackage
        };
      }
      renderProperties(props) {
        return cfnModuleVersionPropsToCloudFormation(props);
      }
    };
    exports2.CfnModuleVersion = CfnModuleVersion;
    _d = JSII_RTTI_SYMBOL_1;
    CfnModuleVersion[_d] = { fqn: "@aws-cdk/core.CfnModuleVersion", version: "1.132.0" };
    CfnModuleVersion.CFN_RESOURCE_TYPE_NAME = "AWS::CloudFormation::ModuleVersion";
    function CfnPublicTypeVersionPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("arn", cdk.validateString)(properties.arn));
      errors.collect(cdk.propertyValidator("logDeliveryBucket", cdk.validateString)(properties.logDeliveryBucket));
      errors.collect(cdk.propertyValidator("publicVersionNumber", cdk.validateString)(properties.publicVersionNumber));
      errors.collect(cdk.propertyValidator("type", cdk.validateString)(properties.type));
      errors.collect(cdk.propertyValidator("typeName", cdk.validateString)(properties.typeName));
      return errors.wrap('supplied properties not correct for "CfnPublicTypeVersionProps"');
    }
    function cfnPublicTypeVersionPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnPublicTypeVersionPropsValidator(properties).assertSuccess();
      return {
        Arn: cdk.stringToCloudFormation(properties.arn),
        LogDeliveryBucket: cdk.stringToCloudFormation(properties.logDeliveryBucket),
        PublicVersionNumber: cdk.stringToCloudFormation(properties.publicVersionNumber),
        Type: cdk.stringToCloudFormation(properties.type),
        TypeName: cdk.stringToCloudFormation(properties.typeName)
      };
    }
    function CfnPublicTypeVersionPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("arn", "Arn", properties.Arn != null ? cfn_parse.FromCloudFormation.getString(properties.Arn) : void 0);
      ret.addPropertyResult("logDeliveryBucket", "LogDeliveryBucket", properties.LogDeliveryBucket != null ? cfn_parse.FromCloudFormation.getString(properties.LogDeliveryBucket) : void 0);
      ret.addPropertyResult("publicVersionNumber", "PublicVersionNumber", properties.PublicVersionNumber != null ? cfn_parse.FromCloudFormation.getString(properties.PublicVersionNumber) : void 0);
      ret.addPropertyResult("type", "Type", properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : void 0);
      ret.addPropertyResult("typeName", "TypeName", properties.TypeName != null ? cfn_parse.FromCloudFormation.getString(properties.TypeName) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnPublicTypeVersion = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnPublicTypeVersion.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.attrPublicTypeArn = cdk.Token.asString(this.getAtt("PublicTypeArn"));
        this.attrPublisherId = cdk.Token.asString(this.getAtt("PublisherId"));
        this.attrTypeVersionArn = cdk.Token.asString(this.getAtt("TypeVersionArn"));
        this.arn = props.arn;
        this.logDeliveryBucket = props.logDeliveryBucket;
        this.publicVersionNumber = props.publicVersionNumber;
        this.type = props.type;
        this.typeName = props.typeName;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnPublicTypeVersionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnPublicTypeVersion(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnPublicTypeVersion.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          arn: this.arn,
          logDeliveryBucket: this.logDeliveryBucket,
          publicVersionNumber: this.publicVersionNumber,
          type: this.type,
          typeName: this.typeName
        };
      }
      renderProperties(props) {
        return cfnPublicTypeVersionPropsToCloudFormation(props);
      }
    };
    exports2.CfnPublicTypeVersion = CfnPublicTypeVersion;
    _e = JSII_RTTI_SYMBOL_1;
    CfnPublicTypeVersion[_e] = { fqn: "@aws-cdk/core.CfnPublicTypeVersion", version: "1.132.0" };
    CfnPublicTypeVersion.CFN_RESOURCE_TYPE_NAME = "AWS::CloudFormation::PublicTypeVersion";
    function CfnPublisherPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("acceptTermsAndConditions", cdk.requiredValidator)(properties.acceptTermsAndConditions));
      errors.collect(cdk.propertyValidator("acceptTermsAndConditions", cdk.validateBoolean)(properties.acceptTermsAndConditions));
      errors.collect(cdk.propertyValidator("connectionArn", cdk.validateString)(properties.connectionArn));
      return errors.wrap('supplied properties not correct for "CfnPublisherProps"');
    }
    function cfnPublisherPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnPublisherPropsValidator(properties).assertSuccess();
      return {
        AcceptTermsAndConditions: cdk.booleanToCloudFormation(properties.acceptTermsAndConditions),
        ConnectionArn: cdk.stringToCloudFormation(properties.connectionArn)
      };
    }
    function CfnPublisherPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("acceptTermsAndConditions", "AcceptTermsAndConditions", cfn_parse.FromCloudFormation.getBoolean(properties.AcceptTermsAndConditions));
      ret.addPropertyResult("connectionArn", "ConnectionArn", properties.ConnectionArn != null ? cfn_parse.FromCloudFormation.getString(properties.ConnectionArn) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnPublisher = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnPublisher.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "acceptTermsAndConditions", this);
        this.attrIdentityProvider = cdk.Token.asString(this.getAtt("IdentityProvider"));
        this.attrPublisherId = cdk.Token.asString(this.getAtt("PublisherId"));
        this.attrPublisherProfile = cdk.Token.asString(this.getAtt("PublisherProfile"));
        this.attrPublisherStatus = cdk.Token.asString(this.getAtt("PublisherStatus"));
        this.acceptTermsAndConditions = props.acceptTermsAndConditions;
        this.connectionArn = props.connectionArn;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnPublisherPropsFromCloudFormation(resourceProperties);
        const ret = new CfnPublisher(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnPublisher.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          acceptTermsAndConditions: this.acceptTermsAndConditions,
          connectionArn: this.connectionArn
        };
      }
      renderProperties(props) {
        return cfnPublisherPropsToCloudFormation(props);
      }
    };
    exports2.CfnPublisher = CfnPublisher;
    _f = JSII_RTTI_SYMBOL_1;
    CfnPublisher[_f] = { fqn: "@aws-cdk/core.CfnPublisher", version: "1.132.0" };
    CfnPublisher.CFN_RESOURCE_TYPE_NAME = "AWS::CloudFormation::Publisher";
    function CfnResourceDefaultVersionPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("typeName", cdk.validateString)(properties.typeName));
      errors.collect(cdk.propertyValidator("typeVersionArn", cdk.validateString)(properties.typeVersionArn));
      errors.collect(cdk.propertyValidator("versionId", cdk.validateString)(properties.versionId));
      return errors.wrap('supplied properties not correct for "CfnResourceDefaultVersionProps"');
    }
    function cfnResourceDefaultVersionPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnResourceDefaultVersionPropsValidator(properties).assertSuccess();
      return {
        TypeName: cdk.stringToCloudFormation(properties.typeName),
        TypeVersionArn: cdk.stringToCloudFormation(properties.typeVersionArn),
        VersionId: cdk.stringToCloudFormation(properties.versionId)
      };
    }
    function CfnResourceDefaultVersionPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("typeName", "TypeName", properties.TypeName != null ? cfn_parse.FromCloudFormation.getString(properties.TypeName) : void 0);
      ret.addPropertyResult("typeVersionArn", "TypeVersionArn", properties.TypeVersionArn != null ? cfn_parse.FromCloudFormation.getString(properties.TypeVersionArn) : void 0);
      ret.addPropertyResult("versionId", "VersionId", properties.VersionId != null ? cfn_parse.FromCloudFormation.getString(properties.VersionId) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnResourceDefaultVersion = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnResourceDefaultVersion.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.typeName = props.typeName;
        this.typeVersionArn = props.typeVersionArn;
        this.versionId = props.versionId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnResourceDefaultVersionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnResourceDefaultVersion(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnResourceDefaultVersion.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          typeName: this.typeName,
          typeVersionArn: this.typeVersionArn,
          versionId: this.versionId
        };
      }
      renderProperties(props) {
        return cfnResourceDefaultVersionPropsToCloudFormation(props);
      }
    };
    exports2.CfnResourceDefaultVersion = CfnResourceDefaultVersion;
    _g = JSII_RTTI_SYMBOL_1;
    CfnResourceDefaultVersion[_g] = { fqn: "@aws-cdk/core.CfnResourceDefaultVersion", version: "1.132.0" };
    CfnResourceDefaultVersion.CFN_RESOURCE_TYPE_NAME = "AWS::CloudFormation::ResourceDefaultVersion";
    function CfnResourceVersionPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("executionRoleArn", cdk.validateString)(properties.executionRoleArn));
      errors.collect(cdk.propertyValidator("loggingConfig", CfnResourceVersion_LoggingConfigPropertyValidator)(properties.loggingConfig));
      errors.collect(cdk.propertyValidator("schemaHandlerPackage", cdk.requiredValidator)(properties.schemaHandlerPackage));
      errors.collect(cdk.propertyValidator("schemaHandlerPackage", cdk.validateString)(properties.schemaHandlerPackage));
      errors.collect(cdk.propertyValidator("typeName", cdk.requiredValidator)(properties.typeName));
      errors.collect(cdk.propertyValidator("typeName", cdk.validateString)(properties.typeName));
      return errors.wrap('supplied properties not correct for "CfnResourceVersionProps"');
    }
    function cfnResourceVersionPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnResourceVersionPropsValidator(properties).assertSuccess();
      return {
        SchemaHandlerPackage: cdk.stringToCloudFormation(properties.schemaHandlerPackage),
        TypeName: cdk.stringToCloudFormation(properties.typeName),
        ExecutionRoleArn: cdk.stringToCloudFormation(properties.executionRoleArn),
        LoggingConfig: cfnResourceVersionLoggingConfigPropertyToCloudFormation(properties.loggingConfig)
      };
    }
    function CfnResourceVersionPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("schemaHandlerPackage", "SchemaHandlerPackage", cfn_parse.FromCloudFormation.getString(properties.SchemaHandlerPackage));
      ret.addPropertyResult("typeName", "TypeName", cfn_parse.FromCloudFormation.getString(properties.TypeName));
      ret.addPropertyResult("executionRoleArn", "ExecutionRoleArn", properties.ExecutionRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.ExecutionRoleArn) : void 0);
      ret.addPropertyResult("loggingConfig", "LoggingConfig", properties.LoggingConfig != null ? CfnResourceVersionLoggingConfigPropertyFromCloudFormation(properties.LoggingConfig) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnResourceVersion = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnResourceVersion.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "schemaHandlerPackage", this);
        cdk.requireProperty(props, "typeName", this);
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.attrIsDefaultVersion = this.getAtt("IsDefaultVersion");
        this.attrProvisioningType = cdk.Token.asString(this.getAtt("ProvisioningType"));
        this.attrTypeArn = cdk.Token.asString(this.getAtt("TypeArn"));
        this.attrVersionId = cdk.Token.asString(this.getAtt("VersionId"));
        this.attrVisibility = cdk.Token.asString(this.getAtt("Visibility"));
        this.schemaHandlerPackage = props.schemaHandlerPackage;
        this.typeName = props.typeName;
        this.executionRoleArn = props.executionRoleArn;
        this.loggingConfig = props.loggingConfig;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnResourceVersionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnResourceVersion(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnResourceVersion.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          schemaHandlerPackage: this.schemaHandlerPackage,
          typeName: this.typeName,
          executionRoleArn: this.executionRoleArn,
          loggingConfig: this.loggingConfig
        };
      }
      renderProperties(props) {
        return cfnResourceVersionPropsToCloudFormation(props);
      }
    };
    exports2.CfnResourceVersion = CfnResourceVersion;
    _h = JSII_RTTI_SYMBOL_1;
    CfnResourceVersion[_h] = { fqn: "@aws-cdk/core.CfnResourceVersion", version: "1.132.0" };
    CfnResourceVersion.CFN_RESOURCE_TYPE_NAME = "AWS::CloudFormation::ResourceVersion";
    function CfnResourceVersion_LoggingConfigPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("logGroupName", cdk.validateString)(properties.logGroupName));
      errors.collect(cdk.propertyValidator("logRoleArn", cdk.validateString)(properties.logRoleArn));
      return errors.wrap('supplied properties not correct for "LoggingConfigProperty"');
    }
    function cfnResourceVersionLoggingConfigPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnResourceVersion_LoggingConfigPropertyValidator(properties).assertSuccess();
      return {
        LogGroupName: cdk.stringToCloudFormation(properties.logGroupName),
        LogRoleArn: cdk.stringToCloudFormation(properties.logRoleArn)
      };
    }
    function CfnResourceVersionLoggingConfigPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("logGroupName", "LogGroupName", properties.LogGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.LogGroupName) : void 0);
      ret.addPropertyResult("logRoleArn", "LogRoleArn", properties.LogRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.LogRoleArn) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnStackPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("notificationArns", cdk.listValidator(cdk.validateString))(properties.notificationArns));
      errors.collect(cdk.propertyValidator("parameters", cdk.hashValidator(cdk.validateString))(properties.parameters));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("templateUrl", cdk.requiredValidator)(properties.templateUrl));
      errors.collect(cdk.propertyValidator("templateUrl", cdk.validateString)(properties.templateUrl));
      errors.collect(cdk.propertyValidator("timeoutInMinutes", cdk.validateNumber)(properties.timeoutInMinutes));
      return errors.wrap('supplied properties not correct for "CfnStackProps"');
    }
    function cfnStackPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnStackPropsValidator(properties).assertSuccess();
      return {
        TemplateURL: cdk.stringToCloudFormation(properties.templateUrl),
        NotificationARNs: cdk.listMapper(cdk.stringToCloudFormation)(properties.notificationArns),
        Parameters: cdk.hashMapper(cdk.stringToCloudFormation)(properties.parameters),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
        TimeoutInMinutes: cdk.numberToCloudFormation(properties.timeoutInMinutes)
      };
    }
    function CfnStackPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("templateUrl", "TemplateURL", cfn_parse.FromCloudFormation.getString(properties.TemplateURL));
      ret.addPropertyResult("notificationArns", "NotificationARNs", properties.NotificationARNs != null ? cfn_parse.FromCloudFormation.getStringArray(properties.NotificationARNs) : void 0);
      ret.addPropertyResult("parameters", "Parameters", properties.Parameters != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Parameters) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addPropertyResult("timeoutInMinutes", "TimeoutInMinutes", properties.TimeoutInMinutes != null ? cfn_parse.FromCloudFormation.getNumber(properties.TimeoutInMinutes) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnStack = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnStack.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "templateUrl", this);
        this.templateUrl = props.templateUrl;
        this.notificationArns = props.notificationArns;
        this.parameters = props.parameters;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::CloudFormation::Stack", props.tags, { tagPropertyName: "tags" });
        this.timeoutInMinutes = props.timeoutInMinutes;
        if (this.node.scope && cdk.Resource.isResource(this.node.scope)) {
          this.node.addValidation({ validate: () => this.cfnOptions.deletionPolicy === void 0 ? ["'AWS::CloudFormation::Stack' is a stateful resource type, and you must specify a Removal Policy for it. Call 'resource.applyRemovalPolicy()'."] : [] });
        }
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnStackPropsFromCloudFormation(resourceProperties);
        const ret = new CfnStack(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnStack.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          templateUrl: this.templateUrl,
          notificationArns: this.notificationArns,
          parameters: this.parameters,
          tags: this.tags.renderTags(),
          timeoutInMinutes: this.timeoutInMinutes
        };
      }
      renderProperties(props) {
        return cfnStackPropsToCloudFormation(props);
      }
    };
    exports2.CfnStack = CfnStack;
    _j = JSII_RTTI_SYMBOL_1;
    CfnStack[_j] = { fqn: "@aws-cdk/core.CfnStack", version: "1.132.0" };
    CfnStack.CFN_RESOURCE_TYPE_NAME = "AWS::CloudFormation::Stack";
    function CfnStackSetPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("administrationRoleArn", cdk.validateString)(properties.administrationRoleArn));
      errors.collect(cdk.propertyValidator("autoDeployment", CfnStackSet_AutoDeploymentPropertyValidator)(properties.autoDeployment));
      errors.collect(cdk.propertyValidator("callAs", cdk.validateString)(properties.callAs));
      errors.collect(cdk.propertyValidator("capabilities", cdk.listValidator(cdk.validateString))(properties.capabilities));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("executionRoleName", cdk.validateString)(properties.executionRoleName));
      errors.collect(cdk.propertyValidator("operationPreferences", CfnStackSet_OperationPreferencesPropertyValidator)(properties.operationPreferences));
      errors.collect(cdk.propertyValidator("parameters", cdk.listValidator(CfnStackSet_ParameterPropertyValidator))(properties.parameters));
      errors.collect(cdk.propertyValidator("permissionModel", cdk.requiredValidator)(properties.permissionModel));
      errors.collect(cdk.propertyValidator("permissionModel", cdk.validateString)(properties.permissionModel));
      errors.collect(cdk.propertyValidator("stackInstancesGroup", cdk.listValidator(CfnStackSet_StackInstancesPropertyValidator))(properties.stackInstancesGroup));
      errors.collect(cdk.propertyValidator("stackSetName", cdk.requiredValidator)(properties.stackSetName));
      errors.collect(cdk.propertyValidator("stackSetName", cdk.validateString)(properties.stackSetName));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("templateBody", cdk.validateString)(properties.templateBody));
      errors.collect(cdk.propertyValidator("templateUrl", cdk.validateString)(properties.templateUrl));
      return errors.wrap('supplied properties not correct for "CfnStackSetProps"');
    }
    function cfnStackSetPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnStackSetPropsValidator(properties).assertSuccess();
      return {
        PermissionModel: cdk.stringToCloudFormation(properties.permissionModel),
        StackSetName: cdk.stringToCloudFormation(properties.stackSetName),
        AdministrationRoleARN: cdk.stringToCloudFormation(properties.administrationRoleArn),
        AutoDeployment: cfnStackSetAutoDeploymentPropertyToCloudFormation(properties.autoDeployment),
        CallAs: cdk.stringToCloudFormation(properties.callAs),
        Capabilities: cdk.listMapper(cdk.stringToCloudFormation)(properties.capabilities),
        Description: cdk.stringToCloudFormation(properties.description),
        ExecutionRoleName: cdk.stringToCloudFormation(properties.executionRoleName),
        OperationPreferences: cfnStackSetOperationPreferencesPropertyToCloudFormation(properties.operationPreferences),
        Parameters: cdk.listMapper(cfnStackSetParameterPropertyToCloudFormation)(properties.parameters),
        StackInstancesGroup: cdk.listMapper(cfnStackSetStackInstancesPropertyToCloudFormation)(properties.stackInstancesGroup),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
        TemplateBody: cdk.stringToCloudFormation(properties.templateBody),
        TemplateURL: cdk.stringToCloudFormation(properties.templateUrl)
      };
    }
    function CfnStackSetPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("permissionModel", "PermissionModel", cfn_parse.FromCloudFormation.getString(properties.PermissionModel));
      ret.addPropertyResult("stackSetName", "StackSetName", cfn_parse.FromCloudFormation.getString(properties.StackSetName));
      ret.addPropertyResult("administrationRoleArn", "AdministrationRoleARN", properties.AdministrationRoleARN != null ? cfn_parse.FromCloudFormation.getString(properties.AdministrationRoleARN) : void 0);
      ret.addPropertyResult("autoDeployment", "AutoDeployment", properties.AutoDeployment != null ? CfnStackSetAutoDeploymentPropertyFromCloudFormation(properties.AutoDeployment) : void 0);
      ret.addPropertyResult("callAs", "CallAs", properties.CallAs != null ? cfn_parse.FromCloudFormation.getString(properties.CallAs) : void 0);
      ret.addPropertyResult("capabilities", "Capabilities", properties.Capabilities != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Capabilities) : void 0);
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("executionRoleName", "ExecutionRoleName", properties.ExecutionRoleName != null ? cfn_parse.FromCloudFormation.getString(properties.ExecutionRoleName) : void 0);
      ret.addPropertyResult("operationPreferences", "OperationPreferences", properties.OperationPreferences != null ? CfnStackSetOperationPreferencesPropertyFromCloudFormation(properties.OperationPreferences) : void 0);
      ret.addPropertyResult("parameters", "Parameters", properties.Parameters != null ? cfn_parse.FromCloudFormation.getArray(CfnStackSetParameterPropertyFromCloudFormation)(properties.Parameters) : void 0);
      ret.addPropertyResult("stackInstancesGroup", "StackInstancesGroup", properties.StackInstancesGroup != null ? cfn_parse.FromCloudFormation.getArray(CfnStackSetStackInstancesPropertyFromCloudFormation)(properties.StackInstancesGroup) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addPropertyResult("templateBody", "TemplateBody", properties.TemplateBody != null ? cfn_parse.FromCloudFormation.getString(properties.TemplateBody) : void 0);
      ret.addPropertyResult("templateUrl", "TemplateURL", properties.TemplateURL != null ? cfn_parse.FromCloudFormation.getString(properties.TemplateURL) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnStackSet = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnStackSet.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "permissionModel", this);
        cdk.requireProperty(props, "stackSetName", this);
        this.attrStackSetId = cdk.Token.asString(this.getAtt("StackSetId"));
        this.permissionModel = props.permissionModel;
        this.stackSetName = props.stackSetName;
        this.administrationRoleArn = props.administrationRoleArn;
        this.autoDeployment = props.autoDeployment;
        this.callAs = props.callAs;
        this.capabilities = props.capabilities;
        this.description = props.description;
        this.executionRoleName = props.executionRoleName;
        this.operationPreferences = props.operationPreferences;
        this.parameters = props.parameters;
        this.stackInstancesGroup = props.stackInstancesGroup;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::CloudFormation::StackSet", props.tags, { tagPropertyName: "tags" });
        this.templateBody = props.templateBody;
        this.templateUrl = props.templateUrl;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnStackSetPropsFromCloudFormation(resourceProperties);
        const ret = new CfnStackSet(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnStackSet.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          permissionModel: this.permissionModel,
          stackSetName: this.stackSetName,
          administrationRoleArn: this.administrationRoleArn,
          autoDeployment: this.autoDeployment,
          callAs: this.callAs,
          capabilities: this.capabilities,
          description: this.description,
          executionRoleName: this.executionRoleName,
          operationPreferences: this.operationPreferences,
          parameters: this.parameters,
          stackInstancesGroup: this.stackInstancesGroup,
          tags: this.tags.renderTags(),
          templateBody: this.templateBody,
          templateUrl: this.templateUrl
        };
      }
      renderProperties(props) {
        return cfnStackSetPropsToCloudFormation(props);
      }
    };
    exports2.CfnStackSet = CfnStackSet;
    _k = JSII_RTTI_SYMBOL_1;
    CfnStackSet[_k] = { fqn: "@aws-cdk/core.CfnStackSet", version: "1.132.0" };
    CfnStackSet.CFN_RESOURCE_TYPE_NAME = "AWS::CloudFormation::StackSet";
    function CfnStackSet_AutoDeploymentPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("enabled", cdk.validateBoolean)(properties.enabled));
      errors.collect(cdk.propertyValidator("retainStacksOnAccountRemoval", cdk.validateBoolean)(properties.retainStacksOnAccountRemoval));
      return errors.wrap('supplied properties not correct for "AutoDeploymentProperty"');
    }
    function cfnStackSetAutoDeploymentPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnStackSet_AutoDeploymentPropertyValidator(properties).assertSuccess();
      return {
        Enabled: cdk.booleanToCloudFormation(properties.enabled),
        RetainStacksOnAccountRemoval: cdk.booleanToCloudFormation(properties.retainStacksOnAccountRemoval)
      };
    }
    function CfnStackSetAutoDeploymentPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("enabled", "Enabled", properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : void 0);
      ret.addPropertyResult("retainStacksOnAccountRemoval", "RetainStacksOnAccountRemoval", properties.RetainStacksOnAccountRemoval != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RetainStacksOnAccountRemoval) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnStackSet_DeploymentTargetsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("accounts", cdk.listValidator(cdk.validateString))(properties.accounts));
      errors.collect(cdk.propertyValidator("organizationalUnitIds", cdk.listValidator(cdk.validateString))(properties.organizationalUnitIds));
      return errors.wrap('supplied properties not correct for "DeploymentTargetsProperty"');
    }
    function cfnStackSetDeploymentTargetsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnStackSet_DeploymentTargetsPropertyValidator(properties).assertSuccess();
      return {
        Accounts: cdk.listMapper(cdk.stringToCloudFormation)(properties.accounts),
        OrganizationalUnitIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.organizationalUnitIds)
      };
    }
    function CfnStackSetDeploymentTargetsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("accounts", "Accounts", properties.Accounts != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Accounts) : void 0);
      ret.addPropertyResult("organizationalUnitIds", "OrganizationalUnitIds", properties.OrganizationalUnitIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.OrganizationalUnitIds) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnStackSet_OperationPreferencesPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("failureToleranceCount", cdk.validateNumber)(properties.failureToleranceCount));
      errors.collect(cdk.propertyValidator("failureTolerancePercentage", cdk.validateNumber)(properties.failureTolerancePercentage));
      errors.collect(cdk.propertyValidator("maxConcurrentCount", cdk.validateNumber)(properties.maxConcurrentCount));
      errors.collect(cdk.propertyValidator("maxConcurrentPercentage", cdk.validateNumber)(properties.maxConcurrentPercentage));
      errors.collect(cdk.propertyValidator("regionConcurrencyType", cdk.validateString)(properties.regionConcurrencyType));
      errors.collect(cdk.propertyValidator("regionOrder", cdk.listValidator(cdk.validateString))(properties.regionOrder));
      return errors.wrap('supplied properties not correct for "OperationPreferencesProperty"');
    }
    function cfnStackSetOperationPreferencesPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnStackSet_OperationPreferencesPropertyValidator(properties).assertSuccess();
      return {
        FailureToleranceCount: cdk.numberToCloudFormation(properties.failureToleranceCount),
        FailureTolerancePercentage: cdk.numberToCloudFormation(properties.failureTolerancePercentage),
        MaxConcurrentCount: cdk.numberToCloudFormation(properties.maxConcurrentCount),
        MaxConcurrentPercentage: cdk.numberToCloudFormation(properties.maxConcurrentPercentage),
        RegionConcurrencyType: cdk.stringToCloudFormation(properties.regionConcurrencyType),
        RegionOrder: cdk.listMapper(cdk.stringToCloudFormation)(properties.regionOrder)
      };
    }
    function CfnStackSetOperationPreferencesPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("failureToleranceCount", "FailureToleranceCount", properties.FailureToleranceCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.FailureToleranceCount) : void 0);
      ret.addPropertyResult("failureTolerancePercentage", "FailureTolerancePercentage", properties.FailureTolerancePercentage != null ? cfn_parse.FromCloudFormation.getNumber(properties.FailureTolerancePercentage) : void 0);
      ret.addPropertyResult("maxConcurrentCount", "MaxConcurrentCount", properties.MaxConcurrentCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxConcurrentCount) : void 0);
      ret.addPropertyResult("maxConcurrentPercentage", "MaxConcurrentPercentage", properties.MaxConcurrentPercentage != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxConcurrentPercentage) : void 0);
      ret.addPropertyResult("regionConcurrencyType", "RegionConcurrencyType", properties.RegionConcurrencyType != null ? cfn_parse.FromCloudFormation.getString(properties.RegionConcurrencyType) : void 0);
      ret.addPropertyResult("regionOrder", "RegionOrder", properties.RegionOrder != null ? cfn_parse.FromCloudFormation.getStringArray(properties.RegionOrder) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnStackSet_ParameterPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("parameterKey", cdk.requiredValidator)(properties.parameterKey));
      errors.collect(cdk.propertyValidator("parameterKey", cdk.validateString)(properties.parameterKey));
      errors.collect(cdk.propertyValidator("parameterValue", cdk.requiredValidator)(properties.parameterValue));
      errors.collect(cdk.propertyValidator("parameterValue", cdk.validateString)(properties.parameterValue));
      return errors.wrap('supplied properties not correct for "ParameterProperty"');
    }
    function cfnStackSetParameterPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnStackSet_ParameterPropertyValidator(properties).assertSuccess();
      return {
        ParameterKey: cdk.stringToCloudFormation(properties.parameterKey),
        ParameterValue: cdk.stringToCloudFormation(properties.parameterValue)
      };
    }
    function CfnStackSetParameterPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("parameterKey", "ParameterKey", cfn_parse.FromCloudFormation.getString(properties.ParameterKey));
      ret.addPropertyResult("parameterValue", "ParameterValue", cfn_parse.FromCloudFormation.getString(properties.ParameterValue));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnStackSet_StackInstancesPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("deploymentTargets", cdk.requiredValidator)(properties.deploymentTargets));
      errors.collect(cdk.propertyValidator("deploymentTargets", CfnStackSet_DeploymentTargetsPropertyValidator)(properties.deploymentTargets));
      errors.collect(cdk.propertyValidator("parameterOverrides", cdk.listValidator(CfnStackSet_ParameterPropertyValidator))(properties.parameterOverrides));
      errors.collect(cdk.propertyValidator("regions", cdk.requiredValidator)(properties.regions));
      errors.collect(cdk.propertyValidator("regions", cdk.listValidator(cdk.validateString))(properties.regions));
      return errors.wrap('supplied properties not correct for "StackInstancesProperty"');
    }
    function cfnStackSetStackInstancesPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnStackSet_StackInstancesPropertyValidator(properties).assertSuccess();
      return {
        DeploymentTargets: cfnStackSetDeploymentTargetsPropertyToCloudFormation(properties.deploymentTargets),
        ParameterOverrides: cdk.listMapper(cfnStackSetParameterPropertyToCloudFormation)(properties.parameterOverrides),
        Regions: cdk.listMapper(cdk.stringToCloudFormation)(properties.regions)
      };
    }
    function CfnStackSetStackInstancesPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("deploymentTargets", "DeploymentTargets", CfnStackSetDeploymentTargetsPropertyFromCloudFormation(properties.DeploymentTargets));
      ret.addPropertyResult("parameterOverrides", "ParameterOverrides", properties.ParameterOverrides != null ? cfn_parse.FromCloudFormation.getArray(CfnStackSetParameterPropertyFromCloudFormation)(properties.ParameterOverrides) : void 0);
      ret.addPropertyResult("regions", "Regions", cfn_parse.FromCloudFormation.getStringArray(properties.Regions));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnTypeActivationPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("autoUpdate", cdk.validateBoolean)(properties.autoUpdate));
      errors.collect(cdk.propertyValidator("executionRoleArn", cdk.validateString)(properties.executionRoleArn));
      errors.collect(cdk.propertyValidator("loggingConfig", CfnTypeActivation_LoggingConfigPropertyValidator)(properties.loggingConfig));
      errors.collect(cdk.propertyValidator("majorVersion", cdk.validateString)(properties.majorVersion));
      errors.collect(cdk.propertyValidator("publicTypeArn", cdk.validateString)(properties.publicTypeArn));
      errors.collect(cdk.propertyValidator("publisherId", cdk.validateString)(properties.publisherId));
      errors.collect(cdk.propertyValidator("type", cdk.validateString)(properties.type));
      errors.collect(cdk.propertyValidator("typeName", cdk.validateString)(properties.typeName));
      errors.collect(cdk.propertyValidator("typeNameAlias", cdk.validateString)(properties.typeNameAlias));
      errors.collect(cdk.propertyValidator("versionBump", cdk.validateString)(properties.versionBump));
      return errors.wrap('supplied properties not correct for "CfnTypeActivationProps"');
    }
    function cfnTypeActivationPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnTypeActivationPropsValidator(properties).assertSuccess();
      return {
        AutoUpdate: cdk.booleanToCloudFormation(properties.autoUpdate),
        ExecutionRoleArn: cdk.stringToCloudFormation(properties.executionRoleArn),
        LoggingConfig: cfnTypeActivationLoggingConfigPropertyToCloudFormation(properties.loggingConfig),
        MajorVersion: cdk.stringToCloudFormation(properties.majorVersion),
        PublicTypeArn: cdk.stringToCloudFormation(properties.publicTypeArn),
        PublisherId: cdk.stringToCloudFormation(properties.publisherId),
        Type: cdk.stringToCloudFormation(properties.type),
        TypeName: cdk.stringToCloudFormation(properties.typeName),
        TypeNameAlias: cdk.stringToCloudFormation(properties.typeNameAlias),
        VersionBump: cdk.stringToCloudFormation(properties.versionBump)
      };
    }
    function CfnTypeActivationPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("autoUpdate", "AutoUpdate", properties.AutoUpdate != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AutoUpdate) : void 0);
      ret.addPropertyResult("executionRoleArn", "ExecutionRoleArn", properties.ExecutionRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.ExecutionRoleArn) : void 0);
      ret.addPropertyResult("loggingConfig", "LoggingConfig", properties.LoggingConfig != null ? CfnTypeActivationLoggingConfigPropertyFromCloudFormation(properties.LoggingConfig) : void 0);
      ret.addPropertyResult("majorVersion", "MajorVersion", properties.MajorVersion != null ? cfn_parse.FromCloudFormation.getString(properties.MajorVersion) : void 0);
      ret.addPropertyResult("publicTypeArn", "PublicTypeArn", properties.PublicTypeArn != null ? cfn_parse.FromCloudFormation.getString(properties.PublicTypeArn) : void 0);
      ret.addPropertyResult("publisherId", "PublisherId", properties.PublisherId != null ? cfn_parse.FromCloudFormation.getString(properties.PublisherId) : void 0);
      ret.addPropertyResult("type", "Type", properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : void 0);
      ret.addPropertyResult("typeName", "TypeName", properties.TypeName != null ? cfn_parse.FromCloudFormation.getString(properties.TypeName) : void 0);
      ret.addPropertyResult("typeNameAlias", "TypeNameAlias", properties.TypeNameAlias != null ? cfn_parse.FromCloudFormation.getString(properties.TypeNameAlias) : void 0);
      ret.addPropertyResult("versionBump", "VersionBump", properties.VersionBump != null ? cfn_parse.FromCloudFormation.getString(properties.VersionBump) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnTypeActivation = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnTypeActivation.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.autoUpdate = props.autoUpdate;
        this.executionRoleArn = props.executionRoleArn;
        this.loggingConfig = props.loggingConfig;
        this.majorVersion = props.majorVersion;
        this.publicTypeArn = props.publicTypeArn;
        this.publisherId = props.publisherId;
        this.type = props.type;
        this.typeName = props.typeName;
        this.typeNameAlias = props.typeNameAlias;
        this.versionBump = props.versionBump;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnTypeActivationPropsFromCloudFormation(resourceProperties);
        const ret = new CfnTypeActivation(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnTypeActivation.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          autoUpdate: this.autoUpdate,
          executionRoleArn: this.executionRoleArn,
          loggingConfig: this.loggingConfig,
          majorVersion: this.majorVersion,
          publicTypeArn: this.publicTypeArn,
          publisherId: this.publisherId,
          type: this.type,
          typeName: this.typeName,
          typeNameAlias: this.typeNameAlias,
          versionBump: this.versionBump
        };
      }
      renderProperties(props) {
        return cfnTypeActivationPropsToCloudFormation(props);
      }
    };
    exports2.CfnTypeActivation = CfnTypeActivation;
    _l = JSII_RTTI_SYMBOL_1;
    CfnTypeActivation[_l] = { fqn: "@aws-cdk/core.CfnTypeActivation", version: "1.132.0" };
    CfnTypeActivation.CFN_RESOURCE_TYPE_NAME = "AWS::CloudFormation::TypeActivation";
    function CfnTypeActivation_LoggingConfigPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("logGroupName", cdk.validateString)(properties.logGroupName));
      errors.collect(cdk.propertyValidator("logRoleArn", cdk.validateString)(properties.logRoleArn));
      return errors.wrap('supplied properties not correct for "LoggingConfigProperty"');
    }
    function cfnTypeActivationLoggingConfigPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnTypeActivation_LoggingConfigPropertyValidator(properties).assertSuccess();
      return {
        LogGroupName: cdk.stringToCloudFormation(properties.logGroupName),
        LogRoleArn: cdk.stringToCloudFormation(properties.logRoleArn)
      };
    }
    function CfnTypeActivationLoggingConfigPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("logGroupName", "LogGroupName", properties.LogGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.LogGroupName) : void 0);
      ret.addPropertyResult("logRoleArn", "LogRoleArn", properties.LogRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.LogRoleArn) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnWaitConditionPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("count", cdk.validateNumber)(properties.count));
      errors.collect(cdk.propertyValidator("handle", cdk.validateString)(properties.handle));
      errors.collect(cdk.propertyValidator("timeout", cdk.validateString)(properties.timeout));
      return errors.wrap('supplied properties not correct for "CfnWaitConditionProps"');
    }
    function cfnWaitConditionPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnWaitConditionPropsValidator(properties).assertSuccess();
      return {
        Count: cdk.numberToCloudFormation(properties.count),
        Handle: cdk.stringToCloudFormation(properties.handle),
        Timeout: cdk.stringToCloudFormation(properties.timeout)
      };
    }
    function CfnWaitConditionPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("count", "Count", properties.Count != null ? cfn_parse.FromCloudFormation.getNumber(properties.Count) : void 0);
      ret.addPropertyResult("handle", "Handle", properties.Handle != null ? cfn_parse.FromCloudFormation.getString(properties.Handle) : void 0);
      ret.addPropertyResult("timeout", "Timeout", properties.Timeout != null ? cfn_parse.FromCloudFormation.getString(properties.Timeout) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnWaitCondition = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnWaitCondition.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.attrData = this.getAtt("Data");
        this.count = props.count;
        this.handle = props.handle;
        this.timeout = props.timeout;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnWaitConditionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnWaitCondition(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnWaitCondition.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          count: this.count,
          handle: this.handle,
          timeout: this.timeout
        };
      }
      renderProperties(props) {
        return cfnWaitConditionPropsToCloudFormation(props);
      }
    };
    exports2.CfnWaitCondition = CfnWaitCondition;
    _m = JSII_RTTI_SYMBOL_1;
    CfnWaitCondition[_m] = { fqn: "@aws-cdk/core.CfnWaitCondition", version: "1.132.0" };
    CfnWaitCondition.CFN_RESOURCE_TYPE_NAME = "AWS::CloudFormation::WaitCondition";
    var CfnWaitConditionHandle = class extends cdk.CfnResource {
      constructor(scope, id) {
        super(scope, id, { type: CfnWaitConditionHandle.CFN_RESOURCE_TYPE_NAME });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const ret = new CfnWaitConditionHandle(scope, id);
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnWaitConditionHandle.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
    };
    exports2.CfnWaitConditionHandle = CfnWaitConditionHandle;
    _o = JSII_RTTI_SYMBOL_1;
    CfnWaitConditionHandle[_o] = { fqn: "@aws-cdk/core.CfnWaitConditionHandle", version: "1.132.0" };
    CfnWaitConditionHandle.CFN_RESOURCE_TYPE_NAME = "AWS::CloudFormation::WaitConditionHandle";
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/nested-stack.js
var require_nested_stack = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/nested-stack.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NestedStack = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var crypto = require("crypto");
    var constructs_1 = require_lib4();
    var assets_1 = require_assets3();
    var cfn_fn_1 = require_cfn_fn();
    var cfn_pseudo_1 = require_cfn_pseudo();
    var cloudformation_generated_1 = require_cloudformation_generated();
    var lazy_1 = require_lazy();
    var names_1 = require_names();
    var removal_policy_1 = require_removal_policy();
    var stack_1 = require_stack();
    var stack_synthesizers_1 = require_stack_synthesizers();
    var token_1 = require_token();
    var construct_compat_1 = require_construct_compat();
    var NESTED_STACK_SYMBOL = Symbol.for("@aws-cdk/core.NestedStack");
    var NestedStack = class extends stack_1.Stack {
      constructor(scope, id, props = {}) {
        var _b;
        const parentStack = findParentStack(scope);
        super(scope, id, {
          env: { account: parentStack.account, region: parentStack.region },
          synthesizer: new stack_synthesizers_1.NestedStackSynthesizer(parentStack.synthesizer)
        });
        this._parentStack = parentStack;
        const parentScope = new construct_compat_1.Construct(scope, id + ".NestedStack");
        Object.defineProperty(this, NESTED_STACK_SYMBOL, { value: true });
        this.templateFile = `${names_1.Names.uniqueId(this)}.nested.template.json`;
        this.parameters = props.parameters || {};
        this.resource = new cloudformation_generated_1.CfnStack(parentScope, `${id}.NestedStackResource`, {
          templateUrl: lazy_1.Lazy.uncachedString({ produce: () => this._templateUrl || "<unresolved>" }),
          parameters: lazy_1.Lazy.any({ produce: () => Object.keys(this.parameters).length > 0 ? this.parameters : void 0 }),
          notificationArns: props.notificationArns,
          timeoutInMinutes: props.timeout ? props.timeout.toMinutes() : void 0
        });
        this.resource.applyRemovalPolicy((_b = props.removalPolicy) !== null && _b !== void 0 ? _b : removal_policy_1.RemovalPolicy.DESTROY);
        this.nestedStackResource = this.resource;
        this._contextualStackName = this.contextualAttribute(cfn_pseudo_1.Aws.STACK_NAME, cfn_fn_1.Fn.select(1, cfn_fn_1.Fn.split("/", this.resource.ref)));
        this._contextualStackId = this.contextualAttribute(cfn_pseudo_1.Aws.STACK_ID, this.resource.ref);
      }
      static isNestedStack(x) {
        return x != null && typeof x === "object" && NESTED_STACK_SYMBOL in x;
      }
      get stackName() {
        return this._contextualStackName;
      }
      get stackId() {
        return this._contextualStackId;
      }
      setParameter(name, value) {
        this.parameters[name] = value;
      }
      _prepareTemplateAsset() {
        if (this._templateUrl) {
          return false;
        }
        const cfn = JSON.stringify(this._toCloudFormation());
        const templateHash = crypto.createHash("sha256").update(cfn).digest("hex");
        const templateLocation = this._parentStack.addFileAsset({
          packaging: assets_1.FileAssetPackaging.FILE,
          sourceHash: templateHash,
          fileName: this.templateFile
        });
        this._templateUrl = `https://s3.${this._parentStack.region}.${this._parentStack.urlSuffix}/${templateLocation.bucketName}/${templateLocation.objectKey}`;
        return true;
      }
      contextualAttribute(innerValue, outerValue) {
        return token_1.Token.asString({
          resolve: (context) => {
            if (stack_1.Stack.of(context.scope) === this) {
              return innerValue;
            } else {
              return outerValue;
            }
          }
        });
      }
    };
    exports2.NestedStack = NestedStack;
    _a = JSII_RTTI_SYMBOL_1;
    NestedStack[_a] = { fqn: "@aws-cdk/core.NestedStack", version: "1.132.0" };
    function findParentStack(scope) {
      if (!scope) {
        throw new Error("Nested stacks cannot be defined as a root construct");
      }
      const parentStack = constructs_1.Node.of(scope).scopes.reverse().find((p) => stack_1.Stack.isStack(p));
      if (!parentStack) {
        throw new Error("Nested stacks must be defined within scope of another non-nested stack");
      }
      return parentStack;
    }
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/cfn-capabilities.js
var require_cfn_capabilities = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/cfn-capabilities.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnCapabilities = void 0;
    var CfnCapabilities;
    (function(CfnCapabilities2) {
      CfnCapabilities2["NONE"] = "";
      CfnCapabilities2["ANONYMOUS_IAM"] = "CAPABILITY_IAM";
      CfnCapabilities2["NAMED_IAM"] = "CAPABILITY_NAMED_IAM";
      CfnCapabilities2["AUTO_EXPAND"] = "CAPABILITY_AUTO_EXPAND";
    })(CfnCapabilities = exports2.CfnCapabilities || (exports2.CfnCapabilities = {}));
  }
});

// asset-input/node_modules/@aws-cdk/core/lib/index.js
var require_lib8 = __commonJS({
  "asset-input/node_modules/@aws-cdk/core/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_aspect(), exports2);
    __exportStar(require_tag_aspect(), exports2);
    __exportStar(require_construct_compat(), exports2);
    __exportStar(require_token(), exports2);
    __exportStar(require_resolvable(), exports2);
    __exportStar(require_lazy(), exports2);
    __exportStar(require_tag_manager(), exports2);
    __exportStar(require_dependency2(), exports2);
    __exportStar(require_string_fragments(), exports2);
    __exportStar(require_stack_synthesizers(), exports2);
    __exportStar(require_reference(), exports2);
    __exportStar(require_cfn_condition(), exports2);
    __exportStar(require_cfn_fn(), exports2);
    __exportStar(require_cfn_hook(), exports2);
    __exportStar(require_cfn_codedeploy_blue_green_hook(), exports2);
    __exportStar(require_cfn_include(), exports2);
    __exportStar(require_cfn_mapping(), exports2);
    __exportStar(require_cfn_output(), exports2);
    __exportStar(require_cfn_parameter(), exports2);
    __exportStar(require_cfn_pseudo(), exports2);
    __exportStar(require_cfn_resource(), exports2);
    __exportStar(require_cfn_resource_policy(), exports2);
    __exportStar(require_cfn_rule(), exports2);
    __exportStar(require_stack(), exports2);
    __exportStar(require_stage(), exports2);
    __exportStar(require_cfn_element(), exports2);
    __exportStar(require_cfn_dynamic_reference(), exports2);
    __exportStar(require_cfn_tag(), exports2);
    __exportStar(require_cfn_json(), exports2);
    __exportStar(require_removal_policy(), exports2);
    __exportStar(require_arn(), exports2);
    __exportStar(require_duration(), exports2);
    __exportStar(require_expiration(), exports2);
    __exportStar(require_size(), exports2);
    __exportStar(require_stack_trace2(), exports2);
    __exportStar(require_app2(), exports2);
    __exportStar(require_context_provider(), exports2);
    __exportStar(require_environment2(), exports2);
    __exportStar(require_annotations(), exports2);
    __exportStar(require_runtime(), exports2);
    __exportStar(require_secret_value(), exports2);
    __exportStar(require_resource(), exports2);
    __exportStar(require_physical_name(), exports2);
    __exportStar(require_assets3(), exports2);
    __exportStar(require_tree(), exports2);
    __exportStar(require_asset_staging(), exports2);
    __exportStar(require_bundling(), exports2);
    __exportStar(require_fs2(), exports2);
    __exportStar(require_custom_resource(), exports2);
    __exportStar(require_nested_stack(), exports2);
    __exportStar(require_custom_resource_provider2(), exports2);
    __exportStar(require_cfn_capabilities(), exports2);
    __exportStar(require_cloudformation_generated(), exports2);
    __exportStar(require_feature_flags(), exports2);
    __exportStar(require_intrinsic(), exports2);
    __exportStar(require_names(), exports2);
  }
});

// asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/alarm-base.js
var require_alarm_base = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/alarm-base.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AlarmBase = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var AlarmBase = class extends core_1.Resource {
      renderAlarmRule() {
        return `ALARM("${this.alarmArn}")`;
      }
      addAlarmAction(...actions) {
        if (this.alarmActionArns === void 0) {
          this.alarmActionArns = [];
        }
        this.alarmActionArns.push(...actions.map((a) => a.bind(this, this).alarmActionArn));
      }
      addInsufficientDataAction(...actions) {
        if (this.insufficientDataActionArns === void 0) {
          this.insufficientDataActionArns = [];
        }
        this.insufficientDataActionArns.push(...actions.map((a) => a.bind(this, this).alarmActionArn));
      }
      addOkAction(...actions) {
        if (this.okActionArns === void 0) {
          this.okActionArns = [];
        }
        this.okActionArns.push(...actions.map((a) => a.bind(this, this).alarmActionArn));
      }
    };
    exports2.AlarmBase = AlarmBase;
    _a = JSII_RTTI_SYMBOL_1;
    AlarmBase[_a] = { fqn: "@aws-cdk/aws-cloudwatch.AlarmBase", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/cloudwatch.generated.js
var require_cloudwatch_generated = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/cloudwatch.generated.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    var _d;
    var _e;
    var _f;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnMetricStream = exports2.CfnInsightRule = exports2.CfnDashboard = exports2.CfnCompositeAlarm = exports2.CfnAnomalyDetector = exports2.CfnAlarm = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var cfn_parse = require_cfn_parse();
    function CfnAlarmPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("actionsEnabled", cdk.validateBoolean)(properties.actionsEnabled));
      errors.collect(cdk.propertyValidator("alarmActions", cdk.listValidator(cdk.validateString))(properties.alarmActions));
      errors.collect(cdk.propertyValidator("alarmDescription", cdk.validateString)(properties.alarmDescription));
      errors.collect(cdk.propertyValidator("alarmName", cdk.validateString)(properties.alarmName));
      errors.collect(cdk.propertyValidator("comparisonOperator", cdk.requiredValidator)(properties.comparisonOperator));
      errors.collect(cdk.propertyValidator("comparisonOperator", cdk.validateString)(properties.comparisonOperator));
      errors.collect(cdk.propertyValidator("datapointsToAlarm", cdk.validateNumber)(properties.datapointsToAlarm));
      errors.collect(cdk.propertyValidator("dimensions", cdk.listValidator(CfnAlarm_DimensionPropertyValidator))(properties.dimensions));
      errors.collect(cdk.propertyValidator("evaluateLowSampleCountPercentile", cdk.validateString)(properties.evaluateLowSampleCountPercentile));
      errors.collect(cdk.propertyValidator("evaluationPeriods", cdk.requiredValidator)(properties.evaluationPeriods));
      errors.collect(cdk.propertyValidator("evaluationPeriods", cdk.validateNumber)(properties.evaluationPeriods));
      errors.collect(cdk.propertyValidator("extendedStatistic", cdk.validateString)(properties.extendedStatistic));
      errors.collect(cdk.propertyValidator("insufficientDataActions", cdk.listValidator(cdk.validateString))(properties.insufficientDataActions));
      errors.collect(cdk.propertyValidator("metricName", cdk.validateString)(properties.metricName));
      errors.collect(cdk.propertyValidator("metrics", cdk.listValidator(CfnAlarm_MetricDataQueryPropertyValidator))(properties.metrics));
      errors.collect(cdk.propertyValidator("namespace", cdk.validateString)(properties.namespace));
      errors.collect(cdk.propertyValidator("okActions", cdk.listValidator(cdk.validateString))(properties.okActions));
      errors.collect(cdk.propertyValidator("period", cdk.validateNumber)(properties.period));
      errors.collect(cdk.propertyValidator("statistic", cdk.validateString)(properties.statistic));
      errors.collect(cdk.propertyValidator("threshold", cdk.validateNumber)(properties.threshold));
      errors.collect(cdk.propertyValidator("thresholdMetricId", cdk.validateString)(properties.thresholdMetricId));
      errors.collect(cdk.propertyValidator("treatMissingData", cdk.validateString)(properties.treatMissingData));
      errors.collect(cdk.propertyValidator("unit", cdk.validateString)(properties.unit));
      return errors.wrap('supplied properties not correct for "CfnAlarmProps"');
    }
    function cfnAlarmPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnAlarmPropsValidator(properties).assertSuccess();
      return {
        ComparisonOperator: cdk.stringToCloudFormation(properties.comparisonOperator),
        EvaluationPeriods: cdk.numberToCloudFormation(properties.evaluationPeriods),
        ActionsEnabled: cdk.booleanToCloudFormation(properties.actionsEnabled),
        AlarmActions: cdk.listMapper(cdk.stringToCloudFormation)(properties.alarmActions),
        AlarmDescription: cdk.stringToCloudFormation(properties.alarmDescription),
        AlarmName: cdk.stringToCloudFormation(properties.alarmName),
        DatapointsToAlarm: cdk.numberToCloudFormation(properties.datapointsToAlarm),
        Dimensions: cdk.listMapper(cfnAlarmDimensionPropertyToCloudFormation)(properties.dimensions),
        EvaluateLowSampleCountPercentile: cdk.stringToCloudFormation(properties.evaluateLowSampleCountPercentile),
        ExtendedStatistic: cdk.stringToCloudFormation(properties.extendedStatistic),
        InsufficientDataActions: cdk.listMapper(cdk.stringToCloudFormation)(properties.insufficientDataActions),
        MetricName: cdk.stringToCloudFormation(properties.metricName),
        Metrics: cdk.listMapper(cfnAlarmMetricDataQueryPropertyToCloudFormation)(properties.metrics),
        Namespace: cdk.stringToCloudFormation(properties.namespace),
        OKActions: cdk.listMapper(cdk.stringToCloudFormation)(properties.okActions),
        Period: cdk.numberToCloudFormation(properties.period),
        Statistic: cdk.stringToCloudFormation(properties.statistic),
        Threshold: cdk.numberToCloudFormation(properties.threshold),
        ThresholdMetricId: cdk.stringToCloudFormation(properties.thresholdMetricId),
        TreatMissingData: cdk.stringToCloudFormation(properties.treatMissingData),
        Unit: cdk.stringToCloudFormation(properties.unit)
      };
    }
    function CfnAlarmPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("comparisonOperator", "ComparisonOperator", cfn_parse.FromCloudFormation.getString(properties.ComparisonOperator));
      ret.addPropertyResult("evaluationPeriods", "EvaluationPeriods", cfn_parse.FromCloudFormation.getNumber(properties.EvaluationPeriods));
      ret.addPropertyResult("actionsEnabled", "ActionsEnabled", properties.ActionsEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ActionsEnabled) : void 0);
      ret.addPropertyResult("alarmActions", "AlarmActions", properties.AlarmActions != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AlarmActions) : void 0);
      ret.addPropertyResult("alarmDescription", "AlarmDescription", properties.AlarmDescription != null ? cfn_parse.FromCloudFormation.getString(properties.AlarmDescription) : void 0);
      ret.addPropertyResult("alarmName", "AlarmName", properties.AlarmName != null ? cfn_parse.FromCloudFormation.getString(properties.AlarmName) : void 0);
      ret.addPropertyResult("datapointsToAlarm", "DatapointsToAlarm", properties.DatapointsToAlarm != null ? cfn_parse.FromCloudFormation.getNumber(properties.DatapointsToAlarm) : void 0);
      ret.addPropertyResult("dimensions", "Dimensions", properties.Dimensions != null ? cfn_parse.FromCloudFormation.getArray(CfnAlarmDimensionPropertyFromCloudFormation)(properties.Dimensions) : void 0);
      ret.addPropertyResult("evaluateLowSampleCountPercentile", "EvaluateLowSampleCountPercentile", properties.EvaluateLowSampleCountPercentile != null ? cfn_parse.FromCloudFormation.getString(properties.EvaluateLowSampleCountPercentile) : void 0);
      ret.addPropertyResult("extendedStatistic", "ExtendedStatistic", properties.ExtendedStatistic != null ? cfn_parse.FromCloudFormation.getString(properties.ExtendedStatistic) : void 0);
      ret.addPropertyResult("insufficientDataActions", "InsufficientDataActions", properties.InsufficientDataActions != null ? cfn_parse.FromCloudFormation.getStringArray(properties.InsufficientDataActions) : void 0);
      ret.addPropertyResult("metricName", "MetricName", properties.MetricName != null ? cfn_parse.FromCloudFormation.getString(properties.MetricName) : void 0);
      ret.addPropertyResult("metrics", "Metrics", properties.Metrics != null ? cfn_parse.FromCloudFormation.getArray(CfnAlarmMetricDataQueryPropertyFromCloudFormation)(properties.Metrics) : void 0);
      ret.addPropertyResult("namespace", "Namespace", properties.Namespace != null ? cfn_parse.FromCloudFormation.getString(properties.Namespace) : void 0);
      ret.addPropertyResult("okActions", "OKActions", properties.OKActions != null ? cfn_parse.FromCloudFormation.getStringArray(properties.OKActions) : void 0);
      ret.addPropertyResult("period", "Period", properties.Period != null ? cfn_parse.FromCloudFormation.getNumber(properties.Period) : void 0);
      ret.addPropertyResult("statistic", "Statistic", properties.Statistic != null ? cfn_parse.FromCloudFormation.getString(properties.Statistic) : void 0);
      ret.addPropertyResult("threshold", "Threshold", properties.Threshold != null ? cfn_parse.FromCloudFormation.getNumber(properties.Threshold) : void 0);
      ret.addPropertyResult("thresholdMetricId", "ThresholdMetricId", properties.ThresholdMetricId != null ? cfn_parse.FromCloudFormation.getString(properties.ThresholdMetricId) : void 0);
      ret.addPropertyResult("treatMissingData", "TreatMissingData", properties.TreatMissingData != null ? cfn_parse.FromCloudFormation.getString(properties.TreatMissingData) : void 0);
      ret.addPropertyResult("unit", "Unit", properties.Unit != null ? cfn_parse.FromCloudFormation.getString(properties.Unit) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnAlarm = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnAlarm.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "comparisonOperator", this);
        cdk.requireProperty(props, "evaluationPeriods", this);
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.comparisonOperator = props.comparisonOperator;
        this.evaluationPeriods = props.evaluationPeriods;
        this.actionsEnabled = props.actionsEnabled;
        this.alarmActions = props.alarmActions;
        this.alarmDescription = props.alarmDescription;
        this.alarmName = props.alarmName;
        this.datapointsToAlarm = props.datapointsToAlarm;
        this.dimensions = props.dimensions;
        this.evaluateLowSampleCountPercentile = props.evaluateLowSampleCountPercentile;
        this.extendedStatistic = props.extendedStatistic;
        this.insufficientDataActions = props.insufficientDataActions;
        this.metricName = props.metricName;
        this.metrics = props.metrics;
        this.namespace = props.namespace;
        this.okActions = props.okActions;
        this.period = props.period;
        this.statistic = props.statistic;
        this.threshold = props.threshold;
        this.thresholdMetricId = props.thresholdMetricId;
        this.treatMissingData = props.treatMissingData;
        this.unit = props.unit;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnAlarmPropsFromCloudFormation(resourceProperties);
        const ret = new CfnAlarm(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnAlarm.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          comparisonOperator: this.comparisonOperator,
          evaluationPeriods: this.evaluationPeriods,
          actionsEnabled: this.actionsEnabled,
          alarmActions: this.alarmActions,
          alarmDescription: this.alarmDescription,
          alarmName: this.alarmName,
          datapointsToAlarm: this.datapointsToAlarm,
          dimensions: this.dimensions,
          evaluateLowSampleCountPercentile: this.evaluateLowSampleCountPercentile,
          extendedStatistic: this.extendedStatistic,
          insufficientDataActions: this.insufficientDataActions,
          metricName: this.metricName,
          metrics: this.metrics,
          namespace: this.namespace,
          okActions: this.okActions,
          period: this.period,
          statistic: this.statistic,
          threshold: this.threshold,
          thresholdMetricId: this.thresholdMetricId,
          treatMissingData: this.treatMissingData,
          unit: this.unit
        };
      }
      renderProperties(props) {
        return cfnAlarmPropsToCloudFormation(props);
      }
    };
    exports2.CfnAlarm = CfnAlarm;
    _a = JSII_RTTI_SYMBOL_1;
    CfnAlarm[_a] = { fqn: "@aws-cdk/aws-cloudwatch.CfnAlarm", version: "1.132.0" };
    CfnAlarm.CFN_RESOURCE_TYPE_NAME = "AWS::CloudWatch::Alarm";
    function CfnAlarm_DimensionPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("name", cdk.requiredValidator)(properties.name));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("value", cdk.requiredValidator)(properties.value));
      errors.collect(cdk.propertyValidator("value", cdk.validateString)(properties.value));
      return errors.wrap('supplied properties not correct for "DimensionProperty"');
    }
    function cfnAlarmDimensionPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnAlarm_DimensionPropertyValidator(properties).assertSuccess();
      return {
        Name: cdk.stringToCloudFormation(properties.name),
        Value: cdk.stringToCloudFormation(properties.value)
      };
    }
    function CfnAlarmDimensionPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("name", "Name", cfn_parse.FromCloudFormation.getString(properties.Name));
      ret.addPropertyResult("value", "Value", cfn_parse.FromCloudFormation.getString(properties.Value));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnAlarm_MetricPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("dimensions", cdk.listValidator(CfnAlarm_DimensionPropertyValidator))(properties.dimensions));
      errors.collect(cdk.propertyValidator("metricName", cdk.validateString)(properties.metricName));
      errors.collect(cdk.propertyValidator("namespace", cdk.validateString)(properties.namespace));
      return errors.wrap('supplied properties not correct for "MetricProperty"');
    }
    function cfnAlarmMetricPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnAlarm_MetricPropertyValidator(properties).assertSuccess();
      return {
        Dimensions: cdk.listMapper(cfnAlarmDimensionPropertyToCloudFormation)(properties.dimensions),
        MetricName: cdk.stringToCloudFormation(properties.metricName),
        Namespace: cdk.stringToCloudFormation(properties.namespace)
      };
    }
    function CfnAlarmMetricPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("dimensions", "Dimensions", properties.Dimensions != null ? cfn_parse.FromCloudFormation.getArray(CfnAlarmDimensionPropertyFromCloudFormation)(properties.Dimensions) : void 0);
      ret.addPropertyResult("metricName", "MetricName", properties.MetricName != null ? cfn_parse.FromCloudFormation.getString(properties.MetricName) : void 0);
      ret.addPropertyResult("namespace", "Namespace", properties.Namespace != null ? cfn_parse.FromCloudFormation.getString(properties.Namespace) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnAlarm_MetricDataQueryPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("accountId", cdk.validateString)(properties.accountId));
      errors.collect(cdk.propertyValidator("expression", cdk.validateString)(properties.expression));
      errors.collect(cdk.propertyValidator("id", cdk.requiredValidator)(properties.id));
      errors.collect(cdk.propertyValidator("id", cdk.validateString)(properties.id));
      errors.collect(cdk.propertyValidator("label", cdk.validateString)(properties.label));
      errors.collect(cdk.propertyValidator("metricStat", CfnAlarm_MetricStatPropertyValidator)(properties.metricStat));
      errors.collect(cdk.propertyValidator("period", cdk.validateNumber)(properties.period));
      errors.collect(cdk.propertyValidator("returnData", cdk.validateBoolean)(properties.returnData));
      return errors.wrap('supplied properties not correct for "MetricDataQueryProperty"');
    }
    function cfnAlarmMetricDataQueryPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnAlarm_MetricDataQueryPropertyValidator(properties).assertSuccess();
      return {
        AccountId: cdk.stringToCloudFormation(properties.accountId),
        Expression: cdk.stringToCloudFormation(properties.expression),
        Id: cdk.stringToCloudFormation(properties.id),
        Label: cdk.stringToCloudFormation(properties.label),
        MetricStat: cfnAlarmMetricStatPropertyToCloudFormation(properties.metricStat),
        Period: cdk.numberToCloudFormation(properties.period),
        ReturnData: cdk.booleanToCloudFormation(properties.returnData)
      };
    }
    function CfnAlarmMetricDataQueryPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("accountId", "AccountId", properties.AccountId != null ? cfn_parse.FromCloudFormation.getString(properties.AccountId) : void 0);
      ret.addPropertyResult("expression", "Expression", properties.Expression != null ? cfn_parse.FromCloudFormation.getString(properties.Expression) : void 0);
      ret.addPropertyResult("id", "Id", cfn_parse.FromCloudFormation.getString(properties.Id));
      ret.addPropertyResult("label", "Label", properties.Label != null ? cfn_parse.FromCloudFormation.getString(properties.Label) : void 0);
      ret.addPropertyResult("metricStat", "MetricStat", properties.MetricStat != null ? CfnAlarmMetricStatPropertyFromCloudFormation(properties.MetricStat) : void 0);
      ret.addPropertyResult("period", "Period", properties.Period != null ? cfn_parse.FromCloudFormation.getNumber(properties.Period) : void 0);
      ret.addPropertyResult("returnData", "ReturnData", properties.ReturnData != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ReturnData) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnAlarm_MetricStatPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("metric", cdk.requiredValidator)(properties.metric));
      errors.collect(cdk.propertyValidator("metric", CfnAlarm_MetricPropertyValidator)(properties.metric));
      errors.collect(cdk.propertyValidator("period", cdk.requiredValidator)(properties.period));
      errors.collect(cdk.propertyValidator("period", cdk.validateNumber)(properties.period));
      errors.collect(cdk.propertyValidator("stat", cdk.requiredValidator)(properties.stat));
      errors.collect(cdk.propertyValidator("stat", cdk.validateString)(properties.stat));
      errors.collect(cdk.propertyValidator("unit", cdk.validateString)(properties.unit));
      return errors.wrap('supplied properties not correct for "MetricStatProperty"');
    }
    function cfnAlarmMetricStatPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnAlarm_MetricStatPropertyValidator(properties).assertSuccess();
      return {
        Metric: cfnAlarmMetricPropertyToCloudFormation(properties.metric),
        Period: cdk.numberToCloudFormation(properties.period),
        Stat: cdk.stringToCloudFormation(properties.stat),
        Unit: cdk.stringToCloudFormation(properties.unit)
      };
    }
    function CfnAlarmMetricStatPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("metric", "Metric", CfnAlarmMetricPropertyFromCloudFormation(properties.Metric));
      ret.addPropertyResult("period", "Period", cfn_parse.FromCloudFormation.getNumber(properties.Period));
      ret.addPropertyResult("stat", "Stat", cfn_parse.FromCloudFormation.getString(properties.Stat));
      ret.addPropertyResult("unit", "Unit", properties.Unit != null ? cfn_parse.FromCloudFormation.getString(properties.Unit) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnAnomalyDetectorPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("configuration", CfnAnomalyDetector_ConfigurationPropertyValidator)(properties.configuration));
      errors.collect(cdk.propertyValidator("dimensions", cdk.listValidator(CfnAnomalyDetector_DimensionPropertyValidator))(properties.dimensions));
      errors.collect(cdk.propertyValidator("metricName", cdk.requiredValidator)(properties.metricName));
      errors.collect(cdk.propertyValidator("metricName", cdk.validateString)(properties.metricName));
      errors.collect(cdk.propertyValidator("namespace", cdk.requiredValidator)(properties.namespace));
      errors.collect(cdk.propertyValidator("namespace", cdk.validateString)(properties.namespace));
      errors.collect(cdk.propertyValidator("stat", cdk.requiredValidator)(properties.stat));
      errors.collect(cdk.propertyValidator("stat", cdk.validateString)(properties.stat));
      return errors.wrap('supplied properties not correct for "CfnAnomalyDetectorProps"');
    }
    function cfnAnomalyDetectorPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnAnomalyDetectorPropsValidator(properties).assertSuccess();
      return {
        MetricName: cdk.stringToCloudFormation(properties.metricName),
        Namespace: cdk.stringToCloudFormation(properties.namespace),
        Stat: cdk.stringToCloudFormation(properties.stat),
        Configuration: cfnAnomalyDetectorConfigurationPropertyToCloudFormation(properties.configuration),
        Dimensions: cdk.listMapper(cfnAnomalyDetectorDimensionPropertyToCloudFormation)(properties.dimensions)
      };
    }
    function CfnAnomalyDetectorPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("metricName", "MetricName", cfn_parse.FromCloudFormation.getString(properties.MetricName));
      ret.addPropertyResult("namespace", "Namespace", cfn_parse.FromCloudFormation.getString(properties.Namespace));
      ret.addPropertyResult("stat", "Stat", cfn_parse.FromCloudFormation.getString(properties.Stat));
      ret.addPropertyResult("configuration", "Configuration", properties.Configuration != null ? CfnAnomalyDetectorConfigurationPropertyFromCloudFormation(properties.Configuration) : void 0);
      ret.addPropertyResult("dimensions", "Dimensions", properties.Dimensions != null ? cfn_parse.FromCloudFormation.getArray(CfnAnomalyDetectorDimensionPropertyFromCloudFormation)(properties.Dimensions) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnAnomalyDetector = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnAnomalyDetector.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "metricName", this);
        cdk.requireProperty(props, "namespace", this);
        cdk.requireProperty(props, "stat", this);
        this.metricName = props.metricName;
        this.namespace = props.namespace;
        this.stat = props.stat;
        this.configuration = props.configuration;
        this.dimensions = props.dimensions;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnAnomalyDetectorPropsFromCloudFormation(resourceProperties);
        const ret = new CfnAnomalyDetector(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnAnomalyDetector.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          metricName: this.metricName,
          namespace: this.namespace,
          stat: this.stat,
          configuration: this.configuration,
          dimensions: this.dimensions
        };
      }
      renderProperties(props) {
        return cfnAnomalyDetectorPropsToCloudFormation(props);
      }
    };
    exports2.CfnAnomalyDetector = CfnAnomalyDetector;
    _b = JSII_RTTI_SYMBOL_1;
    CfnAnomalyDetector[_b] = { fqn: "@aws-cdk/aws-cloudwatch.CfnAnomalyDetector", version: "1.132.0" };
    CfnAnomalyDetector.CFN_RESOURCE_TYPE_NAME = "AWS::CloudWatch::AnomalyDetector";
    function CfnAnomalyDetector_ConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("excludedTimeRanges", cdk.listValidator(CfnAnomalyDetector_RangePropertyValidator))(properties.excludedTimeRanges));
      errors.collect(cdk.propertyValidator("metricTimeZone", cdk.validateString)(properties.metricTimeZone));
      return errors.wrap('supplied properties not correct for "ConfigurationProperty"');
    }
    function cfnAnomalyDetectorConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnAnomalyDetector_ConfigurationPropertyValidator(properties).assertSuccess();
      return {
        ExcludedTimeRanges: cdk.listMapper(cfnAnomalyDetectorRangePropertyToCloudFormation)(properties.excludedTimeRanges),
        MetricTimeZone: cdk.stringToCloudFormation(properties.metricTimeZone)
      };
    }
    function CfnAnomalyDetectorConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("excludedTimeRanges", "ExcludedTimeRanges", properties.ExcludedTimeRanges != null ? cfn_parse.FromCloudFormation.getArray(CfnAnomalyDetectorRangePropertyFromCloudFormation)(properties.ExcludedTimeRanges) : void 0);
      ret.addPropertyResult("metricTimeZone", "MetricTimeZone", properties.MetricTimeZone != null ? cfn_parse.FromCloudFormation.getString(properties.MetricTimeZone) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnAnomalyDetector_DimensionPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("name", cdk.requiredValidator)(properties.name));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("value", cdk.requiredValidator)(properties.value));
      errors.collect(cdk.propertyValidator("value", cdk.validateString)(properties.value));
      return errors.wrap('supplied properties not correct for "DimensionProperty"');
    }
    function cfnAnomalyDetectorDimensionPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnAnomalyDetector_DimensionPropertyValidator(properties).assertSuccess();
      return {
        Name: cdk.stringToCloudFormation(properties.name),
        Value: cdk.stringToCloudFormation(properties.value)
      };
    }
    function CfnAnomalyDetectorDimensionPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("name", "Name", cfn_parse.FromCloudFormation.getString(properties.Name));
      ret.addPropertyResult("value", "Value", cfn_parse.FromCloudFormation.getString(properties.Value));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnAnomalyDetector_RangePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("endTime", cdk.requiredValidator)(properties.endTime));
      errors.collect(cdk.propertyValidator("endTime", cdk.validateString)(properties.endTime));
      errors.collect(cdk.propertyValidator("startTime", cdk.requiredValidator)(properties.startTime));
      errors.collect(cdk.propertyValidator("startTime", cdk.validateString)(properties.startTime));
      return errors.wrap('supplied properties not correct for "RangeProperty"');
    }
    function cfnAnomalyDetectorRangePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnAnomalyDetector_RangePropertyValidator(properties).assertSuccess();
      return {
        EndTime: cdk.stringToCloudFormation(properties.endTime),
        StartTime: cdk.stringToCloudFormation(properties.startTime)
      };
    }
    function CfnAnomalyDetectorRangePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("endTime", "EndTime", cfn_parse.FromCloudFormation.getString(properties.EndTime));
      ret.addPropertyResult("startTime", "StartTime", cfn_parse.FromCloudFormation.getString(properties.StartTime));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnCompositeAlarmPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("actionsEnabled", cdk.validateBoolean)(properties.actionsEnabled));
      errors.collect(cdk.propertyValidator("alarmActions", cdk.listValidator(cdk.validateString))(properties.alarmActions));
      errors.collect(cdk.propertyValidator("alarmDescription", cdk.validateString)(properties.alarmDescription));
      errors.collect(cdk.propertyValidator("alarmName", cdk.requiredValidator)(properties.alarmName));
      errors.collect(cdk.propertyValidator("alarmName", cdk.validateString)(properties.alarmName));
      errors.collect(cdk.propertyValidator("alarmRule", cdk.requiredValidator)(properties.alarmRule));
      errors.collect(cdk.propertyValidator("alarmRule", cdk.validateString)(properties.alarmRule));
      errors.collect(cdk.propertyValidator("insufficientDataActions", cdk.listValidator(cdk.validateString))(properties.insufficientDataActions));
      errors.collect(cdk.propertyValidator("okActions", cdk.listValidator(cdk.validateString))(properties.okActions));
      return errors.wrap('supplied properties not correct for "CfnCompositeAlarmProps"');
    }
    function cfnCompositeAlarmPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnCompositeAlarmPropsValidator(properties).assertSuccess();
      return {
        AlarmName: cdk.stringToCloudFormation(properties.alarmName),
        AlarmRule: cdk.stringToCloudFormation(properties.alarmRule),
        ActionsEnabled: cdk.booleanToCloudFormation(properties.actionsEnabled),
        AlarmActions: cdk.listMapper(cdk.stringToCloudFormation)(properties.alarmActions),
        AlarmDescription: cdk.stringToCloudFormation(properties.alarmDescription),
        InsufficientDataActions: cdk.listMapper(cdk.stringToCloudFormation)(properties.insufficientDataActions),
        OKActions: cdk.listMapper(cdk.stringToCloudFormation)(properties.okActions)
      };
    }
    function CfnCompositeAlarmPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("alarmName", "AlarmName", cfn_parse.FromCloudFormation.getString(properties.AlarmName));
      ret.addPropertyResult("alarmRule", "AlarmRule", cfn_parse.FromCloudFormation.getString(properties.AlarmRule));
      ret.addPropertyResult("actionsEnabled", "ActionsEnabled", properties.ActionsEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ActionsEnabled) : void 0);
      ret.addPropertyResult("alarmActions", "AlarmActions", properties.AlarmActions != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AlarmActions) : void 0);
      ret.addPropertyResult("alarmDescription", "AlarmDescription", properties.AlarmDescription != null ? cfn_parse.FromCloudFormation.getString(properties.AlarmDescription) : void 0);
      ret.addPropertyResult("insufficientDataActions", "InsufficientDataActions", properties.InsufficientDataActions != null ? cfn_parse.FromCloudFormation.getStringArray(properties.InsufficientDataActions) : void 0);
      ret.addPropertyResult("okActions", "OKActions", properties.OKActions != null ? cfn_parse.FromCloudFormation.getStringArray(properties.OKActions) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnCompositeAlarm = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnCompositeAlarm.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "alarmName", this);
        cdk.requireProperty(props, "alarmRule", this);
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.alarmName = props.alarmName;
        this.alarmRule = props.alarmRule;
        this.actionsEnabled = props.actionsEnabled;
        this.alarmActions = props.alarmActions;
        this.alarmDescription = props.alarmDescription;
        this.insufficientDataActions = props.insufficientDataActions;
        this.okActions = props.okActions;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnCompositeAlarmPropsFromCloudFormation(resourceProperties);
        const ret = new CfnCompositeAlarm(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnCompositeAlarm.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          alarmName: this.alarmName,
          alarmRule: this.alarmRule,
          actionsEnabled: this.actionsEnabled,
          alarmActions: this.alarmActions,
          alarmDescription: this.alarmDescription,
          insufficientDataActions: this.insufficientDataActions,
          okActions: this.okActions
        };
      }
      renderProperties(props) {
        return cfnCompositeAlarmPropsToCloudFormation(props);
      }
    };
    exports2.CfnCompositeAlarm = CfnCompositeAlarm;
    _c = JSII_RTTI_SYMBOL_1;
    CfnCompositeAlarm[_c] = { fqn: "@aws-cdk/aws-cloudwatch.CfnCompositeAlarm", version: "1.132.0" };
    CfnCompositeAlarm.CFN_RESOURCE_TYPE_NAME = "AWS::CloudWatch::CompositeAlarm";
    function CfnDashboardPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("dashboardBody", cdk.requiredValidator)(properties.dashboardBody));
      errors.collect(cdk.propertyValidator("dashboardBody", cdk.validateString)(properties.dashboardBody));
      errors.collect(cdk.propertyValidator("dashboardName", cdk.validateString)(properties.dashboardName));
      return errors.wrap('supplied properties not correct for "CfnDashboardProps"');
    }
    function cfnDashboardPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnDashboardPropsValidator(properties).assertSuccess();
      return {
        DashboardBody: cdk.stringToCloudFormation(properties.dashboardBody),
        DashboardName: cdk.stringToCloudFormation(properties.dashboardName)
      };
    }
    function CfnDashboardPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("dashboardBody", "DashboardBody", cfn_parse.FromCloudFormation.getString(properties.DashboardBody));
      ret.addPropertyResult("dashboardName", "DashboardName", properties.DashboardName != null ? cfn_parse.FromCloudFormation.getString(properties.DashboardName) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnDashboard = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnDashboard.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "dashboardBody", this);
        this.dashboardBody = props.dashboardBody;
        this.dashboardName = props.dashboardName;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnDashboardPropsFromCloudFormation(resourceProperties);
        const ret = new CfnDashboard(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnDashboard.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          dashboardBody: this.dashboardBody,
          dashboardName: this.dashboardName
        };
      }
      renderProperties(props) {
        return cfnDashboardPropsToCloudFormation(props);
      }
    };
    exports2.CfnDashboard = CfnDashboard;
    _d = JSII_RTTI_SYMBOL_1;
    CfnDashboard[_d] = { fqn: "@aws-cdk/aws-cloudwatch.CfnDashboard", version: "1.132.0" };
    CfnDashboard.CFN_RESOURCE_TYPE_NAME = "AWS::CloudWatch::Dashboard";
    function CfnInsightRulePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("ruleBody", cdk.requiredValidator)(properties.ruleBody));
      errors.collect(cdk.propertyValidator("ruleBody", cdk.validateString)(properties.ruleBody));
      errors.collect(cdk.propertyValidator("ruleName", cdk.requiredValidator)(properties.ruleName));
      errors.collect(cdk.propertyValidator("ruleName", cdk.validateString)(properties.ruleName));
      errors.collect(cdk.propertyValidator("ruleState", cdk.requiredValidator)(properties.ruleState));
      errors.collect(cdk.propertyValidator("ruleState", cdk.validateString)(properties.ruleState));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnInsightRuleProps"');
    }
    function cfnInsightRulePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnInsightRulePropsValidator(properties).assertSuccess();
      return {
        RuleBody: cdk.stringToCloudFormation(properties.ruleBody),
        RuleName: cdk.stringToCloudFormation(properties.ruleName),
        RuleState: cdk.stringToCloudFormation(properties.ruleState),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnInsightRulePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("ruleBody", "RuleBody", cfn_parse.FromCloudFormation.getString(properties.RuleBody));
      ret.addPropertyResult("ruleName", "RuleName", cfn_parse.FromCloudFormation.getString(properties.RuleName));
      ret.addPropertyResult("ruleState", "RuleState", cfn_parse.FromCloudFormation.getString(properties.RuleState));
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnInsightRule = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnInsightRule.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "ruleBody", this);
        cdk.requireProperty(props, "ruleName", this);
        cdk.requireProperty(props, "ruleState", this);
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.attrRuleName = cdk.Token.asString(this.getAtt("RuleName"));
        this.ruleBody = props.ruleBody;
        this.ruleName = props.ruleName;
        this.ruleState = props.ruleState;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::CloudWatch::InsightRule", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnInsightRulePropsFromCloudFormation(resourceProperties);
        const ret = new CfnInsightRule(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnInsightRule.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          ruleBody: this.ruleBody,
          ruleName: this.ruleName,
          ruleState: this.ruleState,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnInsightRulePropsToCloudFormation(props);
      }
    };
    exports2.CfnInsightRule = CfnInsightRule;
    _e = JSII_RTTI_SYMBOL_1;
    CfnInsightRule[_e] = { fqn: "@aws-cdk/aws-cloudwatch.CfnInsightRule", version: "1.132.0" };
    CfnInsightRule.CFN_RESOURCE_TYPE_NAME = "AWS::CloudWatch::InsightRule";
    function CfnMetricStreamPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("excludeFilters", cdk.listValidator(CfnMetricStream_MetricStreamFilterPropertyValidator))(properties.excludeFilters));
      errors.collect(cdk.propertyValidator("firehoseArn", cdk.requiredValidator)(properties.firehoseArn));
      errors.collect(cdk.propertyValidator("firehoseArn", cdk.validateString)(properties.firehoseArn));
      errors.collect(cdk.propertyValidator("includeFilters", cdk.listValidator(CfnMetricStream_MetricStreamFilterPropertyValidator))(properties.includeFilters));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("outputFormat", cdk.requiredValidator)(properties.outputFormat));
      errors.collect(cdk.propertyValidator("outputFormat", cdk.validateString)(properties.outputFormat));
      errors.collect(cdk.propertyValidator("roleArn", cdk.requiredValidator)(properties.roleArn));
      errors.collect(cdk.propertyValidator("roleArn", cdk.validateString)(properties.roleArn));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnMetricStreamProps"');
    }
    function cfnMetricStreamPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnMetricStreamPropsValidator(properties).assertSuccess();
      return {
        FirehoseArn: cdk.stringToCloudFormation(properties.firehoseArn),
        OutputFormat: cdk.stringToCloudFormation(properties.outputFormat),
        RoleArn: cdk.stringToCloudFormation(properties.roleArn),
        ExcludeFilters: cdk.listMapper(cfnMetricStreamMetricStreamFilterPropertyToCloudFormation)(properties.excludeFilters),
        IncludeFilters: cdk.listMapper(cfnMetricStreamMetricStreamFilterPropertyToCloudFormation)(properties.includeFilters),
        Name: cdk.stringToCloudFormation(properties.name),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnMetricStreamPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("firehoseArn", "FirehoseArn", cfn_parse.FromCloudFormation.getString(properties.FirehoseArn));
      ret.addPropertyResult("outputFormat", "OutputFormat", cfn_parse.FromCloudFormation.getString(properties.OutputFormat));
      ret.addPropertyResult("roleArn", "RoleArn", cfn_parse.FromCloudFormation.getString(properties.RoleArn));
      ret.addPropertyResult("excludeFilters", "ExcludeFilters", properties.ExcludeFilters != null ? cfn_parse.FromCloudFormation.getArray(CfnMetricStreamMetricStreamFilterPropertyFromCloudFormation)(properties.ExcludeFilters) : void 0);
      ret.addPropertyResult("includeFilters", "IncludeFilters", properties.IncludeFilters != null ? cfn_parse.FromCloudFormation.getArray(CfnMetricStreamMetricStreamFilterPropertyFromCloudFormation)(properties.IncludeFilters) : void 0);
      ret.addPropertyResult("name", "Name", properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnMetricStream = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnMetricStream.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "firehoseArn", this);
        cdk.requireProperty(props, "outputFormat", this);
        cdk.requireProperty(props, "roleArn", this);
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.attrCreationDate = cdk.Token.asString(this.getAtt("CreationDate"));
        this.attrLastUpdateDate = cdk.Token.asString(this.getAtt("LastUpdateDate"));
        this.attrState = cdk.Token.asString(this.getAtt("State"));
        this.firehoseArn = props.firehoseArn;
        this.outputFormat = props.outputFormat;
        this.roleArn = props.roleArn;
        this.excludeFilters = props.excludeFilters;
        this.includeFilters = props.includeFilters;
        this.name = props.name;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::CloudWatch::MetricStream", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnMetricStreamPropsFromCloudFormation(resourceProperties);
        const ret = new CfnMetricStream(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnMetricStream.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          firehoseArn: this.firehoseArn,
          outputFormat: this.outputFormat,
          roleArn: this.roleArn,
          excludeFilters: this.excludeFilters,
          includeFilters: this.includeFilters,
          name: this.name,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnMetricStreamPropsToCloudFormation(props);
      }
    };
    exports2.CfnMetricStream = CfnMetricStream;
    _f = JSII_RTTI_SYMBOL_1;
    CfnMetricStream[_f] = { fqn: "@aws-cdk/aws-cloudwatch.CfnMetricStream", version: "1.132.0" };
    CfnMetricStream.CFN_RESOURCE_TYPE_NAME = "AWS::CloudWatch::MetricStream";
    function CfnMetricStream_MetricStreamFilterPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("namespace", cdk.requiredValidator)(properties.namespace));
      errors.collect(cdk.propertyValidator("namespace", cdk.validateString)(properties.namespace));
      return errors.wrap('supplied properties not correct for "MetricStreamFilterProperty"');
    }
    function cfnMetricStreamMetricStreamFilterPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnMetricStream_MetricStreamFilterPropertyValidator(properties).assertSuccess();
      return {
        Namespace: cdk.stringToCloudFormation(properties.namespace)
      };
    }
    function CfnMetricStreamMetricStreamFilterPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("namespace", "Namespace", cfn_parse.FromCloudFormation.getString(properties.Namespace));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/private/metric-util.js
var require_metric_util = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/private/metric-util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.dispatchMetric = exports2.metricPeriod = exports2.metricKey = void 0;
    var core_1 = require_lib8();
    var METRICKEY_SYMBOL = Symbol("@aws-cdk/aws-cloudwatch.MetricKey");
    function metricKey(metric) {
      if (metric.hasOwnProperty(METRICKEY_SYMBOL)) {
        return metric[METRICKEY_SYMBOL];
      }
      const parts = new Array();
      const conf = metric.toMetricConfig();
      if (conf.mathExpression) {
        parts.push(conf.mathExpression.expression);
        for (const id of Object.keys(conf.mathExpression.usingMetrics).sort()) {
          parts.push(id);
          parts.push(metricKey(conf.mathExpression.usingMetrics[id]));
        }
        if (conf.mathExpression.searchRegion) {
          parts.push(conf.mathExpression.searchRegion);
        }
        if (conf.mathExpression.searchAccount) {
          parts.push(conf.mathExpression.searchAccount);
        }
      }
      if (conf.metricStat) {
        parts.push(conf.metricStat.namespace);
        parts.push(conf.metricStat.metricName);
        for (const dim of conf.metricStat.dimensions || []) {
          parts.push(dim.name);
          parts.push(dim.value);
        }
        if (conf.metricStat.statistic) {
          parts.push(conf.metricStat.statistic);
        }
        if (conf.metricStat.period) {
          parts.push(`${conf.metricStat.period.toSeconds()}`);
        }
        if (conf.metricStat.region) {
          parts.push(conf.metricStat.region);
        }
        if (conf.metricStat.account) {
          parts.push(conf.metricStat.account);
        }
      }
      const ret = parts.join("|");
      Object.defineProperty(metric, METRICKEY_SYMBOL, { value: ret });
      return ret;
    }
    exports2.metricKey = metricKey;
    function metricPeriod(metric) {
      return dispatchMetric(metric, {
        withStat(stat) {
          return stat.period;
        },
        withExpression() {
          return metric.period || core_1.Duration.minutes(5);
        }
      });
    }
    exports2.metricPeriod = metricPeriod;
    function dispatchMetric(metric, fns) {
      const conf = metric.toMetricConfig();
      if (conf.metricStat && conf.mathExpression) {
        throw new Error("Metric object must not produce both 'metricStat' and 'mathExpression'");
      } else if (conf.metricStat) {
        return fns.withStat(conf.metricStat, conf);
      } else if (conf.mathExpression) {
        return fns.withExpression(conf.mathExpression, conf);
      } else {
        throw new Error("Metric object must have either 'metricStat' or 'mathExpression'");
      }
    }
    exports2.dispatchMetric = dispatchMetric;
  }
});

// asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/private/object.js
var require_object = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/private/object.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.dropUndefined = void 0;
    function dropUndefined(x) {
      if (x === null) {
        return x;
      }
      const ret = {};
      for (const [key, value] of Object.entries(x)) {
        if (value !== void 0) {
          ret[key] = value;
        }
      }
      return ret;
    }
    exports2.dropUndefined = dropUndefined;
  }
});

// asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/private/drop-empty-object-at-the-end-of-an-array-token.js
var require_drop_empty_object_at_the_end_of_an_array_token = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/private/drop-empty-object-at-the-end-of-an-array-token.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DropEmptyObjectAtTheEndOfAnArray = void 0;
    var cdk = require_lib8();
    var object_1 = require_object();
    var DropEmptyObjectAtTheEndOfAnArray = class {
      constructor(value) {
        this.value = value;
        this.creationStack = cdk.captureStackTrace();
      }
      resolve(context) {
        context.registerPostProcessor(this);
        return context.resolve(this.value);
      }
      postProcess(o, _context) {
        if (!Array.isArray(o)) {
          return o;
        }
        const lastEl = o[o.length - 1];
        if (typeof lastEl === "object" && lastEl !== null && Object.keys(object_1.dropUndefined(lastEl)).length === 0) {
          return o.slice(0, o.length - 1);
        }
        return o;
      }
    };
    exports2.DropEmptyObjectAtTheEndOfAnArray = DropEmptyObjectAtTheEndOfAnArray;
  }
});

// asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/private/env-tokens.js
var require_env_tokens = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/private/env-tokens.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.accountIfDifferentFromStack = exports2.regionIfDifferentFromStack = void 0;
    var cdk = require_lib8();
    function regionIfDifferentFromStack(region) {
      return cdk.Token.asString(new StackDependentToken(region, (stack) => stack.region));
    }
    exports2.regionIfDifferentFromStack = regionIfDifferentFromStack;
    function accountIfDifferentFromStack(account) {
      return cdk.Token.asString(new StackDependentToken(account, (stack) => stack.account));
    }
    exports2.accountIfDifferentFromStack = accountIfDifferentFromStack;
    var StackDependentToken = class {
      constructor(originalValue, fn) {
        this.originalValue = originalValue;
        this.fn = fn;
        this.creationStack = cdk.captureStackTrace();
      }
      resolve(context) {
        const stackValue = this.fn(cdk.Stack.of(context.scope));
        if (!cdk.Token.isUnresolved(stackValue) && stackValue === this.originalValue) {
          return void 0;
        }
        return this.originalValue;
      }
      toString() {
        return cdk.Token.asString(this);
      }
      toJSON() {
        return this.originalValue;
      }
    };
  }
});

// asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/private/rendering.js
var require_rendering = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/private/rendering.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MetricSet = exports2.allMetricsGraphJson = void 0;
    var drop_empty_object_at_the_end_of_an_array_token_1 = require_drop_empty_object_at_the_end_of_an_array_token();
    var env_tokens_1 = require_env_tokens();
    var metric_util_1 = require_metric_util();
    var object_1 = require_object();
    function allMetricsGraphJson(left, right) {
      const mset = new MetricSet();
      mset.addTopLevel("left", ...left);
      mset.addTopLevel("right", ...right);
      return mset.entries.map((entry) => new drop_empty_object_at_the_end_of_an_array_token_1.DropEmptyObjectAtTheEndOfAnArray(metricGraphJson(entry.metric, entry.tag, entry.id)));
    }
    exports2.allMetricsGraphJson = allMetricsGraphJson;
    function metricGraphJson(metric, yAxis, id) {
      const config = metric.toMetricConfig();
      const ret = [];
      const options = __spreadValues({}, config.renderingProperties);
      metric_util_1.dispatchMetric(metric, {
        withStat(stat) {
          ret.push(stat.namespace, stat.metricName);
          for (const dim of stat.dimensions || []) {
            ret.push(dim.name, dim.value);
          }
          if (stat.account) {
            options.accountId = env_tokens_1.accountIfDifferentFromStack(stat.account);
          }
          if (stat.region) {
            options.region = env_tokens_1.regionIfDifferentFromStack(stat.region);
          }
          if (stat.period && stat.period.toSeconds() !== 300) {
            options.period = stat.period.toSeconds();
          }
          if (stat.statistic && stat.statistic !== "Average") {
            options.stat = stat.statistic;
          }
        },
        withExpression(expr) {
          options.expression = expr.expression;
          if (expr.searchAccount) {
            options.accountId = env_tokens_1.accountIfDifferentFromStack(expr.searchAccount);
          }
          if (expr.searchRegion) {
            options.region = env_tokens_1.regionIfDifferentFromStack(expr.searchRegion);
          }
          if (expr.period && expr.period !== 300) {
            options.period = expr.period;
          }
        }
      });
      if (!yAxis) {
        options.visible = false;
      }
      if (yAxis !== "left") {
        options.yAxis = yAxis;
      }
      if (id) {
        options.id = id;
      }
      if (options.visible !== false && options.expression && !options.label) {
        options.label = metric.toString();
      }
      const renderedOpts = object_1.dropUndefined(options);
      if (Object.keys(renderedOpts).length !== 0) {
        ret.push(renderedOpts);
      }
      return ret;
    }
    var MetricSet = class {
      constructor() {
        this.metrics = new Array();
        this.metricById = new Map();
        this.metricByKey = new Map();
      }
      addTopLevel(tag, ...metrics) {
        for (const metric of metrics) {
          this.addOne(metric, tag);
        }
      }
      get entries() {
        return this.metrics;
      }
      addOne(metric, tag, id) {
        const key = metric_util_1.metricKey(metric);
        let existingEntry;
        if (id) {
          existingEntry = this.metricById.get(id);
          if (existingEntry && metric_util_1.metricKey(existingEntry.metric) !== key) {
            throw new Error(`Cannot have two different metrics share the same id ('${id}') in one Alarm or Graph. Rename one of them.`);
          }
        }
        if (!existingEntry) {
          existingEntry = this.metricByKey.get(key);
          if ((existingEntry === null || existingEntry === void 0 ? void 0 : existingEntry.id) && id) {
            existingEntry = void 0;
          }
        }
        let entry;
        if (existingEntry) {
          entry = existingEntry;
        } else {
          entry = { metric };
          this.metrics.push(entry);
          this.metricByKey.set(key, entry);
        }
        if (!entry.id && id) {
          entry.id = id;
          this.metricById.set(id, entry);
        }
        if (!entry.tag && tag) {
          entry.tag = tag;
        }
        const conf = metric.toMetricConfig();
        if (conf.mathExpression) {
          for (const [subId, subMetric] of Object.entries(conf.mathExpression.usingMetrics)) {
            this.addOne(subMetric, void 0, subId);
          }
        }
      }
    };
    exports2.MetricSet = MetricSet;
  }
});

// asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/metric-types.js
var require_metric_types = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/metric-types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Unit = exports2.Statistic = void 0;
    var Statistic;
    (function(Statistic2) {
      Statistic2["SAMPLE_COUNT"] = "SampleCount";
      Statistic2["AVERAGE"] = "Average";
      Statistic2["SUM"] = "Sum";
      Statistic2["MINIMUM"] = "Minimum";
      Statistic2["MAXIMUM"] = "Maximum";
    })(Statistic = exports2.Statistic || (exports2.Statistic = {}));
    var Unit;
    (function(Unit2) {
      Unit2["SECONDS"] = "Seconds";
      Unit2["MICROSECONDS"] = "Microseconds";
      Unit2["MILLISECONDS"] = "Milliseconds";
      Unit2["BYTES"] = "Bytes";
      Unit2["KILOBYTES"] = "Kilobytes";
      Unit2["MEGABYTES"] = "Megabytes";
      Unit2["GIGABYTES"] = "Gigabytes";
      Unit2["TERABYTES"] = "Terabytes";
      Unit2["BITS"] = "Bits";
      Unit2["KILOBITS"] = "Kilobits";
      Unit2["MEGABITS"] = "Megabits";
      Unit2["GIGABITS"] = "Gigabits";
      Unit2["TERABITS"] = "Terabits";
      Unit2["PERCENT"] = "Percent";
      Unit2["COUNT"] = "Count";
      Unit2["BYTES_PER_SECOND"] = "Bytes/Second";
      Unit2["KILOBYTES_PER_SECOND"] = "Kilobytes/Second";
      Unit2["MEGABYTES_PER_SECOND"] = "Megabytes/Second";
      Unit2["GIGABYTES_PER_SECOND"] = "Gigabytes/Second";
      Unit2["TERABYTES_PER_SECOND"] = "Terabytes/Second";
      Unit2["BITS_PER_SECOND"] = "Bits/Second";
      Unit2["KILOBITS_PER_SECOND"] = "Kilobits/Second";
      Unit2["MEGABITS_PER_SECOND"] = "Megabits/Second";
      Unit2["GIGABITS_PER_SECOND"] = "Gigabits/Second";
      Unit2["TERABITS_PER_SECOND"] = "Terabits/Second";
      Unit2["COUNT_PER_SECOND"] = "Count/Second";
      Unit2["NONE"] = "None";
    })(Unit = exports2.Unit || (exports2.Unit = {}));
  }
});

// asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/private/statistic.js
var require_statistic = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/private/statistic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.normalizeStatistic = exports2.parseStatistic = void 0;
    var metric_types_1 = require_metric_types();
    function parseStatistic(stat) {
      const lowerStat = stat.toLowerCase();
      const statMap = {
        average: metric_types_1.Statistic.AVERAGE,
        avg: metric_types_1.Statistic.AVERAGE,
        minimum: metric_types_1.Statistic.MINIMUM,
        min: metric_types_1.Statistic.MINIMUM,
        maximum: metric_types_1.Statistic.MAXIMUM,
        max: metric_types_1.Statistic.MAXIMUM,
        samplecount: metric_types_1.Statistic.SAMPLE_COUNT,
        n: metric_types_1.Statistic.SAMPLE_COUNT,
        sum: metric_types_1.Statistic.SUM
      };
      if (lowerStat in statMap) {
        return {
          type: "simple",
          statistic: statMap[lowerStat]
        };
      }
      const re = /^p([\d.]+)$/;
      const m = re.exec(lowerStat);
      if (m) {
        return {
          type: "percentile",
          percentile: parseFloat(m[1])
        };
      }
      return {
        type: "generic",
        statistic: stat
      };
    }
    exports2.parseStatistic = parseStatistic;
    function normalizeStatistic(stat) {
      const parsed = parseStatistic(stat);
      if (parsed.type === "simple" || parsed.type === "generic") {
        return parsed.statistic;
      } else {
        return stat.toLowerCase();
      }
    }
    exports2.normalizeStatistic = normalizeStatistic;
  }
});

// asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/alarm.js
var require_alarm = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/alarm.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Alarm = exports2.TreatMissingData = exports2.ComparisonOperator = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var alarm_base_1 = require_alarm_base();
    var cloudwatch_generated_1 = require_cloudwatch_generated();
    var metric_util_1 = require_metric_util();
    var object_1 = require_object();
    var rendering_1 = require_rendering();
    var statistic_1 = require_statistic();
    var ComparisonOperator;
    (function(ComparisonOperator2) {
      ComparisonOperator2["GREATER_THAN_OR_EQUAL_TO_THRESHOLD"] = "GreaterThanOrEqualToThreshold";
      ComparisonOperator2["GREATER_THAN_THRESHOLD"] = "GreaterThanThreshold";
      ComparisonOperator2["LESS_THAN_THRESHOLD"] = "LessThanThreshold";
      ComparisonOperator2["LESS_THAN_OR_EQUAL_TO_THRESHOLD"] = "LessThanOrEqualToThreshold";
      ComparisonOperator2["LESS_THAN_LOWER_OR_GREATER_THAN_UPPER_THRESHOLD"] = "LessThanLowerOrGreaterThanUpperThreshold";
      ComparisonOperator2["GREATER_THAN_UPPER_THRESHOLD"] = "GreaterThanUpperThreshold";
      ComparisonOperator2["LESS_THAN_LOWER_THRESHOLD"] = "LessThanLowerThreshold";
    })(ComparisonOperator = exports2.ComparisonOperator || (exports2.ComparisonOperator = {}));
    var OPERATOR_SYMBOLS = {
      GreaterThanOrEqualToThreshold: ">=",
      GreaterThanThreshold: ">",
      LessThanThreshold: "<",
      LessThanOrEqualToThreshold: "<="
    };
    var TreatMissingData;
    (function(TreatMissingData2) {
      TreatMissingData2["BREACHING"] = "breaching";
      TreatMissingData2["NOT_BREACHING"] = "notBreaching";
      TreatMissingData2["IGNORE"] = "ignore";
      TreatMissingData2["MISSING"] = "missing";
    })(TreatMissingData = exports2.TreatMissingData || (exports2.TreatMissingData = {}));
    var Alarm = class extends alarm_base_1.AlarmBase {
      constructor(scope, id, props) {
        super(scope, id, {
          physicalName: props.alarmName
        });
        const comparisonOperator = props.comparisonOperator || ComparisonOperator.GREATER_THAN_OR_EQUAL_TO_THRESHOLD;
        const metricProps = this.renderMetric(props.metric);
        if (props.period) {
          metricProps.period = props.period.toSeconds();
        }
        if (props.statistic) {
          Object.assign(metricProps, {
            statistic: renderIfSimpleStatistic(props.statistic),
            extendedStatistic: renderIfExtendedStatistic(props.statistic)
          });
        }
        const alarm = new cloudwatch_generated_1.CfnAlarm(this, "Resource", __spreadValues({
          alarmDescription: props.alarmDescription,
          alarmName: this.physicalName,
          comparisonOperator,
          threshold: props.threshold,
          datapointsToAlarm: props.datapointsToAlarm,
          evaluateLowSampleCountPercentile: props.evaluateLowSampleCountPercentile,
          evaluationPeriods: props.evaluationPeriods,
          treatMissingData: props.treatMissingData,
          actionsEnabled: props.actionsEnabled,
          alarmActions: core_1.Lazy.list({ produce: () => this.alarmActionArns }),
          insufficientDataActions: core_1.Lazy.list({ produce: () => this.insufficientDataActionArns }),
          okActions: core_1.Lazy.list({ produce: () => this.okActionArns })
        }, metricProps));
        this.alarmArn = this.getResourceArnAttribute(alarm.attrArn, {
          service: "cloudwatch",
          resource: "alarm",
          resourceName: this.physicalName,
          sep: ":"
        });
        this.alarmName = this.getResourceNameAttribute(alarm.ref);
        this.metric = props.metric;
        const datapoints = props.datapointsToAlarm || props.evaluationPeriods;
        this.annotation = {
          label: `${this.metric} ${OPERATOR_SYMBOLS[comparisonOperator]} ${props.threshold} for ${datapoints} datapoints within ${describePeriod(props.evaluationPeriods * metric_util_1.metricPeriod(props.metric).toSeconds())}`,
          value: props.threshold
        };
      }
      static fromAlarmArn(scope, id, alarmArn) {
        class Import extends alarm_base_1.AlarmBase {
          constructor() {
            super(...arguments);
            this.alarmArn = alarmArn;
            this.alarmName = core_1.Stack.of(scope).parseArn(alarmArn, ":").resourceName;
          }
        }
        return new Import(scope, id);
      }
      toAnnotation() {
        return this.annotation;
      }
      addAlarmAction(...actions) {
        if (this.alarmActionArns === void 0) {
          this.alarmActionArns = [];
        }
        this.alarmActionArns.push(...actions.map((a) => this.validateActionArn(a.bind(this, this).alarmActionArn)));
      }
      validateActionArn(actionArn) {
        var _b, _c, _d;
        const ec2ActionsRegexp = /arn:aws:automate:[a-z|\d|-]+:ec2:[a-z]+/;
        if (ec2ActionsRegexp.test(actionArn)) {
          const metricConfig = this.metric.toMetricConfig();
          if (((_c = (_b = metricConfig.metricStat) === null || _b === void 0 ? void 0 : _b.dimensions) === null || _c === void 0 ? void 0 : _c.length) != 1 || ((_d = metricConfig.metricStat) === null || _d === void 0 ? void 0 : _d.dimensions[0].name) != "InstanceId") {
            throw new Error(`EC2 alarm actions requires an EC2 Per-Instance Metric. (${JSON.stringify(metricConfig)} does not have an 'InstanceId' dimension)`);
          }
        }
        return actionArn;
      }
      renderMetric(metric) {
        const self = this;
        return metric_util_1.dispatchMetric(metric, {
          withStat(stat, conf) {
            var _b, _c, _d;
            self.validateMetricStat(stat, metric);
            const canRenderAsLegacyMetric = ((_b = conf.renderingProperties) === null || _b === void 0 ? void 0 : _b.label) == void 0 && !self.requiresAccountId(stat);
            if (canRenderAsLegacyMetric) {
              return object_1.dropUndefined({
                dimensions: stat.dimensions,
                namespace: stat.namespace,
                metricName: stat.metricName,
                period: (_c = stat.period) === null || _c === void 0 ? void 0 : _c.toSeconds(),
                statistic: renderIfSimpleStatistic(stat.statistic),
                extendedStatistic: renderIfExtendedStatistic(stat.statistic),
                unit: stat.unitFilter
              });
            }
            return {
              metrics: [
                {
                  metricStat: {
                    metric: {
                      metricName: stat.metricName,
                      namespace: stat.namespace,
                      dimensions: stat.dimensions
                    },
                    period: stat.period.toSeconds(),
                    stat: stat.statistic,
                    unit: stat.unitFilter
                  },
                  id: "m1",
                  accountId: self.requiresAccountId(stat) ? stat.account : void 0,
                  label: (_d = conf.renderingProperties) === null || _d === void 0 ? void 0 : _d.label,
                  returnData: true
                }
              ]
            };
          },
          withExpression() {
            const mset = new rendering_1.MetricSet();
            mset.addTopLevel(true, metric);
            let eid = 0;
            function uniqueMetricId() {
              return `expr_${++eid}`;
            }
            return {
              metrics: mset.entries.map((entry) => metric_util_1.dispatchMetric(entry.metric, {
                withStat(stat, conf) {
                  var _b;
                  self.validateMetricStat(stat, entry.metric);
                  return {
                    metricStat: {
                      metric: {
                        metricName: stat.metricName,
                        namespace: stat.namespace,
                        dimensions: stat.dimensions
                      },
                      period: stat.period.toSeconds(),
                      stat: stat.statistic,
                      unit: stat.unitFilter
                    },
                    id: entry.id || uniqueMetricId(),
                    accountId: self.requiresAccountId(stat) ? stat.account : void 0,
                    label: (_b = conf.renderingProperties) === null || _b === void 0 ? void 0 : _b.label,
                    returnData: entry.tag ? void 0 : false
                  };
                },
                withExpression(expr, conf) {
                  var _b;
                  const hasSubmetrics = mathExprHasSubmetrics(expr);
                  if (hasSubmetrics) {
                    assertSubmetricsCount(expr);
                  }
                  self.validateMetricExpression(expr);
                  return {
                    expression: expr.expression,
                    id: entry.id || uniqueMetricId(),
                    label: (_b = conf.renderingProperties) === null || _b === void 0 ? void 0 : _b.label,
                    period: hasSubmetrics ? void 0 : expr.period,
                    returnData: entry.tag ? void 0 : false
                  };
                }
              }))
            };
          }
        });
      }
      validateMetricStat(stat, metric) {
        const stack = core_1.Stack.of(this);
        if (definitelyDifferent(stat.region, stack.region)) {
          throw new Error(`Cannot create an Alarm in region '${stack.region}' based on metric '${metric}' in '${stat.region}'`);
        }
      }
      validateMetricExpression(expr) {
        if (expr.searchAccount !== void 0 || expr.searchRegion !== void 0) {
          throw new Error("Cannot create an Alarm based on a MathExpression which specifies a searchAccount or searchRegion");
        }
      }
      requiresAccountId(stat) {
        const stackAccount = core_1.Stack.of(this).account;
        if (stat.account === void 0) {
          return false;
        }
        if (core_1.Token.isUnresolved(stackAccount)) {
          return true;
        }
        if (stackAccount === stat.account) {
          return false;
        }
        return true;
      }
    };
    exports2.Alarm = Alarm;
    _a = JSII_RTTI_SYMBOL_1;
    Alarm[_a] = { fqn: "@aws-cdk/aws-cloudwatch.Alarm", version: "1.132.0" };
    function definitelyDifferent(x, y) {
      return x && !core_1.Token.isUnresolved(y) && x !== y;
    }
    function describePeriod(seconds) {
      if (seconds === 60) {
        return "1 minute";
      }
      if (seconds === 1) {
        return "1 second";
      }
      if (seconds > 60) {
        return seconds / 60 + " minutes";
      }
      return seconds + " seconds";
    }
    function renderIfSimpleStatistic(statistic) {
      if (statistic === void 0) {
        return void 0;
      }
      const parsed = statistic_1.parseStatistic(statistic);
      if (parsed.type === "simple") {
        return parsed.statistic;
      }
      return void 0;
    }
    function renderIfExtendedStatistic(statistic) {
      if (statistic === void 0) {
        return void 0;
      }
      const parsed = statistic_1.parseStatistic(statistic);
      if (parsed.type === "percentile") {
        return statistic.toLowerCase();
      } else if (parsed.type === "generic") {
        return statistic;
      }
      return void 0;
    }
    function mathExprHasSubmetrics(expr) {
      return Object.keys(expr.usingMetrics).length > 0;
    }
    function assertSubmetricsCount(expr) {
      if (Object.keys(expr.usingMetrics).length > 10) {
        throw new Error("Alarms on math expressions cannot contain more than 10 individual metrics");
      }
      ;
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/alarm-action.js
var require_alarm_action = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/alarm-action.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/alarm-rule.js
var require_alarm_rule = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/alarm-rule.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AlarmRule = exports2.AlarmState = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var AlarmState;
    (function(AlarmState2) {
      AlarmState2["ALARM"] = "ALARM";
      AlarmState2["OK"] = "OK";
      AlarmState2["INSUFFICIENT_DATA"] = "INSUFFICIENT_DATA";
    })(AlarmState = exports2.AlarmState || (exports2.AlarmState = {}));
    var Operator;
    (function(Operator2) {
      Operator2["AND"] = "AND";
      Operator2["OR"] = "OR";
      Operator2["NOT"] = "NOT";
    })(Operator || (Operator = {}));
    var AlarmRule = class {
      static allOf(...operands) {
        return this.concat(Operator.AND, ...operands);
      }
      static anyOf(...operands) {
        return this.concat(Operator.OR, ...operands);
      }
      static not(operand) {
        return new class {
          renderAlarmRule() {
            return `(NOT (${operand.renderAlarmRule()}))`;
          }
        }();
      }
      static fromBoolean(value) {
        return new class {
          renderAlarmRule() {
            return `${String(value).toUpperCase()}`;
          }
        }();
      }
      static fromAlarm(alarm, alarmState) {
        return new class {
          renderAlarmRule() {
            return `${alarmState}("${alarm.alarmArn}")`;
          }
        }();
      }
      static fromString(alarmRule) {
        return new class {
          renderAlarmRule() {
            return alarmRule;
          }
        }();
      }
      static concat(operator, ...operands) {
        return new class {
          renderAlarmRule() {
            const expression = operands.map((operand) => `${operand.renderAlarmRule()}`).join(` ${operator} `);
            return `(${expression})`;
          }
        }();
      }
    };
    exports2.AlarmRule = AlarmRule;
    _a = JSII_RTTI_SYMBOL_1;
    AlarmRule[_a] = { fqn: "@aws-cdk/aws-cloudwatch.AlarmRule", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/composite-alarm.js
var require_composite_alarm = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/composite-alarm.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CompositeAlarm = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var alarm_base_1 = require_alarm_base();
    var cloudwatch_generated_1 = require_cloudwatch_generated();
    var CompositeAlarm = class extends alarm_base_1.AlarmBase {
      constructor(scope, id, props) {
        var _b;
        super(scope, id, {
          physicalName: (_b = props.compositeAlarmName) !== null && _b !== void 0 ? _b : core_1.Lazy.string({ produce: () => this.generateUniqueId() })
        });
        if (props.alarmRule.renderAlarmRule().length > 10240) {
          throw new Error("Alarm Rule expression cannot be greater than 10240 characters, please reduce the conditions in the Alarm Rule");
        }
        this.alarmRule = props.alarmRule.renderAlarmRule();
        const alarm = new cloudwatch_generated_1.CfnCompositeAlarm(this, "Resource", {
          alarmName: this.physicalName,
          alarmRule: this.alarmRule,
          alarmDescription: props.alarmDescription,
          actionsEnabled: props.actionsEnabled,
          alarmActions: core_1.Lazy.list({ produce: () => this.alarmActionArns }),
          insufficientDataActions: core_1.Lazy.list({ produce: () => this.insufficientDataActionArns }),
          okActions: core_1.Lazy.list({ produce: () => this.okActionArns })
        });
        this.alarmName = this.getResourceNameAttribute(alarm.ref);
        this.alarmArn = this.getResourceArnAttribute(alarm.attrArn, {
          service: "cloudwatch",
          resource: "alarm",
          resourceName: this.physicalName,
          sep: ":"
        });
      }
      static fromCompositeAlarmName(scope, id, compositeAlarmName) {
        const stack = core_1.Stack.of(scope);
        return this.fromCompositeAlarmArn(scope, id, stack.formatArn({
          service: "cloudwatch",
          resource: "alarm",
          resourceName: compositeAlarmName
        }));
      }
      static fromCompositeAlarmArn(scope, id, compositeAlarmArn) {
        class Import extends alarm_base_1.AlarmBase {
          constructor() {
            super(...arguments);
            this.alarmArn = compositeAlarmArn;
            this.alarmName = core_1.Stack.of(scope).parseArn(compositeAlarmArn).resourceName;
          }
        }
        return new Import(scope, id);
      }
      generateUniqueId() {
        const name = core_1.Names.uniqueId(this);
        if (name.length > 240) {
          return name.substring(0, 120) + name.substring(name.length - 120);
        }
        return name;
      }
    };
    exports2.CompositeAlarm = CompositeAlarm;
    _a = JSII_RTTI_SYMBOL_1;
    CompositeAlarm[_a] = { fqn: "@aws-cdk/aws-cloudwatch.CompositeAlarm", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/widget.js
var require_widget = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/widget.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ConcreteWidget = exports2.GRID_WIDTH = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    exports2.GRID_WIDTH = 24;
    var ConcreteWidget = class {
      constructor(width, height) {
        this.width = width;
        this.height = height;
        if (this.width > exports2.GRID_WIDTH) {
          throw new Error(`Widget is too wide, max ${exports2.GRID_WIDTH} units allowed`);
        }
      }
      position(x, y) {
        this.x = x;
        this.y = y;
      }
    };
    exports2.ConcreteWidget = ConcreteWidget;
    _a = JSII_RTTI_SYMBOL_1;
    ConcreteWidget[_a] = { fqn: "@aws-cdk/aws-cloudwatch.ConcreteWidget", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/layout.js
var require_layout = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/layout.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Spacer = exports2.Column = exports2.Row = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var widget_1 = require_widget();
    var Row = class {
      constructor(...widgets) {
        this.offsets = [];
        this.widgets = widgets;
        this.width = 0;
        this.height = 0;
        let x = 0;
        let y = 0;
        for (const widget of widgets) {
          if (x + widget.width > widget_1.GRID_WIDTH) {
            y = this.height;
            x = 0;
          }
          this.offsets.push({ x, y });
          this.width = Math.max(this.width, x + widget.width);
          this.height = Math.max(this.height, y + widget.height);
          x += widget.width;
        }
      }
      position(x, y) {
        for (let i = 0; i < this.widgets.length; i++) {
          this.widgets[i].position(x + this.offsets[i].x, y + this.offsets[i].y);
        }
      }
      toJson() {
        const ret = [];
        for (const widget of this.widgets) {
          ret.push(...widget.toJson());
        }
        return ret;
      }
    };
    exports2.Row = Row;
    _a = JSII_RTTI_SYMBOL_1;
    Row[_a] = { fqn: "@aws-cdk/aws-cloudwatch.Row", version: "1.132.0" };
    var Column = class {
      constructor(...widgets) {
        this.widgets = widgets;
        this.width = Math.max(...this.widgets.map((w) => w.width));
        this.height = sum(...this.widgets.map((w) => w.height));
      }
      position(x, y) {
        let widgetY = y;
        for (const widget of this.widgets) {
          widget.position(x, widgetY);
          widgetY += widget.height;
        }
      }
      toJson() {
        const ret = [];
        for (const widget of this.widgets) {
          ret.push(...widget.toJson());
        }
        return ret;
      }
    };
    exports2.Column = Column;
    _b = JSII_RTTI_SYMBOL_1;
    Column[_b] = { fqn: "@aws-cdk/aws-cloudwatch.Column", version: "1.132.0" };
    var Spacer = class {
      constructor(props = {}) {
        this.width = props.width || 1;
        this.height = props.height || 1;
      }
      position(_x, _y) {
      }
      toJson() {
        return [];
      }
    };
    exports2.Spacer = Spacer;
    _c = JSII_RTTI_SYMBOL_1;
    Spacer[_c] = { fqn: "@aws-cdk/aws-cloudwatch.Spacer", version: "1.132.0" };
    function sum(...xs) {
      let ret = 0;
      for (const x of xs) {
        ret += x;
      }
      return ret;
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/dashboard.js
var require_dashboard = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/dashboard.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Dashboard = exports2.PeriodOverride = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var cloudwatch_generated_1 = require_cloudwatch_generated();
    var layout_1 = require_layout();
    var PeriodOverride;
    (function(PeriodOverride2) {
      PeriodOverride2["AUTO"] = "auto";
      PeriodOverride2["INHERIT"] = "inherit";
    })(PeriodOverride = exports2.PeriodOverride || (exports2.PeriodOverride = {}));
    var Dashboard = class extends core_1.Resource {
      constructor(scope, id, props = {}) {
        super(scope, id, {
          physicalName: props.dashboardName
        });
        this.rows = [];
        {
          const { dashboardName } = props;
          if (dashboardName && !core_1.Token.isUnresolved(dashboardName) && !dashboardName.match(/^[\w-]+$/)) {
            throw new Error([
              `The value ${dashboardName} for field dashboardName contains invalid characters.`,
              "It can only contain alphanumerics, dash (-) and underscore (_)."
            ].join(" "));
          }
        }
        new cloudwatch_generated_1.CfnDashboard(this, "Resource", {
          dashboardName: this.physicalName,
          dashboardBody: core_1.Lazy.string({
            produce: () => {
              const column = new layout_1.Column(...this.rows);
              column.position(0, 0);
              return core_1.Stack.of(this).toJsonString({
                start: props.start,
                end: props.end,
                periodOverride: props.periodOverride,
                widgets: column.toJson()
              });
            }
          })
        });
        (props.widgets || []).forEach((row) => {
          this.addWidgets(...row);
        });
      }
      addWidgets(...widgets) {
        if (widgets.length === 0) {
          return;
        }
        const w = widgets.length > 1 ? new layout_1.Row(...widgets) : widgets[0];
        this.rows.push(w);
      }
    };
    exports2.Dashboard = Dashboard;
    _a = JSII_RTTI_SYMBOL_1;
    Dashboard[_a] = { fqn: "@aws-cdk/aws-cloudwatch.Dashboard", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/graph.js
var require_graph = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/graph.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    var _d;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LegendPosition = exports2.Color = exports2.Shading = exports2.SingleValueWidget = exports2.GraphWidget = exports2.GraphWidgetView = exports2.AlarmWidget = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var rendering_1 = require_rendering();
    var widget_1 = require_widget();
    var AlarmWidget = class extends widget_1.ConcreteWidget {
      constructor(props) {
        super(props.width || 6, props.height || 6);
        this.props = props;
      }
      toJson() {
        var _e;
        return [{
          type: "metric",
          width: this.width,
          height: this.height,
          x: this.x,
          y: this.y,
          properties: {
            view: "timeSeries",
            title: this.props.title,
            region: this.props.region || cdk.Aws.REGION,
            annotations: {
              alarms: [this.props.alarm.alarmArn]
            },
            yAxis: {
              left: (_e = this.props.leftYAxis) !== null && _e !== void 0 ? _e : void 0
            }
          }
        }];
      }
    };
    exports2.AlarmWidget = AlarmWidget;
    _a = JSII_RTTI_SYMBOL_1;
    AlarmWidget[_a] = { fqn: "@aws-cdk/aws-cloudwatch.AlarmWidget", version: "1.132.0" };
    var GraphWidgetView;
    (function(GraphWidgetView2) {
      GraphWidgetView2["TIME_SERIES"] = "timeSeries";
      GraphWidgetView2["BAR"] = "bar";
      GraphWidgetView2["PIE"] = "pie";
    })(GraphWidgetView = exports2.GraphWidgetView || (exports2.GraphWidgetView = {}));
    var GraphWidget = class extends widget_1.ConcreteWidget {
      constructor(props) {
        var _e, _f;
        super(props.width || 6, props.height || 6);
        this.props = props;
        this.leftMetrics = (_e = props.left) !== null && _e !== void 0 ? _e : [];
        this.rightMetrics = (_f = props.right) !== null && _f !== void 0 ? _f : [];
      }
      addLeftMetric(metric) {
        this.leftMetrics.push(metric);
      }
      addRightMetric(metric) {
        this.rightMetrics.push(metric);
      }
      toJson() {
        var _e, _f, _g, _h;
        const horizontalAnnotations = [
          ...(this.props.leftAnnotations || []).map(mapAnnotation("left")),
          ...(this.props.rightAnnotations || []).map(mapAnnotation("right"))
        ];
        const metrics = rendering_1.allMetricsGraphJson(this.leftMetrics, this.rightMetrics);
        return [{
          type: "metric",
          width: this.width,
          height: this.height,
          x: this.x,
          y: this.y,
          properties: {
            view: (_e = this.props.view) !== null && _e !== void 0 ? _e : GraphWidgetView.TIME_SERIES,
            title: this.props.title,
            region: this.props.region || cdk.Aws.REGION,
            stacked: this.props.stacked,
            metrics: metrics.length > 0 ? metrics : void 0,
            annotations: horizontalAnnotations.length > 0 ? { horizontal: horizontalAnnotations } : void 0,
            yAxis: {
              left: (_f = this.props.leftYAxis) !== null && _f !== void 0 ? _f : void 0,
              right: (_g = this.props.rightYAxis) !== null && _g !== void 0 ? _g : void 0
            },
            legend: this.props.legendPosition !== void 0 ? { position: this.props.legendPosition } : void 0,
            liveData: this.props.liveData,
            setPeriodToTimeRange: this.props.setPeriodToTimeRange,
            period: (_h = this.props.period) === null || _h === void 0 ? void 0 : _h.toSeconds(),
            stat: this.props.statistic
          }
        }];
      }
    };
    exports2.GraphWidget = GraphWidget;
    _b = JSII_RTTI_SYMBOL_1;
    GraphWidget[_b] = { fqn: "@aws-cdk/aws-cloudwatch.GraphWidget", version: "1.132.0" };
    var SingleValueWidget = class extends widget_1.ConcreteWidget {
      constructor(props) {
        super(props.width || 6, props.height || 3);
        this.props = props;
      }
      toJson() {
        return [{
          type: "metric",
          width: this.width,
          height: this.height,
          x: this.x,
          y: this.y,
          properties: {
            view: "singleValue",
            title: this.props.title,
            region: this.props.region || cdk.Aws.REGION,
            metrics: rendering_1.allMetricsGraphJson(this.props.metrics, []),
            setPeriodToTimeRange: this.props.setPeriodToTimeRange,
            singleValueFullPrecision: this.props.fullPrecision
          }
        }];
      }
    };
    exports2.SingleValueWidget = SingleValueWidget;
    _c = JSII_RTTI_SYMBOL_1;
    SingleValueWidget[_c] = { fqn: "@aws-cdk/aws-cloudwatch.SingleValueWidget", version: "1.132.0" };
    var Shading;
    (function(Shading2) {
      Shading2["NONE"] = "none";
      Shading2["ABOVE"] = "above";
      Shading2["BELOW"] = "below";
    })(Shading = exports2.Shading || (exports2.Shading = {}));
    var Color = class {
    };
    exports2.Color = Color;
    _d = JSII_RTTI_SYMBOL_1;
    Color[_d] = { fqn: "@aws-cdk/aws-cloudwatch.Color", version: "1.132.0" };
    Color.BLUE = "#1f77b4";
    Color.BROWN = "#8c564b";
    Color.GREEN = "#2ca02c";
    Color.GREY = "#7f7f7f";
    Color.ORANGE = "#ff7f0e";
    Color.PINK = "#e377c2";
    Color.PURPLE = "#9467bd";
    Color.RED = "#d62728";
    var LegendPosition;
    (function(LegendPosition2) {
      LegendPosition2["BOTTOM"] = "bottom";
      LegendPosition2["RIGHT"] = "right";
      LegendPosition2["HIDDEN"] = "hidden";
    })(LegendPosition = exports2.LegendPosition || (exports2.LegendPosition = {}));
    function mapAnnotation(yAxis) {
      return (a) => {
        return __spreadProps(__spreadValues({}, a), { yAxis });
      };
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-iam/lib/iam.generated.js
var require_iam_generated = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-iam/lib/iam.generated.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    var _d;
    var _e;
    var _f;
    var _g;
    var _h;
    var _j;
    var _k;
    var _l;
    var _m;
    var _o;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnVirtualMFADevice = exports2.CfnUserToGroupAddition = exports2.CfnUser = exports2.CfnServiceLinkedRole = exports2.CfnServerCertificate = exports2.CfnSAMLProvider = exports2.CfnRole = exports2.CfnPolicy = exports2.CfnOIDCProvider = exports2.CfnManagedPolicy = exports2.CfnInstanceProfile = exports2.CfnGroup = exports2.CfnAccessKey = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var cfn_parse = require_cfn_parse();
    function CfnAccessKeyPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("serial", cdk.validateNumber)(properties.serial));
      errors.collect(cdk.propertyValidator("status", cdk.validateString)(properties.status));
      errors.collect(cdk.propertyValidator("userName", cdk.requiredValidator)(properties.userName));
      errors.collect(cdk.propertyValidator("userName", cdk.validateString)(properties.userName));
      return errors.wrap('supplied properties not correct for "CfnAccessKeyProps"');
    }
    function cfnAccessKeyPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnAccessKeyPropsValidator(properties).assertSuccess();
      return {
        UserName: cdk.stringToCloudFormation(properties.userName),
        Serial: cdk.numberToCloudFormation(properties.serial),
        Status: cdk.stringToCloudFormation(properties.status)
      };
    }
    function CfnAccessKeyPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("userName", "UserName", cfn_parse.FromCloudFormation.getString(properties.UserName));
      ret.addPropertyResult("serial", "Serial", properties.Serial != null ? cfn_parse.FromCloudFormation.getNumber(properties.Serial) : void 0);
      ret.addPropertyResult("status", "Status", properties.Status != null ? cfn_parse.FromCloudFormation.getString(properties.Status) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnAccessKey = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnAccessKey.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "userName", this);
        this.attrSecretAccessKey = cdk.Token.asString(this.getAtt("SecretAccessKey"));
        this.userName = props.userName;
        this.serial = props.serial;
        this.status = props.status;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnAccessKeyPropsFromCloudFormation(resourceProperties);
        const ret = new CfnAccessKey(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnAccessKey.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          userName: this.userName,
          serial: this.serial,
          status: this.status
        };
      }
      renderProperties(props) {
        return cfnAccessKeyPropsToCloudFormation(props);
      }
    };
    exports2.CfnAccessKey = CfnAccessKey;
    _a = JSII_RTTI_SYMBOL_1;
    CfnAccessKey[_a] = { fqn: "@aws-cdk/aws-iam.CfnAccessKey", version: "1.132.0" };
    CfnAccessKey.CFN_RESOURCE_TYPE_NAME = "AWS::IAM::AccessKey";
    function CfnGroupPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("groupName", cdk.validateString)(properties.groupName));
      errors.collect(cdk.propertyValidator("managedPolicyArns", cdk.listValidator(cdk.validateString))(properties.managedPolicyArns));
      errors.collect(cdk.propertyValidator("path", cdk.validateString)(properties.path));
      errors.collect(cdk.propertyValidator("policies", cdk.listValidator(CfnGroup_PolicyPropertyValidator))(properties.policies));
      return errors.wrap('supplied properties not correct for "CfnGroupProps"');
    }
    function cfnGroupPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnGroupPropsValidator(properties).assertSuccess();
      return {
        GroupName: cdk.stringToCloudFormation(properties.groupName),
        ManagedPolicyArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.managedPolicyArns),
        Path: cdk.stringToCloudFormation(properties.path),
        Policies: cdk.listMapper(cfnGroupPolicyPropertyToCloudFormation)(properties.policies)
      };
    }
    function CfnGroupPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("groupName", "GroupName", properties.GroupName != null ? cfn_parse.FromCloudFormation.getString(properties.GroupName) : void 0);
      ret.addPropertyResult("managedPolicyArns", "ManagedPolicyArns", properties.ManagedPolicyArns != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ManagedPolicyArns) : void 0);
      ret.addPropertyResult("path", "Path", properties.Path != null ? cfn_parse.FromCloudFormation.getString(properties.Path) : void 0);
      ret.addPropertyResult("policies", "Policies", properties.Policies != null ? cfn_parse.FromCloudFormation.getArray(CfnGroupPolicyPropertyFromCloudFormation)(properties.Policies) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnGroup = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnGroup.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.groupName = props.groupName;
        this.managedPolicyArns = props.managedPolicyArns;
        this.path = props.path;
        this.policies = props.policies;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnGroupPropsFromCloudFormation(resourceProperties);
        const ret = new CfnGroup(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnGroup.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          groupName: this.groupName,
          managedPolicyArns: this.managedPolicyArns,
          path: this.path,
          policies: this.policies
        };
      }
      renderProperties(props) {
        return cfnGroupPropsToCloudFormation(props);
      }
    };
    exports2.CfnGroup = CfnGroup;
    _b = JSII_RTTI_SYMBOL_1;
    CfnGroup[_b] = { fqn: "@aws-cdk/aws-iam.CfnGroup", version: "1.132.0" };
    CfnGroup.CFN_RESOURCE_TYPE_NAME = "AWS::IAM::Group";
    function CfnGroup_PolicyPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("policyDocument", cdk.requiredValidator)(properties.policyDocument));
      errors.collect(cdk.propertyValidator("policyDocument", cdk.validateObject)(properties.policyDocument));
      errors.collect(cdk.propertyValidator("policyName", cdk.requiredValidator)(properties.policyName));
      errors.collect(cdk.propertyValidator("policyName", cdk.validateString)(properties.policyName));
      return errors.wrap('supplied properties not correct for "PolicyProperty"');
    }
    function cfnGroupPolicyPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnGroup_PolicyPropertyValidator(properties).assertSuccess();
      return {
        PolicyDocument: cdk.objectToCloudFormation(properties.policyDocument),
        PolicyName: cdk.stringToCloudFormation(properties.policyName)
      };
    }
    function CfnGroupPolicyPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("policyDocument", "PolicyDocument", cfn_parse.FromCloudFormation.getAny(properties.PolicyDocument));
      ret.addPropertyResult("policyName", "PolicyName", cfn_parse.FromCloudFormation.getString(properties.PolicyName));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnInstanceProfilePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("instanceProfileName", cdk.validateString)(properties.instanceProfileName));
      errors.collect(cdk.propertyValidator("path", cdk.validateString)(properties.path));
      errors.collect(cdk.propertyValidator("roles", cdk.requiredValidator)(properties.roles));
      errors.collect(cdk.propertyValidator("roles", cdk.listValidator(cdk.validateString))(properties.roles));
      return errors.wrap('supplied properties not correct for "CfnInstanceProfileProps"');
    }
    function cfnInstanceProfilePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnInstanceProfilePropsValidator(properties).assertSuccess();
      return {
        Roles: cdk.listMapper(cdk.stringToCloudFormation)(properties.roles),
        InstanceProfileName: cdk.stringToCloudFormation(properties.instanceProfileName),
        Path: cdk.stringToCloudFormation(properties.path)
      };
    }
    function CfnInstanceProfilePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("roles", "Roles", cfn_parse.FromCloudFormation.getStringArray(properties.Roles));
      ret.addPropertyResult("instanceProfileName", "InstanceProfileName", properties.InstanceProfileName != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceProfileName) : void 0);
      ret.addPropertyResult("path", "Path", properties.Path != null ? cfn_parse.FromCloudFormation.getString(properties.Path) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnInstanceProfile = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnInstanceProfile.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "roles", this);
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.roles = props.roles;
        this.instanceProfileName = props.instanceProfileName;
        this.path = props.path;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnInstanceProfilePropsFromCloudFormation(resourceProperties);
        const ret = new CfnInstanceProfile(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnInstanceProfile.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          roles: this.roles,
          instanceProfileName: this.instanceProfileName,
          path: this.path
        };
      }
      renderProperties(props) {
        return cfnInstanceProfilePropsToCloudFormation(props);
      }
    };
    exports2.CfnInstanceProfile = CfnInstanceProfile;
    _c = JSII_RTTI_SYMBOL_1;
    CfnInstanceProfile[_c] = { fqn: "@aws-cdk/aws-iam.CfnInstanceProfile", version: "1.132.0" };
    CfnInstanceProfile.CFN_RESOURCE_TYPE_NAME = "AWS::IAM::InstanceProfile";
    function CfnManagedPolicyPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("groups", cdk.listValidator(cdk.validateString))(properties.groups));
      errors.collect(cdk.propertyValidator("managedPolicyName", cdk.validateString)(properties.managedPolicyName));
      errors.collect(cdk.propertyValidator("path", cdk.validateString)(properties.path));
      errors.collect(cdk.propertyValidator("policyDocument", cdk.requiredValidator)(properties.policyDocument));
      errors.collect(cdk.propertyValidator("policyDocument", cdk.validateObject)(properties.policyDocument));
      errors.collect(cdk.propertyValidator("roles", cdk.listValidator(cdk.validateString))(properties.roles));
      errors.collect(cdk.propertyValidator("users", cdk.listValidator(cdk.validateString))(properties.users));
      return errors.wrap('supplied properties not correct for "CfnManagedPolicyProps"');
    }
    function cfnManagedPolicyPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnManagedPolicyPropsValidator(properties).assertSuccess();
      return {
        PolicyDocument: cdk.objectToCloudFormation(properties.policyDocument),
        Description: cdk.stringToCloudFormation(properties.description),
        Groups: cdk.listMapper(cdk.stringToCloudFormation)(properties.groups),
        ManagedPolicyName: cdk.stringToCloudFormation(properties.managedPolicyName),
        Path: cdk.stringToCloudFormation(properties.path),
        Roles: cdk.listMapper(cdk.stringToCloudFormation)(properties.roles),
        Users: cdk.listMapper(cdk.stringToCloudFormation)(properties.users)
      };
    }
    function CfnManagedPolicyPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("policyDocument", "PolicyDocument", cfn_parse.FromCloudFormation.getAny(properties.PolicyDocument));
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("groups", "Groups", properties.Groups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Groups) : void 0);
      ret.addPropertyResult("managedPolicyName", "ManagedPolicyName", properties.ManagedPolicyName != null ? cfn_parse.FromCloudFormation.getString(properties.ManagedPolicyName) : void 0);
      ret.addPropertyResult("path", "Path", properties.Path != null ? cfn_parse.FromCloudFormation.getString(properties.Path) : void 0);
      ret.addPropertyResult("roles", "Roles", properties.Roles != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Roles) : void 0);
      ret.addPropertyResult("users", "Users", properties.Users != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Users) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnManagedPolicy = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnManagedPolicy.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "policyDocument", this);
        this.policyDocument = props.policyDocument;
        this.description = props.description;
        this.groups = props.groups;
        this.managedPolicyName = props.managedPolicyName;
        this.path = props.path;
        this.roles = props.roles;
        this.users = props.users;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnManagedPolicyPropsFromCloudFormation(resourceProperties);
        const ret = new CfnManagedPolicy(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnManagedPolicy.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          policyDocument: this.policyDocument,
          description: this.description,
          groups: this.groups,
          managedPolicyName: this.managedPolicyName,
          path: this.path,
          roles: this.roles,
          users: this.users
        };
      }
      renderProperties(props) {
        return cfnManagedPolicyPropsToCloudFormation(props);
      }
    };
    exports2.CfnManagedPolicy = CfnManagedPolicy;
    _d = JSII_RTTI_SYMBOL_1;
    CfnManagedPolicy[_d] = { fqn: "@aws-cdk/aws-iam.CfnManagedPolicy", version: "1.132.0" };
    CfnManagedPolicy.CFN_RESOURCE_TYPE_NAME = "AWS::IAM::ManagedPolicy";
    function CfnOIDCProviderPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("clientIdList", cdk.listValidator(cdk.validateString))(properties.clientIdList));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("thumbprintList", cdk.requiredValidator)(properties.thumbprintList));
      errors.collect(cdk.propertyValidator("thumbprintList", cdk.listValidator(cdk.validateString))(properties.thumbprintList));
      errors.collect(cdk.propertyValidator("url", cdk.validateString)(properties.url));
      return errors.wrap('supplied properties not correct for "CfnOIDCProviderProps"');
    }
    function cfnOIDCProviderPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnOIDCProviderPropsValidator(properties).assertSuccess();
      return {
        ThumbprintList: cdk.listMapper(cdk.stringToCloudFormation)(properties.thumbprintList),
        ClientIdList: cdk.listMapper(cdk.stringToCloudFormation)(properties.clientIdList),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
        Url: cdk.stringToCloudFormation(properties.url)
      };
    }
    function CfnOIDCProviderPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("thumbprintList", "ThumbprintList", cfn_parse.FromCloudFormation.getStringArray(properties.ThumbprintList));
      ret.addPropertyResult("clientIdList", "ClientIdList", properties.ClientIdList != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ClientIdList) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addPropertyResult("url", "Url", properties.Url != null ? cfn_parse.FromCloudFormation.getString(properties.Url) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnOIDCProvider = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnOIDCProvider.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "thumbprintList", this);
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.thumbprintList = props.thumbprintList;
        this.clientIdList = props.clientIdList;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::IAM::OIDCProvider", props.tags, { tagPropertyName: "tags" });
        this.url = props.url;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnOIDCProviderPropsFromCloudFormation(resourceProperties);
        const ret = new CfnOIDCProvider(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnOIDCProvider.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          thumbprintList: this.thumbprintList,
          clientIdList: this.clientIdList,
          tags: this.tags.renderTags(),
          url: this.url
        };
      }
      renderProperties(props) {
        return cfnOIDCProviderPropsToCloudFormation(props);
      }
    };
    exports2.CfnOIDCProvider = CfnOIDCProvider;
    _e = JSII_RTTI_SYMBOL_1;
    CfnOIDCProvider[_e] = { fqn: "@aws-cdk/aws-iam.CfnOIDCProvider", version: "1.132.0" };
    CfnOIDCProvider.CFN_RESOURCE_TYPE_NAME = "AWS::IAM::OIDCProvider";
    function CfnPolicyPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("groups", cdk.listValidator(cdk.validateString))(properties.groups));
      errors.collect(cdk.propertyValidator("policyDocument", cdk.requiredValidator)(properties.policyDocument));
      errors.collect(cdk.propertyValidator("policyDocument", cdk.validateObject)(properties.policyDocument));
      errors.collect(cdk.propertyValidator("policyName", cdk.requiredValidator)(properties.policyName));
      errors.collect(cdk.propertyValidator("policyName", cdk.validateString)(properties.policyName));
      errors.collect(cdk.propertyValidator("roles", cdk.listValidator(cdk.validateString))(properties.roles));
      errors.collect(cdk.propertyValidator("users", cdk.listValidator(cdk.validateString))(properties.users));
      return errors.wrap('supplied properties not correct for "CfnPolicyProps"');
    }
    function cfnPolicyPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnPolicyPropsValidator(properties).assertSuccess();
      return {
        PolicyDocument: cdk.objectToCloudFormation(properties.policyDocument),
        PolicyName: cdk.stringToCloudFormation(properties.policyName),
        Groups: cdk.listMapper(cdk.stringToCloudFormation)(properties.groups),
        Roles: cdk.listMapper(cdk.stringToCloudFormation)(properties.roles),
        Users: cdk.listMapper(cdk.stringToCloudFormation)(properties.users)
      };
    }
    function CfnPolicyPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("policyDocument", "PolicyDocument", cfn_parse.FromCloudFormation.getAny(properties.PolicyDocument));
      ret.addPropertyResult("policyName", "PolicyName", cfn_parse.FromCloudFormation.getString(properties.PolicyName));
      ret.addPropertyResult("groups", "Groups", properties.Groups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Groups) : void 0);
      ret.addPropertyResult("roles", "Roles", properties.Roles != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Roles) : void 0);
      ret.addPropertyResult("users", "Users", properties.Users != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Users) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnPolicy = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnPolicy.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "policyDocument", this);
        cdk.requireProperty(props, "policyName", this);
        this.policyDocument = props.policyDocument;
        this.policyName = props.policyName;
        this.groups = props.groups;
        this.roles = props.roles;
        this.users = props.users;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnPolicyPropsFromCloudFormation(resourceProperties);
        const ret = new CfnPolicy(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnPolicy.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          policyDocument: this.policyDocument,
          policyName: this.policyName,
          groups: this.groups,
          roles: this.roles,
          users: this.users
        };
      }
      renderProperties(props) {
        return cfnPolicyPropsToCloudFormation(props);
      }
    };
    exports2.CfnPolicy = CfnPolicy;
    _f = JSII_RTTI_SYMBOL_1;
    CfnPolicy[_f] = { fqn: "@aws-cdk/aws-iam.CfnPolicy", version: "1.132.0" };
    CfnPolicy.CFN_RESOURCE_TYPE_NAME = "AWS::IAM::Policy";
    function CfnRolePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("assumeRolePolicyDocument", cdk.requiredValidator)(properties.assumeRolePolicyDocument));
      errors.collect(cdk.propertyValidator("assumeRolePolicyDocument", cdk.validateObject)(properties.assumeRolePolicyDocument));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("managedPolicyArns", cdk.listValidator(cdk.validateString))(properties.managedPolicyArns));
      errors.collect(cdk.propertyValidator("maxSessionDuration", cdk.validateNumber)(properties.maxSessionDuration));
      errors.collect(cdk.propertyValidator("path", cdk.validateString)(properties.path));
      errors.collect(cdk.propertyValidator("permissionsBoundary", cdk.validateString)(properties.permissionsBoundary));
      errors.collect(cdk.propertyValidator("policies", cdk.listValidator(CfnRole_PolicyPropertyValidator))(properties.policies));
      errors.collect(cdk.propertyValidator("roleName", cdk.validateString)(properties.roleName));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnRoleProps"');
    }
    function cfnRolePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRolePropsValidator(properties).assertSuccess();
      return {
        AssumeRolePolicyDocument: cdk.objectToCloudFormation(properties.assumeRolePolicyDocument),
        Description: cdk.stringToCloudFormation(properties.description),
        ManagedPolicyArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.managedPolicyArns),
        MaxSessionDuration: cdk.numberToCloudFormation(properties.maxSessionDuration),
        Path: cdk.stringToCloudFormation(properties.path),
        PermissionsBoundary: cdk.stringToCloudFormation(properties.permissionsBoundary),
        Policies: cdk.listMapper(cfnRolePolicyPropertyToCloudFormation)(properties.policies),
        RoleName: cdk.stringToCloudFormation(properties.roleName),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnRolePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("assumeRolePolicyDocument", "AssumeRolePolicyDocument", cfn_parse.FromCloudFormation.getAny(properties.AssumeRolePolicyDocument));
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("managedPolicyArns", "ManagedPolicyArns", properties.ManagedPolicyArns != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ManagedPolicyArns) : void 0);
      ret.addPropertyResult("maxSessionDuration", "MaxSessionDuration", properties.MaxSessionDuration != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxSessionDuration) : void 0);
      ret.addPropertyResult("path", "Path", properties.Path != null ? cfn_parse.FromCloudFormation.getString(properties.Path) : void 0);
      ret.addPropertyResult("permissionsBoundary", "PermissionsBoundary", properties.PermissionsBoundary != null ? cfn_parse.FromCloudFormation.getString(properties.PermissionsBoundary) : void 0);
      ret.addPropertyResult("policies", "Policies", properties.Policies != null ? cfn_parse.FromCloudFormation.getArray(CfnRolePolicyPropertyFromCloudFormation)(properties.Policies) : void 0);
      ret.addPropertyResult("roleName", "RoleName", properties.RoleName != null ? cfn_parse.FromCloudFormation.getString(properties.RoleName) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnRole = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnRole.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "assumeRolePolicyDocument", this);
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.attrRoleId = cdk.Token.asString(this.getAtt("RoleId"));
        this.assumeRolePolicyDocument = props.assumeRolePolicyDocument;
        this.description = props.description;
        this.managedPolicyArns = props.managedPolicyArns;
        this.maxSessionDuration = props.maxSessionDuration;
        this.path = props.path;
        this.permissionsBoundary = props.permissionsBoundary;
        this.policies = props.policies;
        this.roleName = props.roleName;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::IAM::Role", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnRolePropsFromCloudFormation(resourceProperties);
        const ret = new CfnRole(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnRole.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          assumeRolePolicyDocument: this.assumeRolePolicyDocument,
          description: this.description,
          managedPolicyArns: this.managedPolicyArns,
          maxSessionDuration: this.maxSessionDuration,
          path: this.path,
          permissionsBoundary: this.permissionsBoundary,
          policies: this.policies,
          roleName: this.roleName,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnRolePropsToCloudFormation(props);
      }
    };
    exports2.CfnRole = CfnRole;
    _g = JSII_RTTI_SYMBOL_1;
    CfnRole[_g] = { fqn: "@aws-cdk/aws-iam.CfnRole", version: "1.132.0" };
    CfnRole.CFN_RESOURCE_TYPE_NAME = "AWS::IAM::Role";
    function CfnRole_PolicyPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("policyDocument", cdk.requiredValidator)(properties.policyDocument));
      errors.collect(cdk.propertyValidator("policyDocument", cdk.validateObject)(properties.policyDocument));
      errors.collect(cdk.propertyValidator("policyName", cdk.requiredValidator)(properties.policyName));
      errors.collect(cdk.propertyValidator("policyName", cdk.validateString)(properties.policyName));
      return errors.wrap('supplied properties not correct for "PolicyProperty"');
    }
    function cfnRolePolicyPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRole_PolicyPropertyValidator(properties).assertSuccess();
      return {
        PolicyDocument: cdk.objectToCloudFormation(properties.policyDocument),
        PolicyName: cdk.stringToCloudFormation(properties.policyName)
      };
    }
    function CfnRolePolicyPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("policyDocument", "PolicyDocument", cfn_parse.FromCloudFormation.getAny(properties.PolicyDocument));
      ret.addPropertyResult("policyName", "PolicyName", cfn_parse.FromCloudFormation.getString(properties.PolicyName));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSAMLProviderPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("samlMetadataDocument", cdk.requiredValidator)(properties.samlMetadataDocument));
      errors.collect(cdk.propertyValidator("samlMetadataDocument", cdk.validateString)(properties.samlMetadataDocument));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnSAMLProviderProps"');
    }
    function cfnSAMLProviderPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSAMLProviderPropsValidator(properties).assertSuccess();
      return {
        SamlMetadataDocument: cdk.stringToCloudFormation(properties.samlMetadataDocument),
        Name: cdk.stringToCloudFormation(properties.name),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnSAMLProviderPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("samlMetadataDocument", "SamlMetadataDocument", cfn_parse.FromCloudFormation.getString(properties.SamlMetadataDocument));
      ret.addPropertyResult("name", "Name", properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnSAMLProvider = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnSAMLProvider.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "samlMetadataDocument", this);
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.samlMetadataDocument = props.samlMetadataDocument;
        this.name = props.name;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::IAM::SAMLProvider", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnSAMLProviderPropsFromCloudFormation(resourceProperties);
        const ret = new CfnSAMLProvider(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnSAMLProvider.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          samlMetadataDocument: this.samlMetadataDocument,
          name: this.name,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnSAMLProviderPropsToCloudFormation(props);
      }
    };
    exports2.CfnSAMLProvider = CfnSAMLProvider;
    _h = JSII_RTTI_SYMBOL_1;
    CfnSAMLProvider[_h] = { fqn: "@aws-cdk/aws-iam.CfnSAMLProvider", version: "1.132.0" };
    CfnSAMLProvider.CFN_RESOURCE_TYPE_NAME = "AWS::IAM::SAMLProvider";
    function CfnServerCertificatePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("certificateBody", cdk.validateString)(properties.certificateBody));
      errors.collect(cdk.propertyValidator("certificateChain", cdk.validateString)(properties.certificateChain));
      errors.collect(cdk.propertyValidator("path", cdk.validateString)(properties.path));
      errors.collect(cdk.propertyValidator("privateKey", cdk.validateString)(properties.privateKey));
      errors.collect(cdk.propertyValidator("serverCertificateName", cdk.validateString)(properties.serverCertificateName));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnServerCertificateProps"');
    }
    function cfnServerCertificatePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnServerCertificatePropsValidator(properties).assertSuccess();
      return {
        CertificateBody: cdk.stringToCloudFormation(properties.certificateBody),
        CertificateChain: cdk.stringToCloudFormation(properties.certificateChain),
        Path: cdk.stringToCloudFormation(properties.path),
        PrivateKey: cdk.stringToCloudFormation(properties.privateKey),
        ServerCertificateName: cdk.stringToCloudFormation(properties.serverCertificateName),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnServerCertificatePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("certificateBody", "CertificateBody", properties.CertificateBody != null ? cfn_parse.FromCloudFormation.getString(properties.CertificateBody) : void 0);
      ret.addPropertyResult("certificateChain", "CertificateChain", properties.CertificateChain != null ? cfn_parse.FromCloudFormation.getString(properties.CertificateChain) : void 0);
      ret.addPropertyResult("path", "Path", properties.Path != null ? cfn_parse.FromCloudFormation.getString(properties.Path) : void 0);
      ret.addPropertyResult("privateKey", "PrivateKey", properties.PrivateKey != null ? cfn_parse.FromCloudFormation.getString(properties.PrivateKey) : void 0);
      ret.addPropertyResult("serverCertificateName", "ServerCertificateName", properties.ServerCertificateName != null ? cfn_parse.FromCloudFormation.getString(properties.ServerCertificateName) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnServerCertificate = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnServerCertificate.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.certificateBody = props.certificateBody;
        this.certificateChain = props.certificateChain;
        this.path = props.path;
        this.privateKey = props.privateKey;
        this.serverCertificateName = props.serverCertificateName;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::IAM::ServerCertificate", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnServerCertificatePropsFromCloudFormation(resourceProperties);
        const ret = new CfnServerCertificate(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnServerCertificate.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          certificateBody: this.certificateBody,
          certificateChain: this.certificateChain,
          path: this.path,
          privateKey: this.privateKey,
          serverCertificateName: this.serverCertificateName,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnServerCertificatePropsToCloudFormation(props);
      }
    };
    exports2.CfnServerCertificate = CfnServerCertificate;
    _j = JSII_RTTI_SYMBOL_1;
    CfnServerCertificate[_j] = { fqn: "@aws-cdk/aws-iam.CfnServerCertificate", version: "1.132.0" };
    CfnServerCertificate.CFN_RESOURCE_TYPE_NAME = "AWS::IAM::ServerCertificate";
    function CfnServiceLinkedRolePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("awsServiceName", cdk.requiredValidator)(properties.awsServiceName));
      errors.collect(cdk.propertyValidator("awsServiceName", cdk.validateString)(properties.awsServiceName));
      errors.collect(cdk.propertyValidator("customSuffix", cdk.validateString)(properties.customSuffix));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      return errors.wrap('supplied properties not correct for "CfnServiceLinkedRoleProps"');
    }
    function cfnServiceLinkedRolePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnServiceLinkedRolePropsValidator(properties).assertSuccess();
      return {
        AWSServiceName: cdk.stringToCloudFormation(properties.awsServiceName),
        CustomSuffix: cdk.stringToCloudFormation(properties.customSuffix),
        Description: cdk.stringToCloudFormation(properties.description)
      };
    }
    function CfnServiceLinkedRolePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("awsServiceName", "AWSServiceName", cfn_parse.FromCloudFormation.getString(properties.AWSServiceName));
      ret.addPropertyResult("customSuffix", "CustomSuffix", properties.CustomSuffix != null ? cfn_parse.FromCloudFormation.getString(properties.CustomSuffix) : void 0);
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnServiceLinkedRole = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnServiceLinkedRole.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "awsServiceName", this);
        this.awsServiceName = props.awsServiceName;
        this.customSuffix = props.customSuffix;
        this.description = props.description;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnServiceLinkedRolePropsFromCloudFormation(resourceProperties);
        const ret = new CfnServiceLinkedRole(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnServiceLinkedRole.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          awsServiceName: this.awsServiceName,
          customSuffix: this.customSuffix,
          description: this.description
        };
      }
      renderProperties(props) {
        return cfnServiceLinkedRolePropsToCloudFormation(props);
      }
    };
    exports2.CfnServiceLinkedRole = CfnServiceLinkedRole;
    _k = JSII_RTTI_SYMBOL_1;
    CfnServiceLinkedRole[_k] = { fqn: "@aws-cdk/aws-iam.CfnServiceLinkedRole", version: "1.132.0" };
    CfnServiceLinkedRole.CFN_RESOURCE_TYPE_NAME = "AWS::IAM::ServiceLinkedRole";
    function CfnUserPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("groups", cdk.listValidator(cdk.validateString))(properties.groups));
      errors.collect(cdk.propertyValidator("loginProfile", CfnUser_LoginProfilePropertyValidator)(properties.loginProfile));
      errors.collect(cdk.propertyValidator("managedPolicyArns", cdk.listValidator(cdk.validateString))(properties.managedPolicyArns));
      errors.collect(cdk.propertyValidator("path", cdk.validateString)(properties.path));
      errors.collect(cdk.propertyValidator("permissionsBoundary", cdk.validateString)(properties.permissionsBoundary));
      errors.collect(cdk.propertyValidator("policies", cdk.listValidator(CfnUser_PolicyPropertyValidator))(properties.policies));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("userName", cdk.validateString)(properties.userName));
      return errors.wrap('supplied properties not correct for "CfnUserProps"');
    }
    function cfnUserPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnUserPropsValidator(properties).assertSuccess();
      return {
        Groups: cdk.listMapper(cdk.stringToCloudFormation)(properties.groups),
        LoginProfile: cfnUserLoginProfilePropertyToCloudFormation(properties.loginProfile),
        ManagedPolicyArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.managedPolicyArns),
        Path: cdk.stringToCloudFormation(properties.path),
        PermissionsBoundary: cdk.stringToCloudFormation(properties.permissionsBoundary),
        Policies: cdk.listMapper(cfnUserPolicyPropertyToCloudFormation)(properties.policies),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
        UserName: cdk.stringToCloudFormation(properties.userName)
      };
    }
    function CfnUserPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("groups", "Groups", properties.Groups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Groups) : void 0);
      ret.addPropertyResult("loginProfile", "LoginProfile", properties.LoginProfile != null ? CfnUserLoginProfilePropertyFromCloudFormation(properties.LoginProfile) : void 0);
      ret.addPropertyResult("managedPolicyArns", "ManagedPolicyArns", properties.ManagedPolicyArns != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ManagedPolicyArns) : void 0);
      ret.addPropertyResult("path", "Path", properties.Path != null ? cfn_parse.FromCloudFormation.getString(properties.Path) : void 0);
      ret.addPropertyResult("permissionsBoundary", "PermissionsBoundary", properties.PermissionsBoundary != null ? cfn_parse.FromCloudFormation.getString(properties.PermissionsBoundary) : void 0);
      ret.addPropertyResult("policies", "Policies", properties.Policies != null ? cfn_parse.FromCloudFormation.getArray(CfnUserPolicyPropertyFromCloudFormation)(properties.Policies) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addPropertyResult("userName", "UserName", properties.UserName != null ? cfn_parse.FromCloudFormation.getString(properties.UserName) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnUser = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnUser.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.groups = props.groups;
        this.loginProfile = props.loginProfile;
        this.managedPolicyArns = props.managedPolicyArns;
        this.path = props.path;
        this.permissionsBoundary = props.permissionsBoundary;
        this.policies = props.policies;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::IAM::User", props.tags, { tagPropertyName: "tags" });
        this.userName = props.userName;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnUserPropsFromCloudFormation(resourceProperties);
        const ret = new CfnUser(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnUser.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          groups: this.groups,
          loginProfile: this.loginProfile,
          managedPolicyArns: this.managedPolicyArns,
          path: this.path,
          permissionsBoundary: this.permissionsBoundary,
          policies: this.policies,
          tags: this.tags.renderTags(),
          userName: this.userName
        };
      }
      renderProperties(props) {
        return cfnUserPropsToCloudFormation(props);
      }
    };
    exports2.CfnUser = CfnUser;
    _l = JSII_RTTI_SYMBOL_1;
    CfnUser[_l] = { fqn: "@aws-cdk/aws-iam.CfnUser", version: "1.132.0" };
    CfnUser.CFN_RESOURCE_TYPE_NAME = "AWS::IAM::User";
    function CfnUser_LoginProfilePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("password", cdk.requiredValidator)(properties.password));
      errors.collect(cdk.propertyValidator("password", cdk.validateString)(properties.password));
      errors.collect(cdk.propertyValidator("passwordResetRequired", cdk.validateBoolean)(properties.passwordResetRequired));
      return errors.wrap('supplied properties not correct for "LoginProfileProperty"');
    }
    function cfnUserLoginProfilePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnUser_LoginProfilePropertyValidator(properties).assertSuccess();
      return {
        Password: cdk.stringToCloudFormation(properties.password),
        PasswordResetRequired: cdk.booleanToCloudFormation(properties.passwordResetRequired)
      };
    }
    function CfnUserLoginProfilePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("password", "Password", cfn_parse.FromCloudFormation.getString(properties.Password));
      ret.addPropertyResult("passwordResetRequired", "PasswordResetRequired", properties.PasswordResetRequired != null ? cfn_parse.FromCloudFormation.getBoolean(properties.PasswordResetRequired) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnUser_PolicyPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("policyDocument", cdk.requiredValidator)(properties.policyDocument));
      errors.collect(cdk.propertyValidator("policyDocument", cdk.validateObject)(properties.policyDocument));
      errors.collect(cdk.propertyValidator("policyName", cdk.requiredValidator)(properties.policyName));
      errors.collect(cdk.propertyValidator("policyName", cdk.validateString)(properties.policyName));
      return errors.wrap('supplied properties not correct for "PolicyProperty"');
    }
    function cfnUserPolicyPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnUser_PolicyPropertyValidator(properties).assertSuccess();
      return {
        PolicyDocument: cdk.objectToCloudFormation(properties.policyDocument),
        PolicyName: cdk.stringToCloudFormation(properties.policyName)
      };
    }
    function CfnUserPolicyPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("policyDocument", "PolicyDocument", cfn_parse.FromCloudFormation.getAny(properties.PolicyDocument));
      ret.addPropertyResult("policyName", "PolicyName", cfn_parse.FromCloudFormation.getString(properties.PolicyName));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnUserToGroupAdditionPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("groupName", cdk.requiredValidator)(properties.groupName));
      errors.collect(cdk.propertyValidator("groupName", cdk.validateString)(properties.groupName));
      errors.collect(cdk.propertyValidator("users", cdk.requiredValidator)(properties.users));
      errors.collect(cdk.propertyValidator("users", cdk.listValidator(cdk.validateString))(properties.users));
      return errors.wrap('supplied properties not correct for "CfnUserToGroupAdditionProps"');
    }
    function cfnUserToGroupAdditionPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnUserToGroupAdditionPropsValidator(properties).assertSuccess();
      return {
        GroupName: cdk.stringToCloudFormation(properties.groupName),
        Users: cdk.listMapper(cdk.stringToCloudFormation)(properties.users)
      };
    }
    function CfnUserToGroupAdditionPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("groupName", "GroupName", cfn_parse.FromCloudFormation.getString(properties.GroupName));
      ret.addPropertyResult("users", "Users", cfn_parse.FromCloudFormation.getStringArray(properties.Users));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnUserToGroupAddition = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnUserToGroupAddition.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "groupName", this);
        cdk.requireProperty(props, "users", this);
        this.groupName = props.groupName;
        this.users = props.users;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnUserToGroupAdditionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnUserToGroupAddition(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnUserToGroupAddition.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          groupName: this.groupName,
          users: this.users
        };
      }
      renderProperties(props) {
        return cfnUserToGroupAdditionPropsToCloudFormation(props);
      }
    };
    exports2.CfnUserToGroupAddition = CfnUserToGroupAddition;
    _m = JSII_RTTI_SYMBOL_1;
    CfnUserToGroupAddition[_m] = { fqn: "@aws-cdk/aws-iam.CfnUserToGroupAddition", version: "1.132.0" };
    CfnUserToGroupAddition.CFN_RESOURCE_TYPE_NAME = "AWS::IAM::UserToGroupAddition";
    function CfnVirtualMFADevicePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("path", cdk.validateString)(properties.path));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("users", cdk.requiredValidator)(properties.users));
      errors.collect(cdk.propertyValidator("users", cdk.listValidator(cdk.validateString))(properties.users));
      errors.collect(cdk.propertyValidator("virtualMfaDeviceName", cdk.validateString)(properties.virtualMfaDeviceName));
      return errors.wrap('supplied properties not correct for "CfnVirtualMFADeviceProps"');
    }
    function cfnVirtualMFADevicePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnVirtualMFADevicePropsValidator(properties).assertSuccess();
      return {
        Users: cdk.listMapper(cdk.stringToCloudFormation)(properties.users),
        Path: cdk.stringToCloudFormation(properties.path),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
        VirtualMfaDeviceName: cdk.stringToCloudFormation(properties.virtualMfaDeviceName)
      };
    }
    function CfnVirtualMFADevicePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("users", "Users", cfn_parse.FromCloudFormation.getStringArray(properties.Users));
      ret.addPropertyResult("path", "Path", properties.Path != null ? cfn_parse.FromCloudFormation.getString(properties.Path) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addPropertyResult("virtualMfaDeviceName", "VirtualMfaDeviceName", properties.VirtualMfaDeviceName != null ? cfn_parse.FromCloudFormation.getString(properties.VirtualMfaDeviceName) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnVirtualMFADevice = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnVirtualMFADevice.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "users", this);
        this.attrSerialNumber = cdk.Token.asString(this.getAtt("SerialNumber"));
        this.users = props.users;
        this.path = props.path;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::IAM::VirtualMFADevice", props.tags, { tagPropertyName: "tags" });
        this.virtualMfaDeviceName = props.virtualMfaDeviceName;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnVirtualMFADevicePropsFromCloudFormation(resourceProperties);
        const ret = new CfnVirtualMFADevice(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnVirtualMFADevice.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          users: this.users,
          path: this.path,
          tags: this.tags.renderTags(),
          virtualMfaDeviceName: this.virtualMfaDeviceName
        };
      }
      renderProperties(props) {
        return cfnVirtualMFADevicePropsToCloudFormation(props);
      }
    };
    exports2.CfnVirtualMFADevice = CfnVirtualMFADevice;
    _o = JSII_RTTI_SYMBOL_1;
    CfnVirtualMFADevice[_o] = { fqn: "@aws-cdk/aws-iam.CfnVirtualMFADevice", version: "1.132.0" };
    CfnVirtualMFADevice.CFN_RESOURCE_TYPE_NAME = "AWS::IAM::VirtualMFADevice";
  }
});

// asset-input/node_modules/@aws-cdk/aws-iam/lib/util.js
var require_util2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-iam/lib/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UniqueStringSet = exports2.mergePrincipal = exports2.AttachedPolicies = exports2.generatePolicyName = exports2.undefinedIfEmpty = exports2.LITERAL_STRING_KEY = void 0;
    var core_1 = require_lib8();
    var MAX_POLICY_NAME_LEN = 128;
    exports2.LITERAL_STRING_KEY = "LiteralString";
    function undefinedIfEmpty(f) {
      return core_1.Lazy.list({
        produce: () => {
          const array = f();
          return array && array.length > 0 ? array : void 0;
        }
      });
    }
    exports2.undefinedIfEmpty = undefinedIfEmpty;
    function generatePolicyName(scope, logicalId) {
      const resolvedLogicalId = core_1.Tokenization.resolve(logicalId, {
        scope,
        resolver: new core_1.DefaultTokenResolver(new core_1.StringConcat())
      });
      return lastNCharacters(resolvedLogicalId, MAX_POLICY_NAME_LEN);
    }
    exports2.generatePolicyName = generatePolicyName;
    function lastNCharacters(str, n) {
      const startIndex = Math.max(str.length - n, 0);
      return str.substring(startIndex, str.length);
    }
    var AttachedPolicies = class {
      constructor() {
        this.policies = new Array();
      }
      attach(policy) {
        if (this.policies.find((p) => p === policy)) {
          return;
        }
        if (this.policies.find((p) => p.policyName === policy.policyName)) {
          throw new Error(`A policy named "${policy.policyName}" is already attached`);
        }
        this.policies.push(policy);
      }
    };
    exports2.AttachedPolicies = AttachedPolicies;
    function mergePrincipal(target, source) {
      var _a;
      if (exports2.LITERAL_STRING_KEY in source && !isEmptyObject(target) || exports2.LITERAL_STRING_KEY in target && !isEmptyObject(source)) {
        throw new Error(`Cannot merge principals ${JSON.stringify(target)} and ${JSON.stringify(source)}; if one uses a literal principal string the other one must be empty`);
      }
      for (const key of Object.keys(source)) {
        target[key] = (_a = target[key]) !== null && _a !== void 0 ? _a : [];
        let value = source[key];
        if (!Array.isArray(value)) {
          value = [value];
        }
        target[key].push(...value);
      }
      return target;
    }
    exports2.mergePrincipal = mergePrincipal;
    var UniqueStringSet = class {
      constructor(fn) {
        this.fn = fn;
        this.creationStack = core_1.captureStackTrace();
      }
      static from(fn) {
        return core_1.Token.asList(new UniqueStringSet(fn));
      }
      resolve(context) {
        context.registerPostProcessor(this);
        return this.fn();
      }
      postProcess(input, _context) {
        if (!Array.isArray(input)) {
          return input;
        }
        if (input.length === 0) {
          return void 0;
        }
        const uniq = {};
        for (const el of input) {
          uniq[JSON.stringify(el)] = el;
        }
        return Object.values(uniq);
      }
      toString() {
        return core_1.Token.asString(this);
      }
    };
    exports2.UniqueStringSet = UniqueStringSet;
    function isEmptyObject(x) {
      return Object.keys(x).length === 0;
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-iam/lib/policy.js
var require_policy = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-iam/lib/policy.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Policy = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var iam_generated_1 = require_iam_generated();
    var policy_document_1 = require_policy_document();
    var util_1 = require_util2();
    var Policy = class extends core_1.Resource {
      constructor(scope, id, props = {}) {
        var _b;
        super(scope, id, {
          physicalName: props.policyName || core_1.Lazy.string({ produce: () => util_1.generatePolicyName(scope, resource.logicalId) })
        });
        this.document = new policy_document_1.PolicyDocument();
        this.roles = new Array();
        this.users = new Array();
        this.groups = new Array();
        this.referenceTaken = false;
        const self = this;
        class CfnPolicyConditional extends iam_generated_1.CfnPolicy {
          shouldSynthesize() {
            return self.force || self.referenceTaken || !self.document.isEmpty && self.isAttached;
          }
        }
        if (props.document) {
          this.document = props.document;
        }
        const resource = new CfnPolicyConditional(this, "Resource", {
          policyDocument: this.document,
          policyName: this.physicalName,
          roles: util_1.undefinedIfEmpty(() => this.roles.map((r) => r.roleName)),
          users: util_1.undefinedIfEmpty(() => this.users.map((u) => u.userName)),
          groups: util_1.undefinedIfEmpty(() => this.groups.map((g) => g.groupName))
        });
        this._policyName = this.physicalName;
        this.force = (_b = props.force) !== null && _b !== void 0 ? _b : false;
        if (props.users) {
          props.users.forEach((u) => this.attachToUser(u));
        }
        if (props.groups) {
          props.groups.forEach((g) => this.attachToGroup(g));
        }
        if (props.roles) {
          props.roles.forEach((r) => this.attachToRole(r));
        }
        if (props.statements) {
          props.statements.forEach((p) => this.addStatements(p));
        }
      }
      static fromPolicyName(scope, id, policyName) {
        class Import extends core_1.Resource {
          constructor() {
            super(...arguments);
            this.policyName = policyName;
          }
        }
        return new Import(scope, id);
      }
      addStatements(...statement) {
        this.document.addStatements(...statement);
      }
      attachToUser(user) {
        if (this.users.find((u) => u === user)) {
          return;
        }
        this.users.push(user);
        user.attachInlinePolicy(this);
      }
      attachToRole(role) {
        if (this.roles.find((r) => r === role)) {
          return;
        }
        this.roles.push(role);
        role.attachInlinePolicy(this);
      }
      attachToGroup(group) {
        if (this.groups.find((g) => g === group)) {
          return;
        }
        this.groups.push(group);
        group.attachInlinePolicy(this);
      }
      get policyName() {
        this.referenceTaken = true;
        return this._policyName;
      }
      validate() {
        const result = new Array();
        if (this.document.isEmpty) {
          if (this.force) {
            result.push("Policy created with force=true is empty. You must add statements to the policy");
          }
          if (!this.force && this.referenceTaken) {
            result.push("This Policy has been referenced by a resource, so it must contain at least one statement.");
          }
        }
        if (!this.isAttached) {
          if (this.force) {
            result.push("Policy created with force=true must be attached to at least one principal: user, group or role");
          }
          if (!this.force && this.referenceTaken) {
            result.push("This Policy has been referenced by a resource, so it must be attached to at least one user, group or role.");
          }
        }
        result.push(...this.document.validateForIdentityPolicy());
        return result;
      }
      get isAttached() {
        return this.groups.length + this.users.length + this.roles.length > 0;
      }
    };
    exports2.Policy = Policy;
    _a = JSII_RTTI_SYMBOL_1;
    Policy[_a] = { fqn: "@aws-cdk/aws-iam.Policy", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-iam/lib/principals.js
var require_principals = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-iam/lib/principals.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    var _d;
    var _e;
    var _f;
    var _g;
    var _h;
    var _j;
    var _k;
    var _l;
    var _m;
    var _o;
    var _p;
    var _q;
    var _r;
    var _s;
    var _t;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CompositePrincipal = exports2.StarPrincipal = exports2.Anyone = exports2.AnyPrincipal = exports2.AccountRootPrincipal = exports2.SamlConsolePrincipal = exports2.SamlPrincipal = exports2.OpenIdConnectPrincipal = exports2.WebIdentityPrincipal = exports2.FederatedPrincipal = exports2.CanonicalUserPrincipal = exports2.OrganizationPrincipal = exports2.ServicePrincipal = exports2.AccountPrincipal = exports2.ArnPrincipal = exports2.PrincipalPolicyFragment = exports2.PrincipalWithConditions = exports2.PrincipalBase = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var region_info_1 = require_lib7();
    var util_1 = require_util2();
    var PrincipalBase = class {
      constructor() {
        this.grantPrincipal = this;
        this.principalAccount = void 0;
        this.assumeRoleAction = "sts:AssumeRole";
      }
      addToPolicy(statement) {
        return this.addToPrincipalPolicy(statement).statementAdded;
      }
      addToPrincipalPolicy(_statement) {
        return { statementAdded: false };
      }
      toString() {
        return JSON.stringify(this.policyFragment.principalJson);
      }
      toJSON() {
        return this.policyFragment.principalJson;
      }
      withConditions(conditions) {
        return new PrincipalWithConditions(this, conditions);
      }
    };
    exports2.PrincipalBase = PrincipalBase;
    _a = JSII_RTTI_SYMBOL_1;
    PrincipalBase[_a] = { fqn: "@aws-cdk/aws-iam.PrincipalBase", version: "1.132.0" };
    var PrincipalWithConditions = class {
      constructor(principal, conditions) {
        this.principal = principal;
        this.grantPrincipal = this;
        this.assumeRoleAction = this.principal.assumeRoleAction;
        this.additionalConditions = conditions;
      }
      addCondition(key, value) {
        const existingValue = this.additionalConditions[key];
        this.additionalConditions[key] = existingValue ? __spreadValues(__spreadValues({}, existingValue), value) : value;
      }
      addConditions(conditions) {
        Object.entries(conditions).forEach(([key, value]) => {
          this.addCondition(key, value);
        });
      }
      get conditions() {
        return this.mergeConditions(this.principal.policyFragment.conditions, this.additionalConditions);
      }
      get policyFragment() {
        return new PrincipalPolicyFragment(this.principal.policyFragment.principalJson, this.conditions);
      }
      get principalAccount() {
        return this.principal.principalAccount;
      }
      addToPolicy(statement) {
        return this.addToPrincipalPolicy(statement).statementAdded;
      }
      addToPrincipalPolicy(statement) {
        return this.principal.addToPrincipalPolicy(statement);
      }
      toString() {
        return this.principal.toString();
      }
      toJSON() {
        return this.policyFragment.principalJson;
      }
      mergeConditions(principalConditions, additionalConditions) {
        const mergedConditions = {};
        Object.entries(principalConditions).forEach(([operator, condition]) => {
          mergedConditions[operator] = condition;
        });
        Object.entries(additionalConditions).forEach(([operator, condition]) => {
          const existing = mergedConditions[operator];
          if (!existing) {
            mergedConditions[operator] = condition;
            return;
          }
          if (cdk.Token.isUnresolved(condition) || cdk.Token.isUnresolved(existing)) {
            throw new Error(`multiple "${operator}" conditions cannot be merged if one of them contains an unresolved token`);
          }
          mergedConditions[operator] = __spreadValues(__spreadValues({}, existing), condition);
        });
        return mergedConditions;
      }
    };
    exports2.PrincipalWithConditions = PrincipalWithConditions;
    _b = JSII_RTTI_SYMBOL_1;
    PrincipalWithConditions[_b] = { fqn: "@aws-cdk/aws-iam.PrincipalWithConditions", version: "1.132.0" };
    var PrincipalPolicyFragment = class {
      constructor(principalJson, conditions = {}) {
        this.principalJson = principalJson;
        this.conditions = conditions;
      }
    };
    exports2.PrincipalPolicyFragment = PrincipalPolicyFragment;
    _c = JSII_RTTI_SYMBOL_1;
    PrincipalPolicyFragment[_c] = { fqn: "@aws-cdk/aws-iam.PrincipalPolicyFragment", version: "1.132.0" };
    var ArnPrincipal = class extends PrincipalBase {
      constructor(arn) {
        super();
        this.arn = arn;
      }
      get policyFragment() {
        return new PrincipalPolicyFragment({ AWS: [this.arn] });
      }
      toString() {
        return `ArnPrincipal(${this.arn})`;
      }
    };
    exports2.ArnPrincipal = ArnPrincipal;
    _d = JSII_RTTI_SYMBOL_1;
    ArnPrincipal[_d] = { fqn: "@aws-cdk/aws-iam.ArnPrincipal", version: "1.132.0" };
    var AccountPrincipal = class extends ArnPrincipal {
      constructor(accountId) {
        super(new StackDependentToken((stack) => `arn:${stack.partition}:iam::${accountId}:root`).toString());
        this.accountId = accountId;
        this.principalAccount = accountId;
      }
      toString() {
        return `AccountPrincipal(${this.accountId})`;
      }
    };
    exports2.AccountPrincipal = AccountPrincipal;
    _e = JSII_RTTI_SYMBOL_1;
    AccountPrincipal[_e] = { fqn: "@aws-cdk/aws-iam.AccountPrincipal", version: "1.132.0" };
    var ServicePrincipal = class extends PrincipalBase {
      constructor(service, opts = {}) {
        super();
        this.service = service;
        this.opts = opts;
      }
      get policyFragment() {
        return new PrincipalPolicyFragment({
          Service: [
            new ServicePrincipalToken(this.service, this.opts).toString()
          ]
        }, this.opts.conditions);
      }
      toString() {
        return `ServicePrincipal(${this.service})`;
      }
    };
    exports2.ServicePrincipal = ServicePrincipal;
    _f = JSII_RTTI_SYMBOL_1;
    ServicePrincipal[_f] = { fqn: "@aws-cdk/aws-iam.ServicePrincipal", version: "1.132.0" };
    var OrganizationPrincipal = class extends PrincipalBase {
      constructor(organizationId) {
        super();
        this.organizationId = organizationId;
      }
      get policyFragment() {
        return new PrincipalPolicyFragment({ AWS: ["*"] }, { StringEquals: { "aws:PrincipalOrgID": this.organizationId } });
      }
      toString() {
        return `OrganizationPrincipal(${this.organizationId})`;
      }
    };
    exports2.OrganizationPrincipal = OrganizationPrincipal;
    _g = JSII_RTTI_SYMBOL_1;
    OrganizationPrincipal[_g] = { fqn: "@aws-cdk/aws-iam.OrganizationPrincipal", version: "1.132.0" };
    var CanonicalUserPrincipal = class extends PrincipalBase {
      constructor(canonicalUserId) {
        super();
        this.canonicalUserId = canonicalUserId;
      }
      get policyFragment() {
        return new PrincipalPolicyFragment({ CanonicalUser: [this.canonicalUserId] });
      }
      toString() {
        return `CanonicalUserPrincipal(${this.canonicalUserId})`;
      }
    };
    exports2.CanonicalUserPrincipal = CanonicalUserPrincipal;
    _h = JSII_RTTI_SYMBOL_1;
    CanonicalUserPrincipal[_h] = { fqn: "@aws-cdk/aws-iam.CanonicalUserPrincipal", version: "1.132.0" };
    var FederatedPrincipal = class extends PrincipalBase {
      constructor(federated, conditions, assumeRoleAction = "sts:AssumeRole") {
        super();
        this.federated = federated;
        this.conditions = conditions;
        this.assumeRoleAction = assumeRoleAction;
      }
      get policyFragment() {
        return new PrincipalPolicyFragment({ Federated: [this.federated] }, this.conditions);
      }
      toString() {
        return `FederatedPrincipal(${this.federated})`;
      }
    };
    exports2.FederatedPrincipal = FederatedPrincipal;
    _j = JSII_RTTI_SYMBOL_1;
    FederatedPrincipal[_j] = { fqn: "@aws-cdk/aws-iam.FederatedPrincipal", version: "1.132.0" };
    var WebIdentityPrincipal = class extends FederatedPrincipal {
      constructor(identityProvider, conditions = {}) {
        super(identityProvider, conditions !== null && conditions !== void 0 ? conditions : {}, "sts:AssumeRoleWithWebIdentity");
      }
      get policyFragment() {
        return new PrincipalPolicyFragment({ Federated: [this.federated] }, this.conditions);
      }
      toString() {
        return `WebIdentityPrincipal(${this.federated})`;
      }
    };
    exports2.WebIdentityPrincipal = WebIdentityPrincipal;
    _k = JSII_RTTI_SYMBOL_1;
    WebIdentityPrincipal[_k] = { fqn: "@aws-cdk/aws-iam.WebIdentityPrincipal", version: "1.132.0" };
    var OpenIdConnectPrincipal = class extends WebIdentityPrincipal {
      constructor(openIdConnectProvider, conditions = {}) {
        super(openIdConnectProvider.openIdConnectProviderArn, conditions !== null && conditions !== void 0 ? conditions : {});
      }
      get policyFragment() {
        return new PrincipalPolicyFragment({ Federated: [this.federated] }, this.conditions);
      }
      toString() {
        return `OpenIdConnectPrincipal(${this.federated})`;
      }
    };
    exports2.OpenIdConnectPrincipal = OpenIdConnectPrincipal;
    _l = JSII_RTTI_SYMBOL_1;
    OpenIdConnectPrincipal[_l] = { fqn: "@aws-cdk/aws-iam.OpenIdConnectPrincipal", version: "1.132.0" };
    var SamlPrincipal = class extends FederatedPrincipal {
      constructor(samlProvider, conditions) {
        super(samlProvider.samlProviderArn, conditions, "sts:AssumeRoleWithSAML");
      }
      toString() {
        return `SamlPrincipal(${this.federated})`;
      }
    };
    exports2.SamlPrincipal = SamlPrincipal;
    _m = JSII_RTTI_SYMBOL_1;
    SamlPrincipal[_m] = { fqn: "@aws-cdk/aws-iam.SamlPrincipal", version: "1.132.0" };
    var SamlConsolePrincipal = class extends SamlPrincipal {
      constructor(samlProvider, conditions = {}) {
        super(samlProvider, __spreadProps(__spreadValues({}, conditions), {
          StringEquals: {
            "SAML:aud": "https://signin.aws.amazon.com/saml"
          }
        }));
      }
      toString() {
        return `SamlConsolePrincipal(${this.federated})`;
      }
    };
    exports2.SamlConsolePrincipal = SamlConsolePrincipal;
    _o = JSII_RTTI_SYMBOL_1;
    SamlConsolePrincipal[_o] = { fqn: "@aws-cdk/aws-iam.SamlConsolePrincipal", version: "1.132.0" };
    var AccountRootPrincipal = class extends AccountPrincipal {
      constructor() {
        super(new StackDependentToken((stack) => stack.account).toString());
      }
      toString() {
        return "AccountRootPrincipal()";
      }
    };
    exports2.AccountRootPrincipal = AccountRootPrincipal;
    _p = JSII_RTTI_SYMBOL_1;
    AccountRootPrincipal[_p] = { fqn: "@aws-cdk/aws-iam.AccountRootPrincipal", version: "1.132.0" };
    var AnyPrincipal = class extends ArnPrincipal {
      constructor() {
        super("*");
      }
      toString() {
        return "AnyPrincipal()";
      }
    };
    exports2.AnyPrincipal = AnyPrincipal;
    _q = JSII_RTTI_SYMBOL_1;
    AnyPrincipal[_q] = { fqn: "@aws-cdk/aws-iam.AnyPrincipal", version: "1.132.0" };
    var Anyone = class extends AnyPrincipal {
    };
    exports2.Anyone = Anyone;
    _r = JSII_RTTI_SYMBOL_1;
    Anyone[_r] = { fqn: "@aws-cdk/aws-iam.Anyone", version: "1.132.0" };
    var StarPrincipal = class extends PrincipalBase {
      constructor() {
        super(...arguments);
        this.policyFragment = {
          principalJson: { [util_1.LITERAL_STRING_KEY]: ["*"] },
          conditions: {}
        };
      }
      toString() {
        return "StarPrincipal()";
      }
    };
    exports2.StarPrincipal = StarPrincipal;
    _s = JSII_RTTI_SYMBOL_1;
    StarPrincipal[_s] = { fqn: "@aws-cdk/aws-iam.StarPrincipal", version: "1.132.0" };
    var CompositePrincipal = class extends PrincipalBase {
      constructor(...principals) {
        super();
        this.principals = new Array();
        if (principals.length === 0) {
          throw new Error("CompositePrincipals must be constructed with at least 1 Principal but none were passed.");
        }
        this.assumeRoleAction = principals[0].assumeRoleAction;
        this.addPrincipals(...principals);
      }
      addPrincipals(...principals) {
        for (const p of principals) {
          if (p.assumeRoleAction !== this.assumeRoleAction) {
            throw new Error(`Cannot add multiple principals with different "assumeRoleAction". Expecting "${this.assumeRoleAction}", got "${p.assumeRoleAction}"`);
          }
          const fragment = p.policyFragment;
          if (fragment.conditions && Object.keys(fragment.conditions).length > 0) {
            throw new Error(`Components of a CompositePrincipal must not have conditions. Tried to add the following fragment: ${JSON.stringify(fragment)}`);
          }
          this.principals.push(p);
        }
        return this;
      }
      get policyFragment() {
        const principalJson = {};
        for (const p of this.principals) {
          util_1.mergePrincipal(principalJson, p.policyFragment.principalJson);
        }
        return new PrincipalPolicyFragment(principalJson);
      }
      toString() {
        return `CompositePrincipal(${this.principals})`;
      }
    };
    exports2.CompositePrincipal = CompositePrincipal;
    _t = JSII_RTTI_SYMBOL_1;
    CompositePrincipal[_t] = { fqn: "@aws-cdk/aws-iam.CompositePrincipal", version: "1.132.0" };
    var StackDependentToken = class {
      constructor(fn) {
        this.fn = fn;
        this.creationStack = cdk.captureStackTrace();
      }
      resolve(context) {
        return this.fn(cdk.Stack.of(context.scope));
      }
      toString() {
        return cdk.Token.asString(this);
      }
      toJSON() {
        return "<unresolved-token>";
      }
    };
    var ServicePrincipalToken = class {
      constructor(service, opts) {
        this.service = service;
        this.opts = opts;
        this.creationStack = cdk.captureStackTrace();
      }
      resolve(ctx) {
        const region = this.opts.region || cdk.Stack.of(ctx.scope).region;
        const fact = region_info_1.RegionInfo.get(region).servicePrincipal(this.service);
        return fact || region_info_1.Default.servicePrincipal(this.service, region, cdk.Aws.URL_SUFFIX);
      }
      toString() {
        return cdk.Token.asString(this, {
          displayHint: this.service
        });
      }
      toJSON() {
        return `<${this.service}>`;
      }
    };
  }
});

// asset-input/node_modules/@aws-cdk/aws-iam/lib/group.js
var require_group = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-iam/lib/group.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Group = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var iam_generated_1 = require_iam_generated();
    var policy_1 = require_policy();
    var principals_1 = require_principals();
    var util_1 = require_util2();
    var GroupBase = class extends core_1.Resource {
      constructor() {
        super(...arguments);
        this.grantPrincipal = this;
        this.principalAccount = this.env.account;
        this.assumeRoleAction = "sts:AssumeRole";
        this.attachedPolicies = new util_1.AttachedPolicies();
      }
      get policyFragment() {
        return new principals_1.ArnPrincipal(this.groupArn).policyFragment;
      }
      attachInlinePolicy(policy) {
        this.attachedPolicies.attach(policy);
        policy.attachToGroup(this);
      }
      addManagedPolicy(_policy) {
      }
      addUser(user) {
        user.addToGroup(this);
      }
      addToPrincipalPolicy(statement) {
        if (!this.defaultPolicy) {
          this.defaultPolicy = new policy_1.Policy(this, "DefaultPolicy");
          this.defaultPolicy.attachToGroup(this);
        }
        this.defaultPolicy.addStatements(statement);
        return { statementAdded: true, policyDependable: this.defaultPolicy };
      }
      addToPolicy(statement) {
        return this.addToPrincipalPolicy(statement).statementAdded;
      }
    };
    var Group = class extends GroupBase {
      constructor(scope, id, props = {}) {
        super(scope, id, {
          physicalName: props.groupName
        });
        this.managedPolicies = [];
        this.managedPolicies.push(...props.managedPolicies || []);
        const group = new iam_generated_1.CfnGroup(this, "Resource", {
          groupName: this.physicalName,
          managedPolicyArns: core_1.Lazy.list({ produce: () => this.managedPolicies.map((p) => p.managedPolicyArn) }, { omitEmpty: true }),
          path: props.path
        });
        this.groupName = this.getResourceNameAttribute(group.ref);
        this.groupArn = this.getResourceArnAttribute(group.attrArn, {
          region: "",
          service: "iam",
          resource: "group",
          resourceName: this.physicalName
        });
      }
      static fromGroupArn(scope, id, groupArn) {
        const arnComponents = core_1.Stack.of(scope).parseArn(groupArn);
        const groupName = arnComponents.resourceName;
        class Import extends GroupBase {
          constructor() {
            super(...arguments);
            this.groupName = groupName;
            this.groupArn = groupArn;
            this.principalAccount = arnComponents.account;
          }
        }
        return new Import(scope, id);
      }
      addManagedPolicy(policy) {
        if (this.managedPolicies.find((mp) => mp === policy)) {
          return;
        }
        this.managedPolicies.push(policy);
      }
    };
    exports2.Group = Group;
    _a = JSII_RTTI_SYMBOL_1;
    Group[_a] = { fqn: "@aws-cdk/aws-iam.Group", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-iam/lib/policy-statement.js
var require_policy_statement = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-iam/lib/policy-statement.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Effect = exports2.PolicyStatement = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var group_1 = require_group();
    var principals_1 = require_principals();
    var util_1 = require_util2();
    var ensureArrayOrUndefined = (field) => {
      if (field === void 0) {
        return void 0;
      }
      if (typeof field !== "string" && !Array.isArray(field)) {
        throw new Error("Fields must be either a string or an array of strings");
      }
      if (Array.isArray(field) && !!field.find((f) => typeof f !== "string")) {
        throw new Error("Fields must be either a string or an array of strings");
      }
      return Array.isArray(field) ? field : [field];
    };
    var PolicyStatement = class {
      constructor(props = {}) {
        this.action = new Array();
        this.notAction = new Array();
        this.principal = {};
        this.notPrincipal = {};
        this.resource = new Array();
        this.notResource = new Array();
        this.condition = {};
        for (const action of [...props.actions || [], ...props.notActions || []]) {
          if (!/^(\*|[a-zA-Z0-9-]+:[a-zA-Z0-9*]+)$/.test(action) && !cdk.Token.isUnresolved(action)) {
            throw new Error(`Action '${action}' is invalid. An action string consists of a service namespace, a colon, and the name of an action. Action names can include wildcards.`);
          }
        }
        this.sid = props.sid;
        this.effect = props.effect || Effect.ALLOW;
        this.addActions(...props.actions || []);
        this.addNotActions(...props.notActions || []);
        this.addPrincipals(...props.principals || []);
        this.addNotPrincipals(...props.notPrincipals || []);
        this.addResources(...props.resources || []);
        this.addNotResources(...props.notResources || []);
        if (props.conditions !== void 0) {
          this.addConditions(props.conditions);
        }
      }
      static fromJson(obj) {
        const ret = new PolicyStatement({
          sid: obj.Sid,
          actions: ensureArrayOrUndefined(obj.Action),
          resources: ensureArrayOrUndefined(obj.Resource),
          conditions: obj.Condition,
          effect: obj.Effect,
          notActions: ensureArrayOrUndefined(obj.NotAction),
          notResources: ensureArrayOrUndefined(obj.NotResource),
          principals: obj.Principal ? [new JsonPrincipal(obj.Principal)] : void 0,
          notPrincipals: obj.NotPrincipal ? [new JsonPrincipal(obj.NotPrincipal)] : void 0
        });
        const errors = ret.validateForAnyPolicy();
        if (errors.length > 0) {
          throw new Error("Incorrect Policy Statement: " + errors.join("\n"));
        }
        return ret;
      }
      addActions(...actions) {
        if (actions.length > 0 && this.notAction.length > 0) {
          throw new Error("Cannot add 'Actions' to policy statement if 'NotActions' have been added");
        }
        this.action.push(...actions);
      }
      addNotActions(...notActions) {
        if (notActions.length > 0 && this.action.length > 0) {
          throw new Error("Cannot add 'NotActions' to policy statement if 'Actions' have been added");
        }
        this.notAction.push(...notActions);
      }
      get hasPrincipal() {
        return Object.keys(this.principal).length > 0 || Object.keys(this.notPrincipal).length > 0;
      }
      addPrincipals(...principals) {
        if (Object.keys(principals).length > 0 && Object.keys(this.notPrincipal).length > 0) {
          throw new Error("Cannot add 'Principals' to policy statement if 'NotPrincipals' have been added");
        }
        for (const principal of principals) {
          this.validatePolicyPrincipal(principal);
          const fragment = principal.policyFragment;
          util_1.mergePrincipal(this.principal, fragment.principalJson);
          this.addPrincipalConditions(fragment.conditions);
        }
      }
      addNotPrincipals(...notPrincipals) {
        if (Object.keys(notPrincipals).length > 0 && Object.keys(this.principal).length > 0) {
          throw new Error("Cannot add 'NotPrincipals' to policy statement if 'Principals' have been added");
        }
        for (const notPrincipal of notPrincipals) {
          this.validatePolicyPrincipal(notPrincipal);
          const fragment = notPrincipal.policyFragment;
          util_1.mergePrincipal(this.notPrincipal, fragment.principalJson);
          this.addPrincipalConditions(fragment.conditions);
        }
      }
      validatePolicyPrincipal(principal) {
        if (principal instanceof group_1.Group) {
          throw new Error("Cannot use an IAM Group as the 'Principal' or 'NotPrincipal' in an IAM Policy");
        }
      }
      addAwsAccountPrincipal(accountId) {
        this.addPrincipals(new principals_1.AccountPrincipal(accountId));
      }
      addArnPrincipal(arn) {
        this.addPrincipals(new principals_1.ArnPrincipal(arn));
      }
      addServicePrincipal(service, opts) {
        this.addPrincipals(new principals_1.ServicePrincipal(service, opts));
      }
      addFederatedPrincipal(federated, conditions) {
        this.addPrincipals(new principals_1.FederatedPrincipal(federated, conditions));
      }
      addAccountRootPrincipal() {
        this.addPrincipals(new principals_1.AccountRootPrincipal());
      }
      addCanonicalUserPrincipal(canonicalUserId) {
        this.addPrincipals(new principals_1.CanonicalUserPrincipal(canonicalUserId));
      }
      addAnyPrincipal() {
        this.addPrincipals(new principals_1.AnyPrincipal());
      }
      addResources(...arns) {
        if (arns.length > 0 && this.notResource.length > 0) {
          throw new Error("Cannot add 'Resources' to policy statement if 'NotResources' have been added");
        }
        this.resource.push(...arns);
      }
      addNotResources(...arns) {
        if (arns.length > 0 && this.resource.length > 0) {
          throw new Error("Cannot add 'NotResources' to policy statement if 'Resources' have been added");
        }
        this.notResource.push(...arns);
      }
      addAllResources() {
        this.addResources("*");
      }
      get hasResource() {
        return this.resource && this.resource.length > 0;
      }
      addCondition(key, value) {
        const existingValue = this.condition[key];
        this.condition[key] = existingValue ? __spreadValues(__spreadValues({}, existingValue), value) : value;
      }
      addConditions(conditions) {
        Object.keys(conditions).map((key) => {
          this.addCondition(key, conditions[key]);
        });
      }
      addAccountCondition(accountId) {
        this.addCondition("StringEquals", { "sts:ExternalId": accountId });
      }
      toStatementJson() {
        return noUndef({
          Action: _norm(this.action, { unique: true }),
          NotAction: _norm(this.notAction, { unique: true }),
          Condition: _norm(this.condition),
          Effect: _norm(this.effect),
          Principal: _normPrincipal(this.principal),
          NotPrincipal: _normPrincipal(this.notPrincipal),
          Resource: _norm(this.resource, { unique: true }),
          NotResource: _norm(this.notResource, { unique: true }),
          Sid: _norm(this.sid)
        });
        function _norm(values, { unique } = { unique: false }) {
          if (typeof values === "undefined") {
            return void 0;
          }
          if (cdk.Token.isUnresolved(values)) {
            return values;
          }
          if (Array.isArray(values)) {
            if (!values || values.length === 0) {
              return void 0;
            }
            if (values.length === 1) {
              return values[0];
            }
            return unique ? [...new Set(values)] : values;
          }
          if (typeof values === "object") {
            if (Object.keys(values).length === 0) {
              return void 0;
            }
          }
          return values;
        }
        function _normPrincipal(principal) {
          const keys = Object.keys(principal);
          if (keys.length === 0) {
            return void 0;
          }
          if (util_1.LITERAL_STRING_KEY in principal) {
            return principal[util_1.LITERAL_STRING_KEY][0];
          }
          const result = {};
          for (const key of keys) {
            const normVal = _norm(principal[key]);
            if (normVal) {
              result[key] = normVal;
            }
          }
          return result;
        }
      }
      toString() {
        return cdk.Token.asString(this, {
          displayHint: "PolicyStatement"
        });
      }
      toJSON() {
        return this.toStatementJson();
      }
      addPrincipalConditions(conditions) {
        const theseConditions = JSON.stringify(conditions);
        if (this.principalConditionsJson === void 0) {
          this.principalConditionsJson = theseConditions;
        } else {
          if (this.principalConditionsJson !== theseConditions) {
            throw new Error(`All principals in a PolicyStatement must have the same Conditions (got '${this.principalConditionsJson}' and '${theseConditions}'). Use multiple statements instead.`);
          }
        }
        this.addConditions(conditions);
      }
      validateForAnyPolicy() {
        const errors = new Array();
        if (this.action.length === 0 && this.notAction.length === 0) {
          errors.push("A PolicyStatement must specify at least one 'action' or 'notAction'.");
        }
        return errors;
      }
      validateForResourcePolicy() {
        const errors = this.validateForAnyPolicy();
        if (Object.keys(this.principal).length === 0 && Object.keys(this.notPrincipal).length === 0) {
          errors.push("A PolicyStatement used in a resource-based policy must specify at least one IAM principal.");
        }
        return errors;
      }
      validateForIdentityPolicy() {
        const errors = this.validateForAnyPolicy();
        if (Object.keys(this.principal).length > 0 || Object.keys(this.notPrincipal).length > 0) {
          errors.push("A PolicyStatement used in an identity-based policy cannot specify any IAM principals.");
        }
        if (Object.keys(this.resource).length === 0 && Object.keys(this.notResource).length === 0) {
          errors.push("A PolicyStatement used in an identity-based policy must specify at least one resource.");
        }
        return errors;
      }
    };
    exports2.PolicyStatement = PolicyStatement;
    _a = JSII_RTTI_SYMBOL_1;
    PolicyStatement[_a] = { fqn: "@aws-cdk/aws-iam.PolicyStatement", version: "1.132.0" };
    var Effect;
    (function(Effect2) {
      Effect2["ALLOW"] = "Allow";
      Effect2["DENY"] = "Deny";
    })(Effect = exports2.Effect || (exports2.Effect = {}));
    function noUndef(x) {
      const ret = {};
      for (const [key, value] of Object.entries(x)) {
        if (value !== void 0) {
          ret[key] = value;
        }
      }
      return ret;
    }
    var JsonPrincipal = class extends principals_1.PrincipalBase {
      constructor(json = {}) {
        super();
        if (typeof json === "string") {
          json = { [util_1.LITERAL_STRING_KEY]: [json] };
        }
        if (typeof json !== "object") {
          throw new Error(`JSON IAM principal should be an object, got ${JSON.stringify(json)}`);
        }
        this.policyFragment = {
          principalJson: json,
          conditions: {}
        };
      }
    };
  }
});

// asset-input/node_modules/@aws-cdk/aws-iam/lib/policy-document.js
var require_policy_document = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-iam/lib/policy-document.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PolicyDocument = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var policy_statement_1 = require_policy_statement();
    var PolicyDocument = class {
      constructor(props = {}) {
        this.statements = new Array();
        this.creationStack = cdk.captureStackTrace();
        this.autoAssignSids = !!props.assignSids;
        this.addStatements(...props.statements || []);
      }
      static fromJson(obj) {
        var _b;
        const newPolicyDocument = new PolicyDocument();
        const statement = (_b = obj.Statement) !== null && _b !== void 0 ? _b : [];
        if (statement && !Array.isArray(statement)) {
          throw new Error("Statement must be an array");
        }
        newPolicyDocument.addStatements(...obj.Statement.map((s) => policy_statement_1.PolicyStatement.fromJson(s)));
        return newPolicyDocument;
      }
      resolve(context) {
        context.registerPostProcessor(new RemoveDuplicateStatements(this.autoAssignSids));
        return this.render();
      }
      get isEmpty() {
        return this.statements.length === 0;
      }
      get statementCount() {
        return this.statements.length;
      }
      addStatements(...statement) {
        this.statements.push(...statement);
      }
      toString() {
        return cdk.Token.asString(this, {
          displayHint: "PolicyDocument"
        });
      }
      toJSON() {
        return this.render();
      }
      validateForAnyPolicy() {
        const errors = new Array();
        for (const statement of this.statements) {
          errors.push(...statement.validateForAnyPolicy());
        }
        return errors;
      }
      validateForResourcePolicy() {
        const errors = new Array();
        for (const statement of this.statements) {
          errors.push(...statement.validateForResourcePolicy());
        }
        return errors;
      }
      validateForIdentityPolicy() {
        const errors = new Array();
        for (const statement of this.statements) {
          errors.push(...statement.validateForIdentityPolicy());
        }
        return errors;
      }
      render() {
        if (this.isEmpty) {
          return void 0;
        }
        const doc = {
          Statement: this.statements.map((s) => s.toStatementJson()),
          Version: "2012-10-17"
        };
        return doc;
      }
    };
    exports2.PolicyDocument = PolicyDocument;
    _a = JSII_RTTI_SYMBOL_1;
    PolicyDocument[_a] = { fqn: "@aws-cdk/aws-iam.PolicyDocument", version: "1.132.0" };
    var RemoveDuplicateStatements = class {
      constructor(autoAssignSids) {
        this.autoAssignSids = autoAssignSids;
      }
      postProcess(input, _context) {
        if (!input || !input.Statement) {
          return input;
        }
        const jsonStatements = new Set();
        const uniqueStatements = [];
        for (const statement of input.Statement) {
          const jsonStatement = JSON.stringify(statement);
          if (!jsonStatements.has(jsonStatement)) {
            uniqueStatements.push(statement);
            jsonStatements.add(jsonStatement);
          }
        }
        const statements = uniqueStatements.map((s, i) => {
          if (this.autoAssignSids && !s.Sid) {
            s.Sid = i.toString();
          }
          return s;
        });
        return __spreadProps(__spreadValues({}, input), {
          Statement: statements
        });
      }
    };
  }
});

// asset-input/node_modules/@aws-cdk/aws-iam/lib/managed-policy.js
var require_managed_policy = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-iam/lib/managed-policy.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ManagedPolicy = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var iam_generated_1 = require_iam_generated();
    var policy_document_1 = require_policy_document();
    var util_1 = require_util2();
    var ManagedPolicy = class extends core_1.Resource {
      constructor(scope, id, props = {}) {
        super(scope, id, {
          physicalName: props.managedPolicyName
        });
        this.document = new policy_document_1.PolicyDocument();
        this.roles = new Array();
        this.users = new Array();
        this.groups = new Array();
        this.description = props.description || "";
        this.path = props.path || "/";
        if (props.document) {
          this.document = props.document;
        }
        const resource = new iam_generated_1.CfnManagedPolicy(this, "Resource", {
          policyDocument: this.document,
          managedPolicyName: this.physicalName,
          description: this.description,
          path: this.path,
          roles: util_1.undefinedIfEmpty(() => this.roles.map((r) => r.roleName)),
          users: util_1.undefinedIfEmpty(() => this.users.map((u) => u.userName)),
          groups: util_1.undefinedIfEmpty(() => this.groups.map((g) => g.groupName))
        });
        if (props.users) {
          props.users.forEach((u) => this.attachToUser(u));
        }
        if (props.groups) {
          props.groups.forEach((g) => this.attachToGroup(g));
        }
        if (props.roles) {
          props.roles.forEach((r) => this.attachToRole(r));
        }
        if (props.statements) {
          props.statements.forEach((p) => this.addStatements(p));
        }
        this.managedPolicyName = this.getResourceNameAttribute(core_1.Stack.of(this).parseArn(resource.ref, "/").resourceName);
        this.managedPolicyArn = this.getResourceArnAttribute(resource.ref, {
          region: "",
          service: "iam",
          resource: "policy",
          resourceName: this.physicalName
        });
      }
      static fromManagedPolicyName(scope, id, managedPolicyName) {
        class Import extends core_1.Resource {
          constructor() {
            super(...arguments);
            this.managedPolicyArn = core_1.Stack.of(scope).formatArn({
              service: "iam",
              region: "",
              account: core_1.Stack.of(scope).account,
              resource: "policy",
              resourceName: managedPolicyName
            });
          }
        }
        return new Import(scope, id);
      }
      static fromManagedPolicyArn(scope, id, managedPolicyArn) {
        class Import extends core_1.Resource {
          constructor() {
            super(...arguments);
            this.managedPolicyArn = managedPolicyArn;
          }
        }
        return new Import(scope, id);
      }
      static fromAwsManagedPolicyName(managedPolicyName) {
        class AwsManagedPolicy {
          constructor() {
            this.managedPolicyArn = core_1.Lazy.uncachedString({
              produce(ctx) {
                return core_1.Stack.of(ctx.scope).formatArn({
                  service: "iam",
                  region: "",
                  account: "aws",
                  resource: "policy",
                  resourceName: managedPolicyName
                });
              }
            });
          }
        }
        return new AwsManagedPolicy();
      }
      addStatements(...statement) {
        this.document.addStatements(...statement);
      }
      attachToUser(user) {
        if (this.users.find((u) => u === user)) {
          return;
        }
        this.users.push(user);
      }
      attachToRole(role) {
        if (this.roles.find((r) => r === role)) {
          return;
        }
        this.roles.push(role);
      }
      attachToGroup(group) {
        if (this.groups.find((g) => g === group)) {
          return;
        }
        this.groups.push(group);
      }
      validate() {
        const result = new Array();
        if (this.document.isEmpty) {
          result.push("Managed Policy is empty. You must add statements to the policy");
        }
        result.push(...this.document.validateForIdentityPolicy());
        return result;
      }
    };
    exports2.ManagedPolicy = ManagedPolicy;
    _a = JSII_RTTI_SYMBOL_1;
    ManagedPolicy[_a] = { fqn: "@aws-cdk/aws-iam.ManagedPolicy", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-iam/lib/grant.js
var require_grant = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-iam/lib/grant.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CompositeDependable = exports2.Grant = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var policy_statement_1 = require_policy_statement();
    var Grant = class {
      constructor(props) {
        this.options = props.options;
        this.principalStatement = props.principalStatement;
        this.resourceStatement = props.resourceStatement;
        cdk.DependableTrait.implement(this, {
          get dependencyRoots() {
            return props.policyDependable ? cdk.DependableTrait.get(props.policyDependable).dependencyRoots : [];
          }
        });
      }
      static addToPrincipalOrResource(options) {
        var _c;
        const result = Grant.addToPrincipal(__spreadProps(__spreadValues({}, options), {
          scope: options.resource
        }));
        const resourceAndPrincipalAccountComparison = options.grantee.grantPrincipal.principalAccount ? cdk.Token.compareStrings(options.resource.env.account, options.grantee.grantPrincipal.principalAccount) : void 0;
        const equalOrBothUnresolved = resourceAndPrincipalAccountComparison === cdk.TokenComparison.SAME || resourceAndPrincipalAccountComparison == cdk.TokenComparison.BOTH_UNRESOLVED;
        const sameAccount = resourceAndPrincipalAccountComparison ? equalOrBothUnresolved : false;
        if (result.success && sameAccount) {
          return result;
        }
        const statement = new policy_statement_1.PolicyStatement({
          actions: options.actions,
          resources: options.resourceSelfArns || options.resourceArns,
          principals: [options.grantee.grantPrincipal]
        });
        const resourceResult = options.resource.addToResourcePolicy(statement);
        return new Grant({
          resourceStatement: statement,
          options,
          policyDependable: resourceResult.statementAdded ? (_c = resourceResult.policyDependable) !== null && _c !== void 0 ? _c : options.resource : void 0
        });
      }
      static addToPrincipal(options) {
        const statement = new policy_statement_1.PolicyStatement({
          actions: options.actions,
          resources: options.resourceArns
        });
        const addedToPrincipal = options.grantee.grantPrincipal.addToPrincipalPolicy(statement);
        if (!addedToPrincipal.statementAdded) {
          return new Grant({ principalStatement: void 0, options });
        }
        if (!addedToPrincipal.policyDependable) {
          throw new Error("Contract violation: when Principal returns statementAdded=true, it should return a dependable");
        }
        return new Grant({ principalStatement: statement, options, policyDependable: addedToPrincipal.policyDependable });
      }
      static addToPrincipalAndResource(options) {
        var _c;
        const result = Grant.addToPrincipal(__spreadProps(__spreadValues({}, options), {
          scope: options.resource
        }));
        const statement = new policy_statement_1.PolicyStatement({
          actions: options.actions,
          resources: options.resourceSelfArns || options.resourceArns,
          principals: [options.resourcePolicyPrincipal || options.grantee.grantPrincipal]
        });
        const resourceResult = options.resource.addToResourcePolicy(statement);
        const resourceDependable = resourceResult.statementAdded ? (_c = resourceResult.policyDependable) !== null && _c !== void 0 ? _c : options.resource : void 0;
        return new Grant({
          principalStatement: statement,
          resourceStatement: result.resourceStatement,
          options,
          policyDependable: resourceDependable ? new CompositeDependable(result, resourceDependable) : result
        });
      }
      static drop(grantee, _intent) {
        return new Grant({
          options: { grantee, actions: [], resourceArns: [] }
        });
      }
      get success() {
        return this.principalStatement !== void 0 || this.resourceStatement !== void 0;
      }
      assertSuccess() {
        if (!this.success) {
          throw new Error(`${describeGrant(this.options)} could not be added on either identity or resource policy.`);
        }
      }
      applyBefore(...constructs) {
        for (const construct of constructs) {
          construct.node.addDependency(this);
        }
      }
    };
    exports2.Grant = Grant;
    _a = JSII_RTTI_SYMBOL_1;
    Grant[_a] = { fqn: "@aws-cdk/aws-iam.Grant", version: "1.132.0" };
    function describeGrant(options) {
      return `Permissions for '${options.grantee}' to call '${options.actions}' on '${options.resourceArns}'`;
    }
    var CompositeDependable = class {
      constructor(...dependables) {
        cdk.DependableTrait.implement(this, {
          get dependencyRoots() {
            return Array.prototype.concat.apply([], dependables.map((d) => cdk.DependableTrait.get(d).dependencyRoots));
          }
        });
      }
    };
    exports2.CompositeDependable = CompositeDependable;
    _b = JSII_RTTI_SYMBOL_1;
    CompositeDependable[_b] = { fqn: "@aws-cdk/aws-iam.CompositeDependable", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-iam/lib/private/immutable-role.js
var require_immutable_role = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-iam/lib/private/immutable-role.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ImmutableRole = void 0;
    var core_1 = require_lib8();
    var ImmutableRole = class extends core_1.Resource {
      constructor(scope, id, role, addGrantsToResources) {
        super(scope, id, {
          account: role.env.account,
          region: role.env.region
        });
        this.role = role;
        this.addGrantsToResources = addGrantsToResources;
        this.assumeRoleAction = this.role.assumeRoleAction;
        this.policyFragment = this.role.policyFragment;
        this.grantPrincipal = this;
        this.principalAccount = this.role.principalAccount;
        this.roleArn = this.role.roleArn;
        this.roleName = this.role.roleName;
        this.stack = this.role.stack;
        core_1.DependableTrait.implement(this, {
          dependencyRoots: [role]
        });
      }
      attachInlinePolicy(_policy) {
      }
      addManagedPolicy(_policy) {
      }
      addToPolicy(statement) {
        return this.addToPrincipalPolicy(statement).statementAdded;
      }
      addToPrincipalPolicy(_statement) {
        const pretendSuccess = !this.addGrantsToResources;
        return { statementAdded: pretendSuccess, policyDependable: new core_1.ConcreteDependable() };
      }
      grant(grantee, ...actions) {
        return this.role.grant(grantee, ...actions);
      }
      grantPassRole(grantee) {
        return this.role.grantPassRole(grantee);
      }
    };
    exports2.ImmutableRole = ImmutableRole;
  }
});

// asset-input/node_modules/@aws-cdk/aws-iam/lib/role.js
var require_role = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-iam/lib/role.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Role = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var constructs_1 = require_lib4();
    var grant_1 = require_grant();
    var iam_generated_1 = require_iam_generated();
    var policy_1 = require_policy();
    var policy_document_1 = require_policy_document();
    var policy_statement_1 = require_policy_statement();
    var principals_1 = require_principals();
    var immutable_role_1 = require_immutable_role();
    var util_1 = require_util2();
    var Role = class extends core_1.Resource {
      constructor(scope, id, props) {
        var _b;
        super(scope, id, {
          physicalName: props.roleName
        });
        this.grantPrincipal = this;
        this.principalAccount = this.env.account;
        this.assumeRoleAction = "sts:AssumeRole";
        this.managedPolicies = [];
        this.attachedPolicies = new util_1.AttachedPolicies();
        const externalIds = props.externalIds || [];
        if (props.externalId) {
          externalIds.push(props.externalId);
        }
        this.assumeRolePolicy = createAssumeRolePolicy(props.assumedBy, externalIds);
        this.managedPolicies.push(...props.managedPolicies || []);
        this.inlinePolicies = props.inlinePolicies || {};
        this.permissionsBoundary = props.permissionsBoundary;
        const maxSessionDuration = props.maxSessionDuration && props.maxSessionDuration.toSeconds();
        validateMaxSessionDuration(maxSessionDuration);
        const description = props.description && ((_b = props.description) === null || _b === void 0 ? void 0 : _b.length) > 0 ? props.description : void 0;
        if (description && description.length > 1e3) {
          throw new Error("Role description must be no longer than 1000 characters.");
        }
        const role = new iam_generated_1.CfnRole(this, "Resource", {
          assumeRolePolicyDocument: this.assumeRolePolicy,
          managedPolicyArns: util_1.UniqueStringSet.from(() => this.managedPolicies.map((p) => p.managedPolicyArn)),
          policies: _flatten(this.inlinePolicies),
          path: props.path,
          permissionsBoundary: this.permissionsBoundary ? this.permissionsBoundary.managedPolicyArn : void 0,
          roleName: this.physicalName,
          maxSessionDuration,
          description
        });
        this.roleId = role.attrRoleId;
        this.roleArn = this.getResourceArnAttribute(role.attrArn, {
          region: "",
          service: "iam",
          resource: "role",
          resourceName: this.physicalName
        });
        this.roleName = this.getResourceNameAttribute(role.ref);
        this.policyFragment = new principals_1.ArnPrincipal(this.roleArn).policyFragment;
        function _flatten(policies) {
          if (policies == null || Object.keys(policies).length === 0) {
            return void 0;
          }
          const result = new Array();
          for (const policyName of Object.keys(policies)) {
            const policyDocument = policies[policyName];
            result.push({ policyName, policyDocument });
          }
          return result;
        }
      }
      static fromRoleArn(scope, id, roleArn, options = {}) {
        var _b;
        const scopeStack = core_1.Stack.of(scope);
        const parsedArn = scopeStack.parseArn(roleArn);
        const resourceName = parsedArn.resourceName;
        const roleAccount = parsedArn.account;
        const roleName = resourceName.split("/").pop();
        class Import extends core_1.Resource {
          constructor(_scope, _id) {
            super(_scope, _id, {
              account: roleAccount
            });
            this.grantPrincipal = this;
            this.principalAccount = roleAccount;
            this.assumeRoleAction = "sts:AssumeRole";
            this.policyFragment = new principals_1.ArnPrincipal(roleArn).policyFragment;
            this.roleArn = roleArn;
            this.roleName = roleName;
            this.attachedPolicies = new util_1.AttachedPolicies();
          }
          addToPolicy(statement) {
            return this.addToPrincipalPolicy(statement).statementAdded;
          }
          addToPrincipalPolicy(statement) {
            if (!this.defaultPolicy) {
              this.defaultPolicy = new policy_1.Policy(this, "Policy");
              this.attachInlinePolicy(this.defaultPolicy);
            }
            this.defaultPolicy.addStatements(statement);
            return { statementAdded: true, policyDependable: this.defaultPolicy };
          }
          attachInlinePolicy(policy) {
            const thisAndPolicyAccountComparison = core_1.Token.compareStrings(this.env.account, policy.env.account);
            const equalOrAnyUnresolved2 = thisAndPolicyAccountComparison === core_1.TokenComparison.SAME || thisAndPolicyAccountComparison === core_1.TokenComparison.BOTH_UNRESOLVED || thisAndPolicyAccountComparison === core_1.TokenComparison.ONE_UNRESOLVED;
            if (equalOrAnyUnresolved2) {
              this.attachedPolicies.attach(policy);
              policy.attachToRole(this);
            }
          }
          addManagedPolicy(_policy) {
          }
          grantPassRole(identity) {
            return this.grant(identity, "iam:PassRole");
          }
          grant(grantee, ...actions) {
            return grant_1.Grant.addToPrincipal({
              grantee,
              actions,
              resourceArns: [this.roleArn],
              scope: this
            });
          }
        }
        if (options.addGrantsToResources !== void 0 && options.mutable !== false) {
          throw new Error("'addGrantsToResources' can only be passed if 'mutable: false'");
        }
        const importedRole = new Import(scope, id);
        const roleArnAndScopeStackAccountComparison = core_1.Token.compareStrings(importedRole.env.account, scopeStack.account);
        const equalOrAnyUnresolved = roleArnAndScopeStackAccountComparison === core_1.TokenComparison.SAME || roleArnAndScopeStackAccountComparison === core_1.TokenComparison.BOTH_UNRESOLVED || roleArnAndScopeStackAccountComparison === core_1.TokenComparison.ONE_UNRESOLVED;
        return options.mutable !== false && equalOrAnyUnresolved ? importedRole : new immutable_role_1.ImmutableRole(scope, `ImmutableRole${id}`, importedRole, (_b = options.addGrantsToResources) !== null && _b !== void 0 ? _b : false);
      }
      addToPrincipalPolicy(statement) {
        if (!this.defaultPolicy) {
          this.defaultPolicy = new policy_1.Policy(this, "DefaultPolicy");
          this.attachInlinePolicy(this.defaultPolicy);
        }
        this.defaultPolicy.addStatements(statement);
        return { statementAdded: true, policyDependable: this.defaultPolicy };
      }
      addToPolicy(statement) {
        return this.addToPrincipalPolicy(statement).statementAdded;
      }
      addManagedPolicy(policy) {
        if (this.managedPolicies.find((mp) => mp === policy)) {
          return;
        }
        this.managedPolicies.push(policy);
      }
      attachInlinePolicy(policy) {
        this.attachedPolicies.attach(policy);
        policy.attachToRole(this);
      }
      grant(grantee, ...actions) {
        return grant_1.Grant.addToPrincipal({
          grantee,
          actions,
          resourceArns: [this.roleArn],
          scope: this
        });
      }
      grantPassRole(identity) {
        return this.grant(identity, "iam:PassRole");
      }
      withoutPolicyUpdates(options = {}) {
        var _b;
        if (!this.immutableRole) {
          this.immutableRole = new immutable_role_1.ImmutableRole(constructs_1.Node.of(this).scope, `ImmutableRole${this.node.id}`, this, (_b = options.addGrantsToResources) !== null && _b !== void 0 ? _b : false);
        }
        return this.immutableRole;
      }
      validate() {
        var _b;
        const errors = super.validate();
        errors.push(...((_b = this.assumeRolePolicy) === null || _b === void 0 ? void 0 : _b.validateForResourcePolicy()) || []);
        for (const policy of Object.values(this.inlinePolicies)) {
          errors.push(...policy.validateForIdentityPolicy());
        }
        return errors;
      }
    };
    exports2.Role = Role;
    _a = JSII_RTTI_SYMBOL_1;
    Role[_a] = { fqn: "@aws-cdk/aws-iam.Role", version: "1.132.0" };
    function createAssumeRolePolicy(principal, externalIds) {
      const statement = new AwsStarStatement();
      statement.addPrincipals(principal);
      statement.addActions(principal.assumeRoleAction);
      if (externalIds.length) {
        statement.addCondition("StringEquals", { "sts:ExternalId": externalIds.length === 1 ? externalIds[0] : externalIds });
      }
      const doc = new policy_document_1.PolicyDocument();
      doc.addStatements(statement);
      return doc;
    }
    function validateMaxSessionDuration(duration) {
      if (duration === void 0) {
        return;
      }
      if (duration < 3600 || duration > 43200) {
        throw new Error(`maxSessionDuration is set to ${duration}, but must be >= 3600sec (1hr) and <= 43200sec (12hrs)`);
      }
    }
    var AwsStarStatement = class extends policy_statement_1.PolicyStatement {
      toStatementJson() {
        const stat = super.toStatementJson();
        if (stat.Principal === "*") {
          stat.Principal = { AWS: "*" };
        }
        return stat;
      }
    };
  }
});

// asset-input/node_modules/@aws-cdk/aws-iam/lib/user.js
var require_user = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-iam/lib/user.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.User = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var iam_generated_1 = require_iam_generated();
    var policy_1 = require_policy();
    var principals_1 = require_principals();
    var util_1 = require_util2();
    var User = class extends core_1.Resource {
      constructor(scope, id, props = {}) {
        super(scope, id, {
          physicalName: props.userName
        });
        this.grantPrincipal = this;
        this.principalAccount = this.env.account;
        this.assumeRoleAction = "sts:AssumeRole";
        this.groups = new Array();
        this.managedPolicies = new Array();
        this.attachedPolicies = new util_1.AttachedPolicies();
        this.managedPolicies.push(...props.managedPolicies || []);
        this.permissionsBoundary = props.permissionsBoundary;
        const user = new iam_generated_1.CfnUser(this, "Resource", {
          userName: this.physicalName,
          groups: util_1.undefinedIfEmpty(() => this.groups),
          managedPolicyArns: core_1.Lazy.list({ produce: () => this.managedPolicies.map((p) => p.managedPolicyArn) }, { omitEmpty: true }),
          path: props.path,
          permissionsBoundary: this.permissionsBoundary ? this.permissionsBoundary.managedPolicyArn : void 0,
          loginProfile: this.parseLoginProfile(props)
        });
        this.userName = this.getResourceNameAttribute(user.ref);
        this.userArn = this.getResourceArnAttribute(user.attrArn, {
          region: "",
          service: "iam",
          resource: "user",
          resourceName: this.physicalName
        });
        this.policyFragment = new principals_1.ArnPrincipal(this.userArn).policyFragment;
        if (props.groups) {
          props.groups.forEach((g) => this.addToGroup(g));
        }
      }
      static fromUserName(scope, id, userName) {
        const userArn = core_1.Stack.of(scope).formatArn({
          service: "iam",
          region: "",
          resource: "user",
          resourceName: userName
        });
        return User.fromUserAttributes(scope, id, { userArn });
      }
      static fromUserArn(scope, id, userArn) {
        return User.fromUserAttributes(scope, id, { userArn });
      }
      static fromUserAttributes(scope, id, attrs) {
        class Import extends core_1.Resource {
          constructor() {
            super(...arguments);
            this.grantPrincipal = this;
            this.principalAccount = core_1.Aws.ACCOUNT_ID;
            this.userName = core_1.Arn.extractResourceName(attrs.userArn, "user").split("/").pop();
            this.userArn = attrs.userArn;
            this.assumeRoleAction = "sts:AssumeRole";
            this.policyFragment = new principals_1.ArnPrincipal(attrs.userArn).policyFragment;
            this.attachedPolicies = new util_1.AttachedPolicies();
            this.groupId = 0;
          }
          addToPolicy(statement) {
            return this.addToPrincipalPolicy(statement).statementAdded;
          }
          addToPrincipalPolicy(statement) {
            if (!this.defaultPolicy) {
              this.defaultPolicy = new policy_1.Policy(this, "Policy");
              this.defaultPolicy.attachToUser(this);
            }
            this.defaultPolicy.addStatements(statement);
            return { statementAdded: true, policyDependable: this.defaultPolicy };
          }
          addToGroup(group) {
            new iam_generated_1.CfnUserToGroupAddition(core_1.Stack.of(group), `${this.userName}Group${this.groupId}`, {
              groupName: group.groupName,
              users: [this.userName]
            });
            this.groupId += 1;
          }
          attachInlinePolicy(policy) {
            this.attachedPolicies.attach(policy);
            policy.attachToUser(this);
          }
          addManagedPolicy(_policy) {
            throw new Error("Cannot add managed policy to imported User");
          }
        }
        return new Import(scope, id);
      }
      addToGroup(group) {
        this.groups.push(group.groupName);
      }
      addManagedPolicy(policy) {
        if (this.managedPolicies.find((mp) => mp === policy)) {
          return;
        }
        this.managedPolicies.push(policy);
      }
      attachInlinePolicy(policy) {
        this.attachedPolicies.attach(policy);
        policy.attachToUser(this);
      }
      addToPrincipalPolicy(statement) {
        if (!this.defaultPolicy) {
          this.defaultPolicy = new policy_1.Policy(this, "DefaultPolicy");
          this.defaultPolicy.attachToUser(this);
        }
        this.defaultPolicy.addStatements(statement);
        return { statementAdded: true, policyDependable: this.defaultPolicy };
      }
      addToPolicy(statement) {
        return this.addToPrincipalPolicy(statement).statementAdded;
      }
      parseLoginProfile(props) {
        if (props.password) {
          return {
            password: props.password.toString(),
            passwordResetRequired: props.passwordResetRequired
          };
        }
        if (props.passwordResetRequired) {
          throw new Error('Cannot set "passwordResetRequired" without specifying "initialPassword"');
        }
        return void 0;
      }
    };
    exports2.User = User;
    _a = JSII_RTTI_SYMBOL_1;
    User[_a] = { fqn: "@aws-cdk/aws-iam.User", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-iam/lib/lazy-role.js
var require_lazy_role = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-iam/lib/lazy-role.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LazyRole = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var role_1 = require_role();
    var LazyRole = class extends cdk.Resource {
      constructor(scope, id, props) {
        super(scope, id);
        this.props = props;
        this.grantPrincipal = this;
        this.principalAccount = this.env.account;
        this.assumeRoleAction = "sts:AssumeRole";
        this.statements = new Array();
        this.policies = new Array();
        this.managedPolicies = new Array();
      }
      addToPrincipalPolicy(statement) {
        if (this.role) {
          return this.role.addToPrincipalPolicy(statement);
        } else {
          this.statements.push(statement);
          return { statementAdded: true, policyDependable: this };
        }
      }
      addToPolicy(statement) {
        return this.addToPrincipalPolicy(statement).statementAdded;
      }
      attachInlinePolicy(policy) {
        if (this.role) {
          this.role.attachInlinePolicy(policy);
        } else {
          this.policies.push(policy);
        }
      }
      addManagedPolicy(policy) {
        if (this.role) {
          this.role.addManagedPolicy(policy);
        } else {
          this.managedPolicies.push(policy);
        }
      }
      get roleArn() {
        return this.instantiate().roleArn;
      }
      get roleId() {
        return this.instantiate().roleId;
      }
      get roleName() {
        return this.instantiate().roleName;
      }
      get policyFragment() {
        return this.instantiate().policyFragment;
      }
      grant(identity, ...actions) {
        return this.instantiate().grant(identity, ...actions);
      }
      grantPassRole(identity) {
        return this.instantiate().grantPassRole(identity);
      }
      instantiate() {
        if (!this.role) {
          const role = new role_1.Role(this, "Default", this.props);
          this.statements.forEach(role.addToPolicy.bind(role));
          this.policies.forEach(role.attachInlinePolicy.bind(role));
          this.managedPolicies.forEach(role.addManagedPolicy.bind(role));
          this.role = role;
        }
        return this.role;
      }
    };
    exports2.LazyRole = LazyRole;
    _a = JSII_RTTI_SYMBOL_1;
    LazyRole[_a] = { fqn: "@aws-cdk/aws-iam.LazyRole", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-iam/lib/identity-base.js
var require_identity_base = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-iam/lib/identity-base.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/@aws-cdk/aws-iam/lib/unknown-principal.js
var require_unknown_principal = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-iam/lib/unknown-principal.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UnknownPrincipal = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var constructs_1 = require_lib4();
    var UnknownPrincipal = class {
      constructor(props) {
        this.assumeRoleAction = "sts:AssumeRole";
        this.resource = props.resource;
        this.grantPrincipal = this;
      }
      get policyFragment() {
        throw new Error(`Cannot get policy fragment of ${constructs_1.Node.of(this.resource).path}, resource imported without a role`);
      }
      addToPrincipalPolicy(statement) {
        const stack = core_1.Stack.of(this.resource);
        const repr = JSON.stringify(stack.resolve(statement));
        core_1.Annotations.of(this.resource).addWarning(`Add statement to this resource's role: ${repr}`);
        return { statementAdded: true, policyDependable: new core_1.ConcreteDependable() };
      }
      addToPolicy(statement) {
        return this.addToPrincipalPolicy(statement).statementAdded;
      }
    };
    exports2.UnknownPrincipal = UnknownPrincipal;
    _a = JSII_RTTI_SYMBOL_1;
    UnknownPrincipal[_a] = { fqn: "@aws-cdk/aws-iam.UnknownPrincipal", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-iam/lib/oidc-provider.js
var require_oidc_provider = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-iam/lib/oidc-provider.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OpenIdConnectProvider = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var path = require("path");
    var core_1 = require_lib8();
    var RESOURCE_TYPE = "Custom::AWSCDKOpenIdConnectProvider";
    var OpenIdConnectProvider = class extends core_1.Resource {
      constructor(scope, id, props) {
        super(scope, id);
        const resource = new core_1.CustomResource(this, "Resource", {
          resourceType: RESOURCE_TYPE,
          serviceToken: this.getOrCreateProvider(),
          properties: {
            ClientIDList: props.clientIds,
            ThumbprintList: props.thumbprints,
            Url: props.url
          }
        });
        this.openIdConnectProviderArn = core_1.Token.asString(resource.ref);
        this.openIdConnectProviderIssuer = core_1.Arn.extractResourceName(this.openIdConnectProviderArn, "oidc-provider");
      }
      static fromOpenIdConnectProviderArn(scope, id, openIdConnectProviderArn) {
        const resourceName = core_1.Arn.extractResourceName(openIdConnectProviderArn, "oidc-provider");
        class Import extends core_1.Resource {
          constructor() {
            super(...arguments);
            this.openIdConnectProviderArn = openIdConnectProviderArn;
            this.openIdConnectProviderIssuer = resourceName;
          }
        }
        return new Import(scope, id);
      }
      getOrCreateProvider() {
        return core_1.CustomResourceProvider.getOrCreate(this, RESOURCE_TYPE, {
          codeDirectory: path.join(__dirname, "oidc-provider"),
          runtime: core_1.CustomResourceProviderRuntime.NODEJS_12_X,
          policyStatements: [
            {
              Effect: "Allow",
              Resource: "*",
              Action: [
                "iam:CreateOpenIDConnectProvider",
                "iam:DeleteOpenIDConnectProvider",
                "iam:UpdateOpenIDConnectProviderThumbprint",
                "iam:AddClientIDToOpenIDConnectProvider",
                "iam:RemoveClientIDFromOpenIDConnectProvider"
              ]
            }
          ]
        });
      }
    };
    exports2.OpenIdConnectProvider = OpenIdConnectProvider;
    _a = JSII_RTTI_SYMBOL_1;
    OpenIdConnectProvider[_a] = { fqn: "@aws-cdk/aws-iam.OpenIdConnectProvider", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-iam/lib/permissions-boundary.js
var require_permissions_boundary = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-iam/lib/permissions-boundary.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PermissionsBoundary = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var constructs_1 = require_lib4();
    var iam_generated_1 = require_iam_generated();
    var PermissionsBoundary = class {
      constructor(scope) {
        this.scope = scope;
      }
      static of(scope) {
        return new PermissionsBoundary(scope);
      }
      apply(boundaryPolicy) {
        constructs_1.Node.of(this.scope).applyAspect({
          visit(node) {
            if (core_1.CfnResource.isCfnResource(node) && (node.cfnResourceType == iam_generated_1.CfnRole.CFN_RESOURCE_TYPE_NAME || node.cfnResourceType == iam_generated_1.CfnUser.CFN_RESOURCE_TYPE_NAME)) {
              node.addPropertyOverride("PermissionsBoundary", boundaryPolicy.managedPolicyArn);
            }
          }
        });
      }
      clear() {
        constructs_1.Node.of(this.scope).applyAspect({
          visit(node) {
            if (core_1.CfnResource.isCfnResource(node) && (node.cfnResourceType == iam_generated_1.CfnRole.CFN_RESOURCE_TYPE_NAME || node.cfnResourceType == iam_generated_1.CfnUser.CFN_RESOURCE_TYPE_NAME)) {
              node.addPropertyDeletionOverride("PermissionsBoundary");
            }
          }
        });
      }
    };
    exports2.PermissionsBoundary = PermissionsBoundary;
    _a = JSII_RTTI_SYMBOL_1;
    PermissionsBoundary[_a] = { fqn: "@aws-cdk/aws-iam.PermissionsBoundary", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-iam/lib/saml-provider.js
var require_saml_provider = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-iam/lib/saml-provider.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SamlProvider = exports2.SamlMetadataDocument = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var fs = require("fs");
    var core_1 = require_lib8();
    var iam_generated_1 = require_iam_generated();
    var SamlMetadataDocument = class {
      static fromXml(xml) {
        return { xml };
      }
      static fromFile(path) {
        return { xml: fs.readFileSync(path, "utf-8") };
      }
    };
    exports2.SamlMetadataDocument = SamlMetadataDocument;
    _a = JSII_RTTI_SYMBOL_1;
    SamlMetadataDocument[_a] = { fqn: "@aws-cdk/aws-iam.SamlMetadataDocument", version: "1.132.0" };
    var SamlProvider = class extends core_1.Resource {
      constructor(scope, id, props) {
        super(scope, id);
        if (props.name && !core_1.Token.isUnresolved(props.name) && !/^[\w+=,.@-]{1,128}$/.test(props.name)) {
          throw new Error("Invalid SAML provider name. The name must be a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-. Length must be between 1 and 128 characters.");
        }
        const samlProvider = new iam_generated_1.CfnSAMLProvider(this, "Resource", {
          name: props.name,
          samlMetadataDocument: props.metadataDocument.xml
        });
        this.samlProviderArn = samlProvider.ref;
      }
      static fromSamlProviderArn(scope, id, samlProviderArn) {
        class Import extends core_1.Resource {
          constructor() {
            super(...arguments);
            this.samlProviderArn = samlProviderArn;
          }
        }
        return new Import(scope, id);
      }
    };
    exports2.SamlProvider = SamlProvider;
    _b = JSII_RTTI_SYMBOL_1;
    SamlProvider[_b] = { fqn: "@aws-cdk/aws-iam.SamlProvider", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-iam/lib/index.js
var require_lib9 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-iam/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_policy_document(), exports2);
    __exportStar(require_policy_statement(), exports2);
    __exportStar(require_managed_policy(), exports2);
    __exportStar(require_role(), exports2);
    __exportStar(require_policy(), exports2);
    __exportStar(require_user(), exports2);
    __exportStar(require_group(), exports2);
    __exportStar(require_lazy_role(), exports2);
    __exportStar(require_principals(), exports2);
    __exportStar(require_identity_base(), exports2);
    __exportStar(require_grant(), exports2);
    __exportStar(require_unknown_principal(), exports2);
    __exportStar(require_oidc_provider(), exports2);
    __exportStar(require_permissions_boundary(), exports2);
    __exportStar(require_saml_provider(), exports2);
    __exportStar(require_iam_generated(), exports2);
  }
});

// asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/metric.js
var require_metric = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/metric.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MathExpression = exports2.Metric = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var iam = require_lib9();
    var cdk = require_lib8();
    var alarm_1 = require_alarm();
    var metric_util_1 = require_metric_util();
    var statistic_1 = require_statistic();
    var Metric = class {
      constructor(props) {
        var _c;
        this.period = props.period || cdk.Duration.minutes(5);
        const periodSec = this.period.toSeconds();
        if (periodSec !== 1 && periodSec !== 5 && periodSec !== 10 && periodSec !== 30 && periodSec % 60 !== 0) {
          throw new Error(`'period' must be 1, 5, 10, 30, or a multiple of 60 seconds, received ${periodSec}`);
        }
        this.dimensions = this.validateDimensions((_c = props.dimensionsMap) !== null && _c !== void 0 ? _c : props.dimensions);
        this.namespace = props.namespace;
        this.metricName = props.metricName;
        this.statistic = statistic_1.normalizeStatistic(props.statistic || "Average");
        this.label = props.label;
        this.color = props.color;
        this.unit = props.unit;
        this.account = props.account;
        this.region = props.region;
      }
      static grantPutMetricData(grantee) {
        return iam.Grant.addToPrincipal({
          grantee,
          actions: ["cloudwatch:PutMetricData"],
          resourceArns: ["*"]
        });
      }
      with(props) {
        if ((props.label === void 0 || props.label === this.label) && (props.color === void 0 || props.color === this.color) && (props.statistic === void 0 || props.statistic === this.statistic) && (props.unit === void 0 || props.unit === this.unit) && (props.account === void 0 || props.account === this.account) && (props.region === void 0 || props.region === this.region) && props.dimensions === void 0 && props.dimensionsMap === void 0 && (props.period === void 0 || props.period.toSeconds() === this.period.toSeconds())) {
          return this;
        }
        return new Metric({
          dimensions: ifUndefined(props.dimensions, this.dimensions),
          dimensionsMap: props.dimensionsMap,
          namespace: this.namespace,
          metricName: this.metricName,
          period: ifUndefined(props.period, this.period),
          statistic: ifUndefined(props.statistic, this.statistic),
          unit: ifUndefined(props.unit, this.unit),
          label: ifUndefined(props.label, this.label),
          color: ifUndefined(props.color, this.color),
          account: ifUndefined(props.account, this.account),
          region: ifUndefined(props.region, this.region)
        });
      }
      attachTo(scope) {
        const stack = cdk.Stack.of(scope);
        return this.with({
          region: cdk.Token.isUnresolved(stack.region) ? void 0 : stack.region,
          account: cdk.Token.isUnresolved(stack.account) ? void 0 : stack.account
        });
      }
      toMetricConfig() {
        const dims = this.dimensionsAsList();
        return {
          metricStat: {
            dimensions: dims.length > 0 ? dims : void 0,
            namespace: this.namespace,
            metricName: this.metricName,
            period: this.period,
            statistic: this.statistic,
            unitFilter: this.unit,
            account: this.account,
            region: this.region
          },
          renderingProperties: {
            color: this.color,
            label: this.label
          }
        };
      }
      toAlarmConfig() {
        const metricConfig = this.toMetricConfig();
        if (metricConfig.metricStat === void 0) {
          throw new Error("Using a math expression is not supported here. Pass a 'Metric' object instead");
        }
        const stat = statistic_1.parseStatistic(metricConfig.metricStat.statistic);
        return {
          dimensions: metricConfig.metricStat.dimensions,
          namespace: metricConfig.metricStat.namespace,
          metricName: metricConfig.metricStat.metricName,
          period: metricConfig.metricStat.period.toSeconds(),
          statistic: stat.type === "simple" ? stat.statistic : void 0,
          extendedStatistic: stat.type === "percentile" ? "p" + stat.percentile : void 0,
          unit: this.unit
        };
      }
      toGraphConfig() {
        var _c, _d, _e, _f;
        const metricConfig = this.toMetricConfig();
        if (metricConfig.metricStat === void 0) {
          throw new Error("Using a math expression is not supported here. Pass a 'Metric' object instead");
        }
        return {
          dimensions: metricConfig.metricStat.dimensions,
          namespace: metricConfig.metricStat.namespace,
          metricName: metricConfig.metricStat.metricName,
          renderingProperties: {
            period: metricConfig.metricStat.period.toSeconds(),
            stat: metricConfig.metricStat.statistic,
            color: asString((_c = metricConfig.renderingProperties) === null || _c === void 0 ? void 0 : _c.color),
            label: asString((_d = metricConfig.renderingProperties) === null || _d === void 0 ? void 0 : _d.label)
          },
          period: metricConfig.metricStat.period.toSeconds(),
          statistic: metricConfig.metricStat.statistic,
          color: asString((_e = metricConfig.renderingProperties) === null || _e === void 0 ? void 0 : _e.color),
          label: asString((_f = metricConfig.renderingProperties) === null || _f === void 0 ? void 0 : _f.label),
          unit: this.unit
        };
      }
      createAlarm(scope, id, props) {
        return new alarm_1.Alarm(scope, id, {
          metric: this.with({
            statistic: props.statistic,
            period: props.period
          }),
          alarmName: props.alarmName,
          alarmDescription: props.alarmDescription,
          comparisonOperator: props.comparisonOperator,
          datapointsToAlarm: props.datapointsToAlarm,
          threshold: props.threshold,
          evaluationPeriods: props.evaluationPeriods,
          evaluateLowSampleCountPercentile: props.evaluateLowSampleCountPercentile,
          treatMissingData: props.treatMissingData,
          actionsEnabled: props.actionsEnabled
        });
      }
      toString() {
        return this.label || this.metricName;
      }
      dimensionsAsList() {
        const dims = this.dimensions;
        if (dims === void 0) {
          return [];
        }
        const list = Object.keys(dims).sort().map((key) => ({ name: key, value: dims[key] }));
        return list;
      }
      validateDimensions(dims) {
        if (!dims) {
          return dims;
        }
        var dimsArray = Object.keys(dims);
        if ((dimsArray === null || dimsArray === void 0 ? void 0 : dimsArray.length) > 10) {
          throw new Error(`The maximum number of dimensions is 10, received ${dimsArray.length}`);
        }
        dimsArray.map((key) => {
          if (dims[key] === void 0 || dims[key] === null) {
            throw new Error(`Dimension value of '${dims[key]}' is invalid`);
          }
          ;
          if (key.length < 1 || key.length > 255) {
            throw new Error(`Dimension name must be at least 1 and no more than 255 characters; received ${key}`);
          }
          ;
          if (dims[key].length < 1 || dims[key].length > 255) {
            throw new Error(`Dimension value must be at least 1 and no more than 255 characters; received ${dims[key]}`);
          }
          ;
        });
        return dims;
      }
    };
    exports2.Metric = Metric;
    _a = JSII_RTTI_SYMBOL_1;
    Metric[_a] = { fqn: "@aws-cdk/aws-cloudwatch.Metric", version: "1.132.0" };
    function asString(x) {
      if (x === void 0) {
        return void 0;
      }
      if (typeof x !== "string") {
        throw new Error(`Expected string, got ${x}`);
      }
      return x;
    }
    var MathExpression = class {
      constructor(props) {
        var _c;
        this.period = props.period || cdk.Duration.minutes(5);
        this.expression = props.expression;
        this.usingMetrics = changeAllPeriods((_c = props.usingMetrics) !== null && _c !== void 0 ? _c : {}, this.period);
        this.label = props.label;
        this.color = props.color;
        this.searchAccount = props.searchAccount;
        this.searchRegion = props.searchRegion;
        const invalidVariableNames = Object.keys(this.usingMetrics).filter((x) => !validVariableName(x));
        if (invalidVariableNames.length > 0) {
          throw new Error(`Invalid variable names in expression: ${invalidVariableNames}. Must start with lowercase letter and only contain alphanumerics.`);
        }
        this.validateNoIdConflicts();
      }
      with(props) {
        if ((props.label === void 0 || props.label === this.label) && (props.color === void 0 || props.color === this.color) && (props.period === void 0 || props.period.toSeconds() === this.period.toSeconds()) && (props.searchAccount === void 0 || props.searchAccount === this.searchAccount) && (props.searchRegion === void 0 || props.searchRegion === this.searchRegion)) {
          return this;
        }
        return new MathExpression({
          expression: this.expression,
          usingMetrics: this.usingMetrics,
          label: ifUndefined(props.label, this.label),
          color: ifUndefined(props.color, this.color),
          period: ifUndefined(props.period, this.period),
          searchAccount: ifUndefined(props.searchAccount, this.searchAccount),
          searchRegion: ifUndefined(props.searchRegion, this.searchRegion)
        });
      }
      toAlarmConfig() {
        throw new Error("Using a math expression is not supported here. Pass a 'Metric' object instead");
      }
      toGraphConfig() {
        throw new Error("Using a math expression is not supported here. Pass a 'Metric' object instead");
      }
      toMetricConfig() {
        return {
          mathExpression: {
            period: this.period.toSeconds(),
            expression: this.expression,
            usingMetrics: this.usingMetrics,
            searchAccount: this.searchAccount,
            searchRegion: this.searchRegion
          },
          renderingProperties: {
            label: this.label,
            color: this.color
          }
        };
      }
      createAlarm(scope, id, props) {
        return new alarm_1.Alarm(scope, id, {
          metric: this.with({
            period: props.period
          }),
          alarmName: props.alarmName,
          alarmDescription: props.alarmDescription,
          comparisonOperator: props.comparisonOperator,
          datapointsToAlarm: props.datapointsToAlarm,
          threshold: props.threshold,
          evaluationPeriods: props.evaluationPeriods,
          evaluateLowSampleCountPercentile: props.evaluateLowSampleCountPercentile,
          treatMissingData: props.treatMissingData,
          actionsEnabled: props.actionsEnabled
        });
      }
      toString() {
        return this.label || this.expression;
      }
      validateNoIdConflicts() {
        const seen = new Map();
        visit(this);
        function visit(metric) {
          metric_util_1.dispatchMetric(metric, {
            withStat() {
            },
            withExpression(expr) {
              for (const [id, subMetric] of Object.entries(expr.usingMetrics)) {
                const existing = seen.get(id);
                if (existing && metric_util_1.metricKey(existing) !== metric_util_1.metricKey(subMetric)) {
                  throw new Error(`The ID '${id}' used for two metrics in the expression: '${subMetric}' and '${existing}'. Rename one.`);
                }
                seen.set(id, subMetric);
                visit(subMetric);
              }
            }
          });
        }
      }
    };
    exports2.MathExpression = MathExpression;
    _b = JSII_RTTI_SYMBOL_1;
    MathExpression[_b] = { fqn: "@aws-cdk/aws-cloudwatch.MathExpression", version: "1.132.0" };
    var VALID_VARIABLE = new RegExp("^[a-z][a-zA-Z0-9_]*$");
    function validVariableName(x) {
      return VALID_VARIABLE.test(x);
    }
    function ifUndefined(x, def) {
      if (x !== void 0) {
        return x;
      }
      return def;
    }
    function changeAllPeriods(metrics, period) {
      const ret = {};
      for (const [id, metric] of Object.entries(metrics)) {
        ret[id] = changePeriod(metric, period);
      }
      return ret;
    }
    function changePeriod(metric, period) {
      if (isModifiableMetric(metric)) {
        return metric.with({ period });
      }
      throw new Error(`Metric object should also implement 'with': ${metric}`);
    }
    function isModifiableMetric(m) {
      return typeof m === "object" && m !== null && !!m.with;
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/log-query.js
var require_log_query = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/log-query.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LogQueryWidget = exports2.LogQueryVisualizationType = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var widget_1 = require_widget();
    var LogQueryVisualizationType;
    (function(LogQueryVisualizationType2) {
      LogQueryVisualizationType2["TABLE"] = "table";
      LogQueryVisualizationType2["LINE"] = "line";
      LogQueryVisualizationType2["STACKEDAREA"] = "stackedarea";
      LogQueryVisualizationType2["BAR"] = "bar";
      LogQueryVisualizationType2["PIE"] = "pie";
    })(LogQueryVisualizationType = exports2.LogQueryVisualizationType || (exports2.LogQueryVisualizationType = {}));
    var LogQueryWidget = class extends widget_1.ConcreteWidget {
      constructor(props) {
        super(props.width || 6, props.height || 6);
        this.props = props;
        if (props.logGroupNames.length === 0) {
          throw new Error("Specify at least one log group name.");
        }
        if (!!props.queryString === !!props.queryLines) {
          throw new Error("Specify exactly one of 'queryString' and 'queryLines'");
        }
      }
      toJson() {
        const sources = this.props.logGroupNames.map((l) => `SOURCE '${l}'`).join(" | ");
        const query = this.props.queryLines ? this.props.queryLines.join("\n| ") : this.props.queryString;
        const properties = {
          view: this.props.view ? this.props.view : LogQueryVisualizationType.TABLE,
          title: this.props.title,
          region: this.props.region || cdk.Aws.REGION,
          query: `${sources} | ${query}`
        };
        if (this.props.view === LogQueryVisualizationType.LINE || this.props.view === LogQueryVisualizationType.STACKEDAREA) {
          properties.view = "timeSeries", properties.stacked = this.props.view === LogQueryVisualizationType.STACKEDAREA ? true : false;
        }
        return [{
          type: "log",
          width: this.width,
          height: this.height,
          x: this.x,
          y: this.y,
          properties
        }];
      }
    };
    exports2.LogQueryWidget = LogQueryWidget;
    _a = JSII_RTTI_SYMBOL_1;
    LogQueryWidget[_a] = { fqn: "@aws-cdk/aws-cloudwatch.LogQueryWidget", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/text.js
var require_text = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/text.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TextWidget = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var widget_1 = require_widget();
    var TextWidget = class extends widget_1.ConcreteWidget {
      constructor(props) {
        super(props.width || 6, props.height || 2);
        this.markdown = props.markdown;
      }
      position(x, y) {
        this.x = x;
        this.y = y;
      }
      toJson() {
        return [{
          type: "text",
          width: this.width,
          height: this.height,
          x: this.x,
          y: this.y,
          properties: {
            markdown: this.markdown
          }
        }];
      }
    };
    exports2.TextWidget = TextWidget;
    _a = JSII_RTTI_SYMBOL_1;
    TextWidget[_a] = { fqn: "@aws-cdk/aws-cloudwatch.TextWidget", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/alarm-status-widget.js
var require_alarm_status_widget = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/alarm-status-widget.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AlarmStatusWidget = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var widget_1 = require_widget();
    var AlarmStatusWidget = class extends widget_1.ConcreteWidget {
      constructor(props) {
        super(props.width || 6, props.height || 3);
        this.props = props;
      }
      position(x, y) {
        this.x = x;
        this.y = y;
      }
      toJson() {
        return [
          {
            type: "alarm",
            width: this.width,
            height: this.height,
            x: this.x,
            y: this.y,
            properties: {
              title: this.props.title ? this.props.title : "Alarm Status",
              alarms: this.props.alarms.map((alarm) => alarm.alarmArn)
            }
          }
        ];
      }
    };
    exports2.AlarmStatusWidget = AlarmStatusWidget;
    _a = JSII_RTTI_SYMBOL_1;
    AlarmStatusWidget[_a] = { fqn: "@aws-cdk/aws-cloudwatch.AlarmStatusWidget", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/index.js
var require_lib10 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-cloudwatch/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_alarm(), exports2);
    __exportStar(require_alarm_action(), exports2);
    __exportStar(require_alarm_base(), exports2);
    __exportStar(require_alarm_rule(), exports2);
    __exportStar(require_composite_alarm(), exports2);
    __exportStar(require_dashboard(), exports2);
    __exportStar(require_graph(), exports2);
    __exportStar(require_layout(), exports2);
    __exportStar(require_metric(), exports2);
    __exportStar(require_metric_types(), exports2);
    __exportStar(require_log_query(), exports2);
    __exportStar(require_text(), exports2);
    __exportStar(require_widget(), exports2);
    __exportStar(require_alarm_status_widget(), exports2);
    __exportStar(require_cloudwatch_generated(), exports2);
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/apigateway.generated.js
var require_apigateway_generated = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/apigateway.generated.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    var _d;
    var _e;
    var _f;
    var _g;
    var _h;
    var _j;
    var _k;
    var _l;
    var _m;
    var _o;
    var _p;
    var _q;
    var _r;
    var _s;
    var _t;
    var _u;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnVpcLink = exports2.CfnUsagePlanKey = exports2.CfnUsagePlan = exports2.CfnStage = exports2.CfnRestApi = exports2.CfnResource = exports2.CfnRequestValidator = exports2.CfnModel = exports2.CfnMethod = exports2.CfnGatewayResponse = exports2.CfnDomainName = exports2.CfnDocumentationVersion = exports2.CfnDocumentationPart = exports2.CfnDeployment = exports2.CfnClientCertificate = exports2.CfnBasePathMapping = exports2.CfnAuthorizer = exports2.CfnApiKey = exports2.CfnAccount = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var cfn_parse = require_cfn_parse();
    function CfnAccountPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("cloudWatchRoleArn", cdk.validateString)(properties.cloudWatchRoleArn));
      return errors.wrap('supplied properties not correct for "CfnAccountProps"');
    }
    function cfnAccountPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnAccountPropsValidator(properties).assertSuccess();
      return {
        CloudWatchRoleArn: cdk.stringToCloudFormation(properties.cloudWatchRoleArn)
      };
    }
    function CfnAccountPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("cloudWatchRoleArn", "CloudWatchRoleArn", properties.CloudWatchRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.CloudWatchRoleArn) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnAccount = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnAccount.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.attrId = cdk.Token.asString(this.getAtt("Id"));
        this.cloudWatchRoleArn = props.cloudWatchRoleArn;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnAccountPropsFromCloudFormation(resourceProperties);
        const ret = new CfnAccount(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnAccount.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          cloudWatchRoleArn: this.cloudWatchRoleArn
        };
      }
      renderProperties(props) {
        return cfnAccountPropsToCloudFormation(props);
      }
    };
    exports2.CfnAccount = CfnAccount;
    _a = JSII_RTTI_SYMBOL_1;
    CfnAccount[_a] = { fqn: "@aws-cdk/aws-apigateway.CfnAccount", version: "1.132.0" };
    CfnAccount.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGateway::Account";
    function CfnApiKeyPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("customerId", cdk.validateString)(properties.customerId));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("enabled", cdk.validateBoolean)(properties.enabled));
      errors.collect(cdk.propertyValidator("generateDistinctId", cdk.validateBoolean)(properties.generateDistinctId));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("stageKeys", cdk.listValidator(CfnApiKey_StageKeyPropertyValidator))(properties.stageKeys));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("value", cdk.validateString)(properties.value));
      return errors.wrap('supplied properties not correct for "CfnApiKeyProps"');
    }
    function cfnApiKeyPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnApiKeyPropsValidator(properties).assertSuccess();
      return {
        CustomerId: cdk.stringToCloudFormation(properties.customerId),
        Description: cdk.stringToCloudFormation(properties.description),
        Enabled: cdk.booleanToCloudFormation(properties.enabled),
        GenerateDistinctId: cdk.booleanToCloudFormation(properties.generateDistinctId),
        Name: cdk.stringToCloudFormation(properties.name),
        StageKeys: cdk.listMapper(cfnApiKeyStageKeyPropertyToCloudFormation)(properties.stageKeys),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
        Value: cdk.stringToCloudFormation(properties.value)
      };
    }
    function CfnApiKeyPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("customerId", "CustomerId", properties.CustomerId != null ? cfn_parse.FromCloudFormation.getString(properties.CustomerId) : void 0);
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("enabled", "Enabled", properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : void 0);
      ret.addPropertyResult("generateDistinctId", "GenerateDistinctId", properties.GenerateDistinctId != null ? cfn_parse.FromCloudFormation.getBoolean(properties.GenerateDistinctId) : void 0);
      ret.addPropertyResult("name", "Name", properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : void 0);
      ret.addPropertyResult("stageKeys", "StageKeys", properties.StageKeys != null ? cfn_parse.FromCloudFormation.getArray(CfnApiKeyStageKeyPropertyFromCloudFormation)(properties.StageKeys) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addPropertyResult("value", "Value", properties.Value != null ? cfn_parse.FromCloudFormation.getString(properties.Value) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnApiKey = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnApiKey.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.attrApiKeyId = cdk.Token.asString(this.getAtt("APIKeyId"));
        this.customerId = props.customerId;
        this.description = props.description;
        this.enabled = props.enabled;
        this.generateDistinctId = props.generateDistinctId;
        this.name = props.name;
        this.stageKeys = props.stageKeys;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::ApiGateway::ApiKey", props.tags, { tagPropertyName: "tags" });
        this.value = props.value;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnApiKeyPropsFromCloudFormation(resourceProperties);
        const ret = new CfnApiKey(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnApiKey.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          customerId: this.customerId,
          description: this.description,
          enabled: this.enabled,
          generateDistinctId: this.generateDistinctId,
          name: this.name,
          stageKeys: this.stageKeys,
          tags: this.tags.renderTags(),
          value: this.value
        };
      }
      renderProperties(props) {
        return cfnApiKeyPropsToCloudFormation(props);
      }
    };
    exports2.CfnApiKey = CfnApiKey;
    _b = JSII_RTTI_SYMBOL_1;
    CfnApiKey[_b] = { fqn: "@aws-cdk/aws-apigateway.CfnApiKey", version: "1.132.0" };
    CfnApiKey.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGateway::ApiKey";
    function CfnApiKey_StageKeyPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("restApiId", cdk.validateString)(properties.restApiId));
      errors.collect(cdk.propertyValidator("stageName", cdk.validateString)(properties.stageName));
      return errors.wrap('supplied properties not correct for "StageKeyProperty"');
    }
    function cfnApiKeyStageKeyPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnApiKey_StageKeyPropertyValidator(properties).assertSuccess();
      return {
        RestApiId: cdk.stringToCloudFormation(properties.restApiId),
        StageName: cdk.stringToCloudFormation(properties.stageName)
      };
    }
    function CfnApiKeyStageKeyPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("restApiId", "RestApiId", properties.RestApiId != null ? cfn_parse.FromCloudFormation.getString(properties.RestApiId) : void 0);
      ret.addPropertyResult("stageName", "StageName", properties.StageName != null ? cfn_parse.FromCloudFormation.getString(properties.StageName) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnAuthorizerPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("authType", cdk.validateString)(properties.authType));
      errors.collect(cdk.propertyValidator("authorizerCredentials", cdk.validateString)(properties.authorizerCredentials));
      errors.collect(cdk.propertyValidator("authorizerResultTtlInSeconds", cdk.validateNumber)(properties.authorizerResultTtlInSeconds));
      errors.collect(cdk.propertyValidator("authorizerUri", cdk.validateString)(properties.authorizerUri));
      errors.collect(cdk.propertyValidator("identitySource", cdk.validateString)(properties.identitySource));
      errors.collect(cdk.propertyValidator("identityValidationExpression", cdk.validateString)(properties.identityValidationExpression));
      errors.collect(cdk.propertyValidator("name", cdk.requiredValidator)(properties.name));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("providerArns", cdk.listValidator(cdk.validateString))(properties.providerArns));
      errors.collect(cdk.propertyValidator("restApiId", cdk.requiredValidator)(properties.restApiId));
      errors.collect(cdk.propertyValidator("restApiId", cdk.validateString)(properties.restApiId));
      errors.collect(cdk.propertyValidator("type", cdk.requiredValidator)(properties.type));
      errors.collect(cdk.propertyValidator("type", cdk.validateString)(properties.type));
      return errors.wrap('supplied properties not correct for "CfnAuthorizerProps"');
    }
    function cfnAuthorizerPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnAuthorizerPropsValidator(properties).assertSuccess();
      return {
        Name: cdk.stringToCloudFormation(properties.name),
        RestApiId: cdk.stringToCloudFormation(properties.restApiId),
        Type: cdk.stringToCloudFormation(properties.type),
        AuthorizerCredentials: cdk.stringToCloudFormation(properties.authorizerCredentials),
        AuthorizerResultTtlInSeconds: cdk.numberToCloudFormation(properties.authorizerResultTtlInSeconds),
        AuthorizerUri: cdk.stringToCloudFormation(properties.authorizerUri),
        AuthType: cdk.stringToCloudFormation(properties.authType),
        IdentitySource: cdk.stringToCloudFormation(properties.identitySource),
        IdentityValidationExpression: cdk.stringToCloudFormation(properties.identityValidationExpression),
        ProviderARNs: cdk.listMapper(cdk.stringToCloudFormation)(properties.providerArns)
      };
    }
    function CfnAuthorizerPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("name", "Name", cfn_parse.FromCloudFormation.getString(properties.Name));
      ret.addPropertyResult("restApiId", "RestApiId", cfn_parse.FromCloudFormation.getString(properties.RestApiId));
      ret.addPropertyResult("type", "Type", cfn_parse.FromCloudFormation.getString(properties.Type));
      ret.addPropertyResult("authorizerCredentials", "AuthorizerCredentials", properties.AuthorizerCredentials != null ? cfn_parse.FromCloudFormation.getString(properties.AuthorizerCredentials) : void 0);
      ret.addPropertyResult("authorizerResultTtlInSeconds", "AuthorizerResultTtlInSeconds", properties.AuthorizerResultTtlInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.AuthorizerResultTtlInSeconds) : void 0);
      ret.addPropertyResult("authorizerUri", "AuthorizerUri", properties.AuthorizerUri != null ? cfn_parse.FromCloudFormation.getString(properties.AuthorizerUri) : void 0);
      ret.addPropertyResult("authType", "AuthType", properties.AuthType != null ? cfn_parse.FromCloudFormation.getString(properties.AuthType) : void 0);
      ret.addPropertyResult("identitySource", "IdentitySource", properties.IdentitySource != null ? cfn_parse.FromCloudFormation.getString(properties.IdentitySource) : void 0);
      ret.addPropertyResult("identityValidationExpression", "IdentityValidationExpression", properties.IdentityValidationExpression != null ? cfn_parse.FromCloudFormation.getString(properties.IdentityValidationExpression) : void 0);
      ret.addPropertyResult("providerArns", "ProviderARNs", properties.ProviderARNs != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ProviderARNs) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnAuthorizer = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnAuthorizer.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "name", this);
        cdk.requireProperty(props, "restApiId", this);
        cdk.requireProperty(props, "type", this);
        this.attrAuthorizerId = cdk.Token.asString(this.getAtt("AuthorizerId"));
        this.name = props.name;
        this.restApiId = props.restApiId;
        this.type = props.type;
        this.authorizerCredentials = props.authorizerCredentials;
        this.authorizerResultTtlInSeconds = props.authorizerResultTtlInSeconds;
        this.authorizerUri = props.authorizerUri;
        this.authType = props.authType;
        this.identitySource = props.identitySource;
        this.identityValidationExpression = props.identityValidationExpression;
        this.providerArns = props.providerArns;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnAuthorizerPropsFromCloudFormation(resourceProperties);
        const ret = new CfnAuthorizer(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnAuthorizer.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          name: this.name,
          restApiId: this.restApiId,
          type: this.type,
          authorizerCredentials: this.authorizerCredentials,
          authorizerResultTtlInSeconds: this.authorizerResultTtlInSeconds,
          authorizerUri: this.authorizerUri,
          authType: this.authType,
          identitySource: this.identitySource,
          identityValidationExpression: this.identityValidationExpression,
          providerArns: this.providerArns
        };
      }
      renderProperties(props) {
        return cfnAuthorizerPropsToCloudFormation(props);
      }
    };
    exports2.CfnAuthorizer = CfnAuthorizer;
    _c = JSII_RTTI_SYMBOL_1;
    CfnAuthorizer[_c] = { fqn: "@aws-cdk/aws-apigateway.CfnAuthorizer", version: "1.132.0" };
    CfnAuthorizer.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGateway::Authorizer";
    function CfnBasePathMappingPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("basePath", cdk.validateString)(properties.basePath));
      errors.collect(cdk.propertyValidator("domainName", cdk.requiredValidator)(properties.domainName));
      errors.collect(cdk.propertyValidator("domainName", cdk.validateString)(properties.domainName));
      errors.collect(cdk.propertyValidator("restApiId", cdk.validateString)(properties.restApiId));
      errors.collect(cdk.propertyValidator("stage", cdk.validateString)(properties.stage));
      return errors.wrap('supplied properties not correct for "CfnBasePathMappingProps"');
    }
    function cfnBasePathMappingPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBasePathMappingPropsValidator(properties).assertSuccess();
      return {
        DomainName: cdk.stringToCloudFormation(properties.domainName),
        BasePath: cdk.stringToCloudFormation(properties.basePath),
        RestApiId: cdk.stringToCloudFormation(properties.restApiId),
        Stage: cdk.stringToCloudFormation(properties.stage)
      };
    }
    function CfnBasePathMappingPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("domainName", "DomainName", cfn_parse.FromCloudFormation.getString(properties.DomainName));
      ret.addPropertyResult("basePath", "BasePath", properties.BasePath != null ? cfn_parse.FromCloudFormation.getString(properties.BasePath) : void 0);
      ret.addPropertyResult("restApiId", "RestApiId", properties.RestApiId != null ? cfn_parse.FromCloudFormation.getString(properties.RestApiId) : void 0);
      ret.addPropertyResult("stage", "Stage", properties.Stage != null ? cfn_parse.FromCloudFormation.getString(properties.Stage) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnBasePathMapping = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnBasePathMapping.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "domainName", this);
        this.domainName = props.domainName;
        this.basePath = props.basePath;
        this.restApiId = props.restApiId;
        this.stage = props.stage;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnBasePathMappingPropsFromCloudFormation(resourceProperties);
        const ret = new CfnBasePathMapping(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnBasePathMapping.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          domainName: this.domainName,
          basePath: this.basePath,
          restApiId: this.restApiId,
          stage: this.stage
        };
      }
      renderProperties(props) {
        return cfnBasePathMappingPropsToCloudFormation(props);
      }
    };
    exports2.CfnBasePathMapping = CfnBasePathMapping;
    _d = JSII_RTTI_SYMBOL_1;
    CfnBasePathMapping[_d] = { fqn: "@aws-cdk/aws-apigateway.CfnBasePathMapping", version: "1.132.0" };
    CfnBasePathMapping.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGateway::BasePathMapping";
    function CfnClientCertificatePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnClientCertificateProps"');
    }
    function cfnClientCertificatePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnClientCertificatePropsValidator(properties).assertSuccess();
      return {
        Description: cdk.stringToCloudFormation(properties.description),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnClientCertificatePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnClientCertificate = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnClientCertificate.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.attrClientCertificateId = cdk.Token.asString(this.getAtt("ClientCertificateId"));
        this.description = props.description;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::ApiGateway::ClientCertificate", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnClientCertificatePropsFromCloudFormation(resourceProperties);
        const ret = new CfnClientCertificate(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnClientCertificate.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          description: this.description,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnClientCertificatePropsToCloudFormation(props);
      }
    };
    exports2.CfnClientCertificate = CfnClientCertificate;
    _e = JSII_RTTI_SYMBOL_1;
    CfnClientCertificate[_e] = { fqn: "@aws-cdk/aws-apigateway.CfnClientCertificate", version: "1.132.0" };
    CfnClientCertificate.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGateway::ClientCertificate";
    function CfnDeploymentPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("deploymentCanarySettings", CfnDeployment_DeploymentCanarySettingsPropertyValidator)(properties.deploymentCanarySettings));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("restApiId", cdk.requiredValidator)(properties.restApiId));
      errors.collect(cdk.propertyValidator("restApiId", cdk.validateString)(properties.restApiId));
      errors.collect(cdk.propertyValidator("stageDescription", CfnDeployment_StageDescriptionPropertyValidator)(properties.stageDescription));
      errors.collect(cdk.propertyValidator("stageName", cdk.validateString)(properties.stageName));
      return errors.wrap('supplied properties not correct for "CfnDeploymentProps"');
    }
    function cfnDeploymentPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnDeploymentPropsValidator(properties).assertSuccess();
      return {
        RestApiId: cdk.stringToCloudFormation(properties.restApiId),
        DeploymentCanarySettings: cfnDeploymentDeploymentCanarySettingsPropertyToCloudFormation(properties.deploymentCanarySettings),
        Description: cdk.stringToCloudFormation(properties.description),
        StageDescription: cfnDeploymentStageDescriptionPropertyToCloudFormation(properties.stageDescription),
        StageName: cdk.stringToCloudFormation(properties.stageName)
      };
    }
    function CfnDeploymentPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("restApiId", "RestApiId", cfn_parse.FromCloudFormation.getString(properties.RestApiId));
      ret.addPropertyResult("deploymentCanarySettings", "DeploymentCanarySettings", properties.DeploymentCanarySettings != null ? CfnDeploymentDeploymentCanarySettingsPropertyFromCloudFormation(properties.DeploymentCanarySettings) : void 0);
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("stageDescription", "StageDescription", properties.StageDescription != null ? CfnDeploymentStageDescriptionPropertyFromCloudFormation(properties.StageDescription) : void 0);
      ret.addPropertyResult("stageName", "StageName", properties.StageName != null ? cfn_parse.FromCloudFormation.getString(properties.StageName) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnDeployment = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnDeployment.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "restApiId", this);
        this.restApiId = props.restApiId;
        this.deploymentCanarySettings = props.deploymentCanarySettings;
        this.description = props.description;
        this.stageDescription = props.stageDescription;
        this.stageName = props.stageName;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnDeploymentPropsFromCloudFormation(resourceProperties);
        const ret = new CfnDeployment(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnDeployment.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          restApiId: this.restApiId,
          deploymentCanarySettings: this.deploymentCanarySettings,
          description: this.description,
          stageDescription: this.stageDescription,
          stageName: this.stageName
        };
      }
      renderProperties(props) {
        return cfnDeploymentPropsToCloudFormation(props);
      }
    };
    exports2.CfnDeployment = CfnDeployment;
    _f = JSII_RTTI_SYMBOL_1;
    CfnDeployment[_f] = { fqn: "@aws-cdk/aws-apigateway.CfnDeployment", version: "1.132.0" };
    CfnDeployment.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGateway::Deployment";
    function CfnDeployment_AccessLogSettingPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("destinationArn", cdk.validateString)(properties.destinationArn));
      errors.collect(cdk.propertyValidator("format", cdk.validateString)(properties.format));
      return errors.wrap('supplied properties not correct for "AccessLogSettingProperty"');
    }
    function cfnDeploymentAccessLogSettingPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnDeployment_AccessLogSettingPropertyValidator(properties).assertSuccess();
      return {
        DestinationArn: cdk.stringToCloudFormation(properties.destinationArn),
        Format: cdk.stringToCloudFormation(properties.format)
      };
    }
    function CfnDeploymentAccessLogSettingPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("destinationArn", "DestinationArn", properties.DestinationArn != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationArn) : void 0);
      ret.addPropertyResult("format", "Format", properties.Format != null ? cfn_parse.FromCloudFormation.getString(properties.Format) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnDeployment_CanarySettingPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("percentTraffic", cdk.validateNumber)(properties.percentTraffic));
      errors.collect(cdk.propertyValidator("stageVariableOverrides", cdk.hashValidator(cdk.validateString))(properties.stageVariableOverrides));
      errors.collect(cdk.propertyValidator("useStageCache", cdk.validateBoolean)(properties.useStageCache));
      return errors.wrap('supplied properties not correct for "CanarySettingProperty"');
    }
    function cfnDeploymentCanarySettingPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnDeployment_CanarySettingPropertyValidator(properties).assertSuccess();
      return {
        PercentTraffic: cdk.numberToCloudFormation(properties.percentTraffic),
        StageVariableOverrides: cdk.hashMapper(cdk.stringToCloudFormation)(properties.stageVariableOverrides),
        UseStageCache: cdk.booleanToCloudFormation(properties.useStageCache)
      };
    }
    function CfnDeploymentCanarySettingPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("percentTraffic", "PercentTraffic", properties.PercentTraffic != null ? cfn_parse.FromCloudFormation.getNumber(properties.PercentTraffic) : void 0);
      ret.addPropertyResult("stageVariableOverrides", "StageVariableOverrides", properties.StageVariableOverrides != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.StageVariableOverrides) : void 0);
      ret.addPropertyResult("useStageCache", "UseStageCache", properties.UseStageCache != null ? cfn_parse.FromCloudFormation.getBoolean(properties.UseStageCache) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnDeployment_DeploymentCanarySettingsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("percentTraffic", cdk.validateNumber)(properties.percentTraffic));
      errors.collect(cdk.propertyValidator("stageVariableOverrides", cdk.hashValidator(cdk.validateString))(properties.stageVariableOverrides));
      errors.collect(cdk.propertyValidator("useStageCache", cdk.validateBoolean)(properties.useStageCache));
      return errors.wrap('supplied properties not correct for "DeploymentCanarySettingsProperty"');
    }
    function cfnDeploymentDeploymentCanarySettingsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnDeployment_DeploymentCanarySettingsPropertyValidator(properties).assertSuccess();
      return {
        PercentTraffic: cdk.numberToCloudFormation(properties.percentTraffic),
        StageVariableOverrides: cdk.hashMapper(cdk.stringToCloudFormation)(properties.stageVariableOverrides),
        UseStageCache: cdk.booleanToCloudFormation(properties.useStageCache)
      };
    }
    function CfnDeploymentDeploymentCanarySettingsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("percentTraffic", "PercentTraffic", properties.PercentTraffic != null ? cfn_parse.FromCloudFormation.getNumber(properties.PercentTraffic) : void 0);
      ret.addPropertyResult("stageVariableOverrides", "StageVariableOverrides", properties.StageVariableOverrides != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.StageVariableOverrides) : void 0);
      ret.addPropertyResult("useStageCache", "UseStageCache", properties.UseStageCache != null ? cfn_parse.FromCloudFormation.getBoolean(properties.UseStageCache) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnDeployment_MethodSettingPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("cacheDataEncrypted", cdk.validateBoolean)(properties.cacheDataEncrypted));
      errors.collect(cdk.propertyValidator("cacheTtlInSeconds", cdk.validateNumber)(properties.cacheTtlInSeconds));
      errors.collect(cdk.propertyValidator("cachingEnabled", cdk.validateBoolean)(properties.cachingEnabled));
      errors.collect(cdk.propertyValidator("dataTraceEnabled", cdk.validateBoolean)(properties.dataTraceEnabled));
      errors.collect(cdk.propertyValidator("httpMethod", cdk.validateString)(properties.httpMethod));
      errors.collect(cdk.propertyValidator("loggingLevel", cdk.validateString)(properties.loggingLevel));
      errors.collect(cdk.propertyValidator("metricsEnabled", cdk.validateBoolean)(properties.metricsEnabled));
      errors.collect(cdk.propertyValidator("resourcePath", cdk.validateString)(properties.resourcePath));
      errors.collect(cdk.propertyValidator("throttlingBurstLimit", cdk.validateNumber)(properties.throttlingBurstLimit));
      errors.collect(cdk.propertyValidator("throttlingRateLimit", cdk.validateNumber)(properties.throttlingRateLimit));
      return errors.wrap('supplied properties not correct for "MethodSettingProperty"');
    }
    function cfnDeploymentMethodSettingPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnDeployment_MethodSettingPropertyValidator(properties).assertSuccess();
      return {
        CacheDataEncrypted: cdk.booleanToCloudFormation(properties.cacheDataEncrypted),
        CacheTtlInSeconds: cdk.numberToCloudFormation(properties.cacheTtlInSeconds),
        CachingEnabled: cdk.booleanToCloudFormation(properties.cachingEnabled),
        DataTraceEnabled: cdk.booleanToCloudFormation(properties.dataTraceEnabled),
        HttpMethod: cdk.stringToCloudFormation(properties.httpMethod),
        LoggingLevel: cdk.stringToCloudFormation(properties.loggingLevel),
        MetricsEnabled: cdk.booleanToCloudFormation(properties.metricsEnabled),
        ResourcePath: cdk.stringToCloudFormation(properties.resourcePath),
        ThrottlingBurstLimit: cdk.numberToCloudFormation(properties.throttlingBurstLimit),
        ThrottlingRateLimit: cdk.numberToCloudFormation(properties.throttlingRateLimit)
      };
    }
    function CfnDeploymentMethodSettingPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("cacheDataEncrypted", "CacheDataEncrypted", properties.CacheDataEncrypted != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CacheDataEncrypted) : void 0);
      ret.addPropertyResult("cacheTtlInSeconds", "CacheTtlInSeconds", properties.CacheTtlInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.CacheTtlInSeconds) : void 0);
      ret.addPropertyResult("cachingEnabled", "CachingEnabled", properties.CachingEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CachingEnabled) : void 0);
      ret.addPropertyResult("dataTraceEnabled", "DataTraceEnabled", properties.DataTraceEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DataTraceEnabled) : void 0);
      ret.addPropertyResult("httpMethod", "HttpMethod", properties.HttpMethod != null ? cfn_parse.FromCloudFormation.getString(properties.HttpMethod) : void 0);
      ret.addPropertyResult("loggingLevel", "LoggingLevel", properties.LoggingLevel != null ? cfn_parse.FromCloudFormation.getString(properties.LoggingLevel) : void 0);
      ret.addPropertyResult("metricsEnabled", "MetricsEnabled", properties.MetricsEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.MetricsEnabled) : void 0);
      ret.addPropertyResult("resourcePath", "ResourcePath", properties.ResourcePath != null ? cfn_parse.FromCloudFormation.getString(properties.ResourcePath) : void 0);
      ret.addPropertyResult("throttlingBurstLimit", "ThrottlingBurstLimit", properties.ThrottlingBurstLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.ThrottlingBurstLimit) : void 0);
      ret.addPropertyResult("throttlingRateLimit", "ThrottlingRateLimit", properties.ThrottlingRateLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.ThrottlingRateLimit) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnDeployment_StageDescriptionPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("accessLogSetting", CfnDeployment_AccessLogSettingPropertyValidator)(properties.accessLogSetting));
      errors.collect(cdk.propertyValidator("cacheClusterEnabled", cdk.validateBoolean)(properties.cacheClusterEnabled));
      errors.collect(cdk.propertyValidator("cacheClusterSize", cdk.validateString)(properties.cacheClusterSize));
      errors.collect(cdk.propertyValidator("cacheDataEncrypted", cdk.validateBoolean)(properties.cacheDataEncrypted));
      errors.collect(cdk.propertyValidator("cacheTtlInSeconds", cdk.validateNumber)(properties.cacheTtlInSeconds));
      errors.collect(cdk.propertyValidator("cachingEnabled", cdk.validateBoolean)(properties.cachingEnabled));
      errors.collect(cdk.propertyValidator("canarySetting", CfnDeployment_CanarySettingPropertyValidator)(properties.canarySetting));
      errors.collect(cdk.propertyValidator("clientCertificateId", cdk.validateString)(properties.clientCertificateId));
      errors.collect(cdk.propertyValidator("dataTraceEnabled", cdk.validateBoolean)(properties.dataTraceEnabled));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("documentationVersion", cdk.validateString)(properties.documentationVersion));
      errors.collect(cdk.propertyValidator("loggingLevel", cdk.validateString)(properties.loggingLevel));
      errors.collect(cdk.propertyValidator("methodSettings", cdk.listValidator(CfnDeployment_MethodSettingPropertyValidator))(properties.methodSettings));
      errors.collect(cdk.propertyValidator("metricsEnabled", cdk.validateBoolean)(properties.metricsEnabled));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("throttlingBurstLimit", cdk.validateNumber)(properties.throttlingBurstLimit));
      errors.collect(cdk.propertyValidator("throttlingRateLimit", cdk.validateNumber)(properties.throttlingRateLimit));
      errors.collect(cdk.propertyValidator("tracingEnabled", cdk.validateBoolean)(properties.tracingEnabled));
      errors.collect(cdk.propertyValidator("variables", cdk.hashValidator(cdk.validateString))(properties.variables));
      return errors.wrap('supplied properties not correct for "StageDescriptionProperty"');
    }
    function cfnDeploymentStageDescriptionPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnDeployment_StageDescriptionPropertyValidator(properties).assertSuccess();
      return {
        AccessLogSetting: cfnDeploymentAccessLogSettingPropertyToCloudFormation(properties.accessLogSetting),
        CacheClusterEnabled: cdk.booleanToCloudFormation(properties.cacheClusterEnabled),
        CacheClusterSize: cdk.stringToCloudFormation(properties.cacheClusterSize),
        CacheDataEncrypted: cdk.booleanToCloudFormation(properties.cacheDataEncrypted),
        CacheTtlInSeconds: cdk.numberToCloudFormation(properties.cacheTtlInSeconds),
        CachingEnabled: cdk.booleanToCloudFormation(properties.cachingEnabled),
        CanarySetting: cfnDeploymentCanarySettingPropertyToCloudFormation(properties.canarySetting),
        ClientCertificateId: cdk.stringToCloudFormation(properties.clientCertificateId),
        DataTraceEnabled: cdk.booleanToCloudFormation(properties.dataTraceEnabled),
        Description: cdk.stringToCloudFormation(properties.description),
        DocumentationVersion: cdk.stringToCloudFormation(properties.documentationVersion),
        LoggingLevel: cdk.stringToCloudFormation(properties.loggingLevel),
        MethodSettings: cdk.listMapper(cfnDeploymentMethodSettingPropertyToCloudFormation)(properties.methodSettings),
        MetricsEnabled: cdk.booleanToCloudFormation(properties.metricsEnabled),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
        ThrottlingBurstLimit: cdk.numberToCloudFormation(properties.throttlingBurstLimit),
        ThrottlingRateLimit: cdk.numberToCloudFormation(properties.throttlingRateLimit),
        TracingEnabled: cdk.booleanToCloudFormation(properties.tracingEnabled),
        Variables: cdk.hashMapper(cdk.stringToCloudFormation)(properties.variables)
      };
    }
    function CfnDeploymentStageDescriptionPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("accessLogSetting", "AccessLogSetting", properties.AccessLogSetting != null ? CfnDeploymentAccessLogSettingPropertyFromCloudFormation(properties.AccessLogSetting) : void 0);
      ret.addPropertyResult("cacheClusterEnabled", "CacheClusterEnabled", properties.CacheClusterEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CacheClusterEnabled) : void 0);
      ret.addPropertyResult("cacheClusterSize", "CacheClusterSize", properties.CacheClusterSize != null ? cfn_parse.FromCloudFormation.getString(properties.CacheClusterSize) : void 0);
      ret.addPropertyResult("cacheDataEncrypted", "CacheDataEncrypted", properties.CacheDataEncrypted != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CacheDataEncrypted) : void 0);
      ret.addPropertyResult("cacheTtlInSeconds", "CacheTtlInSeconds", properties.CacheTtlInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.CacheTtlInSeconds) : void 0);
      ret.addPropertyResult("cachingEnabled", "CachingEnabled", properties.CachingEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CachingEnabled) : void 0);
      ret.addPropertyResult("canarySetting", "CanarySetting", properties.CanarySetting != null ? CfnDeploymentCanarySettingPropertyFromCloudFormation(properties.CanarySetting) : void 0);
      ret.addPropertyResult("clientCertificateId", "ClientCertificateId", properties.ClientCertificateId != null ? cfn_parse.FromCloudFormation.getString(properties.ClientCertificateId) : void 0);
      ret.addPropertyResult("dataTraceEnabled", "DataTraceEnabled", properties.DataTraceEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DataTraceEnabled) : void 0);
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("documentationVersion", "DocumentationVersion", properties.DocumentationVersion != null ? cfn_parse.FromCloudFormation.getString(properties.DocumentationVersion) : void 0);
      ret.addPropertyResult("loggingLevel", "LoggingLevel", properties.LoggingLevel != null ? cfn_parse.FromCloudFormation.getString(properties.LoggingLevel) : void 0);
      ret.addPropertyResult("methodSettings", "MethodSettings", properties.MethodSettings != null ? cfn_parse.FromCloudFormation.getArray(CfnDeploymentMethodSettingPropertyFromCloudFormation)(properties.MethodSettings) : void 0);
      ret.addPropertyResult("metricsEnabled", "MetricsEnabled", properties.MetricsEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.MetricsEnabled) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addPropertyResult("throttlingBurstLimit", "ThrottlingBurstLimit", properties.ThrottlingBurstLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.ThrottlingBurstLimit) : void 0);
      ret.addPropertyResult("throttlingRateLimit", "ThrottlingRateLimit", properties.ThrottlingRateLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.ThrottlingRateLimit) : void 0);
      ret.addPropertyResult("tracingEnabled", "TracingEnabled", properties.TracingEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.TracingEnabled) : void 0);
      ret.addPropertyResult("variables", "Variables", properties.Variables != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Variables) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnDocumentationPartPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("location", cdk.requiredValidator)(properties.location));
      errors.collect(cdk.propertyValidator("location", CfnDocumentationPart_LocationPropertyValidator)(properties.location));
      errors.collect(cdk.propertyValidator("properties", cdk.requiredValidator)(properties.properties));
      errors.collect(cdk.propertyValidator("properties", cdk.validateString)(properties.properties));
      errors.collect(cdk.propertyValidator("restApiId", cdk.requiredValidator)(properties.restApiId));
      errors.collect(cdk.propertyValidator("restApiId", cdk.validateString)(properties.restApiId));
      return errors.wrap('supplied properties not correct for "CfnDocumentationPartProps"');
    }
    function cfnDocumentationPartPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnDocumentationPartPropsValidator(properties).assertSuccess();
      return {
        Location: cfnDocumentationPartLocationPropertyToCloudFormation(properties.location),
        Properties: cdk.stringToCloudFormation(properties.properties),
        RestApiId: cdk.stringToCloudFormation(properties.restApiId)
      };
    }
    function CfnDocumentationPartPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("location", "Location", CfnDocumentationPartLocationPropertyFromCloudFormation(properties.Location));
      ret.addPropertyResult("properties", "Properties", cfn_parse.FromCloudFormation.getString(properties.Properties));
      ret.addPropertyResult("restApiId", "RestApiId", cfn_parse.FromCloudFormation.getString(properties.RestApiId));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnDocumentationPart = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnDocumentationPart.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "location", this);
        cdk.requireProperty(props, "properties", this);
        cdk.requireProperty(props, "restApiId", this);
        this.location = props.location;
        this.properties = props.properties;
        this.restApiId = props.restApiId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnDocumentationPartPropsFromCloudFormation(resourceProperties);
        const ret = new CfnDocumentationPart(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnDocumentationPart.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          location: this.location,
          properties: this.properties,
          restApiId: this.restApiId
        };
      }
      renderProperties(props) {
        return cfnDocumentationPartPropsToCloudFormation(props);
      }
    };
    exports2.CfnDocumentationPart = CfnDocumentationPart;
    _g = JSII_RTTI_SYMBOL_1;
    CfnDocumentationPart[_g] = { fqn: "@aws-cdk/aws-apigateway.CfnDocumentationPart", version: "1.132.0" };
    CfnDocumentationPart.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGateway::DocumentationPart";
    function CfnDocumentationPart_LocationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("method", cdk.validateString)(properties.method));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("path", cdk.validateString)(properties.path));
      errors.collect(cdk.propertyValidator("statusCode", cdk.validateString)(properties.statusCode));
      errors.collect(cdk.propertyValidator("type", cdk.validateString)(properties.type));
      return errors.wrap('supplied properties not correct for "LocationProperty"');
    }
    function cfnDocumentationPartLocationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnDocumentationPart_LocationPropertyValidator(properties).assertSuccess();
      return {
        Method: cdk.stringToCloudFormation(properties.method),
        Name: cdk.stringToCloudFormation(properties.name),
        Path: cdk.stringToCloudFormation(properties.path),
        StatusCode: cdk.stringToCloudFormation(properties.statusCode),
        Type: cdk.stringToCloudFormation(properties.type)
      };
    }
    function CfnDocumentationPartLocationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("method", "Method", properties.Method != null ? cfn_parse.FromCloudFormation.getString(properties.Method) : void 0);
      ret.addPropertyResult("name", "Name", properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : void 0);
      ret.addPropertyResult("path", "Path", properties.Path != null ? cfn_parse.FromCloudFormation.getString(properties.Path) : void 0);
      ret.addPropertyResult("statusCode", "StatusCode", properties.StatusCode != null ? cfn_parse.FromCloudFormation.getString(properties.StatusCode) : void 0);
      ret.addPropertyResult("type", "Type", properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnDocumentationVersionPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("documentationVersion", cdk.requiredValidator)(properties.documentationVersion));
      errors.collect(cdk.propertyValidator("documentationVersion", cdk.validateString)(properties.documentationVersion));
      errors.collect(cdk.propertyValidator("restApiId", cdk.requiredValidator)(properties.restApiId));
      errors.collect(cdk.propertyValidator("restApiId", cdk.validateString)(properties.restApiId));
      return errors.wrap('supplied properties not correct for "CfnDocumentationVersionProps"');
    }
    function cfnDocumentationVersionPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnDocumentationVersionPropsValidator(properties).assertSuccess();
      return {
        DocumentationVersion: cdk.stringToCloudFormation(properties.documentationVersion),
        RestApiId: cdk.stringToCloudFormation(properties.restApiId),
        Description: cdk.stringToCloudFormation(properties.description)
      };
    }
    function CfnDocumentationVersionPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("documentationVersion", "DocumentationVersion", cfn_parse.FromCloudFormation.getString(properties.DocumentationVersion));
      ret.addPropertyResult("restApiId", "RestApiId", cfn_parse.FromCloudFormation.getString(properties.RestApiId));
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnDocumentationVersion = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnDocumentationVersion.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "documentationVersion", this);
        cdk.requireProperty(props, "restApiId", this);
        this.documentationVersion = props.documentationVersion;
        this.restApiId = props.restApiId;
        this.description = props.description;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnDocumentationVersionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnDocumentationVersion(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnDocumentationVersion.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          documentationVersion: this.documentationVersion,
          restApiId: this.restApiId,
          description: this.description
        };
      }
      renderProperties(props) {
        return cfnDocumentationVersionPropsToCloudFormation(props);
      }
    };
    exports2.CfnDocumentationVersion = CfnDocumentationVersion;
    _h = JSII_RTTI_SYMBOL_1;
    CfnDocumentationVersion[_h] = { fqn: "@aws-cdk/aws-apigateway.CfnDocumentationVersion", version: "1.132.0" };
    CfnDocumentationVersion.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGateway::DocumentationVersion";
    function CfnDomainNamePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("certificateArn", cdk.validateString)(properties.certificateArn));
      errors.collect(cdk.propertyValidator("domainName", cdk.validateString)(properties.domainName));
      errors.collect(cdk.propertyValidator("endpointConfiguration", CfnDomainName_EndpointConfigurationPropertyValidator)(properties.endpointConfiguration));
      errors.collect(cdk.propertyValidator("mutualTlsAuthentication", CfnDomainName_MutualTlsAuthenticationPropertyValidator)(properties.mutualTlsAuthentication));
      errors.collect(cdk.propertyValidator("ownershipVerificationCertificateArn", cdk.validateString)(properties.ownershipVerificationCertificateArn));
      errors.collect(cdk.propertyValidator("regionalCertificateArn", cdk.validateString)(properties.regionalCertificateArn));
      errors.collect(cdk.propertyValidator("securityPolicy", cdk.validateString)(properties.securityPolicy));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnDomainNameProps"');
    }
    function cfnDomainNamePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnDomainNamePropsValidator(properties).assertSuccess();
      return {
        CertificateArn: cdk.stringToCloudFormation(properties.certificateArn),
        DomainName: cdk.stringToCloudFormation(properties.domainName),
        EndpointConfiguration: cfnDomainNameEndpointConfigurationPropertyToCloudFormation(properties.endpointConfiguration),
        MutualTlsAuthentication: cfnDomainNameMutualTlsAuthenticationPropertyToCloudFormation(properties.mutualTlsAuthentication),
        OwnershipVerificationCertificateArn: cdk.stringToCloudFormation(properties.ownershipVerificationCertificateArn),
        RegionalCertificateArn: cdk.stringToCloudFormation(properties.regionalCertificateArn),
        SecurityPolicy: cdk.stringToCloudFormation(properties.securityPolicy),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnDomainNamePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("certificateArn", "CertificateArn", properties.CertificateArn != null ? cfn_parse.FromCloudFormation.getString(properties.CertificateArn) : void 0);
      ret.addPropertyResult("domainName", "DomainName", properties.DomainName != null ? cfn_parse.FromCloudFormation.getString(properties.DomainName) : void 0);
      ret.addPropertyResult("endpointConfiguration", "EndpointConfiguration", properties.EndpointConfiguration != null ? CfnDomainNameEndpointConfigurationPropertyFromCloudFormation(properties.EndpointConfiguration) : void 0);
      ret.addPropertyResult("mutualTlsAuthentication", "MutualTlsAuthentication", properties.MutualTlsAuthentication != null ? CfnDomainNameMutualTlsAuthenticationPropertyFromCloudFormation(properties.MutualTlsAuthentication) : void 0);
      ret.addPropertyResult("ownershipVerificationCertificateArn", "OwnershipVerificationCertificateArn", properties.OwnershipVerificationCertificateArn != null ? cfn_parse.FromCloudFormation.getString(properties.OwnershipVerificationCertificateArn) : void 0);
      ret.addPropertyResult("regionalCertificateArn", "RegionalCertificateArn", properties.RegionalCertificateArn != null ? cfn_parse.FromCloudFormation.getString(properties.RegionalCertificateArn) : void 0);
      ret.addPropertyResult("securityPolicy", "SecurityPolicy", properties.SecurityPolicy != null ? cfn_parse.FromCloudFormation.getString(properties.SecurityPolicy) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnDomainName = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnDomainName.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.attrDistributionDomainName = cdk.Token.asString(this.getAtt("DistributionDomainName"));
        this.attrDistributionHostedZoneId = cdk.Token.asString(this.getAtt("DistributionHostedZoneId"));
        this.attrRegionalDomainName = cdk.Token.asString(this.getAtt("RegionalDomainName"));
        this.attrRegionalHostedZoneId = cdk.Token.asString(this.getAtt("RegionalHostedZoneId"));
        this.certificateArn = props.certificateArn;
        this.domainName = props.domainName;
        this.endpointConfiguration = props.endpointConfiguration;
        this.mutualTlsAuthentication = props.mutualTlsAuthentication;
        this.ownershipVerificationCertificateArn = props.ownershipVerificationCertificateArn;
        this.regionalCertificateArn = props.regionalCertificateArn;
        this.securityPolicy = props.securityPolicy;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::ApiGateway::DomainName", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnDomainNamePropsFromCloudFormation(resourceProperties);
        const ret = new CfnDomainName(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnDomainName.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          certificateArn: this.certificateArn,
          domainName: this.domainName,
          endpointConfiguration: this.endpointConfiguration,
          mutualTlsAuthentication: this.mutualTlsAuthentication,
          ownershipVerificationCertificateArn: this.ownershipVerificationCertificateArn,
          regionalCertificateArn: this.regionalCertificateArn,
          securityPolicy: this.securityPolicy,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnDomainNamePropsToCloudFormation(props);
      }
    };
    exports2.CfnDomainName = CfnDomainName;
    _j = JSII_RTTI_SYMBOL_1;
    CfnDomainName[_j] = { fqn: "@aws-cdk/aws-apigateway.CfnDomainName", version: "1.132.0" };
    CfnDomainName.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGateway::DomainName";
    function CfnDomainName_EndpointConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("types", cdk.listValidator(cdk.validateString))(properties.types));
      return errors.wrap('supplied properties not correct for "EndpointConfigurationProperty"');
    }
    function cfnDomainNameEndpointConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnDomainName_EndpointConfigurationPropertyValidator(properties).assertSuccess();
      return {
        Types: cdk.listMapper(cdk.stringToCloudFormation)(properties.types)
      };
    }
    function CfnDomainNameEndpointConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("types", "Types", properties.Types != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Types) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnDomainName_MutualTlsAuthenticationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("truststoreUri", cdk.validateString)(properties.truststoreUri));
      errors.collect(cdk.propertyValidator("truststoreVersion", cdk.validateString)(properties.truststoreVersion));
      return errors.wrap('supplied properties not correct for "MutualTlsAuthenticationProperty"');
    }
    function cfnDomainNameMutualTlsAuthenticationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnDomainName_MutualTlsAuthenticationPropertyValidator(properties).assertSuccess();
      return {
        TruststoreUri: cdk.stringToCloudFormation(properties.truststoreUri),
        TruststoreVersion: cdk.stringToCloudFormation(properties.truststoreVersion)
      };
    }
    function CfnDomainNameMutualTlsAuthenticationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("truststoreUri", "TruststoreUri", properties.TruststoreUri != null ? cfn_parse.FromCloudFormation.getString(properties.TruststoreUri) : void 0);
      ret.addPropertyResult("truststoreVersion", "TruststoreVersion", properties.TruststoreVersion != null ? cfn_parse.FromCloudFormation.getString(properties.TruststoreVersion) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnGatewayResponsePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("responseParameters", cdk.hashValidator(cdk.validateString))(properties.responseParameters));
      errors.collect(cdk.propertyValidator("responseTemplates", cdk.hashValidator(cdk.validateString))(properties.responseTemplates));
      errors.collect(cdk.propertyValidator("responseType", cdk.requiredValidator)(properties.responseType));
      errors.collect(cdk.propertyValidator("responseType", cdk.validateString)(properties.responseType));
      errors.collect(cdk.propertyValidator("restApiId", cdk.requiredValidator)(properties.restApiId));
      errors.collect(cdk.propertyValidator("restApiId", cdk.validateString)(properties.restApiId));
      errors.collect(cdk.propertyValidator("statusCode", cdk.validateString)(properties.statusCode));
      return errors.wrap('supplied properties not correct for "CfnGatewayResponseProps"');
    }
    function cfnGatewayResponsePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnGatewayResponsePropsValidator(properties).assertSuccess();
      return {
        ResponseType: cdk.stringToCloudFormation(properties.responseType),
        RestApiId: cdk.stringToCloudFormation(properties.restApiId),
        ResponseParameters: cdk.hashMapper(cdk.stringToCloudFormation)(properties.responseParameters),
        ResponseTemplates: cdk.hashMapper(cdk.stringToCloudFormation)(properties.responseTemplates),
        StatusCode: cdk.stringToCloudFormation(properties.statusCode)
      };
    }
    function CfnGatewayResponsePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("responseType", "ResponseType", cfn_parse.FromCloudFormation.getString(properties.ResponseType));
      ret.addPropertyResult("restApiId", "RestApiId", cfn_parse.FromCloudFormation.getString(properties.RestApiId));
      ret.addPropertyResult("responseParameters", "ResponseParameters", properties.ResponseParameters != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.ResponseParameters) : void 0);
      ret.addPropertyResult("responseTemplates", "ResponseTemplates", properties.ResponseTemplates != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.ResponseTemplates) : void 0);
      ret.addPropertyResult("statusCode", "StatusCode", properties.StatusCode != null ? cfn_parse.FromCloudFormation.getString(properties.StatusCode) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnGatewayResponse = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnGatewayResponse.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "responseType", this);
        cdk.requireProperty(props, "restApiId", this);
        this.attrId = cdk.Token.asString(this.getAtt("Id"));
        this.responseType = props.responseType;
        this.restApiId = props.restApiId;
        this.responseParameters = props.responseParameters;
        this.responseTemplates = props.responseTemplates;
        this.statusCode = props.statusCode;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnGatewayResponsePropsFromCloudFormation(resourceProperties);
        const ret = new CfnGatewayResponse(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnGatewayResponse.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          responseType: this.responseType,
          restApiId: this.restApiId,
          responseParameters: this.responseParameters,
          responseTemplates: this.responseTemplates,
          statusCode: this.statusCode
        };
      }
      renderProperties(props) {
        return cfnGatewayResponsePropsToCloudFormation(props);
      }
    };
    exports2.CfnGatewayResponse = CfnGatewayResponse;
    _k = JSII_RTTI_SYMBOL_1;
    CfnGatewayResponse[_k] = { fqn: "@aws-cdk/aws-apigateway.CfnGatewayResponse", version: "1.132.0" };
    CfnGatewayResponse.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGateway::GatewayResponse";
    function CfnMethodPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("apiKeyRequired", cdk.validateBoolean)(properties.apiKeyRequired));
      errors.collect(cdk.propertyValidator("authorizationScopes", cdk.listValidator(cdk.validateString))(properties.authorizationScopes));
      errors.collect(cdk.propertyValidator("authorizationType", cdk.validateString)(properties.authorizationType));
      errors.collect(cdk.propertyValidator("authorizerId", cdk.validateString)(properties.authorizerId));
      errors.collect(cdk.propertyValidator("httpMethod", cdk.requiredValidator)(properties.httpMethod));
      errors.collect(cdk.propertyValidator("httpMethod", cdk.validateString)(properties.httpMethod));
      errors.collect(cdk.propertyValidator("integration", CfnMethod_IntegrationPropertyValidator)(properties.integration));
      errors.collect(cdk.propertyValidator("methodResponses", cdk.listValidator(CfnMethod_MethodResponsePropertyValidator))(properties.methodResponses));
      errors.collect(cdk.propertyValidator("operationName", cdk.validateString)(properties.operationName));
      errors.collect(cdk.propertyValidator("requestModels", cdk.hashValidator(cdk.validateString))(properties.requestModels));
      errors.collect(cdk.propertyValidator("requestParameters", cdk.hashValidator(cdk.validateBoolean))(properties.requestParameters));
      errors.collect(cdk.propertyValidator("requestValidatorId", cdk.validateString)(properties.requestValidatorId));
      errors.collect(cdk.propertyValidator("resourceId", cdk.requiredValidator)(properties.resourceId));
      errors.collect(cdk.propertyValidator("resourceId", cdk.validateString)(properties.resourceId));
      errors.collect(cdk.propertyValidator("restApiId", cdk.requiredValidator)(properties.restApiId));
      errors.collect(cdk.propertyValidator("restApiId", cdk.validateString)(properties.restApiId));
      return errors.wrap('supplied properties not correct for "CfnMethodProps"');
    }
    function cfnMethodPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnMethodPropsValidator(properties).assertSuccess();
      return {
        HttpMethod: cdk.stringToCloudFormation(properties.httpMethod),
        ResourceId: cdk.stringToCloudFormation(properties.resourceId),
        RestApiId: cdk.stringToCloudFormation(properties.restApiId),
        ApiKeyRequired: cdk.booleanToCloudFormation(properties.apiKeyRequired),
        AuthorizationScopes: cdk.listMapper(cdk.stringToCloudFormation)(properties.authorizationScopes),
        AuthorizationType: cdk.stringToCloudFormation(properties.authorizationType),
        AuthorizerId: cdk.stringToCloudFormation(properties.authorizerId),
        Integration: cfnMethodIntegrationPropertyToCloudFormation(properties.integration),
        MethodResponses: cdk.listMapper(cfnMethodMethodResponsePropertyToCloudFormation)(properties.methodResponses),
        OperationName: cdk.stringToCloudFormation(properties.operationName),
        RequestModels: cdk.hashMapper(cdk.stringToCloudFormation)(properties.requestModels),
        RequestParameters: cdk.hashMapper(cdk.booleanToCloudFormation)(properties.requestParameters),
        RequestValidatorId: cdk.stringToCloudFormation(properties.requestValidatorId)
      };
    }
    function CfnMethodPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("httpMethod", "HttpMethod", cfn_parse.FromCloudFormation.getString(properties.HttpMethod));
      ret.addPropertyResult("resourceId", "ResourceId", cfn_parse.FromCloudFormation.getString(properties.ResourceId));
      ret.addPropertyResult("restApiId", "RestApiId", cfn_parse.FromCloudFormation.getString(properties.RestApiId));
      ret.addPropertyResult("apiKeyRequired", "ApiKeyRequired", properties.ApiKeyRequired != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ApiKeyRequired) : void 0);
      ret.addPropertyResult("authorizationScopes", "AuthorizationScopes", properties.AuthorizationScopes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AuthorizationScopes) : void 0);
      ret.addPropertyResult("authorizationType", "AuthorizationType", properties.AuthorizationType != null ? cfn_parse.FromCloudFormation.getString(properties.AuthorizationType) : void 0);
      ret.addPropertyResult("authorizerId", "AuthorizerId", properties.AuthorizerId != null ? cfn_parse.FromCloudFormation.getString(properties.AuthorizerId) : void 0);
      ret.addPropertyResult("integration", "Integration", properties.Integration != null ? CfnMethodIntegrationPropertyFromCloudFormation(properties.Integration) : void 0);
      ret.addPropertyResult("methodResponses", "MethodResponses", properties.MethodResponses != null ? cfn_parse.FromCloudFormation.getArray(CfnMethodMethodResponsePropertyFromCloudFormation)(properties.MethodResponses) : void 0);
      ret.addPropertyResult("operationName", "OperationName", properties.OperationName != null ? cfn_parse.FromCloudFormation.getString(properties.OperationName) : void 0);
      ret.addPropertyResult("requestModels", "RequestModels", properties.RequestModels != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.RequestModels) : void 0);
      ret.addPropertyResult("requestParameters", "RequestParameters", properties.RequestParameters != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getBoolean)(properties.RequestParameters) : void 0);
      ret.addPropertyResult("requestValidatorId", "RequestValidatorId", properties.RequestValidatorId != null ? cfn_parse.FromCloudFormation.getString(properties.RequestValidatorId) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnMethod = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnMethod.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "httpMethod", this);
        cdk.requireProperty(props, "resourceId", this);
        cdk.requireProperty(props, "restApiId", this);
        this.httpMethod = props.httpMethod;
        this.resourceId = props.resourceId;
        this.restApiId = props.restApiId;
        this.apiKeyRequired = props.apiKeyRequired;
        this.authorizationScopes = props.authorizationScopes;
        this.authorizationType = props.authorizationType;
        this.authorizerId = props.authorizerId;
        this.integration = props.integration;
        this.methodResponses = props.methodResponses;
        this.operationName = props.operationName;
        this.requestModels = props.requestModels;
        this.requestParameters = props.requestParameters;
        this.requestValidatorId = props.requestValidatorId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnMethodPropsFromCloudFormation(resourceProperties);
        const ret = new CfnMethod(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnMethod.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          httpMethod: this.httpMethod,
          resourceId: this.resourceId,
          restApiId: this.restApiId,
          apiKeyRequired: this.apiKeyRequired,
          authorizationScopes: this.authorizationScopes,
          authorizationType: this.authorizationType,
          authorizerId: this.authorizerId,
          integration: this.integration,
          methodResponses: this.methodResponses,
          operationName: this.operationName,
          requestModels: this.requestModels,
          requestParameters: this.requestParameters,
          requestValidatorId: this.requestValidatorId
        };
      }
      renderProperties(props) {
        return cfnMethodPropsToCloudFormation(props);
      }
    };
    exports2.CfnMethod = CfnMethod;
    _l = JSII_RTTI_SYMBOL_1;
    CfnMethod[_l] = { fqn: "@aws-cdk/aws-apigateway.CfnMethod", version: "1.132.0" };
    CfnMethod.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGateway::Method";
    function CfnMethod_IntegrationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("cacheKeyParameters", cdk.listValidator(cdk.validateString))(properties.cacheKeyParameters));
      errors.collect(cdk.propertyValidator("cacheNamespace", cdk.validateString)(properties.cacheNamespace));
      errors.collect(cdk.propertyValidator("connectionId", cdk.validateString)(properties.connectionId));
      errors.collect(cdk.propertyValidator("connectionType", cdk.validateString)(properties.connectionType));
      errors.collect(cdk.propertyValidator("contentHandling", cdk.validateString)(properties.contentHandling));
      errors.collect(cdk.propertyValidator("credentials", cdk.validateString)(properties.credentials));
      errors.collect(cdk.propertyValidator("integrationHttpMethod", cdk.validateString)(properties.integrationHttpMethod));
      errors.collect(cdk.propertyValidator("integrationResponses", cdk.listValidator(CfnMethod_IntegrationResponsePropertyValidator))(properties.integrationResponses));
      errors.collect(cdk.propertyValidator("passthroughBehavior", cdk.validateString)(properties.passthroughBehavior));
      errors.collect(cdk.propertyValidator("requestParameters", cdk.hashValidator(cdk.validateString))(properties.requestParameters));
      errors.collect(cdk.propertyValidator("requestTemplates", cdk.hashValidator(cdk.validateString))(properties.requestTemplates));
      errors.collect(cdk.propertyValidator("timeoutInMillis", cdk.validateNumber)(properties.timeoutInMillis));
      errors.collect(cdk.propertyValidator("type", cdk.validateString)(properties.type));
      errors.collect(cdk.propertyValidator("uri", cdk.validateString)(properties.uri));
      return errors.wrap('supplied properties not correct for "IntegrationProperty"');
    }
    function cfnMethodIntegrationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnMethod_IntegrationPropertyValidator(properties).assertSuccess();
      return {
        CacheKeyParameters: cdk.listMapper(cdk.stringToCloudFormation)(properties.cacheKeyParameters),
        CacheNamespace: cdk.stringToCloudFormation(properties.cacheNamespace),
        ConnectionId: cdk.stringToCloudFormation(properties.connectionId),
        ConnectionType: cdk.stringToCloudFormation(properties.connectionType),
        ContentHandling: cdk.stringToCloudFormation(properties.contentHandling),
        Credentials: cdk.stringToCloudFormation(properties.credentials),
        IntegrationHttpMethod: cdk.stringToCloudFormation(properties.integrationHttpMethod),
        IntegrationResponses: cdk.listMapper(cfnMethodIntegrationResponsePropertyToCloudFormation)(properties.integrationResponses),
        PassthroughBehavior: cdk.stringToCloudFormation(properties.passthroughBehavior),
        RequestParameters: cdk.hashMapper(cdk.stringToCloudFormation)(properties.requestParameters),
        RequestTemplates: cdk.hashMapper(cdk.stringToCloudFormation)(properties.requestTemplates),
        TimeoutInMillis: cdk.numberToCloudFormation(properties.timeoutInMillis),
        Type: cdk.stringToCloudFormation(properties.type),
        Uri: cdk.stringToCloudFormation(properties.uri)
      };
    }
    function CfnMethodIntegrationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("cacheKeyParameters", "CacheKeyParameters", properties.CacheKeyParameters != null ? cfn_parse.FromCloudFormation.getStringArray(properties.CacheKeyParameters) : void 0);
      ret.addPropertyResult("cacheNamespace", "CacheNamespace", properties.CacheNamespace != null ? cfn_parse.FromCloudFormation.getString(properties.CacheNamespace) : void 0);
      ret.addPropertyResult("connectionId", "ConnectionId", properties.ConnectionId != null ? cfn_parse.FromCloudFormation.getString(properties.ConnectionId) : void 0);
      ret.addPropertyResult("connectionType", "ConnectionType", properties.ConnectionType != null ? cfn_parse.FromCloudFormation.getString(properties.ConnectionType) : void 0);
      ret.addPropertyResult("contentHandling", "ContentHandling", properties.ContentHandling != null ? cfn_parse.FromCloudFormation.getString(properties.ContentHandling) : void 0);
      ret.addPropertyResult("credentials", "Credentials", properties.Credentials != null ? cfn_parse.FromCloudFormation.getString(properties.Credentials) : void 0);
      ret.addPropertyResult("integrationHttpMethod", "IntegrationHttpMethod", properties.IntegrationHttpMethod != null ? cfn_parse.FromCloudFormation.getString(properties.IntegrationHttpMethod) : void 0);
      ret.addPropertyResult("integrationResponses", "IntegrationResponses", properties.IntegrationResponses != null ? cfn_parse.FromCloudFormation.getArray(CfnMethodIntegrationResponsePropertyFromCloudFormation)(properties.IntegrationResponses) : void 0);
      ret.addPropertyResult("passthroughBehavior", "PassthroughBehavior", properties.PassthroughBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.PassthroughBehavior) : void 0);
      ret.addPropertyResult("requestParameters", "RequestParameters", properties.RequestParameters != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.RequestParameters) : void 0);
      ret.addPropertyResult("requestTemplates", "RequestTemplates", properties.RequestTemplates != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.RequestTemplates) : void 0);
      ret.addPropertyResult("timeoutInMillis", "TimeoutInMillis", properties.TimeoutInMillis != null ? cfn_parse.FromCloudFormation.getNumber(properties.TimeoutInMillis) : void 0);
      ret.addPropertyResult("type", "Type", properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : void 0);
      ret.addPropertyResult("uri", "Uri", properties.Uri != null ? cfn_parse.FromCloudFormation.getString(properties.Uri) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnMethod_IntegrationResponsePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("contentHandling", cdk.validateString)(properties.contentHandling));
      errors.collect(cdk.propertyValidator("responseParameters", cdk.hashValidator(cdk.validateString))(properties.responseParameters));
      errors.collect(cdk.propertyValidator("responseTemplates", cdk.hashValidator(cdk.validateString))(properties.responseTemplates));
      errors.collect(cdk.propertyValidator("selectionPattern", cdk.validateString)(properties.selectionPattern));
      errors.collect(cdk.propertyValidator("statusCode", cdk.requiredValidator)(properties.statusCode));
      errors.collect(cdk.propertyValidator("statusCode", cdk.validateString)(properties.statusCode));
      return errors.wrap('supplied properties not correct for "IntegrationResponseProperty"');
    }
    function cfnMethodIntegrationResponsePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnMethod_IntegrationResponsePropertyValidator(properties).assertSuccess();
      return {
        ContentHandling: cdk.stringToCloudFormation(properties.contentHandling),
        ResponseParameters: cdk.hashMapper(cdk.stringToCloudFormation)(properties.responseParameters),
        ResponseTemplates: cdk.hashMapper(cdk.stringToCloudFormation)(properties.responseTemplates),
        SelectionPattern: cdk.stringToCloudFormation(properties.selectionPattern),
        StatusCode: cdk.stringToCloudFormation(properties.statusCode)
      };
    }
    function CfnMethodIntegrationResponsePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("contentHandling", "ContentHandling", properties.ContentHandling != null ? cfn_parse.FromCloudFormation.getString(properties.ContentHandling) : void 0);
      ret.addPropertyResult("responseParameters", "ResponseParameters", properties.ResponseParameters != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.ResponseParameters) : void 0);
      ret.addPropertyResult("responseTemplates", "ResponseTemplates", properties.ResponseTemplates != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.ResponseTemplates) : void 0);
      ret.addPropertyResult("selectionPattern", "SelectionPattern", properties.SelectionPattern != null ? cfn_parse.FromCloudFormation.getString(properties.SelectionPattern) : void 0);
      ret.addPropertyResult("statusCode", "StatusCode", cfn_parse.FromCloudFormation.getString(properties.StatusCode));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnMethod_MethodResponsePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("responseModels", cdk.hashValidator(cdk.validateString))(properties.responseModels));
      errors.collect(cdk.propertyValidator("responseParameters", cdk.hashValidator(cdk.validateBoolean))(properties.responseParameters));
      errors.collect(cdk.propertyValidator("statusCode", cdk.requiredValidator)(properties.statusCode));
      errors.collect(cdk.propertyValidator("statusCode", cdk.validateString)(properties.statusCode));
      return errors.wrap('supplied properties not correct for "MethodResponseProperty"');
    }
    function cfnMethodMethodResponsePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnMethod_MethodResponsePropertyValidator(properties).assertSuccess();
      return {
        ResponseModels: cdk.hashMapper(cdk.stringToCloudFormation)(properties.responseModels),
        ResponseParameters: cdk.hashMapper(cdk.booleanToCloudFormation)(properties.responseParameters),
        StatusCode: cdk.stringToCloudFormation(properties.statusCode)
      };
    }
    function CfnMethodMethodResponsePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("responseModels", "ResponseModels", properties.ResponseModels != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.ResponseModels) : void 0);
      ret.addPropertyResult("responseParameters", "ResponseParameters", properties.ResponseParameters != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getBoolean)(properties.ResponseParameters) : void 0);
      ret.addPropertyResult("statusCode", "StatusCode", cfn_parse.FromCloudFormation.getString(properties.StatusCode));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnModelPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("contentType", cdk.validateString)(properties.contentType));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("restApiId", cdk.requiredValidator)(properties.restApiId));
      errors.collect(cdk.propertyValidator("restApiId", cdk.validateString)(properties.restApiId));
      errors.collect(cdk.propertyValidator("schema", cdk.validateObject)(properties.schema));
      return errors.wrap('supplied properties not correct for "CfnModelProps"');
    }
    function cfnModelPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnModelPropsValidator(properties).assertSuccess();
      return {
        RestApiId: cdk.stringToCloudFormation(properties.restApiId),
        ContentType: cdk.stringToCloudFormation(properties.contentType),
        Description: cdk.stringToCloudFormation(properties.description),
        Name: cdk.stringToCloudFormation(properties.name),
        Schema: cdk.objectToCloudFormation(properties.schema)
      };
    }
    function CfnModelPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("restApiId", "RestApiId", cfn_parse.FromCloudFormation.getString(properties.RestApiId));
      ret.addPropertyResult("contentType", "ContentType", properties.ContentType != null ? cfn_parse.FromCloudFormation.getString(properties.ContentType) : void 0);
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("name", "Name", properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : void 0);
      ret.addPropertyResult("schema", "Schema", properties.Schema != null ? cfn_parse.FromCloudFormation.getAny(properties.Schema) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnModel = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnModel.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "restApiId", this);
        this.restApiId = props.restApiId;
        this.contentType = props.contentType;
        this.description = props.description;
        this.name = props.name;
        this.schema = props.schema;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnModelPropsFromCloudFormation(resourceProperties);
        const ret = new CfnModel(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnModel.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          restApiId: this.restApiId,
          contentType: this.contentType,
          description: this.description,
          name: this.name,
          schema: this.schema
        };
      }
      renderProperties(props) {
        return cfnModelPropsToCloudFormation(props);
      }
    };
    exports2.CfnModel = CfnModel;
    _m = JSII_RTTI_SYMBOL_1;
    CfnModel[_m] = { fqn: "@aws-cdk/aws-apigateway.CfnModel", version: "1.132.0" };
    CfnModel.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGateway::Model";
    function CfnRequestValidatorPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("restApiId", cdk.requiredValidator)(properties.restApiId));
      errors.collect(cdk.propertyValidator("restApiId", cdk.validateString)(properties.restApiId));
      errors.collect(cdk.propertyValidator("validateRequestBody", cdk.validateBoolean)(properties.validateRequestBody));
      errors.collect(cdk.propertyValidator("validateRequestParameters", cdk.validateBoolean)(properties.validateRequestParameters));
      return errors.wrap('supplied properties not correct for "CfnRequestValidatorProps"');
    }
    function cfnRequestValidatorPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRequestValidatorPropsValidator(properties).assertSuccess();
      return {
        RestApiId: cdk.stringToCloudFormation(properties.restApiId),
        Name: cdk.stringToCloudFormation(properties.name),
        ValidateRequestBody: cdk.booleanToCloudFormation(properties.validateRequestBody),
        ValidateRequestParameters: cdk.booleanToCloudFormation(properties.validateRequestParameters)
      };
    }
    function CfnRequestValidatorPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("restApiId", "RestApiId", cfn_parse.FromCloudFormation.getString(properties.RestApiId));
      ret.addPropertyResult("name", "Name", properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : void 0);
      ret.addPropertyResult("validateRequestBody", "ValidateRequestBody", properties.ValidateRequestBody != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ValidateRequestBody) : void 0);
      ret.addPropertyResult("validateRequestParameters", "ValidateRequestParameters", properties.ValidateRequestParameters != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ValidateRequestParameters) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnRequestValidator = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnRequestValidator.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "restApiId", this);
        this.attrRequestValidatorId = cdk.Token.asString(this.getAtt("RequestValidatorId"));
        this.restApiId = props.restApiId;
        this.name = props.name;
        this.validateRequestBody = props.validateRequestBody;
        this.validateRequestParameters = props.validateRequestParameters;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnRequestValidatorPropsFromCloudFormation(resourceProperties);
        const ret = new CfnRequestValidator(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnRequestValidator.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          restApiId: this.restApiId,
          name: this.name,
          validateRequestBody: this.validateRequestBody,
          validateRequestParameters: this.validateRequestParameters
        };
      }
      renderProperties(props) {
        return cfnRequestValidatorPropsToCloudFormation(props);
      }
    };
    exports2.CfnRequestValidator = CfnRequestValidator;
    _o = JSII_RTTI_SYMBOL_1;
    CfnRequestValidator[_o] = { fqn: "@aws-cdk/aws-apigateway.CfnRequestValidator", version: "1.132.0" };
    CfnRequestValidator.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGateway::RequestValidator";
    function CfnResourcePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("parentId", cdk.requiredValidator)(properties.parentId));
      errors.collect(cdk.propertyValidator("parentId", cdk.validateString)(properties.parentId));
      errors.collect(cdk.propertyValidator("pathPart", cdk.requiredValidator)(properties.pathPart));
      errors.collect(cdk.propertyValidator("pathPart", cdk.validateString)(properties.pathPart));
      errors.collect(cdk.propertyValidator("restApiId", cdk.requiredValidator)(properties.restApiId));
      errors.collect(cdk.propertyValidator("restApiId", cdk.validateString)(properties.restApiId));
      return errors.wrap('supplied properties not correct for "CfnResourceProps"');
    }
    function cfnResourcePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnResourcePropsValidator(properties).assertSuccess();
      return {
        ParentId: cdk.stringToCloudFormation(properties.parentId),
        PathPart: cdk.stringToCloudFormation(properties.pathPart),
        RestApiId: cdk.stringToCloudFormation(properties.restApiId)
      };
    }
    function CfnResourcePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("parentId", "ParentId", cfn_parse.FromCloudFormation.getString(properties.ParentId));
      ret.addPropertyResult("pathPart", "PathPart", cfn_parse.FromCloudFormation.getString(properties.PathPart));
      ret.addPropertyResult("restApiId", "RestApiId", cfn_parse.FromCloudFormation.getString(properties.RestApiId));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnResource = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnResource.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "parentId", this);
        cdk.requireProperty(props, "pathPart", this);
        cdk.requireProperty(props, "restApiId", this);
        this.attrResourceId = cdk.Token.asString(this.getAtt("ResourceId"));
        this.parentId = props.parentId;
        this.pathPart = props.pathPart;
        this.restApiId = props.restApiId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnResourcePropsFromCloudFormation(resourceProperties);
        const ret = new CfnResource(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnResource.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          parentId: this.parentId,
          pathPart: this.pathPart,
          restApiId: this.restApiId
        };
      }
      renderProperties(props) {
        return cfnResourcePropsToCloudFormation(props);
      }
    };
    exports2.CfnResource = CfnResource;
    _p = JSII_RTTI_SYMBOL_1;
    CfnResource[_p] = { fqn: "@aws-cdk/aws-apigateway.CfnResource", version: "1.132.0" };
    CfnResource.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGateway::Resource";
    function CfnRestApiPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("apiKeySourceType", cdk.validateString)(properties.apiKeySourceType));
      errors.collect(cdk.propertyValidator("binaryMediaTypes", cdk.listValidator(cdk.validateString))(properties.binaryMediaTypes));
      errors.collect(cdk.propertyValidator("body", cdk.validateObject)(properties.body));
      errors.collect(cdk.propertyValidator("bodyS3Location", CfnRestApi_S3LocationPropertyValidator)(properties.bodyS3Location));
      errors.collect(cdk.propertyValidator("cloneFrom", cdk.validateString)(properties.cloneFrom));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("disableExecuteApiEndpoint", cdk.validateBoolean)(properties.disableExecuteApiEndpoint));
      errors.collect(cdk.propertyValidator("endpointConfiguration", CfnRestApi_EndpointConfigurationPropertyValidator)(properties.endpointConfiguration));
      errors.collect(cdk.propertyValidator("failOnWarnings", cdk.validateBoolean)(properties.failOnWarnings));
      errors.collect(cdk.propertyValidator("minimumCompressionSize", cdk.validateNumber)(properties.minimumCompressionSize));
      errors.collect(cdk.propertyValidator("mode", cdk.validateString)(properties.mode));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("parameters", cdk.hashValidator(cdk.validateString))(properties.parameters));
      errors.collect(cdk.propertyValidator("policy", cdk.validateObject)(properties.policy));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnRestApiProps"');
    }
    function cfnRestApiPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRestApiPropsValidator(properties).assertSuccess();
      return {
        ApiKeySourceType: cdk.stringToCloudFormation(properties.apiKeySourceType),
        BinaryMediaTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.binaryMediaTypes),
        Body: cdk.objectToCloudFormation(properties.body),
        BodyS3Location: cfnRestApiS3LocationPropertyToCloudFormation(properties.bodyS3Location),
        CloneFrom: cdk.stringToCloudFormation(properties.cloneFrom),
        Description: cdk.stringToCloudFormation(properties.description),
        DisableExecuteApiEndpoint: cdk.booleanToCloudFormation(properties.disableExecuteApiEndpoint),
        EndpointConfiguration: cfnRestApiEndpointConfigurationPropertyToCloudFormation(properties.endpointConfiguration),
        FailOnWarnings: cdk.booleanToCloudFormation(properties.failOnWarnings),
        MinimumCompressionSize: cdk.numberToCloudFormation(properties.minimumCompressionSize),
        Mode: cdk.stringToCloudFormation(properties.mode),
        Name: cdk.stringToCloudFormation(properties.name),
        Parameters: cdk.hashMapper(cdk.stringToCloudFormation)(properties.parameters),
        Policy: cdk.objectToCloudFormation(properties.policy),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnRestApiPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("apiKeySourceType", "ApiKeySourceType", properties.ApiKeySourceType != null ? cfn_parse.FromCloudFormation.getString(properties.ApiKeySourceType) : void 0);
      ret.addPropertyResult("binaryMediaTypes", "BinaryMediaTypes", properties.BinaryMediaTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.BinaryMediaTypes) : void 0);
      ret.addPropertyResult("body", "Body", properties.Body != null ? cfn_parse.FromCloudFormation.getAny(properties.Body) : void 0);
      ret.addPropertyResult("bodyS3Location", "BodyS3Location", properties.BodyS3Location != null ? CfnRestApiS3LocationPropertyFromCloudFormation(properties.BodyS3Location) : void 0);
      ret.addPropertyResult("cloneFrom", "CloneFrom", properties.CloneFrom != null ? cfn_parse.FromCloudFormation.getString(properties.CloneFrom) : void 0);
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("disableExecuteApiEndpoint", "DisableExecuteApiEndpoint", properties.DisableExecuteApiEndpoint != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DisableExecuteApiEndpoint) : void 0);
      ret.addPropertyResult("endpointConfiguration", "EndpointConfiguration", properties.EndpointConfiguration != null ? CfnRestApiEndpointConfigurationPropertyFromCloudFormation(properties.EndpointConfiguration) : void 0);
      ret.addPropertyResult("failOnWarnings", "FailOnWarnings", properties.FailOnWarnings != null ? cfn_parse.FromCloudFormation.getBoolean(properties.FailOnWarnings) : void 0);
      ret.addPropertyResult("minimumCompressionSize", "MinimumCompressionSize", properties.MinimumCompressionSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinimumCompressionSize) : void 0);
      ret.addPropertyResult("mode", "Mode", properties.Mode != null ? cfn_parse.FromCloudFormation.getString(properties.Mode) : void 0);
      ret.addPropertyResult("name", "Name", properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : void 0);
      ret.addPropertyResult("parameters", "Parameters", properties.Parameters != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Parameters) : void 0);
      ret.addPropertyResult("policy", "Policy", properties.Policy != null ? cfn_parse.FromCloudFormation.getAny(properties.Policy) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnRestApi = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnRestApi.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.attrRootResourceId = cdk.Token.asString(this.getAtt("RootResourceId"));
        this.apiKeySourceType = props.apiKeySourceType;
        this.binaryMediaTypes = props.binaryMediaTypes;
        this.body = props.body;
        this.bodyS3Location = props.bodyS3Location;
        this.cloneFrom = props.cloneFrom;
        this.description = props.description;
        this.disableExecuteApiEndpoint = props.disableExecuteApiEndpoint;
        this.endpointConfiguration = props.endpointConfiguration;
        this.failOnWarnings = props.failOnWarnings;
        this.minimumCompressionSize = props.minimumCompressionSize;
        this.mode = props.mode;
        this.name = props.name;
        this.parameters = props.parameters;
        this.policy = props.policy;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::ApiGateway::RestApi", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnRestApiPropsFromCloudFormation(resourceProperties);
        const ret = new CfnRestApi(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnRestApi.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          apiKeySourceType: this.apiKeySourceType,
          binaryMediaTypes: this.binaryMediaTypes,
          body: this.body,
          bodyS3Location: this.bodyS3Location,
          cloneFrom: this.cloneFrom,
          description: this.description,
          disableExecuteApiEndpoint: this.disableExecuteApiEndpoint,
          endpointConfiguration: this.endpointConfiguration,
          failOnWarnings: this.failOnWarnings,
          minimumCompressionSize: this.minimumCompressionSize,
          mode: this.mode,
          name: this.name,
          parameters: this.parameters,
          policy: this.policy,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnRestApiPropsToCloudFormation(props);
      }
    };
    exports2.CfnRestApi = CfnRestApi;
    _q = JSII_RTTI_SYMBOL_1;
    CfnRestApi[_q] = { fqn: "@aws-cdk/aws-apigateway.CfnRestApi", version: "1.132.0" };
    CfnRestApi.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGateway::RestApi";
    function CfnRestApi_EndpointConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("types", cdk.listValidator(cdk.validateString))(properties.types));
      errors.collect(cdk.propertyValidator("vpcEndpointIds", cdk.listValidator(cdk.validateString))(properties.vpcEndpointIds));
      return errors.wrap('supplied properties not correct for "EndpointConfigurationProperty"');
    }
    function cfnRestApiEndpointConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRestApi_EndpointConfigurationPropertyValidator(properties).assertSuccess();
      return {
        Types: cdk.listMapper(cdk.stringToCloudFormation)(properties.types),
        VpcEndpointIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.vpcEndpointIds)
      };
    }
    function CfnRestApiEndpointConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("types", "Types", properties.Types != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Types) : void 0);
      ret.addPropertyResult("vpcEndpointIds", "VpcEndpointIds", properties.VpcEndpointIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.VpcEndpointIds) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnRestApi_S3LocationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("bucket", cdk.validateString)(properties.bucket));
      errors.collect(cdk.propertyValidator("eTag", cdk.validateString)(properties.eTag));
      errors.collect(cdk.propertyValidator("key", cdk.validateString)(properties.key));
      errors.collect(cdk.propertyValidator("version", cdk.validateString)(properties.version));
      return errors.wrap('supplied properties not correct for "S3LocationProperty"');
    }
    function cfnRestApiS3LocationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRestApi_S3LocationPropertyValidator(properties).assertSuccess();
      return {
        Bucket: cdk.stringToCloudFormation(properties.bucket),
        ETag: cdk.stringToCloudFormation(properties.eTag),
        Key: cdk.stringToCloudFormation(properties.key),
        Version: cdk.stringToCloudFormation(properties.version)
      };
    }
    function CfnRestApiS3LocationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("bucket", "Bucket", properties.Bucket != null ? cfn_parse.FromCloudFormation.getString(properties.Bucket) : void 0);
      ret.addPropertyResult("eTag", "ETag", properties.ETag != null ? cfn_parse.FromCloudFormation.getString(properties.ETag) : void 0);
      ret.addPropertyResult("key", "Key", properties.Key != null ? cfn_parse.FromCloudFormation.getString(properties.Key) : void 0);
      ret.addPropertyResult("version", "Version", properties.Version != null ? cfn_parse.FromCloudFormation.getString(properties.Version) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnStagePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("accessLogSetting", CfnStage_AccessLogSettingPropertyValidator)(properties.accessLogSetting));
      errors.collect(cdk.propertyValidator("cacheClusterEnabled", cdk.validateBoolean)(properties.cacheClusterEnabled));
      errors.collect(cdk.propertyValidator("cacheClusterSize", cdk.validateString)(properties.cacheClusterSize));
      errors.collect(cdk.propertyValidator("canarySetting", CfnStage_CanarySettingPropertyValidator)(properties.canarySetting));
      errors.collect(cdk.propertyValidator("clientCertificateId", cdk.validateString)(properties.clientCertificateId));
      errors.collect(cdk.propertyValidator("deploymentId", cdk.validateString)(properties.deploymentId));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("documentationVersion", cdk.validateString)(properties.documentationVersion));
      errors.collect(cdk.propertyValidator("methodSettings", cdk.listValidator(CfnStage_MethodSettingPropertyValidator))(properties.methodSettings));
      errors.collect(cdk.propertyValidator("restApiId", cdk.requiredValidator)(properties.restApiId));
      errors.collect(cdk.propertyValidator("restApiId", cdk.validateString)(properties.restApiId));
      errors.collect(cdk.propertyValidator("stageName", cdk.validateString)(properties.stageName));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("tracingEnabled", cdk.validateBoolean)(properties.tracingEnabled));
      errors.collect(cdk.propertyValidator("variables", cdk.hashValidator(cdk.validateString))(properties.variables));
      return errors.wrap('supplied properties not correct for "CfnStageProps"');
    }
    function cfnStagePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnStagePropsValidator(properties).assertSuccess();
      return {
        RestApiId: cdk.stringToCloudFormation(properties.restApiId),
        AccessLogSetting: cfnStageAccessLogSettingPropertyToCloudFormation(properties.accessLogSetting),
        CacheClusterEnabled: cdk.booleanToCloudFormation(properties.cacheClusterEnabled),
        CacheClusterSize: cdk.stringToCloudFormation(properties.cacheClusterSize),
        CanarySetting: cfnStageCanarySettingPropertyToCloudFormation(properties.canarySetting),
        ClientCertificateId: cdk.stringToCloudFormation(properties.clientCertificateId),
        DeploymentId: cdk.stringToCloudFormation(properties.deploymentId),
        Description: cdk.stringToCloudFormation(properties.description),
        DocumentationVersion: cdk.stringToCloudFormation(properties.documentationVersion),
        MethodSettings: cdk.listMapper(cfnStageMethodSettingPropertyToCloudFormation)(properties.methodSettings),
        StageName: cdk.stringToCloudFormation(properties.stageName),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
        TracingEnabled: cdk.booleanToCloudFormation(properties.tracingEnabled),
        Variables: cdk.hashMapper(cdk.stringToCloudFormation)(properties.variables)
      };
    }
    function CfnStagePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("restApiId", "RestApiId", cfn_parse.FromCloudFormation.getString(properties.RestApiId));
      ret.addPropertyResult("accessLogSetting", "AccessLogSetting", properties.AccessLogSetting != null ? CfnStageAccessLogSettingPropertyFromCloudFormation(properties.AccessLogSetting) : void 0);
      ret.addPropertyResult("cacheClusterEnabled", "CacheClusterEnabled", properties.CacheClusterEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CacheClusterEnabled) : void 0);
      ret.addPropertyResult("cacheClusterSize", "CacheClusterSize", properties.CacheClusterSize != null ? cfn_parse.FromCloudFormation.getString(properties.CacheClusterSize) : void 0);
      ret.addPropertyResult("canarySetting", "CanarySetting", properties.CanarySetting != null ? CfnStageCanarySettingPropertyFromCloudFormation(properties.CanarySetting) : void 0);
      ret.addPropertyResult("clientCertificateId", "ClientCertificateId", properties.ClientCertificateId != null ? cfn_parse.FromCloudFormation.getString(properties.ClientCertificateId) : void 0);
      ret.addPropertyResult("deploymentId", "DeploymentId", properties.DeploymentId != null ? cfn_parse.FromCloudFormation.getString(properties.DeploymentId) : void 0);
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("documentationVersion", "DocumentationVersion", properties.DocumentationVersion != null ? cfn_parse.FromCloudFormation.getString(properties.DocumentationVersion) : void 0);
      ret.addPropertyResult("methodSettings", "MethodSettings", properties.MethodSettings != null ? cfn_parse.FromCloudFormation.getArray(CfnStageMethodSettingPropertyFromCloudFormation)(properties.MethodSettings) : void 0);
      ret.addPropertyResult("stageName", "StageName", properties.StageName != null ? cfn_parse.FromCloudFormation.getString(properties.StageName) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addPropertyResult("tracingEnabled", "TracingEnabled", properties.TracingEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.TracingEnabled) : void 0);
      ret.addPropertyResult("variables", "Variables", properties.Variables != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Variables) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnStage = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnStage.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "restApiId", this);
        this.restApiId = props.restApiId;
        this.accessLogSetting = props.accessLogSetting;
        this.cacheClusterEnabled = props.cacheClusterEnabled;
        this.cacheClusterSize = props.cacheClusterSize;
        this.canarySetting = props.canarySetting;
        this.clientCertificateId = props.clientCertificateId;
        this.deploymentId = props.deploymentId;
        this.description = props.description;
        this.documentationVersion = props.documentationVersion;
        this.methodSettings = props.methodSettings;
        this.stageName = props.stageName;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::ApiGateway::Stage", props.tags, { tagPropertyName: "tags" });
        this.tracingEnabled = props.tracingEnabled;
        this.variables = props.variables;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnStagePropsFromCloudFormation(resourceProperties);
        const ret = new CfnStage(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnStage.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          restApiId: this.restApiId,
          accessLogSetting: this.accessLogSetting,
          cacheClusterEnabled: this.cacheClusterEnabled,
          cacheClusterSize: this.cacheClusterSize,
          canarySetting: this.canarySetting,
          clientCertificateId: this.clientCertificateId,
          deploymentId: this.deploymentId,
          description: this.description,
          documentationVersion: this.documentationVersion,
          methodSettings: this.methodSettings,
          stageName: this.stageName,
          tags: this.tags.renderTags(),
          tracingEnabled: this.tracingEnabled,
          variables: this.variables
        };
      }
      renderProperties(props) {
        return cfnStagePropsToCloudFormation(props);
      }
    };
    exports2.CfnStage = CfnStage;
    _r = JSII_RTTI_SYMBOL_1;
    CfnStage[_r] = { fqn: "@aws-cdk/aws-apigateway.CfnStage", version: "1.132.0" };
    CfnStage.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGateway::Stage";
    function CfnStage_AccessLogSettingPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("destinationArn", cdk.validateString)(properties.destinationArn));
      errors.collect(cdk.propertyValidator("format", cdk.validateString)(properties.format));
      return errors.wrap('supplied properties not correct for "AccessLogSettingProperty"');
    }
    function cfnStageAccessLogSettingPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnStage_AccessLogSettingPropertyValidator(properties).assertSuccess();
      return {
        DestinationArn: cdk.stringToCloudFormation(properties.destinationArn),
        Format: cdk.stringToCloudFormation(properties.format)
      };
    }
    function CfnStageAccessLogSettingPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("destinationArn", "DestinationArn", properties.DestinationArn != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationArn) : void 0);
      ret.addPropertyResult("format", "Format", properties.Format != null ? cfn_parse.FromCloudFormation.getString(properties.Format) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnStage_CanarySettingPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("deploymentId", cdk.validateString)(properties.deploymentId));
      errors.collect(cdk.propertyValidator("percentTraffic", cdk.validateNumber)(properties.percentTraffic));
      errors.collect(cdk.propertyValidator("stageVariableOverrides", cdk.hashValidator(cdk.validateString))(properties.stageVariableOverrides));
      errors.collect(cdk.propertyValidator("useStageCache", cdk.validateBoolean)(properties.useStageCache));
      return errors.wrap('supplied properties not correct for "CanarySettingProperty"');
    }
    function cfnStageCanarySettingPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnStage_CanarySettingPropertyValidator(properties).assertSuccess();
      return {
        DeploymentId: cdk.stringToCloudFormation(properties.deploymentId),
        PercentTraffic: cdk.numberToCloudFormation(properties.percentTraffic),
        StageVariableOverrides: cdk.hashMapper(cdk.stringToCloudFormation)(properties.stageVariableOverrides),
        UseStageCache: cdk.booleanToCloudFormation(properties.useStageCache)
      };
    }
    function CfnStageCanarySettingPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("deploymentId", "DeploymentId", properties.DeploymentId != null ? cfn_parse.FromCloudFormation.getString(properties.DeploymentId) : void 0);
      ret.addPropertyResult("percentTraffic", "PercentTraffic", properties.PercentTraffic != null ? cfn_parse.FromCloudFormation.getNumber(properties.PercentTraffic) : void 0);
      ret.addPropertyResult("stageVariableOverrides", "StageVariableOverrides", properties.StageVariableOverrides != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.StageVariableOverrides) : void 0);
      ret.addPropertyResult("useStageCache", "UseStageCache", properties.UseStageCache != null ? cfn_parse.FromCloudFormation.getBoolean(properties.UseStageCache) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnStage_MethodSettingPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("cacheDataEncrypted", cdk.validateBoolean)(properties.cacheDataEncrypted));
      errors.collect(cdk.propertyValidator("cacheTtlInSeconds", cdk.validateNumber)(properties.cacheTtlInSeconds));
      errors.collect(cdk.propertyValidator("cachingEnabled", cdk.validateBoolean)(properties.cachingEnabled));
      errors.collect(cdk.propertyValidator("dataTraceEnabled", cdk.validateBoolean)(properties.dataTraceEnabled));
      errors.collect(cdk.propertyValidator("httpMethod", cdk.validateString)(properties.httpMethod));
      errors.collect(cdk.propertyValidator("loggingLevel", cdk.validateString)(properties.loggingLevel));
      errors.collect(cdk.propertyValidator("metricsEnabled", cdk.validateBoolean)(properties.metricsEnabled));
      errors.collect(cdk.propertyValidator("resourcePath", cdk.validateString)(properties.resourcePath));
      errors.collect(cdk.propertyValidator("throttlingBurstLimit", cdk.validateNumber)(properties.throttlingBurstLimit));
      errors.collect(cdk.propertyValidator("throttlingRateLimit", cdk.validateNumber)(properties.throttlingRateLimit));
      return errors.wrap('supplied properties not correct for "MethodSettingProperty"');
    }
    function cfnStageMethodSettingPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnStage_MethodSettingPropertyValidator(properties).assertSuccess();
      return {
        CacheDataEncrypted: cdk.booleanToCloudFormation(properties.cacheDataEncrypted),
        CacheTtlInSeconds: cdk.numberToCloudFormation(properties.cacheTtlInSeconds),
        CachingEnabled: cdk.booleanToCloudFormation(properties.cachingEnabled),
        DataTraceEnabled: cdk.booleanToCloudFormation(properties.dataTraceEnabled),
        HttpMethod: cdk.stringToCloudFormation(properties.httpMethod),
        LoggingLevel: cdk.stringToCloudFormation(properties.loggingLevel),
        MetricsEnabled: cdk.booleanToCloudFormation(properties.metricsEnabled),
        ResourcePath: cdk.stringToCloudFormation(properties.resourcePath),
        ThrottlingBurstLimit: cdk.numberToCloudFormation(properties.throttlingBurstLimit),
        ThrottlingRateLimit: cdk.numberToCloudFormation(properties.throttlingRateLimit)
      };
    }
    function CfnStageMethodSettingPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("cacheDataEncrypted", "CacheDataEncrypted", properties.CacheDataEncrypted != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CacheDataEncrypted) : void 0);
      ret.addPropertyResult("cacheTtlInSeconds", "CacheTtlInSeconds", properties.CacheTtlInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.CacheTtlInSeconds) : void 0);
      ret.addPropertyResult("cachingEnabled", "CachingEnabled", properties.CachingEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CachingEnabled) : void 0);
      ret.addPropertyResult("dataTraceEnabled", "DataTraceEnabled", properties.DataTraceEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DataTraceEnabled) : void 0);
      ret.addPropertyResult("httpMethod", "HttpMethod", properties.HttpMethod != null ? cfn_parse.FromCloudFormation.getString(properties.HttpMethod) : void 0);
      ret.addPropertyResult("loggingLevel", "LoggingLevel", properties.LoggingLevel != null ? cfn_parse.FromCloudFormation.getString(properties.LoggingLevel) : void 0);
      ret.addPropertyResult("metricsEnabled", "MetricsEnabled", properties.MetricsEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.MetricsEnabled) : void 0);
      ret.addPropertyResult("resourcePath", "ResourcePath", properties.ResourcePath != null ? cfn_parse.FromCloudFormation.getString(properties.ResourcePath) : void 0);
      ret.addPropertyResult("throttlingBurstLimit", "ThrottlingBurstLimit", properties.ThrottlingBurstLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.ThrottlingBurstLimit) : void 0);
      ret.addPropertyResult("throttlingRateLimit", "ThrottlingRateLimit", properties.ThrottlingRateLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.ThrottlingRateLimit) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnUsagePlanPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("apiStages", cdk.listValidator(CfnUsagePlan_ApiStagePropertyValidator))(properties.apiStages));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("quota", CfnUsagePlan_QuotaSettingsPropertyValidator)(properties.quota));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("throttle", CfnUsagePlan_ThrottleSettingsPropertyValidator)(properties.throttle));
      errors.collect(cdk.propertyValidator("usagePlanName", cdk.validateString)(properties.usagePlanName));
      return errors.wrap('supplied properties not correct for "CfnUsagePlanProps"');
    }
    function cfnUsagePlanPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnUsagePlanPropsValidator(properties).assertSuccess();
      return {
        ApiStages: cdk.listMapper(cfnUsagePlanApiStagePropertyToCloudFormation)(properties.apiStages),
        Description: cdk.stringToCloudFormation(properties.description),
        Quota: cfnUsagePlanQuotaSettingsPropertyToCloudFormation(properties.quota),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
        Throttle: cfnUsagePlanThrottleSettingsPropertyToCloudFormation(properties.throttle),
        UsagePlanName: cdk.stringToCloudFormation(properties.usagePlanName)
      };
    }
    function CfnUsagePlanPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("apiStages", "ApiStages", properties.ApiStages != null ? cfn_parse.FromCloudFormation.getArray(CfnUsagePlanApiStagePropertyFromCloudFormation)(properties.ApiStages) : void 0);
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("quota", "Quota", properties.Quota != null ? CfnUsagePlanQuotaSettingsPropertyFromCloudFormation(properties.Quota) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addPropertyResult("throttle", "Throttle", properties.Throttle != null ? CfnUsagePlanThrottleSettingsPropertyFromCloudFormation(properties.Throttle) : void 0);
      ret.addPropertyResult("usagePlanName", "UsagePlanName", properties.UsagePlanName != null ? cfn_parse.FromCloudFormation.getString(properties.UsagePlanName) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnUsagePlan = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnUsagePlan.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.attrId = cdk.Token.asString(this.getAtt("Id"));
        this.apiStages = props.apiStages;
        this.description = props.description;
        this.quota = props.quota;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::ApiGateway::UsagePlan", props.tags, { tagPropertyName: "tags" });
        this.throttle = props.throttle;
        this.usagePlanName = props.usagePlanName;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnUsagePlanPropsFromCloudFormation(resourceProperties);
        const ret = new CfnUsagePlan(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnUsagePlan.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          apiStages: this.apiStages,
          description: this.description,
          quota: this.quota,
          tags: this.tags.renderTags(),
          throttle: this.throttle,
          usagePlanName: this.usagePlanName
        };
      }
      renderProperties(props) {
        return cfnUsagePlanPropsToCloudFormation(props);
      }
    };
    exports2.CfnUsagePlan = CfnUsagePlan;
    _s = JSII_RTTI_SYMBOL_1;
    CfnUsagePlan[_s] = { fqn: "@aws-cdk/aws-apigateway.CfnUsagePlan", version: "1.132.0" };
    CfnUsagePlan.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGateway::UsagePlan";
    function CfnUsagePlan_ApiStagePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("apiId", cdk.validateString)(properties.apiId));
      errors.collect(cdk.propertyValidator("stage", cdk.validateString)(properties.stage));
      errors.collect(cdk.propertyValidator("throttle", cdk.hashValidator(CfnUsagePlan_ThrottleSettingsPropertyValidator))(properties.throttle));
      return errors.wrap('supplied properties not correct for "ApiStageProperty"');
    }
    function cfnUsagePlanApiStagePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnUsagePlan_ApiStagePropertyValidator(properties).assertSuccess();
      return {
        ApiId: cdk.stringToCloudFormation(properties.apiId),
        Stage: cdk.stringToCloudFormation(properties.stage),
        Throttle: cdk.hashMapper(cfnUsagePlanThrottleSettingsPropertyToCloudFormation)(properties.throttle)
      };
    }
    function CfnUsagePlanApiStagePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("apiId", "ApiId", properties.ApiId != null ? cfn_parse.FromCloudFormation.getString(properties.ApiId) : void 0);
      ret.addPropertyResult("stage", "Stage", properties.Stage != null ? cfn_parse.FromCloudFormation.getString(properties.Stage) : void 0);
      ret.addPropertyResult("throttle", "Throttle", properties.Throttle != null ? cfn_parse.FromCloudFormation.getMap(CfnUsagePlanThrottleSettingsPropertyFromCloudFormation)(properties.Throttle) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnUsagePlan_QuotaSettingsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("limit", cdk.validateNumber)(properties.limit));
      errors.collect(cdk.propertyValidator("offset", cdk.validateNumber)(properties.offset));
      errors.collect(cdk.propertyValidator("period", cdk.validateString)(properties.period));
      return errors.wrap('supplied properties not correct for "QuotaSettingsProperty"');
    }
    function cfnUsagePlanQuotaSettingsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnUsagePlan_QuotaSettingsPropertyValidator(properties).assertSuccess();
      return {
        Limit: cdk.numberToCloudFormation(properties.limit),
        Offset: cdk.numberToCloudFormation(properties.offset),
        Period: cdk.stringToCloudFormation(properties.period)
      };
    }
    function CfnUsagePlanQuotaSettingsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("limit", "Limit", properties.Limit != null ? cfn_parse.FromCloudFormation.getNumber(properties.Limit) : void 0);
      ret.addPropertyResult("offset", "Offset", properties.Offset != null ? cfn_parse.FromCloudFormation.getNumber(properties.Offset) : void 0);
      ret.addPropertyResult("period", "Period", properties.Period != null ? cfn_parse.FromCloudFormation.getString(properties.Period) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnUsagePlan_ThrottleSettingsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("burstLimit", cdk.validateNumber)(properties.burstLimit));
      errors.collect(cdk.propertyValidator("rateLimit", cdk.validateNumber)(properties.rateLimit));
      return errors.wrap('supplied properties not correct for "ThrottleSettingsProperty"');
    }
    function cfnUsagePlanThrottleSettingsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnUsagePlan_ThrottleSettingsPropertyValidator(properties).assertSuccess();
      return {
        BurstLimit: cdk.numberToCloudFormation(properties.burstLimit),
        RateLimit: cdk.numberToCloudFormation(properties.rateLimit)
      };
    }
    function CfnUsagePlanThrottleSettingsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("burstLimit", "BurstLimit", properties.BurstLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.BurstLimit) : void 0);
      ret.addPropertyResult("rateLimit", "RateLimit", properties.RateLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.RateLimit) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnUsagePlanKeyPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("keyId", cdk.requiredValidator)(properties.keyId));
      errors.collect(cdk.propertyValidator("keyId", cdk.validateString)(properties.keyId));
      errors.collect(cdk.propertyValidator("keyType", cdk.requiredValidator)(properties.keyType));
      errors.collect(cdk.propertyValidator("keyType", cdk.validateString)(properties.keyType));
      errors.collect(cdk.propertyValidator("usagePlanId", cdk.requiredValidator)(properties.usagePlanId));
      errors.collect(cdk.propertyValidator("usagePlanId", cdk.validateString)(properties.usagePlanId));
      return errors.wrap('supplied properties not correct for "CfnUsagePlanKeyProps"');
    }
    function cfnUsagePlanKeyPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnUsagePlanKeyPropsValidator(properties).assertSuccess();
      return {
        KeyId: cdk.stringToCloudFormation(properties.keyId),
        KeyType: cdk.stringToCloudFormation(properties.keyType),
        UsagePlanId: cdk.stringToCloudFormation(properties.usagePlanId)
      };
    }
    function CfnUsagePlanKeyPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("keyId", "KeyId", cfn_parse.FromCloudFormation.getString(properties.KeyId));
      ret.addPropertyResult("keyType", "KeyType", cfn_parse.FromCloudFormation.getString(properties.KeyType));
      ret.addPropertyResult("usagePlanId", "UsagePlanId", cfn_parse.FromCloudFormation.getString(properties.UsagePlanId));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnUsagePlanKey = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnUsagePlanKey.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "keyId", this);
        cdk.requireProperty(props, "keyType", this);
        cdk.requireProperty(props, "usagePlanId", this);
        this.attrId = cdk.Token.asString(this.getAtt("Id"));
        this.keyId = props.keyId;
        this.keyType = props.keyType;
        this.usagePlanId = props.usagePlanId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnUsagePlanKeyPropsFromCloudFormation(resourceProperties);
        const ret = new CfnUsagePlanKey(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnUsagePlanKey.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          keyId: this.keyId,
          keyType: this.keyType,
          usagePlanId: this.usagePlanId
        };
      }
      renderProperties(props) {
        return cfnUsagePlanKeyPropsToCloudFormation(props);
      }
    };
    exports2.CfnUsagePlanKey = CfnUsagePlanKey;
    _t = JSII_RTTI_SYMBOL_1;
    CfnUsagePlanKey[_t] = { fqn: "@aws-cdk/aws-apigateway.CfnUsagePlanKey", version: "1.132.0" };
    CfnUsagePlanKey.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGateway::UsagePlanKey";
    function CfnVpcLinkPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("name", cdk.requiredValidator)(properties.name));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("targetArns", cdk.requiredValidator)(properties.targetArns));
      errors.collect(cdk.propertyValidator("targetArns", cdk.listValidator(cdk.validateString))(properties.targetArns));
      return errors.wrap('supplied properties not correct for "CfnVpcLinkProps"');
    }
    function cfnVpcLinkPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnVpcLinkPropsValidator(properties).assertSuccess();
      return {
        Name: cdk.stringToCloudFormation(properties.name),
        TargetArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.targetArns),
        Description: cdk.stringToCloudFormation(properties.description),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnVpcLinkPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("name", "Name", cfn_parse.FromCloudFormation.getString(properties.Name));
      ret.addPropertyResult("targetArns", "TargetArns", cfn_parse.FromCloudFormation.getStringArray(properties.TargetArns));
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnVpcLink = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnVpcLink.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "name", this);
        cdk.requireProperty(props, "targetArns", this);
        this.name = props.name;
        this.targetArns = props.targetArns;
        this.description = props.description;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::ApiGateway::VpcLink", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnVpcLinkPropsFromCloudFormation(resourceProperties);
        const ret = new CfnVpcLink(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnVpcLink.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          name: this.name,
          targetArns: this.targetArns,
          description: this.description,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnVpcLinkPropsToCloudFormation(props);
      }
    };
    exports2.CfnVpcLink = CfnVpcLink;
    _u = JSII_RTTI_SYMBOL_1;
    CfnVpcLink[_u] = { fqn: "@aws-cdk/aws-apigateway.CfnVpcLink", version: "1.132.0" };
    CfnVpcLink.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGateway::VpcLink";
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/json-schema.js
var require_json_schema = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/json-schema.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.JsonSchemaType = exports2.JsonSchemaVersion = void 0;
    var JsonSchemaVersion;
    (function(JsonSchemaVersion2) {
      JsonSchemaVersion2["DRAFT4"] = "http://json-schema.org/draft-04/schema#";
      JsonSchemaVersion2["DRAFT7"] = "http://json-schema.org/draft-07/schema#";
    })(JsonSchemaVersion = exports2.JsonSchemaVersion || (exports2.JsonSchemaVersion = {}));
    var JsonSchemaType2;
    (function(JsonSchemaType3) {
      JsonSchemaType3["NULL"] = "null";
      JsonSchemaType3["BOOLEAN"] = "boolean";
      JsonSchemaType3["OBJECT"] = "object";
      JsonSchemaType3["ARRAY"] = "array";
      JsonSchemaType3["NUMBER"] = "number";
      JsonSchemaType3["INTEGER"] = "integer";
      JsonSchemaType3["STRING"] = "string";
    })(JsonSchemaType2 = exports2.JsonSchemaType || (exports2.JsonSchemaType = {}));
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/util.js
var require_util3 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.JsonSchemaMapper = exports2.validateInteger = exports2.parseAwsApiCall = exports2.parseMethodOptionsPath = exports2.validateHttpMethod = exports2.ALL_METHODS = void 0;
    var url_1 = require("url");
    var jsonSchema = require_json_schema();
    exports2.ALL_METHODS = ["OPTIONS", "GET", "PUT", "POST", "DELETE", "PATCH", "HEAD"];
    var ALLOWED_METHODS = ["ANY", ...exports2.ALL_METHODS];
    function validateHttpMethod(method, messagePrefix = "") {
      if (!ALLOWED_METHODS.includes(method)) {
        throw new Error(`${messagePrefix}Invalid HTTP method "${method}". Allowed methods: ${ALLOWED_METHODS.join(",")}`);
      }
    }
    exports2.validateHttpMethod = validateHttpMethod;
    function parseMethodOptionsPath(originalPath) {
      if (!originalPath.startsWith("/")) {
        throw new Error(`Method options path must start with '/': ${originalPath}`);
      }
      const path = originalPath.substr(1);
      const components = path.split("/");
      if (components.length < 2) {
        throw new Error(`Method options path must include at least two components: /{resource}/{method} (i.e. /foo/bar/GET): ${path}`);
      }
      const httpMethod = components.pop().toUpperCase();
      if (httpMethod !== "*") {
        validateHttpMethod(httpMethod, `${originalPath}: `);
      }
      let resourcePath = "/~1" + components.join("~1");
      if (components.length === 1 && components[0] === "*") {
        resourcePath = "/*";
      } else if (components.length === 1 && components[0] === "") {
        resourcePath = "/";
      }
      return {
        httpMethod,
        resourcePath
      };
    }
    exports2.parseMethodOptionsPath = parseMethodOptionsPath;
    function parseAwsApiCall(path, action, actionParams) {
      if (actionParams && !action) {
        throw new Error('"actionParams" requires that "action" will be set');
      }
      if (path && action) {
        throw new Error(`"path" and "action" are mutually exclusive (path="${path}", action="${action}")`);
      }
      if (path) {
        return {
          apiType: "path",
          apiValue: path
        };
      }
      if (action) {
        if (actionParams) {
          action += "&" + url_1.format({ query: actionParams }).substr(1);
        }
        return {
          apiType: "action",
          apiValue: action
        };
      }
      throw new Error('Either "path" or "action" are required');
    }
    exports2.parseAwsApiCall = parseAwsApiCall;
    function validateInteger(property, messagePrefix) {
      if (property && !Number.isInteger(property)) {
        throw new Error(`${messagePrefix} should be an integer`);
      }
    }
    exports2.validateInteger = validateInteger;
    var JsonSchemaMapper = class {
      static toCfnJsonSchema(schema) {
        const result = JsonSchemaMapper._toCfnJsonSchema(schema);
        if (!("$schema" in result)) {
          result.$schema = jsonSchema.JsonSchemaVersion.DRAFT4;
        }
        return result;
      }
      static _toCfnJsonSchema(schema, preserveKeys = false) {
        if (schema == null || typeof schema !== "object") {
          return schema;
        }
        if (Array.isArray(schema)) {
          return schema.map((entry) => JsonSchemaMapper._toCfnJsonSchema(entry));
        }
        return Object.assign({}, ...Object.entries(schema).map(([key, value]) => {
          const mapKey = !preserveKeys && key in JsonSchemaMapper.SchemaPropsWithPrefix;
          const newKey = mapKey ? JsonSchemaMapper.SchemaPropsWithPrefix[key] : key;
          const newValue = JsonSchemaMapper._toCfnJsonSchema(value, !preserveKeys && JsonSchemaMapper.SchemaPropsWithUserDefinedChildren[key]);
          return { [newKey]: newValue };
        }));
      }
    };
    exports2.JsonSchemaMapper = JsonSchemaMapper;
    JsonSchemaMapper.SchemaPropsWithPrefix = {
      schema: "$schema",
      ref: "$ref",
      id: "$id"
    };
    JsonSchemaMapper.SchemaPropsWithUserDefinedChildren = {
      definitions: true,
      properties: true,
      patternProperties: true,
      dependencies: true
    };
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/usage-plan.js
var require_usage_plan = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/usage-plan.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UsagePlan = exports2.Period = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var cx_api_1 = require_lib5();
    var apigateway_generated_1 = require_apigateway_generated();
    var util_1 = require_util3();
    var Period;
    (function(Period2) {
      Period2["DAY"] = "DAY";
      Period2["WEEK"] = "WEEK";
      Period2["MONTH"] = "MONTH";
    })(Period = exports2.Period || (exports2.Period = {}));
    var UsagePlanBase = class extends core_1.Resource {
      addApiKey(apiKey, options) {
        let id;
        const prefix = "UsagePlanKeyResource";
        if (core_1.FeatureFlags.of(this).isEnabled(cx_api_1.APIGATEWAY_USAGEPLANKEY_ORDERINSENSITIVE_ID)) {
          id = `${prefix}:${core_1.Names.nodeUniqueId(apiKey.node)}`;
        } else {
          id = this.node.tryFindChild(prefix) ? `${prefix}:${core_1.Names.nodeUniqueId(apiKey.node)}` : prefix;
        }
        const resource = new apigateway_generated_1.CfnUsagePlanKey(this, id, {
          keyId: apiKey.keyId,
          keyType: "API_KEY",
          usagePlanId: this.usagePlanId
        });
        if (options === null || options === void 0 ? void 0 : options.overrideLogicalId) {
          resource.overrideLogicalId(options === null || options === void 0 ? void 0 : options.overrideLogicalId);
        }
      }
    };
    var UsagePlan = class extends UsagePlanBase {
      constructor(scope, id, props = {}) {
        super(scope, id);
        this.apiStages = new Array();
        let resource;
        resource = new apigateway_generated_1.CfnUsagePlan(this, "Resource", {
          apiStages: core_1.Lazy.any({ produce: () => this.renderApiStages(this.apiStages) }),
          description: props.description,
          quota: this.renderQuota(props),
          throttle: this.renderThrottle(props.throttle),
          usagePlanName: props.name
        });
        this.apiStages.push(...props.apiStages || []);
        this.usagePlanId = resource.ref;
        if (props.apiKey) {
          this.addApiKey(props.apiKey);
        }
      }
      static fromUsagePlanId(scope, id, usagePlanId) {
        class Import extends UsagePlanBase {
          constructor() {
            super(scope, id);
            this.usagePlanId = usagePlanId;
          }
        }
        return new Import();
      }
      addApiStage(apiStage) {
        this.apiStages.push(apiStage);
      }
      renderApiStages(apiStages) {
        if (apiStages && apiStages.length > 0) {
          const stages = [];
          apiStages.forEach((apiStage) => {
            stages.push(this.createStage(apiStage));
          });
          return stages;
        }
        return void 0;
      }
      createStage(apiStage) {
        const stage = apiStage.stage ? apiStage.stage.stageName.toString() : void 0;
        const apiId = apiStage.stage ? apiStage.stage.restApi.restApiId : void 0;
        const throttle = this.renderThrottlePerMethod(apiStage.throttle);
        return {
          apiId,
          stage,
          throttle
        };
      }
      renderQuota(props) {
        if (props.quota === void 0) {
          return void 0;
        } else {
          const limit = props.quota ? props.quota.limit : void 0;
          util_1.validateInteger(limit, "Throttle quota limit");
          const ret = {
            limit: limit ? limit : void 0,
            offset: props.quota ? props.quota.offset : void 0,
            period: props.quota ? props.quota.period : void 0
          };
          return ret;
        }
      }
      renderThrottle(props) {
        let ret;
        if (props !== void 0) {
          const burstLimit = props.burstLimit;
          util_1.validateInteger(burstLimit, "Throttle burst limit");
          const rateLimit = props.rateLimit;
          util_1.validateInteger(rateLimit, "Throttle rate limit");
          ret = {
            burstLimit,
            rateLimit
          };
        }
        return ret;
      }
      renderThrottlePerMethod(throttlePerMethod) {
        const ret = {};
        if (throttlePerMethod && throttlePerMethod.length > 0) {
          throttlePerMethod.forEach((value) => {
            const method = value.method;
            const methodId = `${method.resource.path}/${method.httpMethod}`;
            ret[methodId] = this.renderThrottle(value.throttle);
          });
        }
        return ret;
      }
    };
    exports2.UsagePlan = UsagePlan;
    _a = JSII_RTTI_SYMBOL_1;
    UsagePlan[_a] = { fqn: "@aws-cdk/aws-apigateway.UsagePlan", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/api-key.js
var require_api_key = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/api-key.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RateLimitedApiKey = exports2.ApiKey = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var iam = require_lib9();
    var core_1 = require_lib8();
    var apigateway_generated_1 = require_apigateway_generated();
    var usage_plan_1 = require_usage_plan();
    var ApiKeyBase = class extends core_1.Resource {
      grantRead(grantee) {
        return iam.Grant.addToPrincipal({
          grantee,
          actions: readPermissions,
          resourceArns: [this.keyArn]
        });
      }
      grantWrite(grantee) {
        return iam.Grant.addToPrincipal({
          grantee,
          actions: writePermissions,
          resourceArns: [this.keyArn]
        });
      }
      grantReadWrite(grantee) {
        return iam.Grant.addToPrincipal({
          grantee,
          actions: [...readPermissions, ...writePermissions],
          resourceArns: [this.keyArn]
        });
      }
    };
    var ApiKey = class extends ApiKeyBase {
      constructor(scope, id, props = {}) {
        super(scope, id, {
          physicalName: props.apiKeyName
        });
        const resource = new apigateway_generated_1.CfnApiKey(this, "Resource", {
          customerId: props.customerId,
          description: props.description,
          enabled: props.enabled || true,
          generateDistinctId: props.generateDistinctId,
          name: this.physicalName,
          stageKeys: this.renderStageKeys(props.resources),
          value: props.value
        });
        this.keyId = resource.ref;
        this.keyArn = core_1.Stack.of(this).formatArn({
          service: "apigateway",
          account: "",
          resource: "/apikeys",
          sep: "/",
          resourceName: this.keyId
        });
      }
      static fromApiKeyId(scope, id, apiKeyId) {
        class Import extends ApiKeyBase {
          constructor() {
            super(...arguments);
            this.keyId = apiKeyId;
            this.keyArn = core_1.Stack.of(this).formatArn({
              service: "apigateway",
              account: "",
              resource: "/apikeys",
              sep: "/",
              resourceName: apiKeyId
            });
          }
        }
        return new Import(scope, id);
      }
      renderStageKeys(resources) {
        if (!resources) {
          return void 0;
        }
        return resources.map((resource) => {
          const restApi = resource;
          const restApiId = restApi.restApiId;
          const stageName = restApi.deploymentStage.stageName.toString();
          return { restApiId, stageName };
        });
      }
    };
    exports2.ApiKey = ApiKey;
    _a = JSII_RTTI_SYMBOL_1;
    ApiKey[_a] = { fqn: "@aws-cdk/aws-apigateway.ApiKey", version: "1.132.0" };
    var RateLimitedApiKey = class extends ApiKeyBase {
      constructor(scope, id, props = {}) {
        super(scope, id, {
          physicalName: props.apiKeyName
        });
        const resource = new ApiKey(this, "Resource", props);
        if (props.apiStages || props.quota || props.throttle) {
          new usage_plan_1.UsagePlan(this, "UsagePlanResource", {
            apiKey: resource,
            apiStages: props.apiStages,
            quota: props.quota,
            throttle: props.throttle
          });
        }
        this.keyId = resource.keyId;
        this.keyArn = resource.keyArn;
      }
    };
    exports2.RateLimitedApiKey = RateLimitedApiKey;
    _b = JSII_RTTI_SYMBOL_1;
    RateLimitedApiKey[_b] = { fqn: "@aws-cdk/aws-apigateway.RateLimitedApiKey", version: "1.132.0" };
    var readPermissions = [
      "apigateway:GET"
    ];
    var writePermissions = [
      "apigateway:POST",
      "apigateway:PUT",
      "apigateway:PATCH",
      "apigateway:DELETE"
    ];
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/apigateway-canned-metrics.generated.js
var require_apigateway_canned_metrics_generated = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/apigateway-canned-metrics.generated.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ApiGatewayMetrics = void 0;
    var ApiGatewayMetrics = class {
      static _5XxErrorSum(dimensions) {
        return {
          namespace: "AWS/ApiGateway",
          metricName: "5XXError",
          dimensions,
          statistic: "Sum"
        };
      }
      static latencyAverage(dimensions) {
        return {
          namespace: "AWS/ApiGateway",
          metricName: "Latency",
          dimensions,
          statistic: "Average"
        };
      }
      static countSum(dimensions) {
        return {
          namespace: "AWS/ApiGateway",
          metricName: "Count",
          dimensions,
          statistic: "Sum"
        };
      }
      static _4XxErrorSum(dimensions) {
        return {
          namespace: "AWS/ApiGateway",
          metricName: "4XXError",
          dimensions,
          statistic: "Sum"
        };
      }
      static integrationLatencyAverage(dimensions) {
        return {
          namespace: "AWS/ApiGateway",
          metricName: "IntegrationLatency",
          dimensions,
          statistic: "Average"
        };
      }
      static cacheHitCountSum(dimensions) {
        return {
          namespace: "AWS/ApiGateway",
          metricName: "CacheHitCount",
          dimensions,
          statistic: "Sum"
        };
      }
      static cacheMissCountSum(dimensions) {
        return {
          namespace: "AWS/ApiGateway",
          metricName: "CacheMissCount",
          dimensions,
          statistic: "Sum"
        };
      }
    };
    exports2.ApiGatewayMetrics = ApiGatewayMetrics;
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/deployment.js
var require_deployment = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/deployment.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Deployment = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var crypto = require("crypto");
    var core_1 = require_lib8();
    var apigateway_generated_1 = require_apigateway_generated();
    var restapi_1 = require_restapi();
    var Deployment = class extends core_1.Resource {
      constructor(scope, id, props) {
        super(scope, id);
        this.resource = new LatestDeploymentResource(this, "Resource", {
          description: props.description,
          restApi: props.api
        });
        if (props.retainDeployments) {
          this.resource.applyRemovalPolicy(core_1.RemovalPolicy.RETAIN);
        }
        this.api = props.api;
        this.deploymentId = core_1.Lazy.string({ produce: () => this.resource.ref });
        if (props.api instanceof restapi_1.RestApiBase) {
          props.api._attachDeployment(this);
        }
      }
      addToLogicalId(data) {
        this.resource.addToLogicalId(data);
      }
      _addMethodDependency(method) {
        this.node.addDependency(method.node.defaultChild);
      }
    };
    exports2.Deployment = Deployment;
    _a = JSII_RTTI_SYMBOL_1;
    Deployment[_a] = { fqn: "@aws-cdk/aws-apigateway.Deployment", version: "1.132.0" };
    var LatestDeploymentResource = class extends apigateway_generated_1.CfnDeployment {
      constructor(scope, id, props) {
        super(scope, id, {
          description: props.description,
          restApiId: props.restApi.restApiId
        });
        this.hashComponents = new Array();
        this.api = props.restApi;
        this.originalLogicalId = this.stack.getLogicalId(this);
        this.overrideLogicalId(core_1.Lazy.uncachedString({ produce: () => this.calculateLogicalId() }));
      }
      addToLogicalId(data) {
        if (this.node.locked) {
          throw new Error("Cannot modify the logical ID when the construct is locked");
        }
        this.hashComponents.push(data);
      }
      calculateLogicalId() {
        const hash = [...this.hashComponents];
        if (this.api instanceof restapi_1.RestApi || this.api instanceof restapi_1.SpecRestApi) {
          const cfnRestApiCF = this.api.node.defaultChild._toCloudFormation();
          hash.push(this.stack.resolve(cfnRestApiCF));
        }
        let lid = this.originalLogicalId;
        if (hash.length > 0) {
          const md5 = crypto.createHash("md5");
          hash.map((x) => this.stack.resolve(x)).forEach((c) => md5.update(JSON.stringify(c)));
          lid += md5.digest("hex");
        }
        return lid;
      }
    };
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/base-path-mapping.js
var require_base_path_mapping = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/base-path-mapping.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BasePathMapping = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var apigateway_generated_1 = require_apigateway_generated();
    var restapi_1 = require_restapi();
    var BasePathMapping = class extends core_1.Resource {
      constructor(scope, id, props) {
        var _b;
        super(scope, id);
        if (props.basePath && !core_1.Token.isUnresolved(props.basePath)) {
          if (!props.basePath.match(/^[a-zA-Z0-9$_.+!*'()-]+$/)) {
            throw new Error(`A base path may only contain letters, numbers, and one of "$-_.+!*'()", received: ${props.basePath}`);
          }
        }
        const stage = (_b = props.stage) !== null && _b !== void 0 ? _b : props.restApi instanceof restapi_1.RestApiBase ? props.restApi.deploymentStage : void 0;
        new apigateway_generated_1.CfnBasePathMapping(this, "Resource", {
          basePath: props.basePath,
          domainName: props.domainName.domainName,
          restApiId: props.restApi.restApiId,
          stage: stage && stage.stageName
        });
      }
    };
    exports2.BasePathMapping = BasePathMapping;
    _a = JSII_RTTI_SYMBOL_1;
    BasePathMapping[_a] = { fqn: "@aws-cdk/aws-apigateway.BasePathMapping", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/domain-name.js
var require_domain_name = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/domain-name.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DomainName = exports2.SecurityPolicy = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var apigateway_generated_1 = require_apigateway_generated();
    var base_path_mapping_1 = require_base_path_mapping();
    var restapi_1 = require_restapi();
    var SecurityPolicy;
    (function(SecurityPolicy2) {
      SecurityPolicy2["TLS_1_0"] = "TLS_1_0";
      SecurityPolicy2["TLS_1_2"] = "TLS_1_2";
    })(SecurityPolicy = exports2.SecurityPolicy || (exports2.SecurityPolicy = {}));
    var DomainName = class extends core_1.Resource {
      constructor(scope, id, props) {
        super(scope, id);
        const endpointType = props.endpointType || restapi_1.EndpointType.REGIONAL;
        const edge = endpointType === restapi_1.EndpointType.EDGE;
        if (!core_1.Token.isUnresolved(props.domainName) && /[A-Z]/.test(props.domainName)) {
          throw new Error(`Domain name does not support uppercase letters. Got: ${props.domainName}`);
        }
        const mtlsConfig = this.configureMTLS(props.mtls);
        const resource = new apigateway_generated_1.CfnDomainName(this, "Resource", {
          domainName: props.domainName,
          certificateArn: edge ? props.certificate.certificateArn : void 0,
          regionalCertificateArn: edge ? void 0 : props.certificate.certificateArn,
          endpointConfiguration: { types: [endpointType] },
          mutualTlsAuthentication: mtlsConfig,
          securityPolicy: props.securityPolicy
        });
        this.domainName = resource.ref;
        this.domainNameAliasDomainName = edge ? resource.attrDistributionDomainName : resource.attrRegionalDomainName;
        this.domainNameAliasHostedZoneId = edge ? resource.attrDistributionHostedZoneId : resource.attrRegionalHostedZoneId;
        if (props.mapping) {
          this.addBasePathMapping(props.mapping);
        }
      }
      static fromDomainNameAttributes(scope, id, attrs) {
        class Import extends core_1.Resource {
          constructor() {
            super(...arguments);
            this.domainName = attrs.domainName;
            this.domainNameAliasDomainName = attrs.domainNameAliasTarget;
            this.domainNameAliasHostedZoneId = attrs.domainNameAliasHostedZoneId;
          }
        }
        return new Import(scope, id);
      }
      addBasePathMapping(targetApi, options = {}) {
        const basePath = options.basePath || "/";
        const id = `Map:${basePath}=>${core_1.Names.nodeUniqueId(targetApi.node)}`;
        return new base_path_mapping_1.BasePathMapping(this, id, __spreadValues({
          domainName: this,
          restApi: targetApi
        }, options));
      }
      configureMTLS(mtlsConfig) {
        if (!mtlsConfig)
          return void 0;
        return {
          truststoreUri: mtlsConfig.bucket.s3UrlForObject(mtlsConfig.key),
          truststoreVersion: mtlsConfig.version
        };
      }
    };
    exports2.DomainName = DomainName;
    _a = JSII_RTTI_SYMBOL_1;
    DomainName[_a] = { fqn: "@aws-cdk/aws-apigateway.DomainName", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/gateway-response.js
var require_gateway_response = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/gateway-response.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ResponseType = exports2.GatewayResponse = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var apigateway_generated_1 = require_apigateway_generated();
    var GatewayResponse = class extends core_1.Resource {
      constructor(scope, id, props) {
        super(scope, id);
        const gatewayResponseProps = {
          restApiId: props.restApi.restApiId,
          responseType: props.type.responseType,
          responseParameters: this.buildResponseParameters(props.responseHeaders),
          responseTemplates: props.templates,
          statusCode: props.statusCode
        };
        const resource = new apigateway_generated_1.CfnGatewayResponse(this, "Resource", gatewayResponseProps);
        const deployment = props.restApi.latestDeployment;
        if (deployment) {
          deployment.node.addDependency(resource);
          deployment.addToLogicalId({
            gatewayResponse: __spreadValues({}, gatewayResponseProps)
          });
        }
        this.node.defaultChild = resource;
      }
      buildResponseParameters(responseHeaders) {
        if (!responseHeaders) {
          return void 0;
        }
        const responseParameters = {};
        for (const [header, value] of Object.entries(responseHeaders)) {
          responseParameters[`gatewayresponse.header.${header}`] = value;
        }
        return responseParameters;
      }
    };
    exports2.GatewayResponse = GatewayResponse;
    _a = JSII_RTTI_SYMBOL_1;
    GatewayResponse[_a] = { fqn: "@aws-cdk/aws-apigateway.GatewayResponse", version: "1.132.0" };
    var ResponseType = class {
      constructor(type) {
        this.responseType = type;
      }
      static of(type) {
        return new ResponseType(type.toUpperCase());
      }
    };
    exports2.ResponseType = ResponseType;
    _b = JSII_RTTI_SYMBOL_1;
    ResponseType[_b] = { fqn: "@aws-cdk/aws-apigateway.ResponseType", version: "1.132.0" };
    ResponseType.ACCESS_DENIED = new ResponseType("ACCESS_DENIED");
    ResponseType.API_CONFIGURATION_ERROR = new ResponseType("API_CONFIGURATION_ERROR");
    ResponseType.AUTHORIZER_FAILURE = new ResponseType("AUTHORIZER_FAILURE");
    ResponseType.AUTHORIZER_CONFIGURATION_ERROR = new ResponseType("AUTHORIZER_CONFIGURATION_ERROR");
    ResponseType.BAD_REQUEST_PARAMETERS = new ResponseType("BAD_REQUEST_PARAMETERS");
    ResponseType.BAD_REQUEST_BODY = new ResponseType("BAD_REQUEST_BODY");
    ResponseType.DEFAULT_4XX = new ResponseType("DEFAULT_4XX");
    ResponseType.DEFAULT_5XX = new ResponseType("DEFAULT_5XX");
    ResponseType.EXPIRED_TOKEN = new ResponseType("EXPIRED_TOKEN");
    ResponseType.INVALID_SIGNATURE = new ResponseType("INVALID_SIGNATURE");
    ResponseType.INTEGRATION_FAILURE = new ResponseType("INTEGRATION_FAILURE");
    ResponseType.INTEGRATION_TIMEOUT = new ResponseType("INTEGRATION_TIMEOUT");
    ResponseType.INVALID_API_KEY = new ResponseType("INVALID_API_KEY");
    ResponseType.MISSING_AUTHENTICATION_TOKEN = new ResponseType("MISSING_AUTHENTICATION_TOKEN");
    ResponseType.QUOTA_EXCEEDED = new ResponseType("QUOTA_EXCEEDED");
    ResponseType.REQUEST_TOO_LARGE = new ResponseType("REQUEST_TOO_LARGE");
    ResponseType.RESOURCE_NOT_FOUND = new ResponseType("RESOURCE_NOT_FOUND");
    ResponseType.THROTTLED = new ResponseType("THROTTLED");
    ResponseType.UNAUTHORIZED = new ResponseType("UNAUTHORIZED");
    ResponseType.UNSUPPORTED_MEDIA_TYPE = new ResponseType("UNSUPPORTED_MEDIA_TYPE");
    ResponseType.WAF_FILTERED = new ResponseType("WAF_FILTERED");
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/model.js
var require_model = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/model.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Model = exports2.ErrorModel = exports2.EmptyModel = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var apigateway_generated_1 = require_apigateway_generated();
    var restapi_1 = require_restapi();
    var util = require_util3();
    var EmptyModel = class {
      constructor() {
        this.modelId = "Empty";
      }
    };
    exports2.EmptyModel = EmptyModel;
    _a = JSII_RTTI_SYMBOL_1;
    EmptyModel[_a] = { fqn: "@aws-cdk/aws-apigateway.EmptyModel", version: "1.132.0" };
    var ErrorModel = class {
      constructor() {
        this.modelId = "Error";
      }
    };
    exports2.ErrorModel = ErrorModel;
    _b = JSII_RTTI_SYMBOL_1;
    ErrorModel[_b] = { fqn: "@aws-cdk/aws-apigateway.ErrorModel", version: "1.132.0" };
    var Model = class extends core_1.Resource {
      constructor(scope, id, props) {
        var _d;
        super(scope, id, {
          physicalName: props.modelName
        });
        const modelProps = {
          name: this.physicalName,
          restApiId: props.restApi.restApiId,
          contentType: (_d = props.contentType) !== null && _d !== void 0 ? _d : "application/json",
          description: props.description,
          schema: util.JsonSchemaMapper.toCfnJsonSchema(props.schema)
        };
        const resource = new apigateway_generated_1.CfnModel(this, "Resource", modelProps);
        this.modelId = this.getResourceNameAttribute(resource.ref);
        const deployment = props.restApi instanceof restapi_1.RestApi ? props.restApi.latestDeployment : void 0;
        if (deployment) {
          deployment.node.addDependency(resource);
          deployment.addToLogicalId({ model: modelProps });
        }
      }
      static fromModelName(scope, id, modelName) {
        class Import extends core_1.Resource {
          constructor() {
            super(...arguments);
            this.modelId = modelName;
          }
        }
        return new Import(scope, id);
      }
    };
    exports2.Model = Model;
    _c = JSII_RTTI_SYMBOL_1;
    Model[_c] = { fqn: "@aws-cdk/aws-apigateway.Model", version: "1.132.0" };
    Model.ERROR_MODEL = new ErrorModel();
    Model.EMPTY_MODEL = new EmptyModel();
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/requestvalidator.js
var require_requestvalidator = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/requestvalidator.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RequestValidator = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var apigateway_generated_1 = require_apigateway_generated();
    var restapi_1 = require_restapi();
    var RequestValidator = class extends core_1.Resource {
      constructor(scope, id, props) {
        super(scope, id, {
          physicalName: props.requestValidatorName
        });
        const validatorProps = {
          name: this.physicalName,
          restApiId: props.restApi.restApiId,
          validateRequestBody: props.validateRequestBody,
          validateRequestParameters: props.validateRequestParameters
        };
        const resource = new apigateway_generated_1.CfnRequestValidator(this, "Resource", validatorProps);
        this.requestValidatorId = resource.ref;
        const deployment = props.restApi instanceof restapi_1.RestApi ? props.restApi.latestDeployment : void 0;
        if (deployment) {
          deployment.node.addDependency(resource);
          deployment.addToLogicalId({ validator: validatorProps });
        }
      }
      static fromRequestValidatorId(scope, id, requestValidatorId) {
        class Import extends core_1.Resource {
          constructor() {
            super(...arguments);
            this.requestValidatorId = requestValidatorId;
          }
        }
        return new Import(scope, id);
      }
    };
    exports2.RequestValidator = RequestValidator;
    _a = JSII_RTTI_SYMBOL_1;
    RequestValidator[_a] = { fqn: "@aws-cdk/aws-apigateway.RequestValidator", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/cors.js
var require_cors = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/cors.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Cors = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var util_1 = require_util3();
    var Cors = class {
      constructor() {
      }
    };
    exports2.Cors = Cors;
    _a = JSII_RTTI_SYMBOL_1;
    Cors[_a] = { fqn: "@aws-cdk/aws-apigateway.Cors", version: "1.132.0" };
    Cors.ALL_METHODS = util_1.ALL_METHODS;
    Cors.ALL_ORIGINS = ["*"];
    Cors.DEFAULT_HEADERS = ["Content-Type", "X-Amz-Date", "Authorization", "X-Api-Key", "X-Amz-Security-Token", "X-Amz-User-Agent"];
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/vpc-link.js
var require_vpc_link = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/vpc-link.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.VpcLink = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var apigateway_generated_1 = require_apigateway_generated();
    var VpcLink = class extends core_1.Resource {
      constructor(scope, id, props = {}) {
        super(scope, id, {
          physicalName: props.vpcLinkName || core_1.Lazy.string({ produce: () => core_1.Names.nodeUniqueId(this.node) })
        });
        this._targets = new Array();
        const cfnResource = new apigateway_generated_1.CfnVpcLink(this, "Resource", {
          name: this.physicalName,
          description: props.description,
          targetArns: core_1.Lazy.list({ produce: () => this.renderTargets() })
        });
        this.vpcLinkId = cfnResource.ref;
        if (props.targets) {
          this.addTargets(...props.targets);
        }
      }
      static fromVpcLinkId(scope, id, vpcLinkId) {
        class Import extends core_1.Resource {
          constructor() {
            super(...arguments);
            this.vpcLinkId = vpcLinkId;
          }
        }
        return new Import(scope, id);
      }
      addTargets(...targets) {
        this._targets.push(...targets);
      }
      get _targetDnsNames() {
        return this._targets.map((t) => t.loadBalancerDnsName);
      }
      validate() {
        if (this._targets.length === 0) {
          return ["No targets added to vpc link"];
        }
        return [];
      }
      renderTargets() {
        return this._targets.map((nlb) => nlb.loadBalancerArn);
      }
    };
    exports2.VpcLink = VpcLink;
    _a = JSII_RTTI_SYMBOL_1;
    VpcLink[_a] = { fqn: "@aws-cdk/aws-apigateway.VpcLink", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/integration.js
var require_integration = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/integration.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ConnectionType = exports2.PassthroughBehavior = exports2.IntegrationType = exports2.ContentHandling = exports2.Integration = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var vpc_link_1 = require_vpc_link();
    var Integration = class {
      constructor(props) {
        this.props = props;
        const options = this.props.options || {};
        if (options.credentialsPassthrough !== void 0 && options.credentialsRole !== void 0) {
          throw new Error("'credentialsPassthrough' and 'credentialsRole' are mutually exclusive");
        }
        if (options.connectionType === ConnectionType.VPC_LINK && options.vpcLink === void 0) {
          throw new Error("'connectionType' of VPC_LINK requires 'vpcLink' prop to be set");
        }
        if (options.connectionType === ConnectionType.INTERNET && options.vpcLink !== void 0) {
          throw new Error("cannot set 'vpcLink' where 'connectionType' is INTERNET");
        }
        if (options.timeout && !options.timeout.isUnresolved() && (options.timeout.toMilliseconds() < 50 || options.timeout.toMilliseconds() > 29e3)) {
          throw new Error("Integration timeout must be between 50 milliseconds and 29 seconds.");
        }
      }
      bind(_method) {
        let uri = this.props.uri;
        const options = this.props.options;
        if ((options === null || options === void 0 ? void 0 : options.connectionType) === ConnectionType.VPC_LINK && uri === void 0) {
          uri = core_1.Lazy.string({
            produce: () => {
              const vpcLink = options.vpcLink;
              if (vpcLink instanceof vpc_link_1.VpcLink) {
                const targets = vpcLink._targetDnsNames;
                if (targets.length > 1) {
                  throw new Error("'uri' is required when there are more than one NLBs in the VPC Link");
                } else {
                  return `http://${targets[0]}`;
                }
              } else {
                throw new Error("'uri' is required when the 'connectionType' is VPC_LINK");
              }
            }
          });
        }
        return {
          options: __spreadProps(__spreadValues({}, options), {
            connectionType: (options === null || options === void 0 ? void 0 : options.vpcLink) ? ConnectionType.VPC_LINK : options === null || options === void 0 ? void 0 : options.connectionType
          }),
          type: this.props.type,
          uri,
          integrationHttpMethod: this.props.integrationHttpMethod
        };
      }
    };
    exports2.Integration = Integration;
    _a = JSII_RTTI_SYMBOL_1;
    Integration[_a] = { fqn: "@aws-cdk/aws-apigateway.Integration", version: "1.132.0" };
    var ContentHandling;
    (function(ContentHandling2) {
      ContentHandling2["CONVERT_TO_BINARY"] = "CONVERT_TO_BINARY";
      ContentHandling2["CONVERT_TO_TEXT"] = "CONVERT_TO_TEXT";
    })(ContentHandling = exports2.ContentHandling || (exports2.ContentHandling = {}));
    var IntegrationType;
    (function(IntegrationType2) {
      IntegrationType2["AWS"] = "AWS";
      IntegrationType2["AWS_PROXY"] = "AWS_PROXY";
      IntegrationType2["HTTP"] = "HTTP";
      IntegrationType2["HTTP_PROXY"] = "HTTP_PROXY";
      IntegrationType2["MOCK"] = "MOCK";
    })(IntegrationType = exports2.IntegrationType || (exports2.IntegrationType = {}));
    var PassthroughBehavior;
    (function(PassthroughBehavior2) {
      PassthroughBehavior2["WHEN_NO_MATCH"] = "WHEN_NO_MATCH";
      PassthroughBehavior2["NEVER"] = "NEVER";
      PassthroughBehavior2["WHEN_NO_TEMPLATES"] = "WHEN_NO_TEMPLATES";
    })(PassthroughBehavior = exports2.PassthroughBehavior || (exports2.PassthroughBehavior = {}));
    var ConnectionType;
    (function(ConnectionType2) {
      ConnectionType2["INTERNET"] = "INTERNET";
      ConnectionType2["VPC_LINK"] = "VPC_LINK";
    })(ConnectionType = exports2.ConnectionType || (exports2.ConnectionType = {}));
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/integrations/aws.js
var require_aws2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/integrations/aws.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AwsIntegration = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var integration_1 = require_integration();
    var util_1 = require_util3();
    var AwsIntegration = class extends integration_1.Integration {
      constructor(props) {
        const backend = props.subdomain ? `${props.subdomain}.${props.service}` : props.service;
        const type = props.proxy ? integration_1.IntegrationType.AWS_PROXY : integration_1.IntegrationType.AWS;
        const { apiType, apiValue } = util_1.parseAwsApiCall(props.path, props.action, props.actionParameters);
        super({
          type,
          integrationHttpMethod: props.integrationHttpMethod || "POST",
          uri: cdk.Lazy.string({
            produce: () => {
              if (!this.scope) {
                throw new Error("AwsIntegration must be used in API");
              }
              return cdk.Stack.of(this.scope).formatArn({
                service: "apigateway",
                account: backend,
                resource: apiType,
                sep: "/",
                resourceName: apiValue,
                region: props.region
              });
            }
          }),
          options: props.options
        });
      }
      bind(method) {
        const bindResult = super.bind(method);
        this.scope = method;
        return bindResult;
      }
    };
    exports2.AwsIntegration = AwsIntegration;
    _a = JSII_RTTI_SYMBOL_1;
    AwsIntegration[_a] = { fqn: "@aws-cdk/aws-apigateway.AwsIntegration", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-applicationautoscaling/lib/applicationautoscaling.generated.js
var require_applicationautoscaling_generated = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-applicationautoscaling/lib/applicationautoscaling.generated.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnScalingPolicy = exports2.CfnScalableTarget = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var cfn_parse = require_cfn_parse();
    function CfnScalableTargetPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("maxCapacity", cdk.requiredValidator)(properties.maxCapacity));
      errors.collect(cdk.propertyValidator("maxCapacity", cdk.validateNumber)(properties.maxCapacity));
      errors.collect(cdk.propertyValidator("minCapacity", cdk.requiredValidator)(properties.minCapacity));
      errors.collect(cdk.propertyValidator("minCapacity", cdk.validateNumber)(properties.minCapacity));
      errors.collect(cdk.propertyValidator("resourceId", cdk.requiredValidator)(properties.resourceId));
      errors.collect(cdk.propertyValidator("resourceId", cdk.validateString)(properties.resourceId));
      errors.collect(cdk.propertyValidator("roleArn", cdk.requiredValidator)(properties.roleArn));
      errors.collect(cdk.propertyValidator("roleArn", cdk.validateString)(properties.roleArn));
      errors.collect(cdk.propertyValidator("scalableDimension", cdk.requiredValidator)(properties.scalableDimension));
      errors.collect(cdk.propertyValidator("scalableDimension", cdk.validateString)(properties.scalableDimension));
      errors.collect(cdk.propertyValidator("scheduledActions", cdk.listValidator(CfnScalableTarget_ScheduledActionPropertyValidator))(properties.scheduledActions));
      errors.collect(cdk.propertyValidator("serviceNamespace", cdk.requiredValidator)(properties.serviceNamespace));
      errors.collect(cdk.propertyValidator("serviceNamespace", cdk.validateString)(properties.serviceNamespace));
      errors.collect(cdk.propertyValidator("suspendedState", CfnScalableTarget_SuspendedStatePropertyValidator)(properties.suspendedState));
      return errors.wrap('supplied properties not correct for "CfnScalableTargetProps"');
    }
    function cfnScalableTargetPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnScalableTargetPropsValidator(properties).assertSuccess();
      return {
        MaxCapacity: cdk.numberToCloudFormation(properties.maxCapacity),
        MinCapacity: cdk.numberToCloudFormation(properties.minCapacity),
        ResourceId: cdk.stringToCloudFormation(properties.resourceId),
        RoleARN: cdk.stringToCloudFormation(properties.roleArn),
        ScalableDimension: cdk.stringToCloudFormation(properties.scalableDimension),
        ServiceNamespace: cdk.stringToCloudFormation(properties.serviceNamespace),
        ScheduledActions: cdk.listMapper(cfnScalableTargetScheduledActionPropertyToCloudFormation)(properties.scheduledActions),
        SuspendedState: cfnScalableTargetSuspendedStatePropertyToCloudFormation(properties.suspendedState)
      };
    }
    function CfnScalableTargetPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("maxCapacity", "MaxCapacity", cfn_parse.FromCloudFormation.getNumber(properties.MaxCapacity));
      ret.addPropertyResult("minCapacity", "MinCapacity", cfn_parse.FromCloudFormation.getNumber(properties.MinCapacity));
      ret.addPropertyResult("resourceId", "ResourceId", cfn_parse.FromCloudFormation.getString(properties.ResourceId));
      ret.addPropertyResult("roleArn", "RoleARN", cfn_parse.FromCloudFormation.getString(properties.RoleARN));
      ret.addPropertyResult("scalableDimension", "ScalableDimension", cfn_parse.FromCloudFormation.getString(properties.ScalableDimension));
      ret.addPropertyResult("serviceNamespace", "ServiceNamespace", cfn_parse.FromCloudFormation.getString(properties.ServiceNamespace));
      ret.addPropertyResult("scheduledActions", "ScheduledActions", properties.ScheduledActions != null ? cfn_parse.FromCloudFormation.getArray(CfnScalableTargetScheduledActionPropertyFromCloudFormation)(properties.ScheduledActions) : void 0);
      ret.addPropertyResult("suspendedState", "SuspendedState", properties.SuspendedState != null ? CfnScalableTargetSuspendedStatePropertyFromCloudFormation(properties.SuspendedState) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnScalableTarget = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnScalableTarget.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "maxCapacity", this);
        cdk.requireProperty(props, "minCapacity", this);
        cdk.requireProperty(props, "resourceId", this);
        cdk.requireProperty(props, "roleArn", this);
        cdk.requireProperty(props, "scalableDimension", this);
        cdk.requireProperty(props, "serviceNamespace", this);
        this.maxCapacity = props.maxCapacity;
        this.minCapacity = props.minCapacity;
        this.resourceId = props.resourceId;
        this.roleArn = props.roleArn;
        this.scalableDimension = props.scalableDimension;
        this.serviceNamespace = props.serviceNamespace;
        this.scheduledActions = props.scheduledActions;
        this.suspendedState = props.suspendedState;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnScalableTargetPropsFromCloudFormation(resourceProperties);
        const ret = new CfnScalableTarget(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnScalableTarget.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          maxCapacity: this.maxCapacity,
          minCapacity: this.minCapacity,
          resourceId: this.resourceId,
          roleArn: this.roleArn,
          scalableDimension: this.scalableDimension,
          serviceNamespace: this.serviceNamespace,
          scheduledActions: this.scheduledActions,
          suspendedState: this.suspendedState
        };
      }
      renderProperties(props) {
        return cfnScalableTargetPropsToCloudFormation(props);
      }
    };
    exports2.CfnScalableTarget = CfnScalableTarget;
    _a = JSII_RTTI_SYMBOL_1;
    CfnScalableTarget[_a] = { fqn: "@aws-cdk/aws-applicationautoscaling.CfnScalableTarget", version: "1.132.0" };
    CfnScalableTarget.CFN_RESOURCE_TYPE_NAME = "AWS::ApplicationAutoScaling::ScalableTarget";
    function CfnScalableTarget_ScalableTargetActionPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("maxCapacity", cdk.validateNumber)(properties.maxCapacity));
      errors.collect(cdk.propertyValidator("minCapacity", cdk.validateNumber)(properties.minCapacity));
      return errors.wrap('supplied properties not correct for "ScalableTargetActionProperty"');
    }
    function cfnScalableTargetScalableTargetActionPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnScalableTarget_ScalableTargetActionPropertyValidator(properties).assertSuccess();
      return {
        MaxCapacity: cdk.numberToCloudFormation(properties.maxCapacity),
        MinCapacity: cdk.numberToCloudFormation(properties.minCapacity)
      };
    }
    function CfnScalableTargetScalableTargetActionPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("maxCapacity", "MaxCapacity", properties.MaxCapacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxCapacity) : void 0);
      ret.addPropertyResult("minCapacity", "MinCapacity", properties.MinCapacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinCapacity) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnScalableTarget_ScheduledActionPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("endTime", cdk.validateDate)(properties.endTime));
      errors.collect(cdk.propertyValidator("scalableTargetAction", CfnScalableTarget_ScalableTargetActionPropertyValidator)(properties.scalableTargetAction));
      errors.collect(cdk.propertyValidator("schedule", cdk.requiredValidator)(properties.schedule));
      errors.collect(cdk.propertyValidator("schedule", cdk.validateString)(properties.schedule));
      errors.collect(cdk.propertyValidator("scheduledActionName", cdk.requiredValidator)(properties.scheduledActionName));
      errors.collect(cdk.propertyValidator("scheduledActionName", cdk.validateString)(properties.scheduledActionName));
      errors.collect(cdk.propertyValidator("startTime", cdk.validateDate)(properties.startTime));
      errors.collect(cdk.propertyValidator("timezone", cdk.validateString)(properties.timezone));
      return errors.wrap('supplied properties not correct for "ScheduledActionProperty"');
    }
    function cfnScalableTargetScheduledActionPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnScalableTarget_ScheduledActionPropertyValidator(properties).assertSuccess();
      return {
        EndTime: cdk.dateToCloudFormation(properties.endTime),
        ScalableTargetAction: cfnScalableTargetScalableTargetActionPropertyToCloudFormation(properties.scalableTargetAction),
        Schedule: cdk.stringToCloudFormation(properties.schedule),
        ScheduledActionName: cdk.stringToCloudFormation(properties.scheduledActionName),
        StartTime: cdk.dateToCloudFormation(properties.startTime),
        Timezone: cdk.stringToCloudFormation(properties.timezone)
      };
    }
    function CfnScalableTargetScheduledActionPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("endTime", "EndTime", properties.EndTime != null ? cfn_parse.FromCloudFormation.getDate(properties.EndTime) : void 0);
      ret.addPropertyResult("scalableTargetAction", "ScalableTargetAction", properties.ScalableTargetAction != null ? CfnScalableTargetScalableTargetActionPropertyFromCloudFormation(properties.ScalableTargetAction) : void 0);
      ret.addPropertyResult("schedule", "Schedule", cfn_parse.FromCloudFormation.getString(properties.Schedule));
      ret.addPropertyResult("scheduledActionName", "ScheduledActionName", cfn_parse.FromCloudFormation.getString(properties.ScheduledActionName));
      ret.addPropertyResult("startTime", "StartTime", properties.StartTime != null ? cfn_parse.FromCloudFormation.getDate(properties.StartTime) : void 0);
      ret.addPropertyResult("timezone", "Timezone", properties.Timezone != null ? cfn_parse.FromCloudFormation.getString(properties.Timezone) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnScalableTarget_SuspendedStatePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("dynamicScalingInSuspended", cdk.validateBoolean)(properties.dynamicScalingInSuspended));
      errors.collect(cdk.propertyValidator("dynamicScalingOutSuspended", cdk.validateBoolean)(properties.dynamicScalingOutSuspended));
      errors.collect(cdk.propertyValidator("scheduledScalingSuspended", cdk.validateBoolean)(properties.scheduledScalingSuspended));
      return errors.wrap('supplied properties not correct for "SuspendedStateProperty"');
    }
    function cfnScalableTargetSuspendedStatePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnScalableTarget_SuspendedStatePropertyValidator(properties).assertSuccess();
      return {
        DynamicScalingInSuspended: cdk.booleanToCloudFormation(properties.dynamicScalingInSuspended),
        DynamicScalingOutSuspended: cdk.booleanToCloudFormation(properties.dynamicScalingOutSuspended),
        ScheduledScalingSuspended: cdk.booleanToCloudFormation(properties.scheduledScalingSuspended)
      };
    }
    function CfnScalableTargetSuspendedStatePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("dynamicScalingInSuspended", "DynamicScalingInSuspended", properties.DynamicScalingInSuspended != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DynamicScalingInSuspended) : void 0);
      ret.addPropertyResult("dynamicScalingOutSuspended", "DynamicScalingOutSuspended", properties.DynamicScalingOutSuspended != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DynamicScalingOutSuspended) : void 0);
      ret.addPropertyResult("scheduledScalingSuspended", "ScheduledScalingSuspended", properties.ScheduledScalingSuspended != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ScheduledScalingSuspended) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnScalingPolicyPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("policyName", cdk.requiredValidator)(properties.policyName));
      errors.collect(cdk.propertyValidator("policyName", cdk.validateString)(properties.policyName));
      errors.collect(cdk.propertyValidator("policyType", cdk.requiredValidator)(properties.policyType));
      errors.collect(cdk.propertyValidator("policyType", cdk.validateString)(properties.policyType));
      errors.collect(cdk.propertyValidator("resourceId", cdk.validateString)(properties.resourceId));
      errors.collect(cdk.propertyValidator("scalableDimension", cdk.validateString)(properties.scalableDimension));
      errors.collect(cdk.propertyValidator("scalingTargetId", cdk.validateString)(properties.scalingTargetId));
      errors.collect(cdk.propertyValidator("serviceNamespace", cdk.validateString)(properties.serviceNamespace));
      errors.collect(cdk.propertyValidator("stepScalingPolicyConfiguration", CfnScalingPolicy_StepScalingPolicyConfigurationPropertyValidator)(properties.stepScalingPolicyConfiguration));
      errors.collect(cdk.propertyValidator("targetTrackingScalingPolicyConfiguration", CfnScalingPolicy_TargetTrackingScalingPolicyConfigurationPropertyValidator)(properties.targetTrackingScalingPolicyConfiguration));
      return errors.wrap('supplied properties not correct for "CfnScalingPolicyProps"');
    }
    function cfnScalingPolicyPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnScalingPolicyPropsValidator(properties).assertSuccess();
      return {
        PolicyName: cdk.stringToCloudFormation(properties.policyName),
        PolicyType: cdk.stringToCloudFormation(properties.policyType),
        ResourceId: cdk.stringToCloudFormation(properties.resourceId),
        ScalableDimension: cdk.stringToCloudFormation(properties.scalableDimension),
        ScalingTargetId: cdk.stringToCloudFormation(properties.scalingTargetId),
        ServiceNamespace: cdk.stringToCloudFormation(properties.serviceNamespace),
        StepScalingPolicyConfiguration: cfnScalingPolicyStepScalingPolicyConfigurationPropertyToCloudFormation(properties.stepScalingPolicyConfiguration),
        TargetTrackingScalingPolicyConfiguration: cfnScalingPolicyTargetTrackingScalingPolicyConfigurationPropertyToCloudFormation(properties.targetTrackingScalingPolicyConfiguration)
      };
    }
    function CfnScalingPolicyPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("policyName", "PolicyName", cfn_parse.FromCloudFormation.getString(properties.PolicyName));
      ret.addPropertyResult("policyType", "PolicyType", cfn_parse.FromCloudFormation.getString(properties.PolicyType));
      ret.addPropertyResult("resourceId", "ResourceId", properties.ResourceId != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceId) : void 0);
      ret.addPropertyResult("scalableDimension", "ScalableDimension", properties.ScalableDimension != null ? cfn_parse.FromCloudFormation.getString(properties.ScalableDimension) : void 0);
      ret.addPropertyResult("scalingTargetId", "ScalingTargetId", properties.ScalingTargetId != null ? cfn_parse.FromCloudFormation.getString(properties.ScalingTargetId) : void 0);
      ret.addPropertyResult("serviceNamespace", "ServiceNamespace", properties.ServiceNamespace != null ? cfn_parse.FromCloudFormation.getString(properties.ServiceNamespace) : void 0);
      ret.addPropertyResult("stepScalingPolicyConfiguration", "StepScalingPolicyConfiguration", properties.StepScalingPolicyConfiguration != null ? CfnScalingPolicyStepScalingPolicyConfigurationPropertyFromCloudFormation(properties.StepScalingPolicyConfiguration) : void 0);
      ret.addPropertyResult("targetTrackingScalingPolicyConfiguration", "TargetTrackingScalingPolicyConfiguration", properties.TargetTrackingScalingPolicyConfiguration != null ? CfnScalingPolicyTargetTrackingScalingPolicyConfigurationPropertyFromCloudFormation(properties.TargetTrackingScalingPolicyConfiguration) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnScalingPolicy = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnScalingPolicy.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "policyName", this);
        cdk.requireProperty(props, "policyType", this);
        this.policyName = props.policyName;
        this.policyType = props.policyType;
        this.resourceId = props.resourceId;
        this.scalableDimension = props.scalableDimension;
        this.scalingTargetId = props.scalingTargetId;
        this.serviceNamespace = props.serviceNamespace;
        this.stepScalingPolicyConfiguration = props.stepScalingPolicyConfiguration;
        this.targetTrackingScalingPolicyConfiguration = props.targetTrackingScalingPolicyConfiguration;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnScalingPolicyPropsFromCloudFormation(resourceProperties);
        const ret = new CfnScalingPolicy(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnScalingPolicy.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          policyName: this.policyName,
          policyType: this.policyType,
          resourceId: this.resourceId,
          scalableDimension: this.scalableDimension,
          scalingTargetId: this.scalingTargetId,
          serviceNamespace: this.serviceNamespace,
          stepScalingPolicyConfiguration: this.stepScalingPolicyConfiguration,
          targetTrackingScalingPolicyConfiguration: this.targetTrackingScalingPolicyConfiguration
        };
      }
      renderProperties(props) {
        return cfnScalingPolicyPropsToCloudFormation(props);
      }
    };
    exports2.CfnScalingPolicy = CfnScalingPolicy;
    _b = JSII_RTTI_SYMBOL_1;
    CfnScalingPolicy[_b] = { fqn: "@aws-cdk/aws-applicationautoscaling.CfnScalingPolicy", version: "1.132.0" };
    CfnScalingPolicy.CFN_RESOURCE_TYPE_NAME = "AWS::ApplicationAutoScaling::ScalingPolicy";
    function CfnScalingPolicy_CustomizedMetricSpecificationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("dimensions", cdk.listValidator(CfnScalingPolicy_MetricDimensionPropertyValidator))(properties.dimensions));
      errors.collect(cdk.propertyValidator("metricName", cdk.requiredValidator)(properties.metricName));
      errors.collect(cdk.propertyValidator("metricName", cdk.validateString)(properties.metricName));
      errors.collect(cdk.propertyValidator("namespace", cdk.requiredValidator)(properties.namespace));
      errors.collect(cdk.propertyValidator("namespace", cdk.validateString)(properties.namespace));
      errors.collect(cdk.propertyValidator("statistic", cdk.requiredValidator)(properties.statistic));
      errors.collect(cdk.propertyValidator("statistic", cdk.validateString)(properties.statistic));
      errors.collect(cdk.propertyValidator("unit", cdk.validateString)(properties.unit));
      return errors.wrap('supplied properties not correct for "CustomizedMetricSpecificationProperty"');
    }
    function cfnScalingPolicyCustomizedMetricSpecificationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnScalingPolicy_CustomizedMetricSpecificationPropertyValidator(properties).assertSuccess();
      return {
        Dimensions: cdk.listMapper(cfnScalingPolicyMetricDimensionPropertyToCloudFormation)(properties.dimensions),
        MetricName: cdk.stringToCloudFormation(properties.metricName),
        Namespace: cdk.stringToCloudFormation(properties.namespace),
        Statistic: cdk.stringToCloudFormation(properties.statistic),
        Unit: cdk.stringToCloudFormation(properties.unit)
      };
    }
    function CfnScalingPolicyCustomizedMetricSpecificationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("dimensions", "Dimensions", properties.Dimensions != null ? cfn_parse.FromCloudFormation.getArray(CfnScalingPolicyMetricDimensionPropertyFromCloudFormation)(properties.Dimensions) : void 0);
      ret.addPropertyResult("metricName", "MetricName", cfn_parse.FromCloudFormation.getString(properties.MetricName));
      ret.addPropertyResult("namespace", "Namespace", cfn_parse.FromCloudFormation.getString(properties.Namespace));
      ret.addPropertyResult("statistic", "Statistic", cfn_parse.FromCloudFormation.getString(properties.Statistic));
      ret.addPropertyResult("unit", "Unit", properties.Unit != null ? cfn_parse.FromCloudFormation.getString(properties.Unit) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnScalingPolicy_MetricDimensionPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("name", cdk.requiredValidator)(properties.name));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("value", cdk.requiredValidator)(properties.value));
      errors.collect(cdk.propertyValidator("value", cdk.validateString)(properties.value));
      return errors.wrap('supplied properties not correct for "MetricDimensionProperty"');
    }
    function cfnScalingPolicyMetricDimensionPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnScalingPolicy_MetricDimensionPropertyValidator(properties).assertSuccess();
      return {
        Name: cdk.stringToCloudFormation(properties.name),
        Value: cdk.stringToCloudFormation(properties.value)
      };
    }
    function CfnScalingPolicyMetricDimensionPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("name", "Name", cfn_parse.FromCloudFormation.getString(properties.Name));
      ret.addPropertyResult("value", "Value", cfn_parse.FromCloudFormation.getString(properties.Value));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnScalingPolicy_PredefinedMetricSpecificationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("predefinedMetricType", cdk.requiredValidator)(properties.predefinedMetricType));
      errors.collect(cdk.propertyValidator("predefinedMetricType", cdk.validateString)(properties.predefinedMetricType));
      errors.collect(cdk.propertyValidator("resourceLabel", cdk.validateString)(properties.resourceLabel));
      return errors.wrap('supplied properties not correct for "PredefinedMetricSpecificationProperty"');
    }
    function cfnScalingPolicyPredefinedMetricSpecificationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnScalingPolicy_PredefinedMetricSpecificationPropertyValidator(properties).assertSuccess();
      return {
        PredefinedMetricType: cdk.stringToCloudFormation(properties.predefinedMetricType),
        ResourceLabel: cdk.stringToCloudFormation(properties.resourceLabel)
      };
    }
    function CfnScalingPolicyPredefinedMetricSpecificationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("predefinedMetricType", "PredefinedMetricType", cfn_parse.FromCloudFormation.getString(properties.PredefinedMetricType));
      ret.addPropertyResult("resourceLabel", "ResourceLabel", properties.ResourceLabel != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceLabel) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnScalingPolicy_StepAdjustmentPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("metricIntervalLowerBound", cdk.validateNumber)(properties.metricIntervalLowerBound));
      errors.collect(cdk.propertyValidator("metricIntervalUpperBound", cdk.validateNumber)(properties.metricIntervalUpperBound));
      errors.collect(cdk.propertyValidator("scalingAdjustment", cdk.requiredValidator)(properties.scalingAdjustment));
      errors.collect(cdk.propertyValidator("scalingAdjustment", cdk.validateNumber)(properties.scalingAdjustment));
      return errors.wrap('supplied properties not correct for "StepAdjustmentProperty"');
    }
    function cfnScalingPolicyStepAdjustmentPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnScalingPolicy_StepAdjustmentPropertyValidator(properties).assertSuccess();
      return {
        MetricIntervalLowerBound: cdk.numberToCloudFormation(properties.metricIntervalLowerBound),
        MetricIntervalUpperBound: cdk.numberToCloudFormation(properties.metricIntervalUpperBound),
        ScalingAdjustment: cdk.numberToCloudFormation(properties.scalingAdjustment)
      };
    }
    function CfnScalingPolicyStepAdjustmentPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("metricIntervalLowerBound", "MetricIntervalLowerBound", properties.MetricIntervalLowerBound != null ? cfn_parse.FromCloudFormation.getNumber(properties.MetricIntervalLowerBound) : void 0);
      ret.addPropertyResult("metricIntervalUpperBound", "MetricIntervalUpperBound", properties.MetricIntervalUpperBound != null ? cfn_parse.FromCloudFormation.getNumber(properties.MetricIntervalUpperBound) : void 0);
      ret.addPropertyResult("scalingAdjustment", "ScalingAdjustment", cfn_parse.FromCloudFormation.getNumber(properties.ScalingAdjustment));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnScalingPolicy_StepScalingPolicyConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("adjustmentType", cdk.validateString)(properties.adjustmentType));
      errors.collect(cdk.propertyValidator("cooldown", cdk.validateNumber)(properties.cooldown));
      errors.collect(cdk.propertyValidator("metricAggregationType", cdk.validateString)(properties.metricAggregationType));
      errors.collect(cdk.propertyValidator("minAdjustmentMagnitude", cdk.validateNumber)(properties.minAdjustmentMagnitude));
      errors.collect(cdk.propertyValidator("stepAdjustments", cdk.listValidator(CfnScalingPolicy_StepAdjustmentPropertyValidator))(properties.stepAdjustments));
      return errors.wrap('supplied properties not correct for "StepScalingPolicyConfigurationProperty"');
    }
    function cfnScalingPolicyStepScalingPolicyConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnScalingPolicy_StepScalingPolicyConfigurationPropertyValidator(properties).assertSuccess();
      return {
        AdjustmentType: cdk.stringToCloudFormation(properties.adjustmentType),
        Cooldown: cdk.numberToCloudFormation(properties.cooldown),
        MetricAggregationType: cdk.stringToCloudFormation(properties.metricAggregationType),
        MinAdjustmentMagnitude: cdk.numberToCloudFormation(properties.minAdjustmentMagnitude),
        StepAdjustments: cdk.listMapper(cfnScalingPolicyStepAdjustmentPropertyToCloudFormation)(properties.stepAdjustments)
      };
    }
    function CfnScalingPolicyStepScalingPolicyConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("adjustmentType", "AdjustmentType", properties.AdjustmentType != null ? cfn_parse.FromCloudFormation.getString(properties.AdjustmentType) : void 0);
      ret.addPropertyResult("cooldown", "Cooldown", properties.Cooldown != null ? cfn_parse.FromCloudFormation.getNumber(properties.Cooldown) : void 0);
      ret.addPropertyResult("metricAggregationType", "MetricAggregationType", properties.MetricAggregationType != null ? cfn_parse.FromCloudFormation.getString(properties.MetricAggregationType) : void 0);
      ret.addPropertyResult("minAdjustmentMagnitude", "MinAdjustmentMagnitude", properties.MinAdjustmentMagnitude != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinAdjustmentMagnitude) : void 0);
      ret.addPropertyResult("stepAdjustments", "StepAdjustments", properties.StepAdjustments != null ? cfn_parse.FromCloudFormation.getArray(CfnScalingPolicyStepAdjustmentPropertyFromCloudFormation)(properties.StepAdjustments) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnScalingPolicy_TargetTrackingScalingPolicyConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("customizedMetricSpecification", CfnScalingPolicy_CustomizedMetricSpecificationPropertyValidator)(properties.customizedMetricSpecification));
      errors.collect(cdk.propertyValidator("disableScaleIn", cdk.validateBoolean)(properties.disableScaleIn));
      errors.collect(cdk.propertyValidator("predefinedMetricSpecification", CfnScalingPolicy_PredefinedMetricSpecificationPropertyValidator)(properties.predefinedMetricSpecification));
      errors.collect(cdk.propertyValidator("scaleInCooldown", cdk.validateNumber)(properties.scaleInCooldown));
      errors.collect(cdk.propertyValidator("scaleOutCooldown", cdk.validateNumber)(properties.scaleOutCooldown));
      errors.collect(cdk.propertyValidator("targetValue", cdk.requiredValidator)(properties.targetValue));
      errors.collect(cdk.propertyValidator("targetValue", cdk.validateNumber)(properties.targetValue));
      return errors.wrap('supplied properties not correct for "TargetTrackingScalingPolicyConfigurationProperty"');
    }
    function cfnScalingPolicyTargetTrackingScalingPolicyConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnScalingPolicy_TargetTrackingScalingPolicyConfigurationPropertyValidator(properties).assertSuccess();
      return {
        CustomizedMetricSpecification: cfnScalingPolicyCustomizedMetricSpecificationPropertyToCloudFormation(properties.customizedMetricSpecification),
        DisableScaleIn: cdk.booleanToCloudFormation(properties.disableScaleIn),
        PredefinedMetricSpecification: cfnScalingPolicyPredefinedMetricSpecificationPropertyToCloudFormation(properties.predefinedMetricSpecification),
        ScaleInCooldown: cdk.numberToCloudFormation(properties.scaleInCooldown),
        ScaleOutCooldown: cdk.numberToCloudFormation(properties.scaleOutCooldown),
        TargetValue: cdk.numberToCloudFormation(properties.targetValue)
      };
    }
    function CfnScalingPolicyTargetTrackingScalingPolicyConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("customizedMetricSpecification", "CustomizedMetricSpecification", properties.CustomizedMetricSpecification != null ? CfnScalingPolicyCustomizedMetricSpecificationPropertyFromCloudFormation(properties.CustomizedMetricSpecification) : void 0);
      ret.addPropertyResult("disableScaleIn", "DisableScaleIn", properties.DisableScaleIn != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DisableScaleIn) : void 0);
      ret.addPropertyResult("predefinedMetricSpecification", "PredefinedMetricSpecification", properties.PredefinedMetricSpecification != null ? CfnScalingPolicyPredefinedMetricSpecificationPropertyFromCloudFormation(properties.PredefinedMetricSpecification) : void 0);
      ret.addPropertyResult("scaleInCooldown", "ScaleInCooldown", properties.ScaleInCooldown != null ? cfn_parse.FromCloudFormation.getNumber(properties.ScaleInCooldown) : void 0);
      ret.addPropertyResult("scaleOutCooldown", "ScaleOutCooldown", properties.ScaleOutCooldown != null ? cfn_parse.FromCloudFormation.getNumber(properties.ScaleOutCooldown) : void 0);
      ret.addPropertyResult("targetValue", "TargetValue", cfn_parse.FromCloudFormation.getNumber(properties.TargetValue));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-autoscaling-common/lib/types.js
var require_types2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-autoscaling-common/lib/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/@aws-cdk/aws-autoscaling-common/lib/interval-utils.js
var require_interval_utils = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-autoscaling-common/lib/interval-utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.findAlarmThresholds = exports2.normalizeIntervals = void 0;
    function normalizeIntervals(intervals, changesAreAbsolute) {
      const full = orderAndCompleteIntervals(intervals);
      makeGapsUndefined(full);
      if (!changesAreAbsolute) {
        makeZerosUndefined(full);
      }
      combineUndefineds(full);
      validateAtMostOneUndefined(full);
      return full;
    }
    exports2.normalizeIntervals = normalizeIntervals;
    function orderAndCompleteIntervals(intervals) {
      if (intervals.length < 2) {
        throw new Error("Require at least 2 intervals");
      }
      for (const interval of intervals) {
        if (interval.lower === void 0 && interval.upper === void 0) {
          throw new Error(`Must supply at least one of 'upper' or 'lower', got: ${JSON.stringify(interval)}`);
        }
      }
      intervals = intervals.map((x) => __spreadValues({}, x));
      intervals.sort(comparatorFromKey((x) => {
        var _a;
        return (_a = x.lower) !== null && _a !== void 0 ? _a : x.upper;
      }));
      while (propagateBounds(intervals)) {
      }
      const lastIndex = intervals.length - 1;
      if (intervals[0].lower === void 0) {
        intervals[0] = __spreadProps(__spreadValues({}, intervals[0]), { lower: 0 });
      }
      if (intervals[lastIndex].upper === void 0) {
        intervals[lastIndex] = __spreadProps(__spreadValues({}, intervals[lastIndex]), { upper: Infinity });
      }
      for (const interval of intervals) {
        if (interval.lower === void 0 || interval.upper === void 0) {
          throw new Error(`Could not determine the lower and upper bounds for ${JSON.stringify(interval)}`);
        }
      }
      const completeIntervals = intervals;
      for (let i = 0; i < completeIntervals.length - 1; i++) {
        if (overlap(completeIntervals[i], completeIntervals[i + 1])) {
          throw new Error(`Two intervals overlap: ${JSON.stringify(completeIntervals[i])} and ${JSON.stringify(completeIntervals[i + 1])}`);
        }
      }
      return completeIntervals;
    }
    function makeGapsUndefined(intervals) {
      if (intervals[0].lower !== 0) {
        intervals.splice(0, 0, {
          lower: 0,
          upper: intervals[0].lower,
          change: void 0
        });
      }
      if (last(intervals).upper !== Infinity) {
        intervals.push({
          lower: last(intervals).upper,
          upper: Infinity,
          change: void 0
        });
      }
      let i = 1;
      while (i < intervals.length) {
        if (intervals[i - 1].upper < intervals[i].lower) {
          intervals.splice(i, 0, {
            lower: intervals[i - 1].upper,
            upper: intervals[i].lower,
            change: void 0
          });
        } else {
          i++;
        }
      }
    }
    function makeZerosUndefined(intervals) {
      for (let i = 0; i < intervals.length; ++i) {
        const interval = intervals[i];
        if (interval.change === 0) {
          intervals[i] = __spreadProps(__spreadValues({}, interval), { change: void 0 });
        }
      }
    }
    function combineUndefineds(intervals) {
      let i = 0;
      while (i < intervals.length - 1) {
        if (intervals[i].change === void 0 && intervals[i + 1].change === void 0) {
          intervals[i] = __spreadProps(__spreadValues({}, intervals[i]), { upper: intervals[i + 1].upper });
          intervals.splice(i + 1, 1);
        } else {
          i++;
        }
      }
    }
    function validateAtMostOneUndefined(intervals) {
      const undef = intervals.filter((x) => x.change === void 0);
      if (undef.length > 1) {
        throw new Error(`Can have at most one no-change interval, got ${JSON.stringify(undef)}`);
      }
    }
    function comparatorFromKey(keyFn) {
      return (a, b) => {
        const keyA = keyFn(a);
        const keyB = keyFn(b);
        if (keyA < keyB) {
          return -1;
        }
        if (keyA === keyB) {
          return 0;
        }
        return 1;
      };
    }
    function propagateBounds(intervals) {
      let ret = false;
      for (let i = 0; i < intervals.length - 1; i++) {
        if (intervals[i].upper !== void 0 && intervals[i + 1].lower === void 0) {
          intervals[i + 1] = __spreadProps(__spreadValues({}, intervals[i + 1]), { lower: intervals[i].upper });
          ret = true;
        }
      }
      for (let i = intervals.length - 1; i >= 1; i--) {
        if (intervals[i].lower !== void 0 && intervals[i - 1].upper === void 0) {
          intervals[i - 1] = __spreadProps(__spreadValues({}, intervals[i - 1]), { upper: intervals[i].lower });
          ret = true;
        }
      }
      return ret;
    }
    function overlap(a, b) {
      return a.lower < b.upper && a.upper > b.lower;
    }
    function last(xs) {
      return xs[xs.length - 1];
    }
    function findAlarmThresholds(intervals) {
      const gapIndex = intervals.findIndex((x) => x.change === void 0);
      if (gapIndex !== -1) {
        return {
          lowerAlarmIntervalIndex: gapIndex > 0 ? gapIndex - 1 : void 0,
          upperAlarmIntervalIndex: gapIndex < intervals.length - 1 ? gapIndex + 1 : void 0
        };
      }
      if (intervals.length === 1) {
        return { upperAlarmIntervalIndex: 0 };
      }
      const middleIndex = Math.floor(intervals.length / 2);
      return {
        lowerAlarmIntervalIndex: middleIndex - 1,
        upperAlarmIntervalIndex: middleIndex
      };
    }
    exports2.findAlarmThresholds = findAlarmThresholds;
  }
});

// asset-input/node_modules/@aws-cdk/aws-autoscaling-common/lib/test-utils.js
var require_test_utils = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-autoscaling-common/lib/test-utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.generateArbitraryIntervals = void 0;
    function generateArbitraryIntervals(mrng) {
      const ret = new Array();
      const absolute = mrng.nextBoolean();
      const factor = (mrng.nextBoolean() ? 1 : -1) * (absolute ? 10 : 1);
      const bias = absolute ? 50 : 0;
      ret.push({ lower: 0, upper: 10, change: -2 * factor + bias });
      ret.push({ lower: 10, upper: 20, change: -1 * factor + bias });
      ret.push({ lower: 20, upper: 60, change: 0 + bias });
      ret.push({ lower: 60, upper: 80, change: 0 + bias });
      ret.push({ lower: 80, upper: 90, change: 1 * factor + bias });
      ret.push({ lower: 90, upper: Infinity, change: 2 * factor + bias });
      const noChanges = ret.filter((x) => x.change === bias);
      if (!absolute) {
        if (mrng.nextBoolean()) {
          if (mrng.nextBoolean()) {
            ret.splice(ret.indexOf(noChanges[0]), 1);
          } else {
            noChanges[0] = __spreadProps(__spreadValues({}, noChanges[0]), { change: -1 * factor + bias });
          }
        }
        if (mrng.nextBoolean()) {
          if (mrng.nextBoolean()) {
            ret.splice(ret.indexOf(noChanges[1]), 1);
          } else {
            noChanges[1] = __spreadProps(__spreadValues({}, noChanges[1]), { change: 1 * factor + bias });
          }
        }
      } else {
        if (mrng.nextBoolean()) {
          ret.splice(ret.indexOf(noChanges[0]), 1);
          ret.splice(ret.indexOf(noChanges[1]), 1);
        } else {
          noChanges[0] = __spreadProps(__spreadValues({}, noChanges[0]), { change: -1 * factor + bias });
          noChanges[1] = __spreadProps(__spreadValues({}, noChanges[1]), { change: 1 * factor + bias });
        }
      }
      if (mrng.nextInt(0, 2) === 0) {
        const signToStrip = mrng.nextBoolean() ? -1 : 1;
        let ix = ret.findIndex((x) => Math.sign(x.change - bias) === signToStrip);
        while (ix >= 0) {
          ret.splice(ix, 1);
          ix = ret.findIndex((x) => Math.sign(x.change - bias) === signToStrip);
        }
      }
      const iterations = mrng.nextInt(0, 10);
      for (let iter = 0; iter < iterations; iter++) {
        const i = mrng.nextInt(0, ret.length - 1);
        if (mrng.nextBoolean()) {
          if (ret[i].upper !== void 0 && (i === 0 || ret[i - 1].upper !== void 0)) {
            ret[i] = __spreadProps(__spreadValues({}, ret[i]), { lower: void 0 });
          }
        } else {
          if (ret[i].lower !== void 0 && (i === ret.length - 1 || ret[i + 1].lower !== void 0)) {
            ret[i] = __spreadProps(__spreadValues({}, ret[i]), { upper: void 0 });
          }
        }
      }
      return { absolute, intervals: ret };
    }
    exports2.generateArbitraryIntervals = generateArbitraryIntervals;
  }
});

// asset-input/node_modules/@aws-cdk/aws-autoscaling-common/lib/index.js
var require_lib11 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-autoscaling-common/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_types2(), exports2);
    __exportStar(require_interval_utils(), exports2);
    __exportStar(require_test_utils(), exports2);
  }
});

// asset-input/node_modules/@aws-cdk/aws-applicationautoscaling/lib/step-scaling-action.js
var require_step_scaling_action = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-applicationautoscaling/lib/step-scaling-action.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MetricAggregationType = exports2.AdjustmentType = exports2.StepScalingAction = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var applicationautoscaling_generated_1 = require_applicationautoscaling_generated();
    var core_1 = require_lib8();
    var StepScalingAction = class extends core_1.Construct {
      constructor(scope, id, props) {
        super(scope, id);
        this.adjustments = new Array();
        const resource = new applicationautoscaling_generated_1.CfnScalingPolicy(this, "Resource", {
          policyName: props.policyName || cdk.Names.uniqueId(this),
          policyType: "StepScaling",
          scalingTargetId: props.scalingTarget.scalableTargetId,
          stepScalingPolicyConfiguration: {
            adjustmentType: props.adjustmentType,
            cooldown: props.cooldown && props.cooldown.toSeconds(),
            minAdjustmentMagnitude: props.minAdjustmentMagnitude,
            metricAggregationType: props.metricAggregationType,
            stepAdjustments: cdk.Lazy.any({ produce: () => this.adjustments })
          }
        });
        this.scalingPolicyArn = resource.ref;
      }
      addAdjustment(adjustment) {
        if (adjustment.lowerBound === void 0 && adjustment.upperBound === void 0) {
          throw new Error("At least one of lowerBound or upperBound is required");
        }
        this.adjustments.push({
          metricIntervalLowerBound: adjustment.lowerBound,
          metricIntervalUpperBound: adjustment.upperBound,
          scalingAdjustment: adjustment.adjustment
        });
      }
    };
    exports2.StepScalingAction = StepScalingAction;
    _a = JSII_RTTI_SYMBOL_1;
    StepScalingAction[_a] = { fqn: "@aws-cdk/aws-applicationautoscaling.StepScalingAction", version: "1.132.0" };
    var AdjustmentType;
    (function(AdjustmentType2) {
      AdjustmentType2["CHANGE_IN_CAPACITY"] = "ChangeInCapacity";
      AdjustmentType2["PERCENT_CHANGE_IN_CAPACITY"] = "PercentChangeInCapacity";
      AdjustmentType2["EXACT_CAPACITY"] = "ExactCapacity";
    })(AdjustmentType = exports2.AdjustmentType || (exports2.AdjustmentType = {}));
    var MetricAggregationType;
    (function(MetricAggregationType2) {
      MetricAggregationType2["AVERAGE"] = "Average";
      MetricAggregationType2["MINIMUM"] = "Minimum";
      MetricAggregationType2["MAXIMUM"] = "Maximum";
    })(MetricAggregationType = exports2.MetricAggregationType || (exports2.MetricAggregationType = {}));
  }
});

// asset-input/node_modules/@aws-cdk/aws-applicationautoscaling/lib/step-scaling-policy.js
var require_step_scaling_policy = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-applicationautoscaling/lib/step-scaling-policy.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StepScalingPolicy = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var aws_autoscaling_common_1 = require_lib11();
    var cloudwatch = require_lib10();
    var step_scaling_action_1 = require_step_scaling_action();
    var core_1 = require_lib8();
    var StepScalingPolicy = class extends core_1.Construct {
      constructor(scope, id, props) {
        var _b, _c, _d, _e;
        super(scope, id);
        if (props.scalingSteps.length < 2) {
          throw new Error("You must supply at least 2 intervals for autoscaling");
        }
        const adjustmentType = props.adjustmentType || step_scaling_action_1.AdjustmentType.CHANGE_IN_CAPACITY;
        const changesAreAbsolute = adjustmentType === step_scaling_action_1.AdjustmentType.EXACT_CAPACITY;
        const intervals = aws_autoscaling_common_1.normalizeIntervals(props.scalingSteps, changesAreAbsolute);
        const alarms = aws_autoscaling_common_1.findAlarmThresholds(intervals);
        if (alarms.lowerAlarmIntervalIndex !== void 0) {
          const threshold = intervals[alarms.lowerAlarmIntervalIndex].upper;
          this.lowerAction = new step_scaling_action_1.StepScalingAction(this, "LowerPolicy", {
            adjustmentType,
            cooldown: props.cooldown,
            metricAggregationType: (_b = props.metricAggregationType) !== null && _b !== void 0 ? _b : aggregationTypeFromMetric(props.metric),
            minAdjustmentMagnitude: props.minAdjustmentMagnitude,
            scalingTarget: props.scalingTarget
          });
          for (let i = alarms.lowerAlarmIntervalIndex; i >= 0; i--) {
            this.lowerAction.addAdjustment({
              adjustment: intervals[i].change,
              lowerBound: i !== 0 ? intervals[i].lower - threshold : void 0,
              upperBound: intervals[i].upper - threshold
            });
          }
          this.lowerAlarm = new cloudwatch.Alarm(this, "LowerAlarm", {
            metric: props.metric,
            alarmDescription: "Lower threshold scaling alarm",
            comparisonOperator: cloudwatch.ComparisonOperator.LESS_THAN_OR_EQUAL_TO_THRESHOLD,
            evaluationPeriods: (_c = props.evaluationPeriods) !== null && _c !== void 0 ? _c : 1,
            threshold
          });
          this.lowerAlarm.addAlarmAction(new StepScalingAlarmAction(this.lowerAction));
        }
        if (alarms.upperAlarmIntervalIndex !== void 0) {
          const threshold = intervals[alarms.upperAlarmIntervalIndex].lower;
          this.upperAction = new step_scaling_action_1.StepScalingAction(this, "UpperPolicy", {
            adjustmentType,
            cooldown: props.cooldown,
            metricAggregationType: (_d = props.metricAggregationType) !== null && _d !== void 0 ? _d : aggregationTypeFromMetric(props.metric),
            minAdjustmentMagnitude: props.minAdjustmentMagnitude,
            scalingTarget: props.scalingTarget
          });
          for (let i = alarms.upperAlarmIntervalIndex; i < intervals.length; i++) {
            this.upperAction.addAdjustment({
              adjustment: intervals[i].change,
              lowerBound: intervals[i].lower - threshold,
              upperBound: i !== intervals.length - 1 ? intervals[i].upper - threshold : void 0
            });
          }
          this.upperAlarm = new cloudwatch.Alarm(this, "UpperAlarm", {
            metric: props.metric,
            alarmDescription: "Upper threshold scaling alarm",
            comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_OR_EQUAL_TO_THRESHOLD,
            evaluationPeriods: (_e = props.evaluationPeriods) !== null && _e !== void 0 ? _e : 1,
            threshold
          });
          this.upperAlarm.addAlarmAction(new StepScalingAlarmAction(this.upperAction));
        }
      }
    };
    exports2.StepScalingPolicy = StepScalingPolicy;
    _a = JSII_RTTI_SYMBOL_1;
    StepScalingPolicy[_a] = { fqn: "@aws-cdk/aws-applicationautoscaling.StepScalingPolicy", version: "1.132.0" };
    function aggregationTypeFromMetric(metric) {
      var _b;
      const statistic = (_b = metric.toMetricConfig().metricStat) === null || _b === void 0 ? void 0 : _b.statistic;
      if (statistic == null) {
        return void 0;
      }
      switch (statistic) {
        case "Average":
          return step_scaling_action_1.MetricAggregationType.AVERAGE;
        case "Minimum":
          return step_scaling_action_1.MetricAggregationType.MINIMUM;
        case "Maximum":
          return step_scaling_action_1.MetricAggregationType.MAXIMUM;
        default:
          return step_scaling_action_1.MetricAggregationType.AVERAGE;
      }
    }
    var StepScalingAlarmAction = class {
      constructor(stepScalingAction) {
        this.stepScalingAction = stepScalingAction;
      }
      bind(_scope, _alarm) {
        return { alarmActionArn: this.stepScalingAction.scalingPolicyArn };
      }
    };
  }
});

// asset-input/node_modules/@aws-cdk/aws-applicationautoscaling/lib/target-tracking-scaling-policy.js
var require_target_tracking_scaling_policy = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-applicationautoscaling/lib/target-tracking-scaling-policy.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PredefinedMetric = exports2.TargetTrackingScalingPolicy = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var applicationautoscaling_generated_1 = require_applicationautoscaling_generated();
    var core_1 = require_lib8();
    var TargetTrackingScalingPolicy = class extends core_1.Construct {
      constructor(scope, id, props) {
        if (props.customMetric === void 0 === (props.predefinedMetric === void 0)) {
          throw new Error("Exactly one of 'customMetric' or 'predefinedMetric' must be specified.");
        }
        if (props.customMetric && !props.customMetric.toMetricConfig().metricStat) {
          throw new Error("Only direct metrics are supported for Target Tracking. Use Step Scaling or supply a Metric object.");
        }
        super(scope, id);
        const resource = new applicationautoscaling_generated_1.CfnScalingPolicy(this, "Resource", {
          policyName: props.policyName || cdk.Names.uniqueId(this),
          policyType: "TargetTrackingScaling",
          scalingTargetId: props.scalingTarget.scalableTargetId,
          targetTrackingScalingPolicyConfiguration: {
            customizedMetricSpecification: renderCustomMetric(props.customMetric),
            disableScaleIn: props.disableScaleIn,
            predefinedMetricSpecification: props.predefinedMetric !== void 0 ? {
              predefinedMetricType: props.predefinedMetric,
              resourceLabel: props.resourceLabel
            } : void 0,
            scaleInCooldown: props.scaleInCooldown && props.scaleInCooldown.toSeconds(),
            scaleOutCooldown: props.scaleOutCooldown && props.scaleOutCooldown.toSeconds(),
            targetValue: props.targetValue
          }
        });
        this.scalingPolicyArn = resource.ref;
      }
    };
    exports2.TargetTrackingScalingPolicy = TargetTrackingScalingPolicy;
    _a = JSII_RTTI_SYMBOL_1;
    TargetTrackingScalingPolicy[_a] = { fqn: "@aws-cdk/aws-applicationautoscaling.TargetTrackingScalingPolicy", version: "1.132.0" };
    function renderCustomMetric(metric) {
      if (!metric) {
        return void 0;
      }
      const c = metric.toMetricConfig().metricStat;
      if (c.statistic.startsWith("p")) {
        throw new Error(`Cannot use statistic '${c.statistic}' for Target Tracking: only 'Average', 'Minimum', 'Maximum', 'SampleCount', and 'Sum' are supported.`);
      }
      return {
        dimensions: c.dimensions,
        metricName: c.metricName,
        namespace: c.namespace,
        statistic: c.statistic,
        unit: c.unitFilter
      };
    }
    var PredefinedMetric;
    (function(PredefinedMetric2) {
      PredefinedMetric2["DYNAMODB_READ_CAPACITY_UTILIZATION"] = "DynamoDBReadCapacityUtilization";
      PredefinedMetric2["DYANMODB_WRITE_CAPACITY_UTILIZATION"] = "DynamoDBWriteCapacityUtilization";
      PredefinedMetric2["ALB_REQUEST_COUNT_PER_TARGET"] = "ALBRequestCountPerTarget";
      PredefinedMetric2["RDS_READER_AVERAGE_CPU_UTILIZATION"] = "RDSReaderAverageCPUUtilization";
      PredefinedMetric2["RDS_READER_AVERAGE_DATABASE_CONNECTIONS"] = "RDSReaderAverageDatabaseConnections";
      PredefinedMetric2["EC2_SPOT_FLEET_REQUEST_AVERAGE_CPU_UTILIZATION"] = "EC2SpotFleetRequestAverageCPUUtilization";
      PredefinedMetric2["EC2_SPOT_FLEET_REQUEST_AVERAGE_NETWORK_IN"] = "EC2SpotFleetRequestAverageNetworkIn";
      PredefinedMetric2["EC2_SPOT_FLEET_REQUEST_AVERAGE_NETWORK_OUT"] = "EC2SpotFleetRequestAverageNetworkOut";
      PredefinedMetric2["SAGEMAKER_VARIANT_INVOCATIONS_PER_INSTANCE"] = "SageMakerVariantInvocationsPerInstance";
      PredefinedMetric2["ECS_SERVICE_AVERAGE_CPU_UTILIZATION"] = "ECSServiceAverageCPUUtilization";
      PredefinedMetric2["ECS_SERVICE_AVERAGE_MEMORY_UTILIZATION"] = "ECSServiceAverageMemoryUtilization";
      PredefinedMetric2["LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION"] = "LambdaProvisionedConcurrencyUtilization";
      PredefinedMetric2["KAFKA_BROKER_STORAGE_UTILIZATION"] = "KafkaBrokerStorageUtilization";
    })(PredefinedMetric = exports2.PredefinedMetric || (exports2.PredefinedMetric = {}));
  }
});

// asset-input/node_modules/@aws-cdk/aws-applicationautoscaling/lib/scalable-target.js
var require_scalable_target = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-applicationautoscaling/lib/scalable-target.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ServiceNamespace = exports2.ScalableTarget = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var iam = require_lib9();
    var core_1 = require_lib8();
    var applicationautoscaling_generated_1 = require_applicationautoscaling_generated();
    var step_scaling_policy_1 = require_step_scaling_policy();
    var target_tracking_scaling_policy_1 = require_target_tracking_scaling_policy();
    var ScalableTarget = class extends core_1.Resource {
      constructor(scope, id, props) {
        super(scope, id);
        this.actions = new Array();
        core_1.withResolved(props.maxCapacity, (max) => {
          if (max < 0) {
            throw new RangeError(`maxCapacity cannot be negative, got: ${props.maxCapacity}`);
          }
        });
        core_1.withResolved(props.minCapacity, (min) => {
          if (min < 0) {
            throw new RangeError(`minCapacity cannot be negative, got: ${props.minCapacity}`);
          }
        });
        core_1.withResolved(props.minCapacity, props.maxCapacity, (min, max) => {
          if (max < min) {
            throw new RangeError(`minCapacity (${props.minCapacity}) should be lower than maxCapacity (${props.maxCapacity})`);
          }
        });
        this.role = props.role || new iam.Role(this, "Role", {
          assumedBy: new iam.ServicePrincipal("application-autoscaling.amazonaws.com")
        });
        const resource = new applicationautoscaling_generated_1.CfnScalableTarget(this, "Resource", {
          maxCapacity: props.maxCapacity,
          minCapacity: props.minCapacity,
          resourceId: props.resourceId,
          roleArn: this.role.roleArn,
          scalableDimension: props.scalableDimension,
          scheduledActions: core_1.Lazy.any({ produce: () => this.actions }, { omitEmptyArray: true }),
          serviceNamespace: props.serviceNamespace
        });
        this.scalableTargetId = resource.ref;
      }
      static fromScalableTargetId(scope, id, scalableTargetId) {
        class Import extends core_1.Resource {
          constructor() {
            super(...arguments);
            this.scalableTargetId = scalableTargetId;
          }
        }
        return new Import(scope, id);
      }
      addToRolePolicy(statement) {
        this.role.addToPrincipalPolicy(statement);
      }
      scaleOnSchedule(id, action) {
        if (action.minCapacity === void 0 && action.maxCapacity === void 0) {
          throw new Error(`You must supply at least one of minCapacity or maxCapacity, got ${JSON.stringify(action)}`);
        }
        this.actions.push({
          scheduledActionName: id,
          schedule: action.schedule.expressionString,
          startTime: action.startTime,
          endTime: action.endTime,
          scalableTargetAction: {
            maxCapacity: action.maxCapacity,
            minCapacity: action.minCapacity
          }
        });
      }
      scaleOnMetric(id, props) {
        return new step_scaling_policy_1.StepScalingPolicy(this, id, __spreadProps(__spreadValues({}, props), { scalingTarget: this }));
      }
      scaleToTrackMetric(id, props) {
        return new target_tracking_scaling_policy_1.TargetTrackingScalingPolicy(this, id, __spreadProps(__spreadValues({}, props), { scalingTarget: this }));
      }
    };
    exports2.ScalableTarget = ScalableTarget;
    _a = JSII_RTTI_SYMBOL_1;
    ScalableTarget[_a] = { fqn: "@aws-cdk/aws-applicationautoscaling.ScalableTarget", version: "1.132.0" };
    var ServiceNamespace;
    (function(ServiceNamespace2) {
      ServiceNamespace2["ECS"] = "ecs";
      ServiceNamespace2["ELASTIC_MAP_REDUCE"] = "elasticmapreduce";
      ServiceNamespace2["EC2"] = "ec2";
      ServiceNamespace2["APPSTREAM"] = "appstream";
      ServiceNamespace2["DYNAMODB"] = "dynamodb";
      ServiceNamespace2["RDS"] = "rds";
      ServiceNamespace2["SAGEMAKER"] = "sagemaker";
      ServiceNamespace2["CUSTOM_RESOURCE"] = "custom-resource";
      ServiceNamespace2["LAMBDA"] = "lambda";
      ServiceNamespace2["COMPREHEND"] = "comprehend";
      ServiceNamespace2["KAFKA"] = "kafka";
    })(ServiceNamespace = exports2.ServiceNamespace || (exports2.ServiceNamespace = {}));
  }
});

// asset-input/node_modules/@aws-cdk/aws-applicationautoscaling/lib/base-scalable-attribute.js
var require_base_scalable_attribute = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-applicationautoscaling/lib/base-scalable-attribute.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BaseScalableAttribute = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var scalable_target_1 = require_scalable_target();
    var core_1 = require_lib8();
    var BaseScalableAttribute = class extends core_1.Construct {
      constructor(scope, id, props) {
        var _b;
        super(scope, id);
        this.props = props;
        this.target = new scalable_target_1.ScalableTarget(this, "Target", {
          serviceNamespace: this.props.serviceNamespace,
          scalableDimension: this.props.dimension,
          resourceId: this.props.resourceId,
          role: this.props.role,
          minCapacity: (_b = props.minCapacity) !== null && _b !== void 0 ? _b : 1,
          maxCapacity: props.maxCapacity
        });
      }
      doScaleOnSchedule(id, props) {
        this.target.scaleOnSchedule(id, props);
      }
      doScaleOnMetric(id, props) {
        this.target.scaleOnMetric(id, props);
      }
      doScaleToTrackMetric(id, props) {
        this.target.scaleToTrackMetric(id, props);
      }
    };
    exports2.BaseScalableAttribute = BaseScalableAttribute;
    _a = JSII_RTTI_SYMBOL_1;
    BaseScalableAttribute[_a] = { fqn: "@aws-cdk/aws-applicationautoscaling.BaseScalableAttribute", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-applicationautoscaling/lib/schedule.js
var require_schedule = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-applicationautoscaling/lib/schedule.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Schedule = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var Schedule = class {
      constructor() {
      }
      static expression(expression) {
        return new LiteralSchedule(expression);
      }
      static rate(duration) {
        if (duration.isUnresolved()) {
          const validDurationUnit = ["minute", "minutes", "hour", "hours", "day", "days"];
          if (!validDurationUnit.includes(duration.unitLabel())) {
            throw new Error("Allowed units for scheduling are: 'minute', 'minutes', 'hour', 'hours', 'day' or 'days'");
          }
          return new LiteralSchedule(`rate(${duration.formatTokenToNumber()})`);
        }
        if (duration.toSeconds() === 0) {
          throw new Error("Duration cannot be 0");
        }
        let rate = maybeRate(duration.toDays({ integral: false }), "day");
        if (rate === void 0) {
          rate = maybeRate(duration.toHours({ integral: false }), "hour");
        }
        if (rate === void 0) {
          rate = makeRate(duration.toMinutes({ integral: true }), "minute");
        }
        return new LiteralSchedule(rate);
      }
      static at(moment) {
        return new LiteralSchedule(`at(${formatISO(moment)})`);
      }
      static cron(options) {
        if (options.weekDay !== void 0 && options.day !== void 0) {
          throw new Error("Cannot supply both 'day' and 'weekDay', use at most one");
        }
        const minute = fallback(options.minute, "*");
        const hour = fallback(options.hour, "*");
        const month = fallback(options.month, "*");
        const year = fallback(options.year, "*");
        const day = fallback(options.day, options.weekDay !== void 0 ? "?" : "*");
        const weekDay = fallback(options.weekDay, "?");
        return new LiteralSchedule(`cron(${minute} ${hour} ${day} ${month} ${weekDay} ${year})`);
      }
    };
    exports2.Schedule = Schedule;
    _a = JSII_RTTI_SYMBOL_1;
    Schedule[_a] = { fqn: "@aws-cdk/aws-applicationautoscaling.Schedule", version: "1.132.0" };
    var LiteralSchedule = class extends Schedule {
      constructor(expressionString) {
        super();
        this.expressionString = expressionString;
      }
    };
    function fallback(x, def) {
      return x === void 0 ? def : x;
    }
    function formatISO(date2) {
      if (!date2) {
        return void 0;
      }
      return date2.getUTCFullYear() + "-" + pad(date2.getUTCMonth() + 1) + "-" + pad(date2.getUTCDate()) + "T" + pad(date2.getUTCHours()) + ":" + pad(date2.getUTCMinutes()) + ":" + pad(date2.getUTCSeconds());
      function pad(num) {
        if (num < 10) {
          return "0" + num;
        }
        return num;
      }
    }
    function maybeRate(interval, singular) {
      if (interval === 0 || !Number.isInteger(interval)) {
        return void 0;
      }
      return makeRate(interval, singular);
    }
    function makeRate(interval, singular) {
      return interval === 1 ? `rate(1 ${singular})` : `rate(${interval} ${singular}s)`;
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-applicationautoscaling/lib/index.js
var require_lib12 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-applicationautoscaling/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_applicationautoscaling_generated(), exports2);
    __exportStar(require_base_scalable_attribute(), exports2);
    __exportStar(require_schedule(), exports2);
    __exportStar(require_scalable_target(), exports2);
    __exportStar(require_step_scaling_policy(), exports2);
    __exportStar(require_step_scaling_action(), exports2);
    __exportStar(require_target_tracking_scaling_policy(), exports2);
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/destination.js
var require_destination = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/destination.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DestinationType = void 0;
    var DestinationType;
    (function(DestinationType2) {
      DestinationType2["FAILURE"] = "Failure";
      DestinationType2["SUCCESS"] = "Success";
    })(DestinationType = exports2.DestinationType || (exports2.DestinationType = {}));
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/lambda.generated.js
var require_lambda_generated = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/lambda.generated.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    var _d;
    var _e;
    var _f;
    var _g;
    var _h;
    var _j;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnVersion = exports2.CfnPermission = exports2.CfnLayerVersionPermission = exports2.CfnLayerVersion = exports2.CfnFunction = exports2.CfnEventSourceMapping = exports2.CfnEventInvokeConfig = exports2.CfnCodeSigningConfig = exports2.CfnAlias = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var cfn_parse = require_cfn_parse();
    function CfnAliasPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("functionName", cdk.requiredValidator)(properties.functionName));
      errors.collect(cdk.propertyValidator("functionName", cdk.validateString)(properties.functionName));
      errors.collect(cdk.propertyValidator("functionVersion", cdk.requiredValidator)(properties.functionVersion));
      errors.collect(cdk.propertyValidator("functionVersion", cdk.validateString)(properties.functionVersion));
      errors.collect(cdk.propertyValidator("name", cdk.requiredValidator)(properties.name));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("provisionedConcurrencyConfig", CfnAlias_ProvisionedConcurrencyConfigurationPropertyValidator)(properties.provisionedConcurrencyConfig));
      errors.collect(cdk.propertyValidator("routingConfig", CfnAlias_AliasRoutingConfigurationPropertyValidator)(properties.routingConfig));
      return errors.wrap('supplied properties not correct for "CfnAliasProps"');
    }
    function cfnAliasPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnAliasPropsValidator(properties).assertSuccess();
      return {
        FunctionName: cdk.stringToCloudFormation(properties.functionName),
        FunctionVersion: cdk.stringToCloudFormation(properties.functionVersion),
        Name: cdk.stringToCloudFormation(properties.name),
        Description: cdk.stringToCloudFormation(properties.description),
        ProvisionedConcurrencyConfig: cfnAliasProvisionedConcurrencyConfigurationPropertyToCloudFormation(properties.provisionedConcurrencyConfig),
        RoutingConfig: cfnAliasAliasRoutingConfigurationPropertyToCloudFormation(properties.routingConfig)
      };
    }
    function CfnAliasPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("functionName", "FunctionName", cfn_parse.FromCloudFormation.getString(properties.FunctionName));
      ret.addPropertyResult("functionVersion", "FunctionVersion", cfn_parse.FromCloudFormation.getString(properties.FunctionVersion));
      ret.addPropertyResult("name", "Name", cfn_parse.FromCloudFormation.getString(properties.Name));
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("provisionedConcurrencyConfig", "ProvisionedConcurrencyConfig", properties.ProvisionedConcurrencyConfig != null ? CfnAliasProvisionedConcurrencyConfigurationPropertyFromCloudFormation(properties.ProvisionedConcurrencyConfig) : void 0);
      ret.addPropertyResult("routingConfig", "RoutingConfig", properties.RoutingConfig != null ? CfnAliasAliasRoutingConfigurationPropertyFromCloudFormation(properties.RoutingConfig) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnAlias = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnAlias.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "functionName", this);
        cdk.requireProperty(props, "functionVersion", this);
        cdk.requireProperty(props, "name", this);
        this.functionName = props.functionName;
        this.functionVersion = props.functionVersion;
        this.name = props.name;
        this.description = props.description;
        this.provisionedConcurrencyConfig = props.provisionedConcurrencyConfig;
        this.routingConfig = props.routingConfig;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnAliasPropsFromCloudFormation(resourceProperties);
        const ret = new CfnAlias(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnAlias.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          functionName: this.functionName,
          functionVersion: this.functionVersion,
          name: this.name,
          description: this.description,
          provisionedConcurrencyConfig: this.provisionedConcurrencyConfig,
          routingConfig: this.routingConfig
        };
      }
      renderProperties(props) {
        return cfnAliasPropsToCloudFormation(props);
      }
    };
    exports2.CfnAlias = CfnAlias;
    _a = JSII_RTTI_SYMBOL_1;
    CfnAlias[_a] = { fqn: "@aws-cdk/aws-lambda.CfnAlias", version: "1.132.0" };
    CfnAlias.CFN_RESOURCE_TYPE_NAME = "AWS::Lambda::Alias";
    function CfnAlias_AliasRoutingConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("additionalVersionWeights", cdk.requiredValidator)(properties.additionalVersionWeights));
      errors.collect(cdk.propertyValidator("additionalVersionWeights", cdk.listValidator(CfnAlias_VersionWeightPropertyValidator))(properties.additionalVersionWeights));
      return errors.wrap('supplied properties not correct for "AliasRoutingConfigurationProperty"');
    }
    function cfnAliasAliasRoutingConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnAlias_AliasRoutingConfigurationPropertyValidator(properties).assertSuccess();
      return {
        AdditionalVersionWeights: cdk.listMapper(cfnAliasVersionWeightPropertyToCloudFormation)(properties.additionalVersionWeights)
      };
    }
    function CfnAliasAliasRoutingConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("additionalVersionWeights", "AdditionalVersionWeights", cfn_parse.FromCloudFormation.getArray(CfnAliasVersionWeightPropertyFromCloudFormation)(properties.AdditionalVersionWeights));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnAlias_ProvisionedConcurrencyConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("provisionedConcurrentExecutions", cdk.requiredValidator)(properties.provisionedConcurrentExecutions));
      errors.collect(cdk.propertyValidator("provisionedConcurrentExecutions", cdk.validateNumber)(properties.provisionedConcurrentExecutions));
      return errors.wrap('supplied properties not correct for "ProvisionedConcurrencyConfigurationProperty"');
    }
    function cfnAliasProvisionedConcurrencyConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnAlias_ProvisionedConcurrencyConfigurationPropertyValidator(properties).assertSuccess();
      return {
        ProvisionedConcurrentExecutions: cdk.numberToCloudFormation(properties.provisionedConcurrentExecutions)
      };
    }
    function CfnAliasProvisionedConcurrencyConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("provisionedConcurrentExecutions", "ProvisionedConcurrentExecutions", cfn_parse.FromCloudFormation.getNumber(properties.ProvisionedConcurrentExecutions));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnAlias_VersionWeightPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("functionVersion", cdk.requiredValidator)(properties.functionVersion));
      errors.collect(cdk.propertyValidator("functionVersion", cdk.validateString)(properties.functionVersion));
      errors.collect(cdk.propertyValidator("functionWeight", cdk.requiredValidator)(properties.functionWeight));
      errors.collect(cdk.propertyValidator("functionWeight", cdk.validateNumber)(properties.functionWeight));
      return errors.wrap('supplied properties not correct for "VersionWeightProperty"');
    }
    function cfnAliasVersionWeightPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnAlias_VersionWeightPropertyValidator(properties).assertSuccess();
      return {
        FunctionVersion: cdk.stringToCloudFormation(properties.functionVersion),
        FunctionWeight: cdk.numberToCloudFormation(properties.functionWeight)
      };
    }
    function CfnAliasVersionWeightPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("functionVersion", "FunctionVersion", cfn_parse.FromCloudFormation.getString(properties.FunctionVersion));
      ret.addPropertyResult("functionWeight", "FunctionWeight", cfn_parse.FromCloudFormation.getNumber(properties.FunctionWeight));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnCodeSigningConfigPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("allowedPublishers", cdk.requiredValidator)(properties.allowedPublishers));
      errors.collect(cdk.propertyValidator("allowedPublishers", CfnCodeSigningConfig_AllowedPublishersPropertyValidator)(properties.allowedPublishers));
      errors.collect(cdk.propertyValidator("codeSigningPolicies", CfnCodeSigningConfig_CodeSigningPoliciesPropertyValidator)(properties.codeSigningPolicies));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      return errors.wrap('supplied properties not correct for "CfnCodeSigningConfigProps"');
    }
    function cfnCodeSigningConfigPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnCodeSigningConfigPropsValidator(properties).assertSuccess();
      return {
        AllowedPublishers: cfnCodeSigningConfigAllowedPublishersPropertyToCloudFormation(properties.allowedPublishers),
        CodeSigningPolicies: cfnCodeSigningConfigCodeSigningPoliciesPropertyToCloudFormation(properties.codeSigningPolicies),
        Description: cdk.stringToCloudFormation(properties.description)
      };
    }
    function CfnCodeSigningConfigPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("allowedPublishers", "AllowedPublishers", CfnCodeSigningConfigAllowedPublishersPropertyFromCloudFormation(properties.AllowedPublishers));
      ret.addPropertyResult("codeSigningPolicies", "CodeSigningPolicies", properties.CodeSigningPolicies != null ? CfnCodeSigningConfigCodeSigningPoliciesPropertyFromCloudFormation(properties.CodeSigningPolicies) : void 0);
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnCodeSigningConfig = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnCodeSigningConfig.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "allowedPublishers", this);
        this.attrCodeSigningConfigArn = cdk.Token.asString(this.getAtt("CodeSigningConfigArn"));
        this.attrCodeSigningConfigId = cdk.Token.asString(this.getAtt("CodeSigningConfigId"));
        this.allowedPublishers = props.allowedPublishers;
        this.codeSigningPolicies = props.codeSigningPolicies;
        this.description = props.description;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnCodeSigningConfigPropsFromCloudFormation(resourceProperties);
        const ret = new CfnCodeSigningConfig(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnCodeSigningConfig.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          allowedPublishers: this.allowedPublishers,
          codeSigningPolicies: this.codeSigningPolicies,
          description: this.description
        };
      }
      renderProperties(props) {
        return cfnCodeSigningConfigPropsToCloudFormation(props);
      }
    };
    exports2.CfnCodeSigningConfig = CfnCodeSigningConfig;
    _b = JSII_RTTI_SYMBOL_1;
    CfnCodeSigningConfig[_b] = { fqn: "@aws-cdk/aws-lambda.CfnCodeSigningConfig", version: "1.132.0" };
    CfnCodeSigningConfig.CFN_RESOURCE_TYPE_NAME = "AWS::Lambda::CodeSigningConfig";
    function CfnCodeSigningConfig_AllowedPublishersPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("signingProfileVersionArns", cdk.requiredValidator)(properties.signingProfileVersionArns));
      errors.collect(cdk.propertyValidator("signingProfileVersionArns", cdk.listValidator(cdk.validateString))(properties.signingProfileVersionArns));
      return errors.wrap('supplied properties not correct for "AllowedPublishersProperty"');
    }
    function cfnCodeSigningConfigAllowedPublishersPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnCodeSigningConfig_AllowedPublishersPropertyValidator(properties).assertSuccess();
      return {
        SigningProfileVersionArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.signingProfileVersionArns)
      };
    }
    function CfnCodeSigningConfigAllowedPublishersPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("signingProfileVersionArns", "SigningProfileVersionArns", cfn_parse.FromCloudFormation.getStringArray(properties.SigningProfileVersionArns));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnCodeSigningConfig_CodeSigningPoliciesPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("untrustedArtifactOnDeployment", cdk.requiredValidator)(properties.untrustedArtifactOnDeployment));
      errors.collect(cdk.propertyValidator("untrustedArtifactOnDeployment", cdk.validateString)(properties.untrustedArtifactOnDeployment));
      return errors.wrap('supplied properties not correct for "CodeSigningPoliciesProperty"');
    }
    function cfnCodeSigningConfigCodeSigningPoliciesPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnCodeSigningConfig_CodeSigningPoliciesPropertyValidator(properties).assertSuccess();
      return {
        UntrustedArtifactOnDeployment: cdk.stringToCloudFormation(properties.untrustedArtifactOnDeployment)
      };
    }
    function CfnCodeSigningConfigCodeSigningPoliciesPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("untrustedArtifactOnDeployment", "UntrustedArtifactOnDeployment", cfn_parse.FromCloudFormation.getString(properties.UntrustedArtifactOnDeployment));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEventInvokeConfigPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("destinationConfig", CfnEventInvokeConfig_DestinationConfigPropertyValidator)(properties.destinationConfig));
      errors.collect(cdk.propertyValidator("functionName", cdk.requiredValidator)(properties.functionName));
      errors.collect(cdk.propertyValidator("functionName", cdk.validateString)(properties.functionName));
      errors.collect(cdk.propertyValidator("maximumEventAgeInSeconds", cdk.validateNumber)(properties.maximumEventAgeInSeconds));
      errors.collect(cdk.propertyValidator("maximumRetryAttempts", cdk.validateNumber)(properties.maximumRetryAttempts));
      errors.collect(cdk.propertyValidator("qualifier", cdk.requiredValidator)(properties.qualifier));
      errors.collect(cdk.propertyValidator("qualifier", cdk.validateString)(properties.qualifier));
      return errors.wrap('supplied properties not correct for "CfnEventInvokeConfigProps"');
    }
    function cfnEventInvokeConfigPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEventInvokeConfigPropsValidator(properties).assertSuccess();
      return {
        FunctionName: cdk.stringToCloudFormation(properties.functionName),
        Qualifier: cdk.stringToCloudFormation(properties.qualifier),
        DestinationConfig: cfnEventInvokeConfigDestinationConfigPropertyToCloudFormation(properties.destinationConfig),
        MaximumEventAgeInSeconds: cdk.numberToCloudFormation(properties.maximumEventAgeInSeconds),
        MaximumRetryAttempts: cdk.numberToCloudFormation(properties.maximumRetryAttempts)
      };
    }
    function CfnEventInvokeConfigPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("functionName", "FunctionName", cfn_parse.FromCloudFormation.getString(properties.FunctionName));
      ret.addPropertyResult("qualifier", "Qualifier", cfn_parse.FromCloudFormation.getString(properties.Qualifier));
      ret.addPropertyResult("destinationConfig", "DestinationConfig", properties.DestinationConfig != null ? CfnEventInvokeConfigDestinationConfigPropertyFromCloudFormation(properties.DestinationConfig) : void 0);
      ret.addPropertyResult("maximumEventAgeInSeconds", "MaximumEventAgeInSeconds", properties.MaximumEventAgeInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaximumEventAgeInSeconds) : void 0);
      ret.addPropertyResult("maximumRetryAttempts", "MaximumRetryAttempts", properties.MaximumRetryAttempts != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaximumRetryAttempts) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnEventInvokeConfig = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnEventInvokeConfig.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "functionName", this);
        cdk.requireProperty(props, "qualifier", this);
        this.functionName = props.functionName;
        this.qualifier = props.qualifier;
        this.destinationConfig = props.destinationConfig;
        this.maximumEventAgeInSeconds = props.maximumEventAgeInSeconds;
        this.maximumRetryAttempts = props.maximumRetryAttempts;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnEventInvokeConfigPropsFromCloudFormation(resourceProperties);
        const ret = new CfnEventInvokeConfig(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnEventInvokeConfig.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          functionName: this.functionName,
          qualifier: this.qualifier,
          destinationConfig: this.destinationConfig,
          maximumEventAgeInSeconds: this.maximumEventAgeInSeconds,
          maximumRetryAttempts: this.maximumRetryAttempts
        };
      }
      renderProperties(props) {
        return cfnEventInvokeConfigPropsToCloudFormation(props);
      }
    };
    exports2.CfnEventInvokeConfig = CfnEventInvokeConfig;
    _c = JSII_RTTI_SYMBOL_1;
    CfnEventInvokeConfig[_c] = { fqn: "@aws-cdk/aws-lambda.CfnEventInvokeConfig", version: "1.132.0" };
    CfnEventInvokeConfig.CFN_RESOURCE_TYPE_NAME = "AWS::Lambda::EventInvokeConfig";
    function CfnEventInvokeConfig_DestinationConfigPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("onFailure", CfnEventInvokeConfig_OnFailurePropertyValidator)(properties.onFailure));
      errors.collect(cdk.propertyValidator("onSuccess", CfnEventInvokeConfig_OnSuccessPropertyValidator)(properties.onSuccess));
      return errors.wrap('supplied properties not correct for "DestinationConfigProperty"');
    }
    function cfnEventInvokeConfigDestinationConfigPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEventInvokeConfig_DestinationConfigPropertyValidator(properties).assertSuccess();
      return {
        OnFailure: cfnEventInvokeConfigOnFailurePropertyToCloudFormation(properties.onFailure),
        OnSuccess: cfnEventInvokeConfigOnSuccessPropertyToCloudFormation(properties.onSuccess)
      };
    }
    function CfnEventInvokeConfigDestinationConfigPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("onFailure", "OnFailure", properties.OnFailure != null ? CfnEventInvokeConfigOnFailurePropertyFromCloudFormation(properties.OnFailure) : void 0);
      ret.addPropertyResult("onSuccess", "OnSuccess", properties.OnSuccess != null ? CfnEventInvokeConfigOnSuccessPropertyFromCloudFormation(properties.OnSuccess) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEventInvokeConfig_OnFailurePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("destination", cdk.requiredValidator)(properties.destination));
      errors.collect(cdk.propertyValidator("destination", cdk.validateString)(properties.destination));
      return errors.wrap('supplied properties not correct for "OnFailureProperty"');
    }
    function cfnEventInvokeConfigOnFailurePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEventInvokeConfig_OnFailurePropertyValidator(properties).assertSuccess();
      return {
        Destination: cdk.stringToCloudFormation(properties.destination)
      };
    }
    function CfnEventInvokeConfigOnFailurePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("destination", "Destination", cfn_parse.FromCloudFormation.getString(properties.Destination));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEventInvokeConfig_OnSuccessPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("destination", cdk.requiredValidator)(properties.destination));
      errors.collect(cdk.propertyValidator("destination", cdk.validateString)(properties.destination));
      return errors.wrap('supplied properties not correct for "OnSuccessProperty"');
    }
    function cfnEventInvokeConfigOnSuccessPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEventInvokeConfig_OnSuccessPropertyValidator(properties).assertSuccess();
      return {
        Destination: cdk.stringToCloudFormation(properties.destination)
      };
    }
    function CfnEventInvokeConfigOnSuccessPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("destination", "Destination", cfn_parse.FromCloudFormation.getString(properties.Destination));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEventSourceMappingPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("batchSize", cdk.validateNumber)(properties.batchSize));
      errors.collect(cdk.propertyValidator("bisectBatchOnFunctionError", cdk.validateBoolean)(properties.bisectBatchOnFunctionError));
      errors.collect(cdk.propertyValidator("destinationConfig", CfnEventSourceMapping_DestinationConfigPropertyValidator)(properties.destinationConfig));
      errors.collect(cdk.propertyValidator("enabled", cdk.validateBoolean)(properties.enabled));
      errors.collect(cdk.propertyValidator("eventSourceArn", cdk.validateString)(properties.eventSourceArn));
      errors.collect(cdk.propertyValidator("functionName", cdk.requiredValidator)(properties.functionName));
      errors.collect(cdk.propertyValidator("functionName", cdk.validateString)(properties.functionName));
      errors.collect(cdk.propertyValidator("functionResponseTypes", cdk.listValidator(cdk.validateString))(properties.functionResponseTypes));
      errors.collect(cdk.propertyValidator("maximumBatchingWindowInSeconds", cdk.validateNumber)(properties.maximumBatchingWindowInSeconds));
      errors.collect(cdk.propertyValidator("maximumRecordAgeInSeconds", cdk.validateNumber)(properties.maximumRecordAgeInSeconds));
      errors.collect(cdk.propertyValidator("maximumRetryAttempts", cdk.validateNumber)(properties.maximumRetryAttempts));
      errors.collect(cdk.propertyValidator("parallelizationFactor", cdk.validateNumber)(properties.parallelizationFactor));
      errors.collect(cdk.propertyValidator("queues", cdk.listValidator(cdk.validateString))(properties.queues));
      errors.collect(cdk.propertyValidator("selfManagedEventSource", CfnEventSourceMapping_SelfManagedEventSourcePropertyValidator)(properties.selfManagedEventSource));
      errors.collect(cdk.propertyValidator("sourceAccessConfigurations", cdk.listValidator(CfnEventSourceMapping_SourceAccessConfigurationPropertyValidator))(properties.sourceAccessConfigurations));
      errors.collect(cdk.propertyValidator("startingPosition", cdk.validateString)(properties.startingPosition));
      errors.collect(cdk.propertyValidator("startingPositionTimestamp", cdk.validateNumber)(properties.startingPositionTimestamp));
      errors.collect(cdk.propertyValidator("topics", cdk.listValidator(cdk.validateString))(properties.topics));
      errors.collect(cdk.propertyValidator("tumblingWindowInSeconds", cdk.validateNumber)(properties.tumblingWindowInSeconds));
      return errors.wrap('supplied properties not correct for "CfnEventSourceMappingProps"');
    }
    function cfnEventSourceMappingPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEventSourceMappingPropsValidator(properties).assertSuccess();
      return {
        FunctionName: cdk.stringToCloudFormation(properties.functionName),
        BatchSize: cdk.numberToCloudFormation(properties.batchSize),
        BisectBatchOnFunctionError: cdk.booleanToCloudFormation(properties.bisectBatchOnFunctionError),
        DestinationConfig: cfnEventSourceMappingDestinationConfigPropertyToCloudFormation(properties.destinationConfig),
        Enabled: cdk.booleanToCloudFormation(properties.enabled),
        EventSourceArn: cdk.stringToCloudFormation(properties.eventSourceArn),
        FunctionResponseTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.functionResponseTypes),
        MaximumBatchingWindowInSeconds: cdk.numberToCloudFormation(properties.maximumBatchingWindowInSeconds),
        MaximumRecordAgeInSeconds: cdk.numberToCloudFormation(properties.maximumRecordAgeInSeconds),
        MaximumRetryAttempts: cdk.numberToCloudFormation(properties.maximumRetryAttempts),
        ParallelizationFactor: cdk.numberToCloudFormation(properties.parallelizationFactor),
        Queues: cdk.listMapper(cdk.stringToCloudFormation)(properties.queues),
        SelfManagedEventSource: cfnEventSourceMappingSelfManagedEventSourcePropertyToCloudFormation(properties.selfManagedEventSource),
        SourceAccessConfigurations: cdk.listMapper(cfnEventSourceMappingSourceAccessConfigurationPropertyToCloudFormation)(properties.sourceAccessConfigurations),
        StartingPosition: cdk.stringToCloudFormation(properties.startingPosition),
        StartingPositionTimestamp: cdk.numberToCloudFormation(properties.startingPositionTimestamp),
        Topics: cdk.listMapper(cdk.stringToCloudFormation)(properties.topics),
        TumblingWindowInSeconds: cdk.numberToCloudFormation(properties.tumblingWindowInSeconds)
      };
    }
    function CfnEventSourceMappingPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("functionName", "FunctionName", cfn_parse.FromCloudFormation.getString(properties.FunctionName));
      ret.addPropertyResult("batchSize", "BatchSize", properties.BatchSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.BatchSize) : void 0);
      ret.addPropertyResult("bisectBatchOnFunctionError", "BisectBatchOnFunctionError", properties.BisectBatchOnFunctionError != null ? cfn_parse.FromCloudFormation.getBoolean(properties.BisectBatchOnFunctionError) : void 0);
      ret.addPropertyResult("destinationConfig", "DestinationConfig", properties.DestinationConfig != null ? CfnEventSourceMappingDestinationConfigPropertyFromCloudFormation(properties.DestinationConfig) : void 0);
      ret.addPropertyResult("enabled", "Enabled", properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : void 0);
      ret.addPropertyResult("eventSourceArn", "EventSourceArn", properties.EventSourceArn != null ? cfn_parse.FromCloudFormation.getString(properties.EventSourceArn) : void 0);
      ret.addPropertyResult("functionResponseTypes", "FunctionResponseTypes", properties.FunctionResponseTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.FunctionResponseTypes) : void 0);
      ret.addPropertyResult("maximumBatchingWindowInSeconds", "MaximumBatchingWindowInSeconds", properties.MaximumBatchingWindowInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaximumBatchingWindowInSeconds) : void 0);
      ret.addPropertyResult("maximumRecordAgeInSeconds", "MaximumRecordAgeInSeconds", properties.MaximumRecordAgeInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaximumRecordAgeInSeconds) : void 0);
      ret.addPropertyResult("maximumRetryAttempts", "MaximumRetryAttempts", properties.MaximumRetryAttempts != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaximumRetryAttempts) : void 0);
      ret.addPropertyResult("parallelizationFactor", "ParallelizationFactor", properties.ParallelizationFactor != null ? cfn_parse.FromCloudFormation.getNumber(properties.ParallelizationFactor) : void 0);
      ret.addPropertyResult("queues", "Queues", properties.Queues != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Queues) : void 0);
      ret.addPropertyResult("selfManagedEventSource", "SelfManagedEventSource", properties.SelfManagedEventSource != null ? CfnEventSourceMappingSelfManagedEventSourcePropertyFromCloudFormation(properties.SelfManagedEventSource) : void 0);
      ret.addPropertyResult("sourceAccessConfigurations", "SourceAccessConfigurations", properties.SourceAccessConfigurations != null ? cfn_parse.FromCloudFormation.getArray(CfnEventSourceMappingSourceAccessConfigurationPropertyFromCloudFormation)(properties.SourceAccessConfigurations) : void 0);
      ret.addPropertyResult("startingPosition", "StartingPosition", properties.StartingPosition != null ? cfn_parse.FromCloudFormation.getString(properties.StartingPosition) : void 0);
      ret.addPropertyResult("startingPositionTimestamp", "StartingPositionTimestamp", properties.StartingPositionTimestamp != null ? cfn_parse.FromCloudFormation.getNumber(properties.StartingPositionTimestamp) : void 0);
      ret.addPropertyResult("topics", "Topics", properties.Topics != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Topics) : void 0);
      ret.addPropertyResult("tumblingWindowInSeconds", "TumblingWindowInSeconds", properties.TumblingWindowInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.TumblingWindowInSeconds) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnEventSourceMapping = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnEventSourceMapping.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "functionName", this);
        this.attrId = cdk.Token.asString(this.getAtt("Id"));
        this.functionName = props.functionName;
        this.batchSize = props.batchSize;
        this.bisectBatchOnFunctionError = props.bisectBatchOnFunctionError;
        this.destinationConfig = props.destinationConfig;
        this.enabled = props.enabled;
        this.eventSourceArn = props.eventSourceArn;
        this.functionResponseTypes = props.functionResponseTypes;
        this.maximumBatchingWindowInSeconds = props.maximumBatchingWindowInSeconds;
        this.maximumRecordAgeInSeconds = props.maximumRecordAgeInSeconds;
        this.maximumRetryAttempts = props.maximumRetryAttempts;
        this.parallelizationFactor = props.parallelizationFactor;
        this.queues = props.queues;
        this.selfManagedEventSource = props.selfManagedEventSource;
        this.sourceAccessConfigurations = props.sourceAccessConfigurations;
        this.startingPosition = props.startingPosition;
        this.startingPositionTimestamp = props.startingPositionTimestamp;
        this.topics = props.topics;
        this.tumblingWindowInSeconds = props.tumblingWindowInSeconds;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnEventSourceMappingPropsFromCloudFormation(resourceProperties);
        const ret = new CfnEventSourceMapping(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnEventSourceMapping.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          functionName: this.functionName,
          batchSize: this.batchSize,
          bisectBatchOnFunctionError: this.bisectBatchOnFunctionError,
          destinationConfig: this.destinationConfig,
          enabled: this.enabled,
          eventSourceArn: this.eventSourceArn,
          functionResponseTypes: this.functionResponseTypes,
          maximumBatchingWindowInSeconds: this.maximumBatchingWindowInSeconds,
          maximumRecordAgeInSeconds: this.maximumRecordAgeInSeconds,
          maximumRetryAttempts: this.maximumRetryAttempts,
          parallelizationFactor: this.parallelizationFactor,
          queues: this.queues,
          selfManagedEventSource: this.selfManagedEventSource,
          sourceAccessConfigurations: this.sourceAccessConfigurations,
          startingPosition: this.startingPosition,
          startingPositionTimestamp: this.startingPositionTimestamp,
          topics: this.topics,
          tumblingWindowInSeconds: this.tumblingWindowInSeconds
        };
      }
      renderProperties(props) {
        return cfnEventSourceMappingPropsToCloudFormation(props);
      }
    };
    exports2.CfnEventSourceMapping = CfnEventSourceMapping;
    _d = JSII_RTTI_SYMBOL_1;
    CfnEventSourceMapping[_d] = { fqn: "@aws-cdk/aws-lambda.CfnEventSourceMapping", version: "1.132.0" };
    CfnEventSourceMapping.CFN_RESOURCE_TYPE_NAME = "AWS::Lambda::EventSourceMapping";
    function CfnEventSourceMapping_DestinationConfigPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("onFailure", CfnEventSourceMapping_OnFailurePropertyValidator)(properties.onFailure));
      return errors.wrap('supplied properties not correct for "DestinationConfigProperty"');
    }
    function cfnEventSourceMappingDestinationConfigPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEventSourceMapping_DestinationConfigPropertyValidator(properties).assertSuccess();
      return {
        OnFailure: cfnEventSourceMappingOnFailurePropertyToCloudFormation(properties.onFailure)
      };
    }
    function CfnEventSourceMappingDestinationConfigPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("onFailure", "OnFailure", properties.OnFailure != null ? CfnEventSourceMappingOnFailurePropertyFromCloudFormation(properties.OnFailure) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEventSourceMapping_EndpointsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("kafkaBootstrapServers", cdk.listValidator(cdk.validateString))(properties.kafkaBootstrapServers));
      return errors.wrap('supplied properties not correct for "EndpointsProperty"');
    }
    function cfnEventSourceMappingEndpointsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEventSourceMapping_EndpointsPropertyValidator(properties).assertSuccess();
      return {
        KafkaBootstrapServers: cdk.listMapper(cdk.stringToCloudFormation)(properties.kafkaBootstrapServers)
      };
    }
    function CfnEventSourceMappingEndpointsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("kafkaBootstrapServers", "KafkaBootstrapServers", properties.KafkaBootstrapServers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.KafkaBootstrapServers) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEventSourceMapping_OnFailurePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("destination", cdk.validateString)(properties.destination));
      return errors.wrap('supplied properties not correct for "OnFailureProperty"');
    }
    function cfnEventSourceMappingOnFailurePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEventSourceMapping_OnFailurePropertyValidator(properties).assertSuccess();
      return {
        Destination: cdk.stringToCloudFormation(properties.destination)
      };
    }
    function CfnEventSourceMappingOnFailurePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("destination", "Destination", properties.Destination != null ? cfn_parse.FromCloudFormation.getString(properties.Destination) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEventSourceMapping_SelfManagedEventSourcePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("endpoints", CfnEventSourceMapping_EndpointsPropertyValidator)(properties.endpoints));
      return errors.wrap('supplied properties not correct for "SelfManagedEventSourceProperty"');
    }
    function cfnEventSourceMappingSelfManagedEventSourcePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEventSourceMapping_SelfManagedEventSourcePropertyValidator(properties).assertSuccess();
      return {
        Endpoints: cfnEventSourceMappingEndpointsPropertyToCloudFormation(properties.endpoints)
      };
    }
    function CfnEventSourceMappingSelfManagedEventSourcePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("endpoints", "Endpoints", properties.Endpoints != null ? CfnEventSourceMappingEndpointsPropertyFromCloudFormation(properties.Endpoints) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEventSourceMapping_SourceAccessConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("type", cdk.validateString)(properties.type));
      errors.collect(cdk.propertyValidator("uri", cdk.validateString)(properties.uri));
      return errors.wrap('supplied properties not correct for "SourceAccessConfigurationProperty"');
    }
    function cfnEventSourceMappingSourceAccessConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEventSourceMapping_SourceAccessConfigurationPropertyValidator(properties).assertSuccess();
      return {
        Type: cdk.stringToCloudFormation(properties.type),
        URI: cdk.stringToCloudFormation(properties.uri)
      };
    }
    function CfnEventSourceMappingSourceAccessConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("type", "Type", properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : void 0);
      ret.addPropertyResult("uri", "URI", properties.URI != null ? cfn_parse.FromCloudFormation.getString(properties.URI) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnFunctionPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("architectures", cdk.listValidator(cdk.validateString))(properties.architectures));
      errors.collect(cdk.propertyValidator("code", cdk.requiredValidator)(properties.code));
      errors.collect(cdk.propertyValidator("code", CfnFunction_CodePropertyValidator)(properties.code));
      errors.collect(cdk.propertyValidator("codeSigningConfigArn", cdk.validateString)(properties.codeSigningConfigArn));
      errors.collect(cdk.propertyValidator("deadLetterConfig", CfnFunction_DeadLetterConfigPropertyValidator)(properties.deadLetterConfig));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("environment", CfnFunction_EnvironmentPropertyValidator)(properties.environment));
      errors.collect(cdk.propertyValidator("fileSystemConfigs", cdk.listValidator(CfnFunction_FileSystemConfigPropertyValidator))(properties.fileSystemConfigs));
      errors.collect(cdk.propertyValidator("functionName", cdk.validateString)(properties.functionName));
      errors.collect(cdk.propertyValidator("handler", cdk.validateString)(properties.handler));
      errors.collect(cdk.propertyValidator("imageConfig", CfnFunction_ImageConfigPropertyValidator)(properties.imageConfig));
      errors.collect(cdk.propertyValidator("kmsKeyArn", cdk.validateString)(properties.kmsKeyArn));
      errors.collect(cdk.propertyValidator("layers", cdk.listValidator(cdk.validateString))(properties.layers));
      errors.collect(cdk.propertyValidator("memorySize", cdk.validateNumber)(properties.memorySize));
      errors.collect(cdk.propertyValidator("packageType", cdk.validateString)(properties.packageType));
      errors.collect(cdk.propertyValidator("reservedConcurrentExecutions", cdk.validateNumber)(properties.reservedConcurrentExecutions));
      errors.collect(cdk.propertyValidator("role", cdk.requiredValidator)(properties.role));
      errors.collect(cdk.propertyValidator("role", cdk.validateString)(properties.role));
      errors.collect(cdk.propertyValidator("runtime", cdk.validateString)(properties.runtime));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("timeout", cdk.validateNumber)(properties.timeout));
      errors.collect(cdk.propertyValidator("tracingConfig", CfnFunction_TracingConfigPropertyValidator)(properties.tracingConfig));
      errors.collect(cdk.propertyValidator("vpcConfig", CfnFunction_VpcConfigPropertyValidator)(properties.vpcConfig));
      return errors.wrap('supplied properties not correct for "CfnFunctionProps"');
    }
    function cfnFunctionPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnFunctionPropsValidator(properties).assertSuccess();
      return {
        Code: cfnFunctionCodePropertyToCloudFormation(properties.code),
        Role: cdk.stringToCloudFormation(properties.role),
        Architectures: cdk.listMapper(cdk.stringToCloudFormation)(properties.architectures),
        CodeSigningConfigArn: cdk.stringToCloudFormation(properties.codeSigningConfigArn),
        DeadLetterConfig: cfnFunctionDeadLetterConfigPropertyToCloudFormation(properties.deadLetterConfig),
        Description: cdk.stringToCloudFormation(properties.description),
        Environment: cfnFunctionEnvironmentPropertyToCloudFormation(properties.environment),
        FileSystemConfigs: cdk.listMapper(cfnFunctionFileSystemConfigPropertyToCloudFormation)(properties.fileSystemConfigs),
        FunctionName: cdk.stringToCloudFormation(properties.functionName),
        Handler: cdk.stringToCloudFormation(properties.handler),
        ImageConfig: cfnFunctionImageConfigPropertyToCloudFormation(properties.imageConfig),
        KmsKeyArn: cdk.stringToCloudFormation(properties.kmsKeyArn),
        Layers: cdk.listMapper(cdk.stringToCloudFormation)(properties.layers),
        MemorySize: cdk.numberToCloudFormation(properties.memorySize),
        PackageType: cdk.stringToCloudFormation(properties.packageType),
        ReservedConcurrentExecutions: cdk.numberToCloudFormation(properties.reservedConcurrentExecutions),
        Runtime: cdk.stringToCloudFormation(properties.runtime),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
        Timeout: cdk.numberToCloudFormation(properties.timeout),
        TracingConfig: cfnFunctionTracingConfigPropertyToCloudFormation(properties.tracingConfig),
        VpcConfig: cfnFunctionVpcConfigPropertyToCloudFormation(properties.vpcConfig)
      };
    }
    function CfnFunctionPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("code", "Code", CfnFunctionCodePropertyFromCloudFormation(properties.Code));
      ret.addPropertyResult("role", "Role", cfn_parse.FromCloudFormation.getString(properties.Role));
      ret.addPropertyResult("architectures", "Architectures", properties.Architectures != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Architectures) : void 0);
      ret.addPropertyResult("codeSigningConfigArn", "CodeSigningConfigArn", properties.CodeSigningConfigArn != null ? cfn_parse.FromCloudFormation.getString(properties.CodeSigningConfigArn) : void 0);
      ret.addPropertyResult("deadLetterConfig", "DeadLetterConfig", properties.DeadLetterConfig != null ? CfnFunctionDeadLetterConfigPropertyFromCloudFormation(properties.DeadLetterConfig) : void 0);
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("environment", "Environment", properties.Environment != null ? CfnFunctionEnvironmentPropertyFromCloudFormation(properties.Environment) : void 0);
      ret.addPropertyResult("fileSystemConfigs", "FileSystemConfigs", properties.FileSystemConfigs != null ? cfn_parse.FromCloudFormation.getArray(CfnFunctionFileSystemConfigPropertyFromCloudFormation)(properties.FileSystemConfigs) : void 0);
      ret.addPropertyResult("functionName", "FunctionName", properties.FunctionName != null ? cfn_parse.FromCloudFormation.getString(properties.FunctionName) : void 0);
      ret.addPropertyResult("handler", "Handler", properties.Handler != null ? cfn_parse.FromCloudFormation.getString(properties.Handler) : void 0);
      ret.addPropertyResult("imageConfig", "ImageConfig", properties.ImageConfig != null ? CfnFunctionImageConfigPropertyFromCloudFormation(properties.ImageConfig) : void 0);
      ret.addPropertyResult("kmsKeyArn", "KmsKeyArn", properties.KmsKeyArn != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyArn) : void 0);
      ret.addPropertyResult("layers", "Layers", properties.Layers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Layers) : void 0);
      ret.addPropertyResult("memorySize", "MemorySize", properties.MemorySize != null ? cfn_parse.FromCloudFormation.getNumber(properties.MemorySize) : void 0);
      ret.addPropertyResult("packageType", "PackageType", properties.PackageType != null ? cfn_parse.FromCloudFormation.getString(properties.PackageType) : void 0);
      ret.addPropertyResult("reservedConcurrentExecutions", "ReservedConcurrentExecutions", properties.ReservedConcurrentExecutions != null ? cfn_parse.FromCloudFormation.getNumber(properties.ReservedConcurrentExecutions) : void 0);
      ret.addPropertyResult("runtime", "Runtime", properties.Runtime != null ? cfn_parse.FromCloudFormation.getString(properties.Runtime) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addPropertyResult("timeout", "Timeout", properties.Timeout != null ? cfn_parse.FromCloudFormation.getNumber(properties.Timeout) : void 0);
      ret.addPropertyResult("tracingConfig", "TracingConfig", properties.TracingConfig != null ? CfnFunctionTracingConfigPropertyFromCloudFormation(properties.TracingConfig) : void 0);
      ret.addPropertyResult("vpcConfig", "VpcConfig", properties.VpcConfig != null ? CfnFunctionVpcConfigPropertyFromCloudFormation(properties.VpcConfig) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnFunction = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnFunction.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "code", this);
        cdk.requireProperty(props, "role", this);
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.code = props.code;
        this.role = props.role;
        this.architectures = props.architectures;
        this.codeSigningConfigArn = props.codeSigningConfigArn;
        this.deadLetterConfig = props.deadLetterConfig;
        this.description = props.description;
        this.environment = props.environment;
        this.fileSystemConfigs = props.fileSystemConfigs;
        this.functionName = props.functionName;
        this.handler = props.handler;
        this.imageConfig = props.imageConfig;
        this.kmsKeyArn = props.kmsKeyArn;
        this.layers = props.layers;
        this.memorySize = props.memorySize;
        this.packageType = props.packageType;
        this.reservedConcurrentExecutions = props.reservedConcurrentExecutions;
        this.runtime = props.runtime;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::Lambda::Function", props.tags, { tagPropertyName: "tags" });
        this.timeout = props.timeout;
        this.tracingConfig = props.tracingConfig;
        this.vpcConfig = props.vpcConfig;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnFunctionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnFunction(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnFunction.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          code: this.code,
          role: this.role,
          architectures: this.architectures,
          codeSigningConfigArn: this.codeSigningConfigArn,
          deadLetterConfig: this.deadLetterConfig,
          description: this.description,
          environment: this.environment,
          fileSystemConfigs: this.fileSystemConfigs,
          functionName: this.functionName,
          handler: this.handler,
          imageConfig: this.imageConfig,
          kmsKeyArn: this.kmsKeyArn,
          layers: this.layers,
          memorySize: this.memorySize,
          packageType: this.packageType,
          reservedConcurrentExecutions: this.reservedConcurrentExecutions,
          runtime: this.runtime,
          tags: this.tags.renderTags(),
          timeout: this.timeout,
          tracingConfig: this.tracingConfig,
          vpcConfig: this.vpcConfig
        };
      }
      renderProperties(props) {
        return cfnFunctionPropsToCloudFormation(props);
      }
    };
    exports2.CfnFunction = CfnFunction;
    _e = JSII_RTTI_SYMBOL_1;
    CfnFunction[_e] = { fqn: "@aws-cdk/aws-lambda.CfnFunction", version: "1.132.0" };
    CfnFunction.CFN_RESOURCE_TYPE_NAME = "AWS::Lambda::Function";
    function CfnFunction_CodePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("imageUri", cdk.validateString)(properties.imageUri));
      errors.collect(cdk.propertyValidator("s3Bucket", cdk.validateString)(properties.s3Bucket));
      errors.collect(cdk.propertyValidator("s3Key", cdk.validateString)(properties.s3Key));
      errors.collect(cdk.propertyValidator("s3ObjectVersion", cdk.validateString)(properties.s3ObjectVersion));
      errors.collect(cdk.propertyValidator("zipFile", cdk.validateString)(properties.zipFile));
      return errors.wrap('supplied properties not correct for "CodeProperty"');
    }
    function cfnFunctionCodePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnFunction_CodePropertyValidator(properties).assertSuccess();
      return {
        ImageUri: cdk.stringToCloudFormation(properties.imageUri),
        S3Bucket: cdk.stringToCloudFormation(properties.s3Bucket),
        S3Key: cdk.stringToCloudFormation(properties.s3Key),
        S3ObjectVersion: cdk.stringToCloudFormation(properties.s3ObjectVersion),
        ZipFile: cdk.stringToCloudFormation(properties.zipFile)
      };
    }
    function CfnFunctionCodePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("imageUri", "ImageUri", properties.ImageUri != null ? cfn_parse.FromCloudFormation.getString(properties.ImageUri) : void 0);
      ret.addPropertyResult("s3Bucket", "S3Bucket", properties.S3Bucket != null ? cfn_parse.FromCloudFormation.getString(properties.S3Bucket) : void 0);
      ret.addPropertyResult("s3Key", "S3Key", properties.S3Key != null ? cfn_parse.FromCloudFormation.getString(properties.S3Key) : void 0);
      ret.addPropertyResult("s3ObjectVersion", "S3ObjectVersion", properties.S3ObjectVersion != null ? cfn_parse.FromCloudFormation.getString(properties.S3ObjectVersion) : void 0);
      ret.addPropertyResult("zipFile", "ZipFile", properties.ZipFile != null ? cfn_parse.FromCloudFormation.getString(properties.ZipFile) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnFunction_DeadLetterConfigPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("targetArn", cdk.validateString)(properties.targetArn));
      return errors.wrap('supplied properties not correct for "DeadLetterConfigProperty"');
    }
    function cfnFunctionDeadLetterConfigPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnFunction_DeadLetterConfigPropertyValidator(properties).assertSuccess();
      return {
        TargetArn: cdk.stringToCloudFormation(properties.targetArn)
      };
    }
    function CfnFunctionDeadLetterConfigPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("targetArn", "TargetArn", properties.TargetArn != null ? cfn_parse.FromCloudFormation.getString(properties.TargetArn) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnFunction_EnvironmentPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("variables", cdk.hashValidator(cdk.validateString))(properties.variables));
      return errors.wrap('supplied properties not correct for "EnvironmentProperty"');
    }
    function cfnFunctionEnvironmentPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnFunction_EnvironmentPropertyValidator(properties).assertSuccess();
      return {
        Variables: cdk.hashMapper(cdk.stringToCloudFormation)(properties.variables)
      };
    }
    function CfnFunctionEnvironmentPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("variables", "Variables", properties.Variables != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Variables) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnFunction_FileSystemConfigPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("arn", cdk.requiredValidator)(properties.arn));
      errors.collect(cdk.propertyValidator("arn", cdk.validateString)(properties.arn));
      errors.collect(cdk.propertyValidator("localMountPath", cdk.requiredValidator)(properties.localMountPath));
      errors.collect(cdk.propertyValidator("localMountPath", cdk.validateString)(properties.localMountPath));
      return errors.wrap('supplied properties not correct for "FileSystemConfigProperty"');
    }
    function cfnFunctionFileSystemConfigPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnFunction_FileSystemConfigPropertyValidator(properties).assertSuccess();
      return {
        Arn: cdk.stringToCloudFormation(properties.arn),
        LocalMountPath: cdk.stringToCloudFormation(properties.localMountPath)
      };
    }
    function CfnFunctionFileSystemConfigPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("arn", "Arn", cfn_parse.FromCloudFormation.getString(properties.Arn));
      ret.addPropertyResult("localMountPath", "LocalMountPath", cfn_parse.FromCloudFormation.getString(properties.LocalMountPath));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnFunction_ImageConfigPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("command", cdk.listValidator(cdk.validateString))(properties.command));
      errors.collect(cdk.propertyValidator("entryPoint", cdk.listValidator(cdk.validateString))(properties.entryPoint));
      errors.collect(cdk.propertyValidator("workingDirectory", cdk.validateString)(properties.workingDirectory));
      return errors.wrap('supplied properties not correct for "ImageConfigProperty"');
    }
    function cfnFunctionImageConfigPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnFunction_ImageConfigPropertyValidator(properties).assertSuccess();
      return {
        Command: cdk.listMapper(cdk.stringToCloudFormation)(properties.command),
        EntryPoint: cdk.listMapper(cdk.stringToCloudFormation)(properties.entryPoint),
        WorkingDirectory: cdk.stringToCloudFormation(properties.workingDirectory)
      };
    }
    function CfnFunctionImageConfigPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("command", "Command", properties.Command != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Command) : void 0);
      ret.addPropertyResult("entryPoint", "EntryPoint", properties.EntryPoint != null ? cfn_parse.FromCloudFormation.getStringArray(properties.EntryPoint) : void 0);
      ret.addPropertyResult("workingDirectory", "WorkingDirectory", properties.WorkingDirectory != null ? cfn_parse.FromCloudFormation.getString(properties.WorkingDirectory) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnFunction_TracingConfigPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("mode", cdk.validateString)(properties.mode));
      return errors.wrap('supplied properties not correct for "TracingConfigProperty"');
    }
    function cfnFunctionTracingConfigPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnFunction_TracingConfigPropertyValidator(properties).assertSuccess();
      return {
        Mode: cdk.stringToCloudFormation(properties.mode)
      };
    }
    function CfnFunctionTracingConfigPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("mode", "Mode", properties.Mode != null ? cfn_parse.FromCloudFormation.getString(properties.Mode) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnFunction_VpcConfigPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("securityGroupIds", cdk.listValidator(cdk.validateString))(properties.securityGroupIds));
      errors.collect(cdk.propertyValidator("subnetIds", cdk.listValidator(cdk.validateString))(properties.subnetIds));
      return errors.wrap('supplied properties not correct for "VpcConfigProperty"');
    }
    function cfnFunctionVpcConfigPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnFunction_VpcConfigPropertyValidator(properties).assertSuccess();
      return {
        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),
        SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds)
      };
    }
    function CfnFunctionVpcConfigPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("securityGroupIds", "SecurityGroupIds", properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds) : void 0);
      ret.addPropertyResult("subnetIds", "SubnetIds", properties.SubnetIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnLayerVersionPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("compatibleArchitectures", cdk.listValidator(cdk.validateString))(properties.compatibleArchitectures));
      errors.collect(cdk.propertyValidator("compatibleRuntimes", cdk.listValidator(cdk.validateString))(properties.compatibleRuntimes));
      errors.collect(cdk.propertyValidator("content", cdk.requiredValidator)(properties.content));
      errors.collect(cdk.propertyValidator("content", CfnLayerVersion_ContentPropertyValidator)(properties.content));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("layerName", cdk.validateString)(properties.layerName));
      errors.collect(cdk.propertyValidator("licenseInfo", cdk.validateString)(properties.licenseInfo));
      return errors.wrap('supplied properties not correct for "CfnLayerVersionProps"');
    }
    function cfnLayerVersionPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLayerVersionPropsValidator(properties).assertSuccess();
      return {
        Content: cfnLayerVersionContentPropertyToCloudFormation(properties.content),
        CompatibleArchitectures: cdk.listMapper(cdk.stringToCloudFormation)(properties.compatibleArchitectures),
        CompatibleRuntimes: cdk.listMapper(cdk.stringToCloudFormation)(properties.compatibleRuntimes),
        Description: cdk.stringToCloudFormation(properties.description),
        LayerName: cdk.stringToCloudFormation(properties.layerName),
        LicenseInfo: cdk.stringToCloudFormation(properties.licenseInfo)
      };
    }
    function CfnLayerVersionPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("content", "Content", CfnLayerVersionContentPropertyFromCloudFormation(properties.Content));
      ret.addPropertyResult("compatibleArchitectures", "CompatibleArchitectures", properties.CompatibleArchitectures != null ? cfn_parse.FromCloudFormation.getStringArray(properties.CompatibleArchitectures) : void 0);
      ret.addPropertyResult("compatibleRuntimes", "CompatibleRuntimes", properties.CompatibleRuntimes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.CompatibleRuntimes) : void 0);
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("layerName", "LayerName", properties.LayerName != null ? cfn_parse.FromCloudFormation.getString(properties.LayerName) : void 0);
      ret.addPropertyResult("licenseInfo", "LicenseInfo", properties.LicenseInfo != null ? cfn_parse.FromCloudFormation.getString(properties.LicenseInfo) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnLayerVersion = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnLayerVersion.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "content", this);
        this.content = props.content;
        this.compatibleArchitectures = props.compatibleArchitectures;
        this.compatibleRuntimes = props.compatibleRuntimes;
        this.description = props.description;
        this.layerName = props.layerName;
        this.licenseInfo = props.licenseInfo;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnLayerVersionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnLayerVersion(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnLayerVersion.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          content: this.content,
          compatibleArchitectures: this.compatibleArchitectures,
          compatibleRuntimes: this.compatibleRuntimes,
          description: this.description,
          layerName: this.layerName,
          licenseInfo: this.licenseInfo
        };
      }
      renderProperties(props) {
        return cfnLayerVersionPropsToCloudFormation(props);
      }
    };
    exports2.CfnLayerVersion = CfnLayerVersion;
    _f = JSII_RTTI_SYMBOL_1;
    CfnLayerVersion[_f] = { fqn: "@aws-cdk/aws-lambda.CfnLayerVersion", version: "1.132.0" };
    CfnLayerVersion.CFN_RESOURCE_TYPE_NAME = "AWS::Lambda::LayerVersion";
    function CfnLayerVersion_ContentPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("s3Bucket", cdk.requiredValidator)(properties.s3Bucket));
      errors.collect(cdk.propertyValidator("s3Bucket", cdk.validateString)(properties.s3Bucket));
      errors.collect(cdk.propertyValidator("s3Key", cdk.requiredValidator)(properties.s3Key));
      errors.collect(cdk.propertyValidator("s3Key", cdk.validateString)(properties.s3Key));
      errors.collect(cdk.propertyValidator("s3ObjectVersion", cdk.validateString)(properties.s3ObjectVersion));
      return errors.wrap('supplied properties not correct for "ContentProperty"');
    }
    function cfnLayerVersionContentPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLayerVersion_ContentPropertyValidator(properties).assertSuccess();
      return {
        S3Bucket: cdk.stringToCloudFormation(properties.s3Bucket),
        S3Key: cdk.stringToCloudFormation(properties.s3Key),
        S3ObjectVersion: cdk.stringToCloudFormation(properties.s3ObjectVersion)
      };
    }
    function CfnLayerVersionContentPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("s3Bucket", "S3Bucket", cfn_parse.FromCloudFormation.getString(properties.S3Bucket));
      ret.addPropertyResult("s3Key", "S3Key", cfn_parse.FromCloudFormation.getString(properties.S3Key));
      ret.addPropertyResult("s3ObjectVersion", "S3ObjectVersion", properties.S3ObjectVersion != null ? cfn_parse.FromCloudFormation.getString(properties.S3ObjectVersion) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnLayerVersionPermissionPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("action", cdk.requiredValidator)(properties.action));
      errors.collect(cdk.propertyValidator("action", cdk.validateString)(properties.action));
      errors.collect(cdk.propertyValidator("layerVersionArn", cdk.requiredValidator)(properties.layerVersionArn));
      errors.collect(cdk.propertyValidator("layerVersionArn", cdk.validateString)(properties.layerVersionArn));
      errors.collect(cdk.propertyValidator("organizationId", cdk.validateString)(properties.organizationId));
      errors.collect(cdk.propertyValidator("principal", cdk.requiredValidator)(properties.principal));
      errors.collect(cdk.propertyValidator("principal", cdk.validateString)(properties.principal));
      return errors.wrap('supplied properties not correct for "CfnLayerVersionPermissionProps"');
    }
    function cfnLayerVersionPermissionPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLayerVersionPermissionPropsValidator(properties).assertSuccess();
      return {
        Action: cdk.stringToCloudFormation(properties.action),
        LayerVersionArn: cdk.stringToCloudFormation(properties.layerVersionArn),
        Principal: cdk.stringToCloudFormation(properties.principal),
        OrganizationId: cdk.stringToCloudFormation(properties.organizationId)
      };
    }
    function CfnLayerVersionPermissionPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("action", "Action", cfn_parse.FromCloudFormation.getString(properties.Action));
      ret.addPropertyResult("layerVersionArn", "LayerVersionArn", cfn_parse.FromCloudFormation.getString(properties.LayerVersionArn));
      ret.addPropertyResult("principal", "Principal", cfn_parse.FromCloudFormation.getString(properties.Principal));
      ret.addPropertyResult("organizationId", "OrganizationId", properties.OrganizationId != null ? cfn_parse.FromCloudFormation.getString(properties.OrganizationId) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnLayerVersionPermission = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnLayerVersionPermission.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "action", this);
        cdk.requireProperty(props, "layerVersionArn", this);
        cdk.requireProperty(props, "principal", this);
        this.action = props.action;
        this.layerVersionArn = props.layerVersionArn;
        this.principal = props.principal;
        this.organizationId = props.organizationId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnLayerVersionPermissionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnLayerVersionPermission(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnLayerVersionPermission.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          action: this.action,
          layerVersionArn: this.layerVersionArn,
          principal: this.principal,
          organizationId: this.organizationId
        };
      }
      renderProperties(props) {
        return cfnLayerVersionPermissionPropsToCloudFormation(props);
      }
    };
    exports2.CfnLayerVersionPermission = CfnLayerVersionPermission;
    _g = JSII_RTTI_SYMBOL_1;
    CfnLayerVersionPermission[_g] = { fqn: "@aws-cdk/aws-lambda.CfnLayerVersionPermission", version: "1.132.0" };
    CfnLayerVersionPermission.CFN_RESOURCE_TYPE_NAME = "AWS::Lambda::LayerVersionPermission";
    function CfnPermissionPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("action", cdk.requiredValidator)(properties.action));
      errors.collect(cdk.propertyValidator("action", cdk.validateString)(properties.action));
      errors.collect(cdk.propertyValidator("eventSourceToken", cdk.validateString)(properties.eventSourceToken));
      errors.collect(cdk.propertyValidator("functionName", cdk.requiredValidator)(properties.functionName));
      errors.collect(cdk.propertyValidator("functionName", cdk.validateString)(properties.functionName));
      errors.collect(cdk.propertyValidator("principal", cdk.requiredValidator)(properties.principal));
      errors.collect(cdk.propertyValidator("principal", cdk.validateString)(properties.principal));
      errors.collect(cdk.propertyValidator("sourceAccount", cdk.validateString)(properties.sourceAccount));
      errors.collect(cdk.propertyValidator("sourceArn", cdk.validateString)(properties.sourceArn));
      return errors.wrap('supplied properties not correct for "CfnPermissionProps"');
    }
    function cfnPermissionPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnPermissionPropsValidator(properties).assertSuccess();
      return {
        Action: cdk.stringToCloudFormation(properties.action),
        FunctionName: cdk.stringToCloudFormation(properties.functionName),
        Principal: cdk.stringToCloudFormation(properties.principal),
        EventSourceToken: cdk.stringToCloudFormation(properties.eventSourceToken),
        SourceAccount: cdk.stringToCloudFormation(properties.sourceAccount),
        SourceArn: cdk.stringToCloudFormation(properties.sourceArn)
      };
    }
    function CfnPermissionPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("action", "Action", cfn_parse.FromCloudFormation.getString(properties.Action));
      ret.addPropertyResult("functionName", "FunctionName", cfn_parse.FromCloudFormation.getString(properties.FunctionName));
      ret.addPropertyResult("principal", "Principal", cfn_parse.FromCloudFormation.getString(properties.Principal));
      ret.addPropertyResult("eventSourceToken", "EventSourceToken", properties.EventSourceToken != null ? cfn_parse.FromCloudFormation.getString(properties.EventSourceToken) : void 0);
      ret.addPropertyResult("sourceAccount", "SourceAccount", properties.SourceAccount != null ? cfn_parse.FromCloudFormation.getString(properties.SourceAccount) : void 0);
      ret.addPropertyResult("sourceArn", "SourceArn", properties.SourceArn != null ? cfn_parse.FromCloudFormation.getString(properties.SourceArn) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnPermission = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnPermission.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "action", this);
        cdk.requireProperty(props, "functionName", this);
        cdk.requireProperty(props, "principal", this);
        this.action = props.action;
        this.functionName = props.functionName;
        this.principal = props.principal;
        this.eventSourceToken = props.eventSourceToken;
        this.sourceAccount = props.sourceAccount;
        this.sourceArn = props.sourceArn;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnPermissionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnPermission(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnPermission.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          action: this.action,
          functionName: this.functionName,
          principal: this.principal,
          eventSourceToken: this.eventSourceToken,
          sourceAccount: this.sourceAccount,
          sourceArn: this.sourceArn
        };
      }
      renderProperties(props) {
        return cfnPermissionPropsToCloudFormation(props);
      }
    };
    exports2.CfnPermission = CfnPermission;
    _h = JSII_RTTI_SYMBOL_1;
    CfnPermission[_h] = { fqn: "@aws-cdk/aws-lambda.CfnPermission", version: "1.132.0" };
    CfnPermission.CFN_RESOURCE_TYPE_NAME = "AWS::Lambda::Permission";
    function CfnVersionPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("codeSha256", cdk.validateString)(properties.codeSha256));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("functionName", cdk.requiredValidator)(properties.functionName));
      errors.collect(cdk.propertyValidator("functionName", cdk.validateString)(properties.functionName));
      errors.collect(cdk.propertyValidator("provisionedConcurrencyConfig", CfnVersion_ProvisionedConcurrencyConfigurationPropertyValidator)(properties.provisionedConcurrencyConfig));
      return errors.wrap('supplied properties not correct for "CfnVersionProps"');
    }
    function cfnVersionPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnVersionPropsValidator(properties).assertSuccess();
      return {
        FunctionName: cdk.stringToCloudFormation(properties.functionName),
        CodeSha256: cdk.stringToCloudFormation(properties.codeSha256),
        Description: cdk.stringToCloudFormation(properties.description),
        ProvisionedConcurrencyConfig: cfnVersionProvisionedConcurrencyConfigurationPropertyToCloudFormation(properties.provisionedConcurrencyConfig)
      };
    }
    function CfnVersionPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("functionName", "FunctionName", cfn_parse.FromCloudFormation.getString(properties.FunctionName));
      ret.addPropertyResult("codeSha256", "CodeSha256", properties.CodeSha256 != null ? cfn_parse.FromCloudFormation.getString(properties.CodeSha256) : void 0);
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("provisionedConcurrencyConfig", "ProvisionedConcurrencyConfig", properties.ProvisionedConcurrencyConfig != null ? CfnVersionProvisionedConcurrencyConfigurationPropertyFromCloudFormation(properties.ProvisionedConcurrencyConfig) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnVersion = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnVersion.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "functionName", this);
        this.attrVersion = cdk.Token.asString(this.getAtt("Version"));
        this.functionName = props.functionName;
        this.codeSha256 = props.codeSha256;
        this.description = props.description;
        this.provisionedConcurrencyConfig = props.provisionedConcurrencyConfig;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnVersionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnVersion(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnVersion.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          functionName: this.functionName,
          codeSha256: this.codeSha256,
          description: this.description,
          provisionedConcurrencyConfig: this.provisionedConcurrencyConfig
        };
      }
      renderProperties(props) {
        return cfnVersionPropsToCloudFormation(props);
      }
    };
    exports2.CfnVersion = CfnVersion;
    _j = JSII_RTTI_SYMBOL_1;
    CfnVersion[_j] = { fqn: "@aws-cdk/aws-lambda.CfnVersion", version: "1.132.0" };
    CfnVersion.CFN_RESOURCE_TYPE_NAME = "AWS::Lambda::Version";
    function CfnVersion_ProvisionedConcurrencyConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("provisionedConcurrentExecutions", cdk.requiredValidator)(properties.provisionedConcurrentExecutions));
      errors.collect(cdk.propertyValidator("provisionedConcurrentExecutions", cdk.validateNumber)(properties.provisionedConcurrentExecutions));
      return errors.wrap('supplied properties not correct for "ProvisionedConcurrencyConfigurationProperty"');
    }
    function cfnVersionProvisionedConcurrencyConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnVersion_ProvisionedConcurrencyConfigurationPropertyValidator(properties).assertSuccess();
      return {
        ProvisionedConcurrentExecutions: cdk.numberToCloudFormation(properties.provisionedConcurrentExecutions)
      };
    }
    function CfnVersionProvisionedConcurrencyConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("provisionedConcurrentExecutions", "ProvisionedConcurrentExecutions", cfn_parse.FromCloudFormation.getNumber(properties.ProvisionedConcurrentExecutions));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/event-invoke-config.js
var require_event_invoke_config = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/event-invoke-config.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EventInvokeConfig = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var destination_1 = require_destination();
    var lambda_generated_1 = require_lambda_generated();
    var EventInvokeConfig = class extends core_1.Resource {
      constructor(scope, id, props) {
        var _b;
        super(scope, id);
        if (props.maxEventAge && (props.maxEventAge.toSeconds() < 60 || props.maxEventAge.toSeconds() > 21600)) {
          throw new Error("`maximumEventAge` must represent a `Duration` that is between 60 and 21600 seconds.");
        }
        if (props.retryAttempts && (props.retryAttempts < 0 || props.retryAttempts > 2)) {
          throw new Error("`retryAttempts` must be between 0 and 2.");
        }
        new lambda_generated_1.CfnEventInvokeConfig(this, "Resource", {
          destinationConfig: props.onFailure || props.onSuccess ? __spreadValues(__spreadValues({}, props.onFailure ? { onFailure: props.onFailure.bind(this, props.function, { type: destination_1.DestinationType.FAILURE }) } : {}), props.onSuccess ? { onSuccess: props.onSuccess.bind(this, props.function, { type: destination_1.DestinationType.SUCCESS }) } : {}) : void 0,
          functionName: props.function.functionName,
          maximumEventAgeInSeconds: props.maxEventAge && props.maxEventAge.toSeconds(),
          maximumRetryAttempts: (_b = props.retryAttempts) !== null && _b !== void 0 ? _b : void 0,
          qualifier: props.qualifier || "$LATEST"
        });
      }
    };
    exports2.EventInvokeConfig = EventInvokeConfig;
    _a = JSII_RTTI_SYMBOL_1;
    EventInvokeConfig[_a] = { fqn: "@aws-cdk/aws-lambda.EventInvokeConfig", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/event-source-mapping.js
var require_event_source_mapping = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/event-source-mapping.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StartingPosition = exports2.EventSourceMapping = exports2.SourceAccessConfigurationType = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var lambda_generated_1 = require_lambda_generated();
    var SourceAccessConfigurationType = class {
      constructor(type) {
        this.type = type;
      }
      static of(name) {
        return new SourceAccessConfigurationType(name);
      }
    };
    exports2.SourceAccessConfigurationType = SourceAccessConfigurationType;
    _a = JSII_RTTI_SYMBOL_1;
    SourceAccessConfigurationType[_a] = { fqn: "@aws-cdk/aws-lambda.SourceAccessConfigurationType", version: "1.132.0" };
    SourceAccessConfigurationType.BASIC_AUTH = new SourceAccessConfigurationType("BASIC_AUTH");
    SourceAccessConfigurationType.VPC_SUBNET = new SourceAccessConfigurationType("VPC_SUBNET");
    SourceAccessConfigurationType.VPC_SECURITY_GROUP = new SourceAccessConfigurationType("VPC_SECURITY_GROUP");
    SourceAccessConfigurationType.SASL_SCRAM_256_AUTH = new SourceAccessConfigurationType("SASL_SCRAM_256_AUTH");
    SourceAccessConfigurationType.SASL_SCRAM_512_AUTH = new SourceAccessConfigurationType("SASL_SCRAM_512_AUTH");
    var EventSourceMapping = class extends cdk.Resource {
      constructor(scope, id, props) {
        var _c, _d, _e, _f, _g;
        super(scope, id);
        if (props.eventSourceArn == void 0 && props.kafkaBootstrapServers == void 0) {
          throw new Error("Either eventSourceArn or kafkaBootstrapServers must be set");
        }
        if (props.eventSourceArn !== void 0 && props.kafkaBootstrapServers !== void 0) {
          throw new Error("eventSourceArn and kafkaBootstrapServers are mutually exclusive");
        }
        if (props.kafkaBootstrapServers && ((_c = props.kafkaBootstrapServers) === null || _c === void 0 ? void 0 : _c.length) < 1) {
          throw new Error("kafkaBootStrapServers must not be empty if set");
        }
        if (props.maxBatchingWindow && props.maxBatchingWindow.toSeconds() > 300) {
          throw new Error(`maxBatchingWindow cannot be over 300 seconds, got ${props.maxBatchingWindow.toSeconds()}`);
        }
        if (props.maxRecordAge && (props.maxRecordAge.toSeconds() < 60 || props.maxRecordAge.toDays({ integral: false }) > 7)) {
          throw new Error("maxRecordAge must be between 60 seconds and 7 days inclusive");
        }
        props.retryAttempts !== void 0 && cdk.withResolved(props.retryAttempts, (attempts) => {
          if (attempts < 0 || attempts > 1e4) {
            throw new Error(`retryAttempts must be between 0 and 10000 inclusive, got ${attempts}`);
          }
        });
        props.parallelizationFactor !== void 0 && cdk.withResolved(props.parallelizationFactor, (factor) => {
          if (factor < 1 || factor > 10) {
            throw new Error(`parallelizationFactor must be between 1 and 10 inclusive, got ${factor}`);
          }
        });
        if (props.tumblingWindow && !cdk.Token.isUnresolved(props.tumblingWindow) && props.tumblingWindow.toSeconds() > 900) {
          throw new Error(`tumblingWindow cannot be over 900 seconds, got ${props.tumblingWindow.toSeconds()}`);
        }
        let destinationConfig;
        if (props.onFailure) {
          destinationConfig = {
            onFailure: props.onFailure.bind(this, props.target)
          };
        }
        let selfManagedEventSource;
        if (props.kafkaBootstrapServers) {
          selfManagedEventSource = { endpoints: { kafkaBootstrapServers: props.kafkaBootstrapServers } };
        }
        const cfnEventSourceMapping = new lambda_generated_1.CfnEventSourceMapping(this, "Resource", {
          batchSize: props.batchSize,
          bisectBatchOnFunctionError: props.bisectBatchOnError,
          destinationConfig,
          enabled: props.enabled,
          eventSourceArn: props.eventSourceArn,
          functionName: props.target.functionName,
          startingPosition: props.startingPosition,
          functionResponseTypes: props.reportBatchItemFailures ? ["ReportBatchItemFailures"] : void 0,
          maximumBatchingWindowInSeconds: (_d = props.maxBatchingWindow) === null || _d === void 0 ? void 0 : _d.toSeconds(),
          maximumRecordAgeInSeconds: (_e = props.maxRecordAge) === null || _e === void 0 ? void 0 : _e.toSeconds(),
          maximumRetryAttempts: props.retryAttempts,
          parallelizationFactor: props.parallelizationFactor,
          topics: props.kafkaTopic !== void 0 ? [props.kafkaTopic] : void 0,
          tumblingWindowInSeconds: (_f = props.tumblingWindow) === null || _f === void 0 ? void 0 : _f.toSeconds(),
          sourceAccessConfigurations: (_g = props.sourceAccessConfigurations) === null || _g === void 0 ? void 0 : _g.map((o) => {
            return { type: o.type.type, uri: o.uri };
          }),
          selfManagedEventSource
        });
        this.eventSourceMappingId = cfnEventSourceMapping.ref;
      }
      static fromEventSourceMappingId(scope, id, eventSourceMappingId) {
        class Import extends cdk.Resource {
          constructor() {
            super(...arguments);
            this.eventSourceMappingId = eventSourceMappingId;
          }
        }
        return new Import(scope, id);
      }
    };
    exports2.EventSourceMapping = EventSourceMapping;
    _b = JSII_RTTI_SYMBOL_1;
    EventSourceMapping[_b] = { fqn: "@aws-cdk/aws-lambda.EventSourceMapping", version: "1.132.0" };
    var StartingPosition;
    (function(StartingPosition2) {
      StartingPosition2["TRIM_HORIZON"] = "TRIM_HORIZON";
      StartingPosition2["LATEST"] = "LATEST";
    })(StartingPosition = exports2.StartingPosition || (exports2.StartingPosition = {}));
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/util.js
var require_util4 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.flatten = exports2.flatMap = exports2.addAlias = void 0;
    var alias_1 = require_alias2();
    function addAlias(scope, version, aliasName, options = {}) {
      return new alias_1.Alias(scope, `Alias${aliasName}`, __spreadValues({
        aliasName,
        version
      }, options));
    }
    exports2.addAlias = addAlias;
    function flatMap(xs, fn) {
      return flatten(xs.map(fn));
    }
    exports2.flatMap = flatMap;
    function flatten(xs) {
      return Array.prototype.concat.apply([], xs);
    }
    exports2.flatten = flatten;
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/function-base.js
var require_function_base = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/function-base.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.QualifiedFunctionBase = exports2.FunctionBase = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var iam = require_lib9();
    var core_1 = require_lib8();
    var event_invoke_config_1 = require_event_invoke_config();
    var event_source_mapping_1 = require_event_source_mapping();
    var lambda_generated_1 = require_lambda_generated();
    var util_1 = require_util4();
    var FunctionBase = class extends core_1.Resource {
      constructor() {
        super(...arguments);
        this._invocationGrants = {};
      }
      addPermission(id, permission) {
        var _c, _d, _e, _f, _g;
        if (!this.canCreatePermissions) {
          return;
        }
        const principal = this.parsePermissionPrincipal(permission.principal);
        const { sourceAccount, sourceArn } = (_c = this.parseConditions(permission.principal)) !== null && _c !== void 0 ? _c : {};
        const action = (_d = permission.action) !== null && _d !== void 0 ? _d : "lambda:InvokeFunction";
        const scope = (_e = permission.scope) !== null && _e !== void 0 ? _e : this;
        new lambda_generated_1.CfnPermission(scope, id, {
          action,
          principal,
          functionName: this.functionArn,
          eventSourceToken: permission.eventSourceToken,
          sourceAccount: (_f = permission.sourceAccount) !== null && _f !== void 0 ? _f : sourceAccount,
          sourceArn: (_g = permission.sourceArn) !== null && _g !== void 0 ? _g : sourceArn
        });
      }
      addToRolePolicy(statement) {
        if (!this.role) {
          return;
        }
        this.role.addToPrincipalPolicy(statement);
      }
      get connections() {
        if (!this._connections) {
          throw new Error('Only VPC-associated Lambda Functions have security groups to manage. Supply the "vpc" parameter when creating the Lambda, or "securityGroupId" when importing it.');
        }
        return this._connections;
      }
      get latestVersion() {
        if (!this._latestVersion) {
          this._latestVersion = new LatestVersion(this);
        }
        return this._latestVersion;
      }
      get isBoundToVpc() {
        return !!this._connections;
      }
      addEventSourceMapping(id, options) {
        return new event_source_mapping_1.EventSourceMapping(this, id, __spreadValues({
          target: this
        }, options));
      }
      grantInvoke(grantee) {
        const identifier = `Invoke${grantee.grantPrincipal}`;
        let grant = this._invocationGrants[identifier];
        if (!grant) {
          grant = iam.Grant.addToPrincipalOrResource({
            grantee,
            actions: ["lambda:InvokeFunction"],
            resourceArns: [this.functionArn],
            resource: {
              addToResourcePolicy: (_statement) => {
                this.addPermission(identifier, {
                  principal: grantee.grantPrincipal,
                  action: "lambda:InvokeFunction"
                });
                const permissionNode = this._functionNode().tryFindChild(identifier);
                if (!permissionNode) {
                  throw new Error("Cannot modify permission to lambda function. Function is either imported or $LATEST version. If the function is imported from the same account use `fromFunctionAttributes()` API with the `sameEnvironment` flag.");
                }
                return { statementAdded: true, policyDependable: permissionNode };
              },
              node: this.node,
              stack: this.stack,
              env: this.env
            }
          });
          this._invocationGrants[identifier] = grant;
        }
        return grant;
      }
      addEventSource(source) {
        source.bind(this);
      }
      configureAsyncInvoke(options) {
        if (this.node.tryFindChild("EventInvokeConfig") !== void 0) {
          throw new Error(`An EventInvokeConfig has already been configured for the function at ${this.node.path}`);
        }
        new event_invoke_config_1.EventInvokeConfig(this, "EventInvokeConfig", __spreadValues({
          function: this
        }, options));
      }
      _functionNode() {
        return this.node;
      }
      _isStackAccount() {
        if (core_1.Token.isUnresolved(this.stack.account) || core_1.Token.isUnresolved(this.functionArn)) {
          return false;
        }
        return this.stack.parseArn(this.functionArn).account === this.stack.account;
      }
      parsePermissionPrincipal(principal) {
        if ("conditions" in principal) {
          principal = principal["principal"];
        }
        if ("accountId" in principal) {
          return principal.accountId;
        }
        if ("service" in principal) {
          return principal.service;
        }
        if ("arn" in principal) {
          return principal.arn;
        }
        const json = principal.policyFragment.principalJson;
        if (Object.keys(principal.policyFragment.conditions).length === 0 && json.AWS) {
          if (typeof json.AWS === "string") {
            return json.AWS;
          }
          if (Array.isArray(json.AWS) && json.AWS.length === 1 && typeof json.AWS[0] === "string") {
            return json.AWS[0];
          }
        }
        throw new Error(`Invalid principal type for Lambda permission statement: ${principal.constructor.name}. Supported: AccountPrincipal, ArnPrincipal, ServicePrincipal`);
      }
      parseConditions(principal) {
        if (this.isPrincipalWithConditions(principal)) {
          const conditions = principal.policyFragment.conditions;
          const conditionPairs = util_1.flatMap(Object.entries(conditions), ([operator, conditionObjs]) => Object.keys(conditionObjs).map((key) => {
            return { operator, key };
          }));
          const supportedPrincipalConditions = [{ operator: "ArnLike", key: "aws:SourceArn" }, { operator: "StringEquals", key: "aws:SourceAccount" }];
          const unsupportedConditions = conditionPairs.filter((condition) => !supportedPrincipalConditions.some((supportedCondition) => supportedCondition.operator === condition.operator && supportedCondition.key === condition.key));
          if (unsupportedConditions.length == 0) {
            return {
              sourceAccount: conditions.StringEquals["aws:SourceAccount"],
              sourceArn: conditions.ArnLike["aws:SourceArn"]
            };
          } else {
            throw new Error(`PrincipalWithConditions had unsupported conditions for Lambda permission statement: ${JSON.stringify(unsupportedConditions)}. Supported operator/condition pairs: ${JSON.stringify(supportedPrincipalConditions)}`);
          }
        } else {
          return null;
        }
      }
      isPrincipalWithConditions(principal) {
        return "conditions" in principal;
      }
    };
    exports2.FunctionBase = FunctionBase;
    _a = JSII_RTTI_SYMBOL_1;
    FunctionBase[_a] = { fqn: "@aws-cdk/aws-lambda.FunctionBase", version: "1.132.0" };
    var QualifiedFunctionBase = class extends FunctionBase {
      constructor() {
        super(...arguments);
        this.permissionsNode = this.node;
      }
      get latestVersion() {
        return this.lambda.latestVersion;
      }
      configureAsyncInvoke(options) {
        if (this.node.tryFindChild("EventInvokeConfig") !== void 0) {
          throw new Error(`An EventInvokeConfig has already been configured for the qualified function at ${this.node.path}`);
        }
        new event_invoke_config_1.EventInvokeConfig(this, "EventInvokeConfig", __spreadValues({
          function: this.lambda,
          qualifier: this.qualifier
        }, options));
      }
    };
    exports2.QualifiedFunctionBase = QualifiedFunctionBase;
    _b = JSII_RTTI_SYMBOL_1;
    QualifiedFunctionBase[_b] = { fqn: "@aws-cdk/aws-lambda.QualifiedFunctionBase", version: "1.132.0" };
    var LatestVersion = class extends FunctionBase {
      constructor(lambda) {
        super(lambda, "$LATEST");
        this.version = "$LATEST";
        this.permissionsNode = this.node;
        this.canCreatePermissions = false;
        this.lambda = lambda;
      }
      get functionArn() {
        return `${this.lambda.functionArn}:${this.version}`;
      }
      get functionName() {
        return `${this.lambda.functionName}:${this.version}`;
      }
      get grantPrincipal() {
        return this.lambda.grantPrincipal;
      }
      get latestVersion() {
        return this;
      }
      get role() {
        return this.lambda.role;
      }
      addAlias(aliasName, options = {}) {
        return util_1.addAlias(this, this, aliasName, options);
      }
      get edgeArn() {
        throw new Error("$LATEST function version cannot be used for Lambda@Edge");
      }
    };
  }
});

// asset-input/node_modules/@aws-cdk/aws-codeguruprofiler/lib/codeguruprofiler.generated.js
var require_codeguruprofiler_generated = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-codeguruprofiler/lib/codeguruprofiler.generated.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnProfilingGroup = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var cfn_parse = require_cfn_parse();
    function CfnProfilingGroupPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("agentPermissions", cdk.validateObject)(properties.agentPermissions));
      errors.collect(cdk.propertyValidator("anomalyDetectionNotificationConfiguration", cdk.listValidator(CfnProfilingGroup_ChannelPropertyValidator))(properties.anomalyDetectionNotificationConfiguration));
      errors.collect(cdk.propertyValidator("computePlatform", cdk.validateString)(properties.computePlatform));
      errors.collect(cdk.propertyValidator("profilingGroupName", cdk.requiredValidator)(properties.profilingGroupName));
      errors.collect(cdk.propertyValidator("profilingGroupName", cdk.validateString)(properties.profilingGroupName));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnProfilingGroupProps"');
    }
    function cfnProfilingGroupPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnProfilingGroupPropsValidator(properties).assertSuccess();
      return {
        ProfilingGroupName: cdk.stringToCloudFormation(properties.profilingGroupName),
        AgentPermissions: cdk.objectToCloudFormation(properties.agentPermissions),
        AnomalyDetectionNotificationConfiguration: cdk.listMapper(cfnProfilingGroupChannelPropertyToCloudFormation)(properties.anomalyDetectionNotificationConfiguration),
        ComputePlatform: cdk.stringToCloudFormation(properties.computePlatform),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnProfilingGroupPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("profilingGroupName", "ProfilingGroupName", cfn_parse.FromCloudFormation.getString(properties.ProfilingGroupName));
      ret.addPropertyResult("agentPermissions", "AgentPermissions", properties.AgentPermissions != null ? cfn_parse.FromCloudFormation.getAny(properties.AgentPermissions) : void 0);
      ret.addPropertyResult("anomalyDetectionNotificationConfiguration", "AnomalyDetectionNotificationConfiguration", properties.AnomalyDetectionNotificationConfiguration != null ? cfn_parse.FromCloudFormation.getArray(CfnProfilingGroupChannelPropertyFromCloudFormation)(properties.AnomalyDetectionNotificationConfiguration) : void 0);
      ret.addPropertyResult("computePlatform", "ComputePlatform", properties.ComputePlatform != null ? cfn_parse.FromCloudFormation.getString(properties.ComputePlatform) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnProfilingGroup = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnProfilingGroup.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "profilingGroupName", this);
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.profilingGroupName = props.profilingGroupName;
        this.agentPermissions = props.agentPermissions;
        this.anomalyDetectionNotificationConfiguration = props.anomalyDetectionNotificationConfiguration;
        this.computePlatform = props.computePlatform;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::CodeGuruProfiler::ProfilingGroup", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnProfilingGroupPropsFromCloudFormation(resourceProperties);
        const ret = new CfnProfilingGroup(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnProfilingGroup.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          profilingGroupName: this.profilingGroupName,
          agentPermissions: this.agentPermissions,
          anomalyDetectionNotificationConfiguration: this.anomalyDetectionNotificationConfiguration,
          computePlatform: this.computePlatform,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnProfilingGroupPropsToCloudFormation(props);
      }
    };
    exports2.CfnProfilingGroup = CfnProfilingGroup;
    _a = JSII_RTTI_SYMBOL_1;
    CfnProfilingGroup[_a] = { fqn: "@aws-cdk/aws-codeguruprofiler.CfnProfilingGroup", version: "1.132.0" };
    CfnProfilingGroup.CFN_RESOURCE_TYPE_NAME = "AWS::CodeGuruProfiler::ProfilingGroup";
    function CfnProfilingGroup_ChannelPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("channelId", cdk.validateString)(properties.channelId));
      errors.collect(cdk.propertyValidator("channelUri", cdk.requiredValidator)(properties.channelUri));
      errors.collect(cdk.propertyValidator("channelUri", cdk.validateString)(properties.channelUri));
      return errors.wrap('supplied properties not correct for "ChannelProperty"');
    }
    function cfnProfilingGroupChannelPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnProfilingGroup_ChannelPropertyValidator(properties).assertSuccess();
      return {
        channelId: cdk.stringToCloudFormation(properties.channelId),
        channelUri: cdk.stringToCloudFormation(properties.channelUri)
      };
    }
    function CfnProfilingGroupChannelPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("channelId", "channelId", properties.channelId != null ? cfn_parse.FromCloudFormation.getString(properties.channelId) : void 0);
      ret.addPropertyResult("channelUri", "channelUri", cfn_parse.FromCloudFormation.getString(properties.channelUri));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-codeguruprofiler/lib/profiling-group.js
var require_profiling_group = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-codeguruprofiler/lib/profiling-group.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProfilingGroup = exports2.ComputePlatform = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var aws_iam_1 = require_lib9();
    var core_1 = require_lib8();
    var codeguruprofiler_generated_1 = require_codeguruprofiler_generated();
    var ComputePlatform;
    (function(ComputePlatform2) {
      ComputePlatform2["AWS_LAMBDA"] = "AWSLambda";
      ComputePlatform2["DEFAULT"] = "Default";
    })(ComputePlatform = exports2.ComputePlatform || (exports2.ComputePlatform = {}));
    var ProfilingGroupBase = class extends core_1.Resource {
      grantPublish(grantee) {
        return aws_iam_1.Grant.addToPrincipal({
          grantee,
          actions: ["codeguru-profiler:ConfigureAgent", "codeguru-profiler:PostAgentProfile"],
          resourceArns: [this.profilingGroupArn]
        });
      }
      grantRead(grantee) {
        return aws_iam_1.Grant.addToPrincipal({
          grantee,
          actions: ["codeguru-profiler:GetProfile", "codeguru-profiler:DescribeProfilingGroup"],
          resourceArns: [this.profilingGroupArn]
        });
      }
    };
    var ProfilingGroup = class extends ProfilingGroupBase {
      constructor(scope, id, props = {}) {
        var _b;
        super(scope, id, {
          physicalName: (_b = props.profilingGroupName) !== null && _b !== void 0 ? _b : core_1.Lazy.string({ produce: () => this.generateUniqueId() })
        });
        const profilingGroup = new codeguruprofiler_generated_1.CfnProfilingGroup(this, "ProfilingGroup", {
          profilingGroupName: this.physicalName,
          computePlatform: props.computePlatform
        });
        this.profilingGroupName = this.getResourceNameAttribute(profilingGroup.ref);
        this.profilingGroupArn = this.getResourceArnAttribute(profilingGroup.attrArn, {
          service: "codeguru-profiler",
          resource: "profilingGroup",
          resourceName: this.physicalName
        });
      }
      static fromProfilingGroupName(scope, id, profilingGroupName) {
        const stack = core_1.Stack.of(scope);
        return this.fromProfilingGroupArn(scope, id, stack.formatArn({
          service: "codeguru-profiler",
          resource: "profilingGroup",
          resourceName: profilingGroupName
        }));
      }
      static fromProfilingGroupArn(scope, id, profilingGroupArn) {
        class Import extends ProfilingGroupBase {
          constructor() {
            super(...arguments);
            this.profilingGroupName = core_1.Stack.of(scope).parseArn(profilingGroupArn).resource;
            this.profilingGroupArn = profilingGroupArn;
          }
        }
        return new Import(scope, id);
      }
      generateUniqueId() {
        const name = core_1.Names.uniqueId(this);
        if (name.length > 240) {
          return name.substring(0, 120) + name.substring(name.length - 120);
        }
        return name;
      }
    };
    exports2.ProfilingGroup = ProfilingGroup;
    _a = JSII_RTTI_SYMBOL_1;
    ProfilingGroup[_a] = { fqn: "@aws-cdk/aws-codeguruprofiler.ProfilingGroup", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-codeguruprofiler/lib/index.js
var require_lib13 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-codeguruprofiler/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_codeguruprofiler_generated(), exports2);
    __exportStar(require_profiling_group(), exports2);
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/ec2.generated.js
var require_ec2_generated = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/ec2.generated.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    var _d;
    var _e;
    var _f;
    var _g;
    var _h;
    var _j;
    var _k;
    var _l;
    var _m;
    var _o;
    var _p;
    var _q;
    var _r;
    var _s;
    var _t;
    var _u;
    var _v;
    var _w;
    var _x;
    var _y;
    var _z;
    var _0;
    var _1;
    var _2;
    var _3;
    var _4;
    var _5;
    var _6;
    var _7;
    var _8;
    var _9;
    var _10;
    var _11;
    var _12;
    var _13;
    var _14;
    var _15;
    var _16;
    var _17;
    var _18;
    var _19;
    var _20;
    var _21;
    var _22;
    var _23;
    var _24;
    var _25;
    var _26;
    var _27;
    var _28;
    var _29;
    var _30;
    var _31;
    var _32;
    var _33;
    var _34;
    var _35;
    var _36;
    var _37;
    var _38;
    var _39;
    var _40;
    var _41;
    var _42;
    var _43;
    var _44;
    var _45;
    var _46;
    var _47;
    var _48;
    var _49;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnVolumeAttachment = exports2.CfnVolume = exports2.CfnVPNGatewayRoutePropagation = exports2.CfnVPNGateway = exports2.CfnVPNConnectionRoute = exports2.CfnVPNConnection = exports2.CfnVPCPeeringConnection = exports2.CfnVPCGatewayAttachment = exports2.CfnVPCEndpointServicePermissions = exports2.CfnVPCEndpointService = exports2.CfnVPCEndpointConnectionNotification = exports2.CfnVPCEndpoint = exports2.CfnVPCDHCPOptionsAssociation = exports2.CfnVPCCidrBlock = exports2.CfnVPC = exports2.CfnTransitGatewayVpcAttachment = exports2.CfnTransitGatewayRouteTablePropagation = exports2.CfnTransitGatewayRouteTableAssociation = exports2.CfnTransitGatewayRouteTable = exports2.CfnTransitGatewayRoute = exports2.CfnTransitGatewayPeeringAttachment = exports2.CfnTransitGatewayMulticastGroupSource = exports2.CfnTransitGatewayMulticastGroupMember = exports2.CfnTransitGatewayMulticastDomainAssociation = exports2.CfnTransitGatewayMulticastDomain = exports2.CfnTransitGatewayConnect = exports2.CfnTransitGatewayAttachment = exports2.CfnTransitGateway = exports2.CfnTrafficMirrorTarget = exports2.CfnTrafficMirrorSession = exports2.CfnTrafficMirrorFilterRule = exports2.CfnTrafficMirrorFilter = exports2.CfnSubnetRouteTableAssociation = exports2.CfnSubnetNetworkAclAssociation = exports2.CfnSubnetCidrBlock = exports2.CfnSubnet = exports2.CfnSpotFleet = exports2.CfnSecurityGroupIngress = exports2.CfnSecurityGroupEgress = exports2.CfnSecurityGroup = exports2.CfnRouteTable = exports2.CfnRoute = exports2.CfnPrefixList = exports2.CfnPlacementGroup = exports2.CfnNetworkInterfacePermission = exports2.CfnNetworkInterfaceAttachment = exports2.CfnNetworkInterface = exports2.CfnNetworkInsightsPath = exports2.CfnNetworkInsightsAnalysis = exports2.CfnNetworkAclEntry = exports2.CfnNetworkAcl = exports2.CfnNatGateway = exports2.CfnLocalGatewayRouteTableVPCAssociation = exports2.CfnLocalGatewayRoute = exports2.CfnLaunchTemplate = exports2.CfnInternetGateway = exports2.CfnInstance = exports2.CfnHost = exports2.CfnGatewayRouteTableAssociation = exports2.CfnFlowLog = exports2.CfnEnclaveCertificateIamRoleAssociation = exports2.CfnEgressOnlyInternetGateway = exports2.CfnEIPAssociation = exports2.CfnEIP = exports2.CfnEC2Fleet = exports2.CfnDHCPOptions = exports2.CfnCustomerGateway = exports2.CfnClientVpnTargetNetworkAssociation = exports2.CfnClientVpnRoute = exports2.CfnClientVpnEndpoint = exports2.CfnClientVpnAuthorizationRule = exports2.CfnCarrierGateway = exports2.CfnCapacityReservationFleet = exports2.CfnCapacityReservation = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var cfn_parse = require_cfn_parse();
    function CfnCapacityReservationPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("availabilityZone", cdk.requiredValidator)(properties.availabilityZone));
      errors.collect(cdk.propertyValidator("availabilityZone", cdk.validateString)(properties.availabilityZone));
      errors.collect(cdk.propertyValidator("ebsOptimized", cdk.validateBoolean)(properties.ebsOptimized));
      errors.collect(cdk.propertyValidator("endDate", cdk.validateString)(properties.endDate));
      errors.collect(cdk.propertyValidator("endDateType", cdk.validateString)(properties.endDateType));
      errors.collect(cdk.propertyValidator("ephemeralStorage", cdk.validateBoolean)(properties.ephemeralStorage));
      errors.collect(cdk.propertyValidator("instanceCount", cdk.requiredValidator)(properties.instanceCount));
      errors.collect(cdk.propertyValidator("instanceCount", cdk.validateNumber)(properties.instanceCount));
      errors.collect(cdk.propertyValidator("instanceMatchCriteria", cdk.validateString)(properties.instanceMatchCriteria));
      errors.collect(cdk.propertyValidator("instancePlatform", cdk.requiredValidator)(properties.instancePlatform));
      errors.collect(cdk.propertyValidator("instancePlatform", cdk.validateString)(properties.instancePlatform));
      errors.collect(cdk.propertyValidator("instanceType", cdk.requiredValidator)(properties.instanceType));
      errors.collect(cdk.propertyValidator("instanceType", cdk.validateString)(properties.instanceType));
      errors.collect(cdk.propertyValidator("tagSpecifications", cdk.listValidator(CfnCapacityReservation_TagSpecificationPropertyValidator))(properties.tagSpecifications));
      errors.collect(cdk.propertyValidator("tenancy", cdk.validateString)(properties.tenancy));
      return errors.wrap('supplied properties not correct for "CfnCapacityReservationProps"');
    }
    function cfnCapacityReservationPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnCapacityReservationPropsValidator(properties).assertSuccess();
      return {
        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),
        InstanceCount: cdk.numberToCloudFormation(properties.instanceCount),
        InstancePlatform: cdk.stringToCloudFormation(properties.instancePlatform),
        InstanceType: cdk.stringToCloudFormation(properties.instanceType),
        EbsOptimized: cdk.booleanToCloudFormation(properties.ebsOptimized),
        EndDate: cdk.stringToCloudFormation(properties.endDate),
        EndDateType: cdk.stringToCloudFormation(properties.endDateType),
        EphemeralStorage: cdk.booleanToCloudFormation(properties.ephemeralStorage),
        InstanceMatchCriteria: cdk.stringToCloudFormation(properties.instanceMatchCriteria),
        TagSpecifications: cdk.listMapper(cfnCapacityReservationTagSpecificationPropertyToCloudFormation)(properties.tagSpecifications),
        Tenancy: cdk.stringToCloudFormation(properties.tenancy)
      };
    }
    function CfnCapacityReservationPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("availabilityZone", "AvailabilityZone", cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone));
      ret.addPropertyResult("instanceCount", "InstanceCount", cfn_parse.FromCloudFormation.getNumber(properties.InstanceCount));
      ret.addPropertyResult("instancePlatform", "InstancePlatform", cfn_parse.FromCloudFormation.getString(properties.InstancePlatform));
      ret.addPropertyResult("instanceType", "InstanceType", cfn_parse.FromCloudFormation.getString(properties.InstanceType));
      ret.addPropertyResult("ebsOptimized", "EbsOptimized", properties.EbsOptimized != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EbsOptimized) : void 0);
      ret.addPropertyResult("endDate", "EndDate", properties.EndDate != null ? cfn_parse.FromCloudFormation.getString(properties.EndDate) : void 0);
      ret.addPropertyResult("endDateType", "EndDateType", properties.EndDateType != null ? cfn_parse.FromCloudFormation.getString(properties.EndDateType) : void 0);
      ret.addPropertyResult("ephemeralStorage", "EphemeralStorage", properties.EphemeralStorage != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EphemeralStorage) : void 0);
      ret.addPropertyResult("instanceMatchCriteria", "InstanceMatchCriteria", properties.InstanceMatchCriteria != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceMatchCriteria) : void 0);
      ret.addPropertyResult("tagSpecifications", "TagSpecifications", properties.TagSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnCapacityReservationTagSpecificationPropertyFromCloudFormation)(properties.TagSpecifications) : void 0);
      ret.addPropertyResult("tenancy", "Tenancy", properties.Tenancy != null ? cfn_parse.FromCloudFormation.getString(properties.Tenancy) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnCapacityReservation = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnCapacityReservation.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "availabilityZone", this);
        cdk.requireProperty(props, "instanceCount", this);
        cdk.requireProperty(props, "instancePlatform", this);
        cdk.requireProperty(props, "instanceType", this);
        this.attrAvailabilityZone = cdk.Token.asString(this.getAtt("AvailabilityZone"));
        this.attrAvailableInstanceCount = cdk.Token.asNumber(this.getAtt("AvailableInstanceCount"));
        this.attrInstanceType = cdk.Token.asString(this.getAtt("InstanceType"));
        this.attrTenancy = cdk.Token.asString(this.getAtt("Tenancy"));
        this.attrTotalInstanceCount = cdk.Token.asNumber(this.getAtt("TotalInstanceCount"));
        this.availabilityZone = props.availabilityZone;
        this.instanceCount = props.instanceCount;
        this.instancePlatform = props.instancePlatform;
        this.instanceType = props.instanceType;
        this.ebsOptimized = props.ebsOptimized;
        this.endDate = props.endDate;
        this.endDateType = props.endDateType;
        this.ephemeralStorage = props.ephemeralStorage;
        this.instanceMatchCriteria = props.instanceMatchCriteria;
        this.tagSpecifications = props.tagSpecifications;
        this.tenancy = props.tenancy;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnCapacityReservationPropsFromCloudFormation(resourceProperties);
        const ret = new CfnCapacityReservation(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnCapacityReservation.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          availabilityZone: this.availabilityZone,
          instanceCount: this.instanceCount,
          instancePlatform: this.instancePlatform,
          instanceType: this.instanceType,
          ebsOptimized: this.ebsOptimized,
          endDate: this.endDate,
          endDateType: this.endDateType,
          ephemeralStorage: this.ephemeralStorage,
          instanceMatchCriteria: this.instanceMatchCriteria,
          tagSpecifications: this.tagSpecifications,
          tenancy: this.tenancy
        };
      }
      renderProperties(props) {
        return cfnCapacityReservationPropsToCloudFormation(props);
      }
    };
    exports2.CfnCapacityReservation = CfnCapacityReservation;
    _a = JSII_RTTI_SYMBOL_1;
    CfnCapacityReservation[_a] = { fqn: "@aws-cdk/aws-ec2.CfnCapacityReservation", version: "1.132.0" };
    CfnCapacityReservation.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::CapacityReservation";
    function CfnCapacityReservation_TagSpecificationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("resourceType", cdk.validateString)(properties.resourceType));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "TagSpecificationProperty"');
    }
    function cfnCapacityReservationTagSpecificationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnCapacityReservation_TagSpecificationPropertyValidator(properties).assertSuccess();
      return {
        ResourceType: cdk.stringToCloudFormation(properties.resourceType),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnCapacityReservationTagSpecificationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("resourceType", "ResourceType", properties.ResourceType != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceType) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnCapacityReservationFleetPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("allocationStrategy", cdk.validateString)(properties.allocationStrategy));
      errors.collect(cdk.propertyValidator("endDate", cdk.validateString)(properties.endDate));
      errors.collect(cdk.propertyValidator("instanceMatchCriteria", cdk.validateString)(properties.instanceMatchCriteria));
      errors.collect(cdk.propertyValidator("instanceTypeSpecifications", cdk.listValidator(CfnCapacityReservationFleet_InstanceTypeSpecificationPropertyValidator))(properties.instanceTypeSpecifications));
      errors.collect(cdk.propertyValidator("noRemoveEndDate", cdk.validateBoolean)(properties.noRemoveEndDate));
      errors.collect(cdk.propertyValidator("removeEndDate", cdk.validateBoolean)(properties.removeEndDate));
      errors.collect(cdk.propertyValidator("tagSpecifications", cdk.listValidator(CfnCapacityReservationFleet_TagSpecificationPropertyValidator))(properties.tagSpecifications));
      errors.collect(cdk.propertyValidator("tenancy", cdk.validateString)(properties.tenancy));
      errors.collect(cdk.propertyValidator("totalTargetCapacity", cdk.validateNumber)(properties.totalTargetCapacity));
      return errors.wrap('supplied properties not correct for "CfnCapacityReservationFleetProps"');
    }
    function cfnCapacityReservationFleetPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnCapacityReservationFleetPropsValidator(properties).assertSuccess();
      return {
        AllocationStrategy: cdk.stringToCloudFormation(properties.allocationStrategy),
        EndDate: cdk.stringToCloudFormation(properties.endDate),
        InstanceMatchCriteria: cdk.stringToCloudFormation(properties.instanceMatchCriteria),
        InstanceTypeSpecifications: cdk.listMapper(cfnCapacityReservationFleetInstanceTypeSpecificationPropertyToCloudFormation)(properties.instanceTypeSpecifications),
        NoRemoveEndDate: cdk.booleanToCloudFormation(properties.noRemoveEndDate),
        RemoveEndDate: cdk.booleanToCloudFormation(properties.removeEndDate),
        TagSpecifications: cdk.listMapper(cfnCapacityReservationFleetTagSpecificationPropertyToCloudFormation)(properties.tagSpecifications),
        Tenancy: cdk.stringToCloudFormation(properties.tenancy),
        TotalTargetCapacity: cdk.numberToCloudFormation(properties.totalTargetCapacity)
      };
    }
    function CfnCapacityReservationFleetPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("allocationStrategy", "AllocationStrategy", properties.AllocationStrategy != null ? cfn_parse.FromCloudFormation.getString(properties.AllocationStrategy) : void 0);
      ret.addPropertyResult("endDate", "EndDate", properties.EndDate != null ? cfn_parse.FromCloudFormation.getString(properties.EndDate) : void 0);
      ret.addPropertyResult("instanceMatchCriteria", "InstanceMatchCriteria", properties.InstanceMatchCriteria != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceMatchCriteria) : void 0);
      ret.addPropertyResult("instanceTypeSpecifications", "InstanceTypeSpecifications", properties.InstanceTypeSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnCapacityReservationFleetInstanceTypeSpecificationPropertyFromCloudFormation)(properties.InstanceTypeSpecifications) : void 0);
      ret.addPropertyResult("noRemoveEndDate", "NoRemoveEndDate", properties.NoRemoveEndDate != null ? cfn_parse.FromCloudFormation.getBoolean(properties.NoRemoveEndDate) : void 0);
      ret.addPropertyResult("removeEndDate", "RemoveEndDate", properties.RemoveEndDate != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RemoveEndDate) : void 0);
      ret.addPropertyResult("tagSpecifications", "TagSpecifications", properties.TagSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnCapacityReservationFleetTagSpecificationPropertyFromCloudFormation)(properties.TagSpecifications) : void 0);
      ret.addPropertyResult("tenancy", "Tenancy", properties.Tenancy != null ? cfn_parse.FromCloudFormation.getString(properties.Tenancy) : void 0);
      ret.addPropertyResult("totalTargetCapacity", "TotalTargetCapacity", properties.TotalTargetCapacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.TotalTargetCapacity) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnCapacityReservationFleet = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnCapacityReservationFleet.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.attrCapacityReservationFleetId = cdk.Token.asString(this.getAtt("CapacityReservationFleetId"));
        this.allocationStrategy = props.allocationStrategy;
        this.endDate = props.endDate;
        this.instanceMatchCriteria = props.instanceMatchCriteria;
        this.instanceTypeSpecifications = props.instanceTypeSpecifications;
        this.noRemoveEndDate = props.noRemoveEndDate;
        this.removeEndDate = props.removeEndDate;
        this.tagSpecifications = props.tagSpecifications;
        this.tenancy = props.tenancy;
        this.totalTargetCapacity = props.totalTargetCapacity;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnCapacityReservationFleetPropsFromCloudFormation(resourceProperties);
        const ret = new CfnCapacityReservationFleet(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnCapacityReservationFleet.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          allocationStrategy: this.allocationStrategy,
          endDate: this.endDate,
          instanceMatchCriteria: this.instanceMatchCriteria,
          instanceTypeSpecifications: this.instanceTypeSpecifications,
          noRemoveEndDate: this.noRemoveEndDate,
          removeEndDate: this.removeEndDate,
          tagSpecifications: this.tagSpecifications,
          tenancy: this.tenancy,
          totalTargetCapacity: this.totalTargetCapacity
        };
      }
      renderProperties(props) {
        return cfnCapacityReservationFleetPropsToCloudFormation(props);
      }
    };
    exports2.CfnCapacityReservationFleet = CfnCapacityReservationFleet;
    _b = JSII_RTTI_SYMBOL_1;
    CfnCapacityReservationFleet[_b] = { fqn: "@aws-cdk/aws-ec2.CfnCapacityReservationFleet", version: "1.132.0" };
    CfnCapacityReservationFleet.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::CapacityReservationFleet";
    function CfnCapacityReservationFleet_InstanceTypeSpecificationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("availabilityZone", cdk.validateString)(properties.availabilityZone));
      errors.collect(cdk.propertyValidator("availabilityZoneId", cdk.validateString)(properties.availabilityZoneId));
      errors.collect(cdk.propertyValidator("ebsOptimized", cdk.validateBoolean)(properties.ebsOptimized));
      errors.collect(cdk.propertyValidator("instancePlatform", cdk.validateString)(properties.instancePlatform));
      errors.collect(cdk.propertyValidator("instanceType", cdk.validateString)(properties.instanceType));
      errors.collect(cdk.propertyValidator("priority", cdk.validateNumber)(properties.priority));
      errors.collect(cdk.propertyValidator("weight", cdk.validateNumber)(properties.weight));
      return errors.wrap('supplied properties not correct for "InstanceTypeSpecificationProperty"');
    }
    function cfnCapacityReservationFleetInstanceTypeSpecificationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnCapacityReservationFleet_InstanceTypeSpecificationPropertyValidator(properties).assertSuccess();
      return {
        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),
        AvailabilityZoneId: cdk.stringToCloudFormation(properties.availabilityZoneId),
        EbsOptimized: cdk.booleanToCloudFormation(properties.ebsOptimized),
        InstancePlatform: cdk.stringToCloudFormation(properties.instancePlatform),
        InstanceType: cdk.stringToCloudFormation(properties.instanceType),
        Priority: cdk.numberToCloudFormation(properties.priority),
        Weight: cdk.numberToCloudFormation(properties.weight)
      };
    }
    function CfnCapacityReservationFleetInstanceTypeSpecificationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("availabilityZone", "AvailabilityZone", properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : void 0);
      ret.addPropertyResult("availabilityZoneId", "AvailabilityZoneId", properties.AvailabilityZoneId != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZoneId) : void 0);
      ret.addPropertyResult("ebsOptimized", "EbsOptimized", properties.EbsOptimized != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EbsOptimized) : void 0);
      ret.addPropertyResult("instancePlatform", "InstancePlatform", properties.InstancePlatform != null ? cfn_parse.FromCloudFormation.getString(properties.InstancePlatform) : void 0);
      ret.addPropertyResult("instanceType", "InstanceType", properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : void 0);
      ret.addPropertyResult("priority", "Priority", properties.Priority != null ? cfn_parse.FromCloudFormation.getNumber(properties.Priority) : void 0);
      ret.addPropertyResult("weight", "Weight", properties.Weight != null ? cfn_parse.FromCloudFormation.getNumber(properties.Weight) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnCapacityReservationFleet_TagSpecificationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("resourceType", cdk.validateString)(properties.resourceType));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "TagSpecificationProperty"');
    }
    function cfnCapacityReservationFleetTagSpecificationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnCapacityReservationFleet_TagSpecificationPropertyValidator(properties).assertSuccess();
      return {
        ResourceType: cdk.stringToCloudFormation(properties.resourceType),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnCapacityReservationFleetTagSpecificationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("resourceType", "ResourceType", properties.ResourceType != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceType) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnCarrierGatewayPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("vpcId", cdk.requiredValidator)(properties.vpcId));
      errors.collect(cdk.propertyValidator("vpcId", cdk.validateString)(properties.vpcId));
      return errors.wrap('supplied properties not correct for "CfnCarrierGatewayProps"');
    }
    function cfnCarrierGatewayPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnCarrierGatewayPropsValidator(properties).assertSuccess();
      return {
        VpcId: cdk.stringToCloudFormation(properties.vpcId),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnCarrierGatewayPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("vpcId", "VpcId", cfn_parse.FromCloudFormation.getString(properties.VpcId));
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnCarrierGateway = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnCarrierGateway.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "vpcId", this);
        this.attrCarrierGatewayId = cdk.Token.asString(this.getAtt("CarrierGatewayId"));
        this.attrOwnerId = cdk.Token.asString(this.getAtt("OwnerId"));
        this.attrState = cdk.Token.asString(this.getAtt("State"));
        this.vpcId = props.vpcId;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::CarrierGateway", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnCarrierGatewayPropsFromCloudFormation(resourceProperties);
        const ret = new CfnCarrierGateway(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnCarrierGateway.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          vpcId: this.vpcId,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnCarrierGatewayPropsToCloudFormation(props);
      }
    };
    exports2.CfnCarrierGateway = CfnCarrierGateway;
    _c = JSII_RTTI_SYMBOL_1;
    CfnCarrierGateway[_c] = { fqn: "@aws-cdk/aws-ec2.CfnCarrierGateway", version: "1.132.0" };
    CfnCarrierGateway.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::CarrierGateway";
    function CfnClientVpnAuthorizationRulePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("accessGroupId", cdk.validateString)(properties.accessGroupId));
      errors.collect(cdk.propertyValidator("authorizeAllGroups", cdk.validateBoolean)(properties.authorizeAllGroups));
      errors.collect(cdk.propertyValidator("clientVpnEndpointId", cdk.requiredValidator)(properties.clientVpnEndpointId));
      errors.collect(cdk.propertyValidator("clientVpnEndpointId", cdk.validateString)(properties.clientVpnEndpointId));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("targetNetworkCidr", cdk.requiredValidator)(properties.targetNetworkCidr));
      errors.collect(cdk.propertyValidator("targetNetworkCidr", cdk.validateString)(properties.targetNetworkCidr));
      return errors.wrap('supplied properties not correct for "CfnClientVpnAuthorizationRuleProps"');
    }
    function cfnClientVpnAuthorizationRulePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnClientVpnAuthorizationRulePropsValidator(properties).assertSuccess();
      return {
        ClientVpnEndpointId: cdk.stringToCloudFormation(properties.clientVpnEndpointId),
        TargetNetworkCidr: cdk.stringToCloudFormation(properties.targetNetworkCidr),
        AccessGroupId: cdk.stringToCloudFormation(properties.accessGroupId),
        AuthorizeAllGroups: cdk.booleanToCloudFormation(properties.authorizeAllGroups),
        Description: cdk.stringToCloudFormation(properties.description)
      };
    }
    function CfnClientVpnAuthorizationRulePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("clientVpnEndpointId", "ClientVpnEndpointId", cfn_parse.FromCloudFormation.getString(properties.ClientVpnEndpointId));
      ret.addPropertyResult("targetNetworkCidr", "TargetNetworkCidr", cfn_parse.FromCloudFormation.getString(properties.TargetNetworkCidr));
      ret.addPropertyResult("accessGroupId", "AccessGroupId", properties.AccessGroupId != null ? cfn_parse.FromCloudFormation.getString(properties.AccessGroupId) : void 0);
      ret.addPropertyResult("authorizeAllGroups", "AuthorizeAllGroups", properties.AuthorizeAllGroups != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AuthorizeAllGroups) : void 0);
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnClientVpnAuthorizationRule = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnClientVpnAuthorizationRule.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "clientVpnEndpointId", this);
        cdk.requireProperty(props, "targetNetworkCidr", this);
        this.clientVpnEndpointId = props.clientVpnEndpointId;
        this.targetNetworkCidr = props.targetNetworkCidr;
        this.accessGroupId = props.accessGroupId;
        this.authorizeAllGroups = props.authorizeAllGroups;
        this.description = props.description;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnClientVpnAuthorizationRulePropsFromCloudFormation(resourceProperties);
        const ret = new CfnClientVpnAuthorizationRule(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnClientVpnAuthorizationRule.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          clientVpnEndpointId: this.clientVpnEndpointId,
          targetNetworkCidr: this.targetNetworkCidr,
          accessGroupId: this.accessGroupId,
          authorizeAllGroups: this.authorizeAllGroups,
          description: this.description
        };
      }
      renderProperties(props) {
        return cfnClientVpnAuthorizationRulePropsToCloudFormation(props);
      }
    };
    exports2.CfnClientVpnAuthorizationRule = CfnClientVpnAuthorizationRule;
    _d = JSII_RTTI_SYMBOL_1;
    CfnClientVpnAuthorizationRule[_d] = { fqn: "@aws-cdk/aws-ec2.CfnClientVpnAuthorizationRule", version: "1.132.0" };
    CfnClientVpnAuthorizationRule.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::ClientVpnAuthorizationRule";
    function CfnClientVpnEndpointPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("authenticationOptions", cdk.requiredValidator)(properties.authenticationOptions));
      errors.collect(cdk.propertyValidator("authenticationOptions", cdk.listValidator(CfnClientVpnEndpoint_ClientAuthenticationRequestPropertyValidator))(properties.authenticationOptions));
      errors.collect(cdk.propertyValidator("clientCidrBlock", cdk.requiredValidator)(properties.clientCidrBlock));
      errors.collect(cdk.propertyValidator("clientCidrBlock", cdk.validateString)(properties.clientCidrBlock));
      errors.collect(cdk.propertyValidator("clientConnectOptions", CfnClientVpnEndpoint_ClientConnectOptionsPropertyValidator)(properties.clientConnectOptions));
      errors.collect(cdk.propertyValidator("connectionLogOptions", cdk.requiredValidator)(properties.connectionLogOptions));
      errors.collect(cdk.propertyValidator("connectionLogOptions", CfnClientVpnEndpoint_ConnectionLogOptionsPropertyValidator)(properties.connectionLogOptions));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("dnsServers", cdk.listValidator(cdk.validateString))(properties.dnsServers));
      errors.collect(cdk.propertyValidator("securityGroupIds", cdk.listValidator(cdk.validateString))(properties.securityGroupIds));
      errors.collect(cdk.propertyValidator("selfServicePortal", cdk.validateString)(properties.selfServicePortal));
      errors.collect(cdk.propertyValidator("serverCertificateArn", cdk.requiredValidator)(properties.serverCertificateArn));
      errors.collect(cdk.propertyValidator("serverCertificateArn", cdk.validateString)(properties.serverCertificateArn));
      errors.collect(cdk.propertyValidator("splitTunnel", cdk.validateBoolean)(properties.splitTunnel));
      errors.collect(cdk.propertyValidator("tagSpecifications", cdk.listValidator(CfnClientVpnEndpoint_TagSpecificationPropertyValidator))(properties.tagSpecifications));
      errors.collect(cdk.propertyValidator("transportProtocol", cdk.validateString)(properties.transportProtocol));
      errors.collect(cdk.propertyValidator("vpcId", cdk.validateString)(properties.vpcId));
      errors.collect(cdk.propertyValidator("vpnPort", cdk.validateNumber)(properties.vpnPort));
      return errors.wrap('supplied properties not correct for "CfnClientVpnEndpointProps"');
    }
    function cfnClientVpnEndpointPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnClientVpnEndpointPropsValidator(properties).assertSuccess();
      return {
        AuthenticationOptions: cdk.listMapper(cfnClientVpnEndpointClientAuthenticationRequestPropertyToCloudFormation)(properties.authenticationOptions),
        ClientCidrBlock: cdk.stringToCloudFormation(properties.clientCidrBlock),
        ConnectionLogOptions: cfnClientVpnEndpointConnectionLogOptionsPropertyToCloudFormation(properties.connectionLogOptions),
        ServerCertificateArn: cdk.stringToCloudFormation(properties.serverCertificateArn),
        ClientConnectOptions: cfnClientVpnEndpointClientConnectOptionsPropertyToCloudFormation(properties.clientConnectOptions),
        Description: cdk.stringToCloudFormation(properties.description),
        DnsServers: cdk.listMapper(cdk.stringToCloudFormation)(properties.dnsServers),
        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),
        SelfServicePortal: cdk.stringToCloudFormation(properties.selfServicePortal),
        SplitTunnel: cdk.booleanToCloudFormation(properties.splitTunnel),
        TagSpecifications: cdk.listMapper(cfnClientVpnEndpointTagSpecificationPropertyToCloudFormation)(properties.tagSpecifications),
        TransportProtocol: cdk.stringToCloudFormation(properties.transportProtocol),
        VpcId: cdk.stringToCloudFormation(properties.vpcId),
        VpnPort: cdk.numberToCloudFormation(properties.vpnPort)
      };
    }
    function CfnClientVpnEndpointPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("authenticationOptions", "AuthenticationOptions", cfn_parse.FromCloudFormation.getArray(CfnClientVpnEndpointClientAuthenticationRequestPropertyFromCloudFormation)(properties.AuthenticationOptions));
      ret.addPropertyResult("clientCidrBlock", "ClientCidrBlock", cfn_parse.FromCloudFormation.getString(properties.ClientCidrBlock));
      ret.addPropertyResult("connectionLogOptions", "ConnectionLogOptions", CfnClientVpnEndpointConnectionLogOptionsPropertyFromCloudFormation(properties.ConnectionLogOptions));
      ret.addPropertyResult("serverCertificateArn", "ServerCertificateArn", cfn_parse.FromCloudFormation.getString(properties.ServerCertificateArn));
      ret.addPropertyResult("clientConnectOptions", "ClientConnectOptions", properties.ClientConnectOptions != null ? CfnClientVpnEndpointClientConnectOptionsPropertyFromCloudFormation(properties.ClientConnectOptions) : void 0);
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("dnsServers", "DnsServers", properties.DnsServers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.DnsServers) : void 0);
      ret.addPropertyResult("securityGroupIds", "SecurityGroupIds", properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds) : void 0);
      ret.addPropertyResult("selfServicePortal", "SelfServicePortal", properties.SelfServicePortal != null ? cfn_parse.FromCloudFormation.getString(properties.SelfServicePortal) : void 0);
      ret.addPropertyResult("splitTunnel", "SplitTunnel", properties.SplitTunnel != null ? cfn_parse.FromCloudFormation.getBoolean(properties.SplitTunnel) : void 0);
      ret.addPropertyResult("tagSpecifications", "TagSpecifications", properties.TagSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnClientVpnEndpointTagSpecificationPropertyFromCloudFormation)(properties.TagSpecifications) : void 0);
      ret.addPropertyResult("transportProtocol", "TransportProtocol", properties.TransportProtocol != null ? cfn_parse.FromCloudFormation.getString(properties.TransportProtocol) : void 0);
      ret.addPropertyResult("vpcId", "VpcId", properties.VpcId != null ? cfn_parse.FromCloudFormation.getString(properties.VpcId) : void 0);
      ret.addPropertyResult("vpnPort", "VpnPort", properties.VpnPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.VpnPort) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnClientVpnEndpoint = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnClientVpnEndpoint.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "authenticationOptions", this);
        cdk.requireProperty(props, "clientCidrBlock", this);
        cdk.requireProperty(props, "connectionLogOptions", this);
        cdk.requireProperty(props, "serverCertificateArn", this);
        this.authenticationOptions = props.authenticationOptions;
        this.clientCidrBlock = props.clientCidrBlock;
        this.connectionLogOptions = props.connectionLogOptions;
        this.serverCertificateArn = props.serverCertificateArn;
        this.clientConnectOptions = props.clientConnectOptions;
        this.description = props.description;
        this.dnsServers = props.dnsServers;
        this.securityGroupIds = props.securityGroupIds;
        this.selfServicePortal = props.selfServicePortal;
        this.splitTunnel = props.splitTunnel;
        this.tagSpecifications = props.tagSpecifications;
        this.transportProtocol = props.transportProtocol;
        this.vpcId = props.vpcId;
        this.vpnPort = props.vpnPort;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnClientVpnEndpointPropsFromCloudFormation(resourceProperties);
        const ret = new CfnClientVpnEndpoint(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnClientVpnEndpoint.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          authenticationOptions: this.authenticationOptions,
          clientCidrBlock: this.clientCidrBlock,
          connectionLogOptions: this.connectionLogOptions,
          serverCertificateArn: this.serverCertificateArn,
          clientConnectOptions: this.clientConnectOptions,
          description: this.description,
          dnsServers: this.dnsServers,
          securityGroupIds: this.securityGroupIds,
          selfServicePortal: this.selfServicePortal,
          splitTunnel: this.splitTunnel,
          tagSpecifications: this.tagSpecifications,
          transportProtocol: this.transportProtocol,
          vpcId: this.vpcId,
          vpnPort: this.vpnPort
        };
      }
      renderProperties(props) {
        return cfnClientVpnEndpointPropsToCloudFormation(props);
      }
    };
    exports2.CfnClientVpnEndpoint = CfnClientVpnEndpoint;
    _e = JSII_RTTI_SYMBOL_1;
    CfnClientVpnEndpoint[_e] = { fqn: "@aws-cdk/aws-ec2.CfnClientVpnEndpoint", version: "1.132.0" };
    CfnClientVpnEndpoint.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::ClientVpnEndpoint";
    function CfnClientVpnEndpoint_CertificateAuthenticationRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("clientRootCertificateChainArn", cdk.requiredValidator)(properties.clientRootCertificateChainArn));
      errors.collect(cdk.propertyValidator("clientRootCertificateChainArn", cdk.validateString)(properties.clientRootCertificateChainArn));
      return errors.wrap('supplied properties not correct for "CertificateAuthenticationRequestProperty"');
    }
    function cfnClientVpnEndpointCertificateAuthenticationRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnClientVpnEndpoint_CertificateAuthenticationRequestPropertyValidator(properties).assertSuccess();
      return {
        ClientRootCertificateChainArn: cdk.stringToCloudFormation(properties.clientRootCertificateChainArn)
      };
    }
    function CfnClientVpnEndpointCertificateAuthenticationRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("clientRootCertificateChainArn", "ClientRootCertificateChainArn", cfn_parse.FromCloudFormation.getString(properties.ClientRootCertificateChainArn));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnClientVpnEndpoint_ClientAuthenticationRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("activeDirectory", CfnClientVpnEndpoint_DirectoryServiceAuthenticationRequestPropertyValidator)(properties.activeDirectory));
      errors.collect(cdk.propertyValidator("federatedAuthentication", CfnClientVpnEndpoint_FederatedAuthenticationRequestPropertyValidator)(properties.federatedAuthentication));
      errors.collect(cdk.propertyValidator("mutualAuthentication", CfnClientVpnEndpoint_CertificateAuthenticationRequestPropertyValidator)(properties.mutualAuthentication));
      errors.collect(cdk.propertyValidator("type", cdk.requiredValidator)(properties.type));
      errors.collect(cdk.propertyValidator("type", cdk.validateString)(properties.type));
      return errors.wrap('supplied properties not correct for "ClientAuthenticationRequestProperty"');
    }
    function cfnClientVpnEndpointClientAuthenticationRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnClientVpnEndpoint_ClientAuthenticationRequestPropertyValidator(properties).assertSuccess();
      return {
        ActiveDirectory: cfnClientVpnEndpointDirectoryServiceAuthenticationRequestPropertyToCloudFormation(properties.activeDirectory),
        FederatedAuthentication: cfnClientVpnEndpointFederatedAuthenticationRequestPropertyToCloudFormation(properties.federatedAuthentication),
        MutualAuthentication: cfnClientVpnEndpointCertificateAuthenticationRequestPropertyToCloudFormation(properties.mutualAuthentication),
        Type: cdk.stringToCloudFormation(properties.type)
      };
    }
    function CfnClientVpnEndpointClientAuthenticationRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("activeDirectory", "ActiveDirectory", properties.ActiveDirectory != null ? CfnClientVpnEndpointDirectoryServiceAuthenticationRequestPropertyFromCloudFormation(properties.ActiveDirectory) : void 0);
      ret.addPropertyResult("federatedAuthentication", "FederatedAuthentication", properties.FederatedAuthentication != null ? CfnClientVpnEndpointFederatedAuthenticationRequestPropertyFromCloudFormation(properties.FederatedAuthentication) : void 0);
      ret.addPropertyResult("mutualAuthentication", "MutualAuthentication", properties.MutualAuthentication != null ? CfnClientVpnEndpointCertificateAuthenticationRequestPropertyFromCloudFormation(properties.MutualAuthentication) : void 0);
      ret.addPropertyResult("type", "Type", cfn_parse.FromCloudFormation.getString(properties.Type));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnClientVpnEndpoint_ClientConnectOptionsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("enabled", cdk.requiredValidator)(properties.enabled));
      errors.collect(cdk.propertyValidator("enabled", cdk.validateBoolean)(properties.enabled));
      errors.collect(cdk.propertyValidator("lambdaFunctionArn", cdk.validateString)(properties.lambdaFunctionArn));
      return errors.wrap('supplied properties not correct for "ClientConnectOptionsProperty"');
    }
    function cfnClientVpnEndpointClientConnectOptionsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnClientVpnEndpoint_ClientConnectOptionsPropertyValidator(properties).assertSuccess();
      return {
        Enabled: cdk.booleanToCloudFormation(properties.enabled),
        LambdaFunctionArn: cdk.stringToCloudFormation(properties.lambdaFunctionArn)
      };
    }
    function CfnClientVpnEndpointClientConnectOptionsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("enabled", "Enabled", cfn_parse.FromCloudFormation.getBoolean(properties.Enabled));
      ret.addPropertyResult("lambdaFunctionArn", "LambdaFunctionArn", properties.LambdaFunctionArn != null ? cfn_parse.FromCloudFormation.getString(properties.LambdaFunctionArn) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnClientVpnEndpoint_ConnectionLogOptionsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("cloudwatchLogGroup", cdk.validateString)(properties.cloudwatchLogGroup));
      errors.collect(cdk.propertyValidator("cloudwatchLogStream", cdk.validateString)(properties.cloudwatchLogStream));
      errors.collect(cdk.propertyValidator("enabled", cdk.requiredValidator)(properties.enabled));
      errors.collect(cdk.propertyValidator("enabled", cdk.validateBoolean)(properties.enabled));
      return errors.wrap('supplied properties not correct for "ConnectionLogOptionsProperty"');
    }
    function cfnClientVpnEndpointConnectionLogOptionsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnClientVpnEndpoint_ConnectionLogOptionsPropertyValidator(properties).assertSuccess();
      return {
        CloudwatchLogGroup: cdk.stringToCloudFormation(properties.cloudwatchLogGroup),
        CloudwatchLogStream: cdk.stringToCloudFormation(properties.cloudwatchLogStream),
        Enabled: cdk.booleanToCloudFormation(properties.enabled)
      };
    }
    function CfnClientVpnEndpointConnectionLogOptionsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("cloudwatchLogGroup", "CloudwatchLogGroup", properties.CloudwatchLogGroup != null ? cfn_parse.FromCloudFormation.getString(properties.CloudwatchLogGroup) : void 0);
      ret.addPropertyResult("cloudwatchLogStream", "CloudwatchLogStream", properties.CloudwatchLogStream != null ? cfn_parse.FromCloudFormation.getString(properties.CloudwatchLogStream) : void 0);
      ret.addPropertyResult("enabled", "Enabled", cfn_parse.FromCloudFormation.getBoolean(properties.Enabled));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnClientVpnEndpoint_DirectoryServiceAuthenticationRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("directoryId", cdk.requiredValidator)(properties.directoryId));
      errors.collect(cdk.propertyValidator("directoryId", cdk.validateString)(properties.directoryId));
      return errors.wrap('supplied properties not correct for "DirectoryServiceAuthenticationRequestProperty"');
    }
    function cfnClientVpnEndpointDirectoryServiceAuthenticationRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnClientVpnEndpoint_DirectoryServiceAuthenticationRequestPropertyValidator(properties).assertSuccess();
      return {
        DirectoryId: cdk.stringToCloudFormation(properties.directoryId)
      };
    }
    function CfnClientVpnEndpointDirectoryServiceAuthenticationRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("directoryId", "DirectoryId", cfn_parse.FromCloudFormation.getString(properties.DirectoryId));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnClientVpnEndpoint_FederatedAuthenticationRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("samlProviderArn", cdk.requiredValidator)(properties.samlProviderArn));
      errors.collect(cdk.propertyValidator("samlProviderArn", cdk.validateString)(properties.samlProviderArn));
      errors.collect(cdk.propertyValidator("selfServiceSamlProviderArn", cdk.validateString)(properties.selfServiceSamlProviderArn));
      return errors.wrap('supplied properties not correct for "FederatedAuthenticationRequestProperty"');
    }
    function cfnClientVpnEndpointFederatedAuthenticationRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnClientVpnEndpoint_FederatedAuthenticationRequestPropertyValidator(properties).assertSuccess();
      return {
        SAMLProviderArn: cdk.stringToCloudFormation(properties.samlProviderArn),
        SelfServiceSAMLProviderArn: cdk.stringToCloudFormation(properties.selfServiceSamlProviderArn)
      };
    }
    function CfnClientVpnEndpointFederatedAuthenticationRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("samlProviderArn", "SAMLProviderArn", cfn_parse.FromCloudFormation.getString(properties.SAMLProviderArn));
      ret.addPropertyResult("selfServiceSamlProviderArn", "SelfServiceSAMLProviderArn", properties.SelfServiceSAMLProviderArn != null ? cfn_parse.FromCloudFormation.getString(properties.SelfServiceSAMLProviderArn) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnClientVpnEndpoint_TagSpecificationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("resourceType", cdk.requiredValidator)(properties.resourceType));
      errors.collect(cdk.propertyValidator("resourceType", cdk.validateString)(properties.resourceType));
      errors.collect(cdk.propertyValidator("tags", cdk.requiredValidator)(properties.tags));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "TagSpecificationProperty"');
    }
    function cfnClientVpnEndpointTagSpecificationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnClientVpnEndpoint_TagSpecificationPropertyValidator(properties).assertSuccess();
      return {
        ResourceType: cdk.stringToCloudFormation(properties.resourceType),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnClientVpnEndpointTagSpecificationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("resourceType", "ResourceType", cfn_parse.FromCloudFormation.getString(properties.ResourceType));
      ret.addPropertyResult("tags", "Tags", cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnClientVpnRoutePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("clientVpnEndpointId", cdk.requiredValidator)(properties.clientVpnEndpointId));
      errors.collect(cdk.propertyValidator("clientVpnEndpointId", cdk.validateString)(properties.clientVpnEndpointId));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("destinationCidrBlock", cdk.requiredValidator)(properties.destinationCidrBlock));
      errors.collect(cdk.propertyValidator("destinationCidrBlock", cdk.validateString)(properties.destinationCidrBlock));
      errors.collect(cdk.propertyValidator("targetVpcSubnetId", cdk.requiredValidator)(properties.targetVpcSubnetId));
      errors.collect(cdk.propertyValidator("targetVpcSubnetId", cdk.validateString)(properties.targetVpcSubnetId));
      return errors.wrap('supplied properties not correct for "CfnClientVpnRouteProps"');
    }
    function cfnClientVpnRoutePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnClientVpnRoutePropsValidator(properties).assertSuccess();
      return {
        ClientVpnEndpointId: cdk.stringToCloudFormation(properties.clientVpnEndpointId),
        DestinationCidrBlock: cdk.stringToCloudFormation(properties.destinationCidrBlock),
        TargetVpcSubnetId: cdk.stringToCloudFormation(properties.targetVpcSubnetId),
        Description: cdk.stringToCloudFormation(properties.description)
      };
    }
    function CfnClientVpnRoutePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("clientVpnEndpointId", "ClientVpnEndpointId", cfn_parse.FromCloudFormation.getString(properties.ClientVpnEndpointId));
      ret.addPropertyResult("destinationCidrBlock", "DestinationCidrBlock", cfn_parse.FromCloudFormation.getString(properties.DestinationCidrBlock));
      ret.addPropertyResult("targetVpcSubnetId", "TargetVpcSubnetId", cfn_parse.FromCloudFormation.getString(properties.TargetVpcSubnetId));
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnClientVpnRoute = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnClientVpnRoute.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "clientVpnEndpointId", this);
        cdk.requireProperty(props, "destinationCidrBlock", this);
        cdk.requireProperty(props, "targetVpcSubnetId", this);
        this.clientVpnEndpointId = props.clientVpnEndpointId;
        this.destinationCidrBlock = props.destinationCidrBlock;
        this.targetVpcSubnetId = props.targetVpcSubnetId;
        this.description = props.description;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnClientVpnRoutePropsFromCloudFormation(resourceProperties);
        const ret = new CfnClientVpnRoute(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnClientVpnRoute.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          clientVpnEndpointId: this.clientVpnEndpointId,
          destinationCidrBlock: this.destinationCidrBlock,
          targetVpcSubnetId: this.targetVpcSubnetId,
          description: this.description
        };
      }
      renderProperties(props) {
        return cfnClientVpnRoutePropsToCloudFormation(props);
      }
    };
    exports2.CfnClientVpnRoute = CfnClientVpnRoute;
    _f = JSII_RTTI_SYMBOL_1;
    CfnClientVpnRoute[_f] = { fqn: "@aws-cdk/aws-ec2.CfnClientVpnRoute", version: "1.132.0" };
    CfnClientVpnRoute.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::ClientVpnRoute";
    function CfnClientVpnTargetNetworkAssociationPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("clientVpnEndpointId", cdk.requiredValidator)(properties.clientVpnEndpointId));
      errors.collect(cdk.propertyValidator("clientVpnEndpointId", cdk.validateString)(properties.clientVpnEndpointId));
      errors.collect(cdk.propertyValidator("subnetId", cdk.requiredValidator)(properties.subnetId));
      errors.collect(cdk.propertyValidator("subnetId", cdk.validateString)(properties.subnetId));
      return errors.wrap('supplied properties not correct for "CfnClientVpnTargetNetworkAssociationProps"');
    }
    function cfnClientVpnTargetNetworkAssociationPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnClientVpnTargetNetworkAssociationPropsValidator(properties).assertSuccess();
      return {
        ClientVpnEndpointId: cdk.stringToCloudFormation(properties.clientVpnEndpointId),
        SubnetId: cdk.stringToCloudFormation(properties.subnetId)
      };
    }
    function CfnClientVpnTargetNetworkAssociationPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("clientVpnEndpointId", "ClientVpnEndpointId", cfn_parse.FromCloudFormation.getString(properties.ClientVpnEndpointId));
      ret.addPropertyResult("subnetId", "SubnetId", cfn_parse.FromCloudFormation.getString(properties.SubnetId));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnClientVpnTargetNetworkAssociation = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnClientVpnTargetNetworkAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "clientVpnEndpointId", this);
        cdk.requireProperty(props, "subnetId", this);
        this.clientVpnEndpointId = props.clientVpnEndpointId;
        this.subnetId = props.subnetId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnClientVpnTargetNetworkAssociationPropsFromCloudFormation(resourceProperties);
        const ret = new CfnClientVpnTargetNetworkAssociation(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnClientVpnTargetNetworkAssociation.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          clientVpnEndpointId: this.clientVpnEndpointId,
          subnetId: this.subnetId
        };
      }
      renderProperties(props) {
        return cfnClientVpnTargetNetworkAssociationPropsToCloudFormation(props);
      }
    };
    exports2.CfnClientVpnTargetNetworkAssociation = CfnClientVpnTargetNetworkAssociation;
    _g = JSII_RTTI_SYMBOL_1;
    CfnClientVpnTargetNetworkAssociation[_g] = { fqn: "@aws-cdk/aws-ec2.CfnClientVpnTargetNetworkAssociation", version: "1.132.0" };
    CfnClientVpnTargetNetworkAssociation.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::ClientVpnTargetNetworkAssociation";
    function CfnCustomerGatewayPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("bgpAsn", cdk.requiredValidator)(properties.bgpAsn));
      errors.collect(cdk.propertyValidator("bgpAsn", cdk.validateNumber)(properties.bgpAsn));
      errors.collect(cdk.propertyValidator("ipAddress", cdk.requiredValidator)(properties.ipAddress));
      errors.collect(cdk.propertyValidator("ipAddress", cdk.validateString)(properties.ipAddress));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("type", cdk.requiredValidator)(properties.type));
      errors.collect(cdk.propertyValidator("type", cdk.validateString)(properties.type));
      return errors.wrap('supplied properties not correct for "CfnCustomerGatewayProps"');
    }
    function cfnCustomerGatewayPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnCustomerGatewayPropsValidator(properties).assertSuccess();
      return {
        BgpAsn: cdk.numberToCloudFormation(properties.bgpAsn),
        IpAddress: cdk.stringToCloudFormation(properties.ipAddress),
        Type: cdk.stringToCloudFormation(properties.type),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnCustomerGatewayPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("bgpAsn", "BgpAsn", cfn_parse.FromCloudFormation.getNumber(properties.BgpAsn));
      ret.addPropertyResult("ipAddress", "IpAddress", cfn_parse.FromCloudFormation.getString(properties.IpAddress));
      ret.addPropertyResult("type", "Type", cfn_parse.FromCloudFormation.getString(properties.Type));
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnCustomerGateway = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnCustomerGateway.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "bgpAsn", this);
        cdk.requireProperty(props, "ipAddress", this);
        cdk.requireProperty(props, "type", this);
        this.bgpAsn = props.bgpAsn;
        this.ipAddress = props.ipAddress;
        this.type = props.type;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::CustomerGateway", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnCustomerGatewayPropsFromCloudFormation(resourceProperties);
        const ret = new CfnCustomerGateway(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnCustomerGateway.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          bgpAsn: this.bgpAsn,
          ipAddress: this.ipAddress,
          type: this.type,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnCustomerGatewayPropsToCloudFormation(props);
      }
    };
    exports2.CfnCustomerGateway = CfnCustomerGateway;
    _h = JSII_RTTI_SYMBOL_1;
    CfnCustomerGateway[_h] = { fqn: "@aws-cdk/aws-ec2.CfnCustomerGateway", version: "1.132.0" };
    CfnCustomerGateway.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::CustomerGateway";
    function CfnDHCPOptionsPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("domainName", cdk.validateString)(properties.domainName));
      errors.collect(cdk.propertyValidator("domainNameServers", cdk.listValidator(cdk.validateString))(properties.domainNameServers));
      errors.collect(cdk.propertyValidator("netbiosNameServers", cdk.listValidator(cdk.validateString))(properties.netbiosNameServers));
      errors.collect(cdk.propertyValidator("netbiosNodeType", cdk.validateNumber)(properties.netbiosNodeType));
      errors.collect(cdk.propertyValidator("ntpServers", cdk.listValidator(cdk.validateString))(properties.ntpServers));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnDHCPOptionsProps"');
    }
    function cfnDHCPOptionsPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnDHCPOptionsPropsValidator(properties).assertSuccess();
      return {
        DomainName: cdk.stringToCloudFormation(properties.domainName),
        DomainNameServers: cdk.listMapper(cdk.stringToCloudFormation)(properties.domainNameServers),
        NetbiosNameServers: cdk.listMapper(cdk.stringToCloudFormation)(properties.netbiosNameServers),
        NetbiosNodeType: cdk.numberToCloudFormation(properties.netbiosNodeType),
        NtpServers: cdk.listMapper(cdk.stringToCloudFormation)(properties.ntpServers),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnDHCPOptionsPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("domainName", "DomainName", properties.DomainName != null ? cfn_parse.FromCloudFormation.getString(properties.DomainName) : void 0);
      ret.addPropertyResult("domainNameServers", "DomainNameServers", properties.DomainNameServers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.DomainNameServers) : void 0);
      ret.addPropertyResult("netbiosNameServers", "NetbiosNameServers", properties.NetbiosNameServers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.NetbiosNameServers) : void 0);
      ret.addPropertyResult("netbiosNodeType", "NetbiosNodeType", properties.NetbiosNodeType != null ? cfn_parse.FromCloudFormation.getNumber(properties.NetbiosNodeType) : void 0);
      ret.addPropertyResult("ntpServers", "NtpServers", properties.NtpServers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.NtpServers) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnDHCPOptions = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnDHCPOptions.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.attrDhcpOptionsId = cdk.Token.asString(this.getAtt("DhcpOptionsId"));
        this.domainName = props.domainName;
        this.domainNameServers = props.domainNameServers;
        this.netbiosNameServers = props.netbiosNameServers;
        this.netbiosNodeType = props.netbiosNodeType;
        this.ntpServers = props.ntpServers;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::DHCPOptions", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnDHCPOptionsPropsFromCloudFormation(resourceProperties);
        const ret = new CfnDHCPOptions(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnDHCPOptions.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          domainName: this.domainName,
          domainNameServers: this.domainNameServers,
          netbiosNameServers: this.netbiosNameServers,
          netbiosNodeType: this.netbiosNodeType,
          ntpServers: this.ntpServers,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnDHCPOptionsPropsToCloudFormation(props);
      }
    };
    exports2.CfnDHCPOptions = CfnDHCPOptions;
    _j = JSII_RTTI_SYMBOL_1;
    CfnDHCPOptions[_j] = { fqn: "@aws-cdk/aws-ec2.CfnDHCPOptions", version: "1.132.0" };
    CfnDHCPOptions.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::DHCPOptions";
    function CfnEC2FleetPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("context", cdk.validateString)(properties.context));
      errors.collect(cdk.propertyValidator("excessCapacityTerminationPolicy", cdk.validateString)(properties.excessCapacityTerminationPolicy));
      errors.collect(cdk.propertyValidator("launchTemplateConfigs", cdk.requiredValidator)(properties.launchTemplateConfigs));
      errors.collect(cdk.propertyValidator("launchTemplateConfigs", cdk.listValidator(CfnEC2Fleet_FleetLaunchTemplateConfigRequestPropertyValidator))(properties.launchTemplateConfigs));
      errors.collect(cdk.propertyValidator("onDemandOptions", CfnEC2Fleet_OnDemandOptionsRequestPropertyValidator)(properties.onDemandOptions));
      errors.collect(cdk.propertyValidator("replaceUnhealthyInstances", cdk.validateBoolean)(properties.replaceUnhealthyInstances));
      errors.collect(cdk.propertyValidator("spotOptions", CfnEC2Fleet_SpotOptionsRequestPropertyValidator)(properties.spotOptions));
      errors.collect(cdk.propertyValidator("tagSpecifications", cdk.listValidator(CfnEC2Fleet_TagSpecificationPropertyValidator))(properties.tagSpecifications));
      errors.collect(cdk.propertyValidator("targetCapacitySpecification", cdk.requiredValidator)(properties.targetCapacitySpecification));
      errors.collect(cdk.propertyValidator("targetCapacitySpecification", CfnEC2Fleet_TargetCapacitySpecificationRequestPropertyValidator)(properties.targetCapacitySpecification));
      errors.collect(cdk.propertyValidator("terminateInstancesWithExpiration", cdk.validateBoolean)(properties.terminateInstancesWithExpiration));
      errors.collect(cdk.propertyValidator("type", cdk.validateString)(properties.type));
      errors.collect(cdk.propertyValidator("validFrom", cdk.validateString)(properties.validFrom));
      errors.collect(cdk.propertyValidator("validUntil", cdk.validateString)(properties.validUntil));
      return errors.wrap('supplied properties not correct for "CfnEC2FleetProps"');
    }
    function cfnEC2FleetPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEC2FleetPropsValidator(properties).assertSuccess();
      return {
        LaunchTemplateConfigs: cdk.listMapper(cfnEC2FleetFleetLaunchTemplateConfigRequestPropertyToCloudFormation)(properties.launchTemplateConfigs),
        TargetCapacitySpecification: cfnEC2FleetTargetCapacitySpecificationRequestPropertyToCloudFormation(properties.targetCapacitySpecification),
        Context: cdk.stringToCloudFormation(properties.context),
        ExcessCapacityTerminationPolicy: cdk.stringToCloudFormation(properties.excessCapacityTerminationPolicy),
        OnDemandOptions: cfnEC2FleetOnDemandOptionsRequestPropertyToCloudFormation(properties.onDemandOptions),
        ReplaceUnhealthyInstances: cdk.booleanToCloudFormation(properties.replaceUnhealthyInstances),
        SpotOptions: cfnEC2FleetSpotOptionsRequestPropertyToCloudFormation(properties.spotOptions),
        TagSpecifications: cdk.listMapper(cfnEC2FleetTagSpecificationPropertyToCloudFormation)(properties.tagSpecifications),
        TerminateInstancesWithExpiration: cdk.booleanToCloudFormation(properties.terminateInstancesWithExpiration),
        Type: cdk.stringToCloudFormation(properties.type),
        ValidFrom: cdk.stringToCloudFormation(properties.validFrom),
        ValidUntil: cdk.stringToCloudFormation(properties.validUntil)
      };
    }
    function CfnEC2FleetPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("launchTemplateConfigs", "LaunchTemplateConfigs", cfn_parse.FromCloudFormation.getArray(CfnEC2FleetFleetLaunchTemplateConfigRequestPropertyFromCloudFormation)(properties.LaunchTemplateConfigs));
      ret.addPropertyResult("targetCapacitySpecification", "TargetCapacitySpecification", CfnEC2FleetTargetCapacitySpecificationRequestPropertyFromCloudFormation(properties.TargetCapacitySpecification));
      ret.addPropertyResult("context", "Context", properties.Context != null ? cfn_parse.FromCloudFormation.getString(properties.Context) : void 0);
      ret.addPropertyResult("excessCapacityTerminationPolicy", "ExcessCapacityTerminationPolicy", properties.ExcessCapacityTerminationPolicy != null ? cfn_parse.FromCloudFormation.getString(properties.ExcessCapacityTerminationPolicy) : void 0);
      ret.addPropertyResult("onDemandOptions", "OnDemandOptions", properties.OnDemandOptions != null ? CfnEC2FleetOnDemandOptionsRequestPropertyFromCloudFormation(properties.OnDemandOptions) : void 0);
      ret.addPropertyResult("replaceUnhealthyInstances", "ReplaceUnhealthyInstances", properties.ReplaceUnhealthyInstances != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ReplaceUnhealthyInstances) : void 0);
      ret.addPropertyResult("spotOptions", "SpotOptions", properties.SpotOptions != null ? CfnEC2FleetSpotOptionsRequestPropertyFromCloudFormation(properties.SpotOptions) : void 0);
      ret.addPropertyResult("tagSpecifications", "TagSpecifications", properties.TagSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnEC2FleetTagSpecificationPropertyFromCloudFormation)(properties.TagSpecifications) : void 0);
      ret.addPropertyResult("terminateInstancesWithExpiration", "TerminateInstancesWithExpiration", properties.TerminateInstancesWithExpiration != null ? cfn_parse.FromCloudFormation.getBoolean(properties.TerminateInstancesWithExpiration) : void 0);
      ret.addPropertyResult("type", "Type", properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : void 0);
      ret.addPropertyResult("validFrom", "ValidFrom", properties.ValidFrom != null ? cfn_parse.FromCloudFormation.getString(properties.ValidFrom) : void 0);
      ret.addPropertyResult("validUntil", "ValidUntil", properties.ValidUntil != null ? cfn_parse.FromCloudFormation.getString(properties.ValidUntil) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnEC2Fleet = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnEC2Fleet.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "launchTemplateConfigs", this);
        cdk.requireProperty(props, "targetCapacitySpecification", this);
        this.attrFleetId = cdk.Token.asString(this.getAtt("FleetId"));
        this.launchTemplateConfigs = props.launchTemplateConfigs;
        this.targetCapacitySpecification = props.targetCapacitySpecification;
        this.context = props.context;
        this.excessCapacityTerminationPolicy = props.excessCapacityTerminationPolicy;
        this.onDemandOptions = props.onDemandOptions;
        this.replaceUnhealthyInstances = props.replaceUnhealthyInstances;
        this.spotOptions = props.spotOptions;
        this.tagSpecifications = props.tagSpecifications;
        this.terminateInstancesWithExpiration = props.terminateInstancesWithExpiration;
        this.type = props.type;
        this.validFrom = props.validFrom;
        this.validUntil = props.validUntil;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnEC2FleetPropsFromCloudFormation(resourceProperties);
        const ret = new CfnEC2Fleet(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnEC2Fleet.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          launchTemplateConfigs: this.launchTemplateConfigs,
          targetCapacitySpecification: this.targetCapacitySpecification,
          context: this.context,
          excessCapacityTerminationPolicy: this.excessCapacityTerminationPolicy,
          onDemandOptions: this.onDemandOptions,
          replaceUnhealthyInstances: this.replaceUnhealthyInstances,
          spotOptions: this.spotOptions,
          tagSpecifications: this.tagSpecifications,
          terminateInstancesWithExpiration: this.terminateInstancesWithExpiration,
          type: this.type,
          validFrom: this.validFrom,
          validUntil: this.validUntil
        };
      }
      renderProperties(props) {
        return cfnEC2FleetPropsToCloudFormation(props);
      }
    };
    exports2.CfnEC2Fleet = CfnEC2Fleet;
    _k = JSII_RTTI_SYMBOL_1;
    CfnEC2Fleet[_k] = { fqn: "@aws-cdk/aws-ec2.CfnEC2Fleet", version: "1.132.0" };
    CfnEC2Fleet.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::EC2Fleet";
    function CfnEC2Fleet_AcceleratorCountRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("max", cdk.validateNumber)(properties.max));
      errors.collect(cdk.propertyValidator("min", cdk.validateNumber)(properties.min));
      return errors.wrap('supplied properties not correct for "AcceleratorCountRequestProperty"');
    }
    function cfnEC2FleetAcceleratorCountRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEC2Fleet_AcceleratorCountRequestPropertyValidator(properties).assertSuccess();
      return {
        Max: cdk.numberToCloudFormation(properties.max),
        Min: cdk.numberToCloudFormation(properties.min)
      };
    }
    function CfnEC2FleetAcceleratorCountRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("max", "Max", properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : void 0);
      ret.addPropertyResult("min", "Min", properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEC2Fleet_AcceleratorTotalMemoryMiBRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("max", cdk.validateNumber)(properties.max));
      errors.collect(cdk.propertyValidator("min", cdk.validateNumber)(properties.min));
      return errors.wrap('supplied properties not correct for "AcceleratorTotalMemoryMiBRequestProperty"');
    }
    function cfnEC2FleetAcceleratorTotalMemoryMiBRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEC2Fleet_AcceleratorTotalMemoryMiBRequestPropertyValidator(properties).assertSuccess();
      return {
        Max: cdk.numberToCloudFormation(properties.max),
        Min: cdk.numberToCloudFormation(properties.min)
      };
    }
    function CfnEC2FleetAcceleratorTotalMemoryMiBRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("max", "Max", properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : void 0);
      ret.addPropertyResult("min", "Min", properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEC2Fleet_BaselineEbsBandwidthMbpsRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("max", cdk.validateNumber)(properties.max));
      errors.collect(cdk.propertyValidator("min", cdk.validateNumber)(properties.min));
      return errors.wrap('supplied properties not correct for "BaselineEbsBandwidthMbpsRequestProperty"');
    }
    function cfnEC2FleetBaselineEbsBandwidthMbpsRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEC2Fleet_BaselineEbsBandwidthMbpsRequestPropertyValidator(properties).assertSuccess();
      return {
        Max: cdk.numberToCloudFormation(properties.max),
        Min: cdk.numberToCloudFormation(properties.min)
      };
    }
    function CfnEC2FleetBaselineEbsBandwidthMbpsRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("max", "Max", properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : void 0);
      ret.addPropertyResult("min", "Min", properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEC2Fleet_CapacityRebalancePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("replacementStrategy", cdk.validateString)(properties.replacementStrategy));
      errors.collect(cdk.propertyValidator("terminationDelay", cdk.validateNumber)(properties.terminationDelay));
      return errors.wrap('supplied properties not correct for "CapacityRebalanceProperty"');
    }
    function cfnEC2FleetCapacityRebalancePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEC2Fleet_CapacityRebalancePropertyValidator(properties).assertSuccess();
      return {
        ReplacementStrategy: cdk.stringToCloudFormation(properties.replacementStrategy),
        TerminationDelay: cdk.numberToCloudFormation(properties.terminationDelay)
      };
    }
    function CfnEC2FleetCapacityRebalancePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("replacementStrategy", "ReplacementStrategy", properties.ReplacementStrategy != null ? cfn_parse.FromCloudFormation.getString(properties.ReplacementStrategy) : void 0);
      ret.addPropertyResult("terminationDelay", "TerminationDelay", properties.TerminationDelay != null ? cfn_parse.FromCloudFormation.getNumber(properties.TerminationDelay) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEC2Fleet_CapacityReservationOptionsRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("usageStrategy", cdk.validateString)(properties.usageStrategy));
      return errors.wrap('supplied properties not correct for "CapacityReservationOptionsRequestProperty"');
    }
    function cfnEC2FleetCapacityReservationOptionsRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEC2Fleet_CapacityReservationOptionsRequestPropertyValidator(properties).assertSuccess();
      return {
        UsageStrategy: cdk.stringToCloudFormation(properties.usageStrategy)
      };
    }
    function CfnEC2FleetCapacityReservationOptionsRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("usageStrategy", "UsageStrategy", properties.UsageStrategy != null ? cfn_parse.FromCloudFormation.getString(properties.UsageStrategy) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEC2Fleet_FleetLaunchTemplateConfigRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("launchTemplateSpecification", CfnEC2Fleet_FleetLaunchTemplateSpecificationRequestPropertyValidator)(properties.launchTemplateSpecification));
      errors.collect(cdk.propertyValidator("overrides", cdk.listValidator(CfnEC2Fleet_FleetLaunchTemplateOverridesRequestPropertyValidator))(properties.overrides));
      return errors.wrap('supplied properties not correct for "FleetLaunchTemplateConfigRequestProperty"');
    }
    function cfnEC2FleetFleetLaunchTemplateConfigRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEC2Fleet_FleetLaunchTemplateConfigRequestPropertyValidator(properties).assertSuccess();
      return {
        LaunchTemplateSpecification: cfnEC2FleetFleetLaunchTemplateSpecificationRequestPropertyToCloudFormation(properties.launchTemplateSpecification),
        Overrides: cdk.listMapper(cfnEC2FleetFleetLaunchTemplateOverridesRequestPropertyToCloudFormation)(properties.overrides)
      };
    }
    function CfnEC2FleetFleetLaunchTemplateConfigRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("launchTemplateSpecification", "LaunchTemplateSpecification", properties.LaunchTemplateSpecification != null ? CfnEC2FleetFleetLaunchTemplateSpecificationRequestPropertyFromCloudFormation(properties.LaunchTemplateSpecification) : void 0);
      ret.addPropertyResult("overrides", "Overrides", properties.Overrides != null ? cfn_parse.FromCloudFormation.getArray(CfnEC2FleetFleetLaunchTemplateOverridesRequestPropertyFromCloudFormation)(properties.Overrides) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEC2Fleet_FleetLaunchTemplateOverridesRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("availabilityZone", cdk.validateString)(properties.availabilityZone));
      errors.collect(cdk.propertyValidator("instanceRequirements", CfnEC2Fleet_InstanceRequirementsRequestPropertyValidator)(properties.instanceRequirements));
      errors.collect(cdk.propertyValidator("instanceType", cdk.validateString)(properties.instanceType));
      errors.collect(cdk.propertyValidator("maxPrice", cdk.validateString)(properties.maxPrice));
      errors.collect(cdk.propertyValidator("placement", CfnEC2Fleet_PlacementPropertyValidator)(properties.placement));
      errors.collect(cdk.propertyValidator("priority", cdk.validateNumber)(properties.priority));
      errors.collect(cdk.propertyValidator("subnetId", cdk.validateString)(properties.subnetId));
      errors.collect(cdk.propertyValidator("weightedCapacity", cdk.validateNumber)(properties.weightedCapacity));
      return errors.wrap('supplied properties not correct for "FleetLaunchTemplateOverridesRequestProperty"');
    }
    function cfnEC2FleetFleetLaunchTemplateOverridesRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEC2Fleet_FleetLaunchTemplateOverridesRequestPropertyValidator(properties).assertSuccess();
      return {
        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),
        InstanceRequirements: cfnEC2FleetInstanceRequirementsRequestPropertyToCloudFormation(properties.instanceRequirements),
        InstanceType: cdk.stringToCloudFormation(properties.instanceType),
        MaxPrice: cdk.stringToCloudFormation(properties.maxPrice),
        Placement: cfnEC2FleetPlacementPropertyToCloudFormation(properties.placement),
        Priority: cdk.numberToCloudFormation(properties.priority),
        SubnetId: cdk.stringToCloudFormation(properties.subnetId),
        WeightedCapacity: cdk.numberToCloudFormation(properties.weightedCapacity)
      };
    }
    function CfnEC2FleetFleetLaunchTemplateOverridesRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("availabilityZone", "AvailabilityZone", properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : void 0);
      ret.addPropertyResult("instanceRequirements", "InstanceRequirements", properties.InstanceRequirements != null ? CfnEC2FleetInstanceRequirementsRequestPropertyFromCloudFormation(properties.InstanceRequirements) : void 0);
      ret.addPropertyResult("instanceType", "InstanceType", properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : void 0);
      ret.addPropertyResult("maxPrice", "MaxPrice", properties.MaxPrice != null ? cfn_parse.FromCloudFormation.getString(properties.MaxPrice) : void 0);
      ret.addPropertyResult("placement", "Placement", properties.Placement != null ? CfnEC2FleetPlacementPropertyFromCloudFormation(properties.Placement) : void 0);
      ret.addPropertyResult("priority", "Priority", properties.Priority != null ? cfn_parse.FromCloudFormation.getNumber(properties.Priority) : void 0);
      ret.addPropertyResult("subnetId", "SubnetId", properties.SubnetId != null ? cfn_parse.FromCloudFormation.getString(properties.SubnetId) : void 0);
      ret.addPropertyResult("weightedCapacity", "WeightedCapacity", properties.WeightedCapacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.WeightedCapacity) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEC2Fleet_FleetLaunchTemplateSpecificationRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("launchTemplateId", cdk.validateString)(properties.launchTemplateId));
      errors.collect(cdk.propertyValidator("launchTemplateName", cdk.validateString)(properties.launchTemplateName));
      errors.collect(cdk.propertyValidator("version", cdk.validateString)(properties.version));
      return errors.wrap('supplied properties not correct for "FleetLaunchTemplateSpecificationRequestProperty"');
    }
    function cfnEC2FleetFleetLaunchTemplateSpecificationRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEC2Fleet_FleetLaunchTemplateSpecificationRequestPropertyValidator(properties).assertSuccess();
      return {
        LaunchTemplateId: cdk.stringToCloudFormation(properties.launchTemplateId),
        LaunchTemplateName: cdk.stringToCloudFormation(properties.launchTemplateName),
        Version: cdk.stringToCloudFormation(properties.version)
      };
    }
    function CfnEC2FleetFleetLaunchTemplateSpecificationRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("launchTemplateId", "LaunchTemplateId", properties.LaunchTemplateId != null ? cfn_parse.FromCloudFormation.getString(properties.LaunchTemplateId) : void 0);
      ret.addPropertyResult("launchTemplateName", "LaunchTemplateName", properties.LaunchTemplateName != null ? cfn_parse.FromCloudFormation.getString(properties.LaunchTemplateName) : void 0);
      ret.addPropertyResult("version", "Version", properties.Version != null ? cfn_parse.FromCloudFormation.getString(properties.Version) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEC2Fleet_InstanceRequirementsRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("acceleratorCount", CfnEC2Fleet_AcceleratorCountRequestPropertyValidator)(properties.acceleratorCount));
      errors.collect(cdk.propertyValidator("acceleratorManufacturers", cdk.listValidator(cdk.validateString))(properties.acceleratorManufacturers));
      errors.collect(cdk.propertyValidator("acceleratorNames", cdk.listValidator(cdk.validateString))(properties.acceleratorNames));
      errors.collect(cdk.propertyValidator("acceleratorTotalMemoryMiB", CfnEC2Fleet_AcceleratorTotalMemoryMiBRequestPropertyValidator)(properties.acceleratorTotalMemoryMiB));
      errors.collect(cdk.propertyValidator("acceleratorTypes", cdk.listValidator(cdk.validateString))(properties.acceleratorTypes));
      errors.collect(cdk.propertyValidator("bareMetal", cdk.validateString)(properties.bareMetal));
      errors.collect(cdk.propertyValidator("baselineEbsBandwidthMbps", CfnEC2Fleet_BaselineEbsBandwidthMbpsRequestPropertyValidator)(properties.baselineEbsBandwidthMbps));
      errors.collect(cdk.propertyValidator("burstablePerformance", cdk.validateString)(properties.burstablePerformance));
      errors.collect(cdk.propertyValidator("cpuManufacturers", cdk.listValidator(cdk.validateString))(properties.cpuManufacturers));
      errors.collect(cdk.propertyValidator("excludedInstanceTypes", cdk.listValidator(cdk.validateString))(properties.excludedInstanceTypes));
      errors.collect(cdk.propertyValidator("instanceGenerations", cdk.listValidator(cdk.validateString))(properties.instanceGenerations));
      errors.collect(cdk.propertyValidator("localStorage", cdk.validateString)(properties.localStorage));
      errors.collect(cdk.propertyValidator("localStorageTypes", cdk.listValidator(cdk.validateString))(properties.localStorageTypes));
      errors.collect(cdk.propertyValidator("memoryGiBPerVCpu", CfnEC2Fleet_MemoryGiBPerVCpuRequestPropertyValidator)(properties.memoryGiBPerVCpu));
      errors.collect(cdk.propertyValidator("memoryMiB", CfnEC2Fleet_MemoryMiBRequestPropertyValidator)(properties.memoryMiB));
      errors.collect(cdk.propertyValidator("networkInterfaceCount", CfnEC2Fleet_NetworkInterfaceCountRequestPropertyValidator)(properties.networkInterfaceCount));
      errors.collect(cdk.propertyValidator("onDemandMaxPricePercentageOverLowestPrice", cdk.validateNumber)(properties.onDemandMaxPricePercentageOverLowestPrice));
      errors.collect(cdk.propertyValidator("requireHibernateSupport", cdk.validateBoolean)(properties.requireHibernateSupport));
      errors.collect(cdk.propertyValidator("spotMaxPricePercentageOverLowestPrice", cdk.validateNumber)(properties.spotMaxPricePercentageOverLowestPrice));
      errors.collect(cdk.propertyValidator("totalLocalStorageGb", CfnEC2Fleet_TotalLocalStorageGBRequestPropertyValidator)(properties.totalLocalStorageGb));
      errors.collect(cdk.propertyValidator("vCpuCount", CfnEC2Fleet_VCpuCountRangeRequestPropertyValidator)(properties.vCpuCount));
      return errors.wrap('supplied properties not correct for "InstanceRequirementsRequestProperty"');
    }
    function cfnEC2FleetInstanceRequirementsRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEC2Fleet_InstanceRequirementsRequestPropertyValidator(properties).assertSuccess();
      return {
        AcceleratorCount: cfnEC2FleetAcceleratorCountRequestPropertyToCloudFormation(properties.acceleratorCount),
        AcceleratorManufacturers: cdk.listMapper(cdk.stringToCloudFormation)(properties.acceleratorManufacturers),
        AcceleratorNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.acceleratorNames),
        AcceleratorTotalMemoryMiB: cfnEC2FleetAcceleratorTotalMemoryMiBRequestPropertyToCloudFormation(properties.acceleratorTotalMemoryMiB),
        AcceleratorTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.acceleratorTypes),
        BareMetal: cdk.stringToCloudFormation(properties.bareMetal),
        BaselineEbsBandwidthMbps: cfnEC2FleetBaselineEbsBandwidthMbpsRequestPropertyToCloudFormation(properties.baselineEbsBandwidthMbps),
        BurstablePerformance: cdk.stringToCloudFormation(properties.burstablePerformance),
        CpuManufacturers: cdk.listMapper(cdk.stringToCloudFormation)(properties.cpuManufacturers),
        ExcludedInstanceTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.excludedInstanceTypes),
        InstanceGenerations: cdk.listMapper(cdk.stringToCloudFormation)(properties.instanceGenerations),
        LocalStorage: cdk.stringToCloudFormation(properties.localStorage),
        LocalStorageTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.localStorageTypes),
        MemoryGiBPerVCpu: cfnEC2FleetMemoryGiBPerVCpuRequestPropertyToCloudFormation(properties.memoryGiBPerVCpu),
        MemoryMiB: cfnEC2FleetMemoryMiBRequestPropertyToCloudFormation(properties.memoryMiB),
        NetworkInterfaceCount: cfnEC2FleetNetworkInterfaceCountRequestPropertyToCloudFormation(properties.networkInterfaceCount),
        OnDemandMaxPricePercentageOverLowestPrice: cdk.numberToCloudFormation(properties.onDemandMaxPricePercentageOverLowestPrice),
        RequireHibernateSupport: cdk.booleanToCloudFormation(properties.requireHibernateSupport),
        SpotMaxPricePercentageOverLowestPrice: cdk.numberToCloudFormation(properties.spotMaxPricePercentageOverLowestPrice),
        TotalLocalStorageGB: cfnEC2FleetTotalLocalStorageGBRequestPropertyToCloudFormation(properties.totalLocalStorageGb),
        VCpuCount: cfnEC2FleetVCpuCountRangeRequestPropertyToCloudFormation(properties.vCpuCount)
      };
    }
    function CfnEC2FleetInstanceRequirementsRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("acceleratorCount", "AcceleratorCount", properties.AcceleratorCount != null ? CfnEC2FleetAcceleratorCountRequestPropertyFromCloudFormation(properties.AcceleratorCount) : void 0);
      ret.addPropertyResult("acceleratorManufacturers", "AcceleratorManufacturers", properties.AcceleratorManufacturers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AcceleratorManufacturers) : void 0);
      ret.addPropertyResult("acceleratorNames", "AcceleratorNames", properties.AcceleratorNames != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AcceleratorNames) : void 0);
      ret.addPropertyResult("acceleratorTotalMemoryMiB", "AcceleratorTotalMemoryMiB", properties.AcceleratorTotalMemoryMiB != null ? CfnEC2FleetAcceleratorTotalMemoryMiBRequestPropertyFromCloudFormation(properties.AcceleratorTotalMemoryMiB) : void 0);
      ret.addPropertyResult("acceleratorTypes", "AcceleratorTypes", properties.AcceleratorTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AcceleratorTypes) : void 0);
      ret.addPropertyResult("bareMetal", "BareMetal", properties.BareMetal != null ? cfn_parse.FromCloudFormation.getString(properties.BareMetal) : void 0);
      ret.addPropertyResult("baselineEbsBandwidthMbps", "BaselineEbsBandwidthMbps", properties.BaselineEbsBandwidthMbps != null ? CfnEC2FleetBaselineEbsBandwidthMbpsRequestPropertyFromCloudFormation(properties.BaselineEbsBandwidthMbps) : void 0);
      ret.addPropertyResult("burstablePerformance", "BurstablePerformance", properties.BurstablePerformance != null ? cfn_parse.FromCloudFormation.getString(properties.BurstablePerformance) : void 0);
      ret.addPropertyResult("cpuManufacturers", "CpuManufacturers", properties.CpuManufacturers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.CpuManufacturers) : void 0);
      ret.addPropertyResult("excludedInstanceTypes", "ExcludedInstanceTypes", properties.ExcludedInstanceTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ExcludedInstanceTypes) : void 0);
      ret.addPropertyResult("instanceGenerations", "InstanceGenerations", properties.InstanceGenerations != null ? cfn_parse.FromCloudFormation.getStringArray(properties.InstanceGenerations) : void 0);
      ret.addPropertyResult("localStorage", "LocalStorage", properties.LocalStorage != null ? cfn_parse.FromCloudFormation.getString(properties.LocalStorage) : void 0);
      ret.addPropertyResult("localStorageTypes", "LocalStorageTypes", properties.LocalStorageTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.LocalStorageTypes) : void 0);
      ret.addPropertyResult("memoryGiBPerVCpu", "MemoryGiBPerVCpu", properties.MemoryGiBPerVCpu != null ? CfnEC2FleetMemoryGiBPerVCpuRequestPropertyFromCloudFormation(properties.MemoryGiBPerVCpu) : void 0);
      ret.addPropertyResult("memoryMiB", "MemoryMiB", properties.MemoryMiB != null ? CfnEC2FleetMemoryMiBRequestPropertyFromCloudFormation(properties.MemoryMiB) : void 0);
      ret.addPropertyResult("networkInterfaceCount", "NetworkInterfaceCount", properties.NetworkInterfaceCount != null ? CfnEC2FleetNetworkInterfaceCountRequestPropertyFromCloudFormation(properties.NetworkInterfaceCount) : void 0);
      ret.addPropertyResult("onDemandMaxPricePercentageOverLowestPrice", "OnDemandMaxPricePercentageOverLowestPrice", properties.OnDemandMaxPricePercentageOverLowestPrice != null ? cfn_parse.FromCloudFormation.getNumber(properties.OnDemandMaxPricePercentageOverLowestPrice) : void 0);
      ret.addPropertyResult("requireHibernateSupport", "RequireHibernateSupport", properties.RequireHibernateSupport != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RequireHibernateSupport) : void 0);
      ret.addPropertyResult("spotMaxPricePercentageOverLowestPrice", "SpotMaxPricePercentageOverLowestPrice", properties.SpotMaxPricePercentageOverLowestPrice != null ? cfn_parse.FromCloudFormation.getNumber(properties.SpotMaxPricePercentageOverLowestPrice) : void 0);
      ret.addPropertyResult("totalLocalStorageGb", "TotalLocalStorageGB", properties.TotalLocalStorageGB != null ? CfnEC2FleetTotalLocalStorageGBRequestPropertyFromCloudFormation(properties.TotalLocalStorageGB) : void 0);
      ret.addPropertyResult("vCpuCount", "VCpuCount", properties.VCpuCount != null ? CfnEC2FleetVCpuCountRangeRequestPropertyFromCloudFormation(properties.VCpuCount) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEC2Fleet_MaintenanceStrategiesPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("capacityRebalance", CfnEC2Fleet_CapacityRebalancePropertyValidator)(properties.capacityRebalance));
      return errors.wrap('supplied properties not correct for "MaintenanceStrategiesProperty"');
    }
    function cfnEC2FleetMaintenanceStrategiesPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEC2Fleet_MaintenanceStrategiesPropertyValidator(properties).assertSuccess();
      return {
        CapacityRebalance: cfnEC2FleetCapacityRebalancePropertyToCloudFormation(properties.capacityRebalance)
      };
    }
    function CfnEC2FleetMaintenanceStrategiesPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("capacityRebalance", "CapacityRebalance", properties.CapacityRebalance != null ? CfnEC2FleetCapacityRebalancePropertyFromCloudFormation(properties.CapacityRebalance) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEC2Fleet_MemoryGiBPerVCpuRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("max", cdk.validateNumber)(properties.max));
      errors.collect(cdk.propertyValidator("min", cdk.validateNumber)(properties.min));
      return errors.wrap('supplied properties not correct for "MemoryGiBPerVCpuRequestProperty"');
    }
    function cfnEC2FleetMemoryGiBPerVCpuRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEC2Fleet_MemoryGiBPerVCpuRequestPropertyValidator(properties).assertSuccess();
      return {
        Max: cdk.numberToCloudFormation(properties.max),
        Min: cdk.numberToCloudFormation(properties.min)
      };
    }
    function CfnEC2FleetMemoryGiBPerVCpuRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("max", "Max", properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : void 0);
      ret.addPropertyResult("min", "Min", properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEC2Fleet_MemoryMiBRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("max", cdk.validateNumber)(properties.max));
      errors.collect(cdk.propertyValidator("min", cdk.validateNumber)(properties.min));
      return errors.wrap('supplied properties not correct for "MemoryMiBRequestProperty"');
    }
    function cfnEC2FleetMemoryMiBRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEC2Fleet_MemoryMiBRequestPropertyValidator(properties).assertSuccess();
      return {
        Max: cdk.numberToCloudFormation(properties.max),
        Min: cdk.numberToCloudFormation(properties.min)
      };
    }
    function CfnEC2FleetMemoryMiBRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("max", "Max", properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : void 0);
      ret.addPropertyResult("min", "Min", properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEC2Fleet_NetworkInterfaceCountRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("max", cdk.validateNumber)(properties.max));
      errors.collect(cdk.propertyValidator("min", cdk.validateNumber)(properties.min));
      return errors.wrap('supplied properties not correct for "NetworkInterfaceCountRequestProperty"');
    }
    function cfnEC2FleetNetworkInterfaceCountRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEC2Fleet_NetworkInterfaceCountRequestPropertyValidator(properties).assertSuccess();
      return {
        Max: cdk.numberToCloudFormation(properties.max),
        Min: cdk.numberToCloudFormation(properties.min)
      };
    }
    function CfnEC2FleetNetworkInterfaceCountRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("max", "Max", properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : void 0);
      ret.addPropertyResult("min", "Min", properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEC2Fleet_OnDemandOptionsRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("allocationStrategy", cdk.validateString)(properties.allocationStrategy));
      errors.collect(cdk.propertyValidator("capacityReservationOptions", CfnEC2Fleet_CapacityReservationOptionsRequestPropertyValidator)(properties.capacityReservationOptions));
      errors.collect(cdk.propertyValidator("maxTotalPrice", cdk.validateString)(properties.maxTotalPrice));
      errors.collect(cdk.propertyValidator("minTargetCapacity", cdk.validateNumber)(properties.minTargetCapacity));
      errors.collect(cdk.propertyValidator("singleAvailabilityZone", cdk.validateBoolean)(properties.singleAvailabilityZone));
      errors.collect(cdk.propertyValidator("singleInstanceType", cdk.validateBoolean)(properties.singleInstanceType));
      return errors.wrap('supplied properties not correct for "OnDemandOptionsRequestProperty"');
    }
    function cfnEC2FleetOnDemandOptionsRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEC2Fleet_OnDemandOptionsRequestPropertyValidator(properties).assertSuccess();
      return {
        AllocationStrategy: cdk.stringToCloudFormation(properties.allocationStrategy),
        CapacityReservationOptions: cfnEC2FleetCapacityReservationOptionsRequestPropertyToCloudFormation(properties.capacityReservationOptions),
        MaxTotalPrice: cdk.stringToCloudFormation(properties.maxTotalPrice),
        MinTargetCapacity: cdk.numberToCloudFormation(properties.minTargetCapacity),
        SingleAvailabilityZone: cdk.booleanToCloudFormation(properties.singleAvailabilityZone),
        SingleInstanceType: cdk.booleanToCloudFormation(properties.singleInstanceType)
      };
    }
    function CfnEC2FleetOnDemandOptionsRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("allocationStrategy", "AllocationStrategy", properties.AllocationStrategy != null ? cfn_parse.FromCloudFormation.getString(properties.AllocationStrategy) : void 0);
      ret.addPropertyResult("capacityReservationOptions", "CapacityReservationOptions", properties.CapacityReservationOptions != null ? CfnEC2FleetCapacityReservationOptionsRequestPropertyFromCloudFormation(properties.CapacityReservationOptions) : void 0);
      ret.addPropertyResult("maxTotalPrice", "MaxTotalPrice", properties.MaxTotalPrice != null ? cfn_parse.FromCloudFormation.getString(properties.MaxTotalPrice) : void 0);
      ret.addPropertyResult("minTargetCapacity", "MinTargetCapacity", properties.MinTargetCapacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinTargetCapacity) : void 0);
      ret.addPropertyResult("singleAvailabilityZone", "SingleAvailabilityZone", properties.SingleAvailabilityZone != null ? cfn_parse.FromCloudFormation.getBoolean(properties.SingleAvailabilityZone) : void 0);
      ret.addPropertyResult("singleInstanceType", "SingleInstanceType", properties.SingleInstanceType != null ? cfn_parse.FromCloudFormation.getBoolean(properties.SingleInstanceType) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEC2Fleet_PlacementPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("affinity", cdk.validateString)(properties.affinity));
      errors.collect(cdk.propertyValidator("availabilityZone", cdk.validateString)(properties.availabilityZone));
      errors.collect(cdk.propertyValidator("groupName", cdk.validateString)(properties.groupName));
      errors.collect(cdk.propertyValidator("hostId", cdk.validateString)(properties.hostId));
      errors.collect(cdk.propertyValidator("hostResourceGroupArn", cdk.validateString)(properties.hostResourceGroupArn));
      errors.collect(cdk.propertyValidator("partitionNumber", cdk.validateNumber)(properties.partitionNumber));
      errors.collect(cdk.propertyValidator("spreadDomain", cdk.validateString)(properties.spreadDomain));
      errors.collect(cdk.propertyValidator("tenancy", cdk.validateString)(properties.tenancy));
      return errors.wrap('supplied properties not correct for "PlacementProperty"');
    }
    function cfnEC2FleetPlacementPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEC2Fleet_PlacementPropertyValidator(properties).assertSuccess();
      return {
        Affinity: cdk.stringToCloudFormation(properties.affinity),
        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),
        GroupName: cdk.stringToCloudFormation(properties.groupName),
        HostId: cdk.stringToCloudFormation(properties.hostId),
        HostResourceGroupArn: cdk.stringToCloudFormation(properties.hostResourceGroupArn),
        PartitionNumber: cdk.numberToCloudFormation(properties.partitionNumber),
        SpreadDomain: cdk.stringToCloudFormation(properties.spreadDomain),
        Tenancy: cdk.stringToCloudFormation(properties.tenancy)
      };
    }
    function CfnEC2FleetPlacementPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("affinity", "Affinity", properties.Affinity != null ? cfn_parse.FromCloudFormation.getString(properties.Affinity) : void 0);
      ret.addPropertyResult("availabilityZone", "AvailabilityZone", properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : void 0);
      ret.addPropertyResult("groupName", "GroupName", properties.GroupName != null ? cfn_parse.FromCloudFormation.getString(properties.GroupName) : void 0);
      ret.addPropertyResult("hostId", "HostId", properties.HostId != null ? cfn_parse.FromCloudFormation.getString(properties.HostId) : void 0);
      ret.addPropertyResult("hostResourceGroupArn", "HostResourceGroupArn", properties.HostResourceGroupArn != null ? cfn_parse.FromCloudFormation.getString(properties.HostResourceGroupArn) : void 0);
      ret.addPropertyResult("partitionNumber", "PartitionNumber", properties.PartitionNumber != null ? cfn_parse.FromCloudFormation.getNumber(properties.PartitionNumber) : void 0);
      ret.addPropertyResult("spreadDomain", "SpreadDomain", properties.SpreadDomain != null ? cfn_parse.FromCloudFormation.getString(properties.SpreadDomain) : void 0);
      ret.addPropertyResult("tenancy", "Tenancy", properties.Tenancy != null ? cfn_parse.FromCloudFormation.getString(properties.Tenancy) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEC2Fleet_SpotOptionsRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("allocationStrategy", cdk.validateString)(properties.allocationStrategy));
      errors.collect(cdk.propertyValidator("instanceInterruptionBehavior", cdk.validateString)(properties.instanceInterruptionBehavior));
      errors.collect(cdk.propertyValidator("instancePoolsToUseCount", cdk.validateNumber)(properties.instancePoolsToUseCount));
      errors.collect(cdk.propertyValidator("maintenanceStrategies", CfnEC2Fleet_MaintenanceStrategiesPropertyValidator)(properties.maintenanceStrategies));
      errors.collect(cdk.propertyValidator("maxTotalPrice", cdk.validateString)(properties.maxTotalPrice));
      errors.collect(cdk.propertyValidator("minTargetCapacity", cdk.validateNumber)(properties.minTargetCapacity));
      errors.collect(cdk.propertyValidator("singleAvailabilityZone", cdk.validateBoolean)(properties.singleAvailabilityZone));
      errors.collect(cdk.propertyValidator("singleInstanceType", cdk.validateBoolean)(properties.singleInstanceType));
      return errors.wrap('supplied properties not correct for "SpotOptionsRequestProperty"');
    }
    function cfnEC2FleetSpotOptionsRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEC2Fleet_SpotOptionsRequestPropertyValidator(properties).assertSuccess();
      return {
        AllocationStrategy: cdk.stringToCloudFormation(properties.allocationStrategy),
        InstanceInterruptionBehavior: cdk.stringToCloudFormation(properties.instanceInterruptionBehavior),
        InstancePoolsToUseCount: cdk.numberToCloudFormation(properties.instancePoolsToUseCount),
        MaintenanceStrategies: cfnEC2FleetMaintenanceStrategiesPropertyToCloudFormation(properties.maintenanceStrategies),
        MaxTotalPrice: cdk.stringToCloudFormation(properties.maxTotalPrice),
        MinTargetCapacity: cdk.numberToCloudFormation(properties.minTargetCapacity),
        SingleAvailabilityZone: cdk.booleanToCloudFormation(properties.singleAvailabilityZone),
        SingleInstanceType: cdk.booleanToCloudFormation(properties.singleInstanceType)
      };
    }
    function CfnEC2FleetSpotOptionsRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("allocationStrategy", "AllocationStrategy", properties.AllocationStrategy != null ? cfn_parse.FromCloudFormation.getString(properties.AllocationStrategy) : void 0);
      ret.addPropertyResult("instanceInterruptionBehavior", "InstanceInterruptionBehavior", properties.InstanceInterruptionBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceInterruptionBehavior) : void 0);
      ret.addPropertyResult("instancePoolsToUseCount", "InstancePoolsToUseCount", properties.InstancePoolsToUseCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.InstancePoolsToUseCount) : void 0);
      ret.addPropertyResult("maintenanceStrategies", "MaintenanceStrategies", properties.MaintenanceStrategies != null ? CfnEC2FleetMaintenanceStrategiesPropertyFromCloudFormation(properties.MaintenanceStrategies) : void 0);
      ret.addPropertyResult("maxTotalPrice", "MaxTotalPrice", properties.MaxTotalPrice != null ? cfn_parse.FromCloudFormation.getString(properties.MaxTotalPrice) : void 0);
      ret.addPropertyResult("minTargetCapacity", "MinTargetCapacity", properties.MinTargetCapacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinTargetCapacity) : void 0);
      ret.addPropertyResult("singleAvailabilityZone", "SingleAvailabilityZone", properties.SingleAvailabilityZone != null ? cfn_parse.FromCloudFormation.getBoolean(properties.SingleAvailabilityZone) : void 0);
      ret.addPropertyResult("singleInstanceType", "SingleInstanceType", properties.SingleInstanceType != null ? cfn_parse.FromCloudFormation.getBoolean(properties.SingleInstanceType) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEC2Fleet_TagSpecificationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("resourceType", cdk.validateString)(properties.resourceType));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "TagSpecificationProperty"');
    }
    function cfnEC2FleetTagSpecificationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEC2Fleet_TagSpecificationPropertyValidator(properties).assertSuccess();
      return {
        ResourceType: cdk.stringToCloudFormation(properties.resourceType),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnEC2FleetTagSpecificationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("resourceType", "ResourceType", properties.ResourceType != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceType) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEC2Fleet_TargetCapacitySpecificationRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("defaultTargetCapacityType", cdk.validateString)(properties.defaultTargetCapacityType));
      errors.collect(cdk.propertyValidator("onDemandTargetCapacity", cdk.validateNumber)(properties.onDemandTargetCapacity));
      errors.collect(cdk.propertyValidator("spotTargetCapacity", cdk.validateNumber)(properties.spotTargetCapacity));
      errors.collect(cdk.propertyValidator("targetCapacityUnitType", cdk.validateString)(properties.targetCapacityUnitType));
      errors.collect(cdk.propertyValidator("totalTargetCapacity", cdk.requiredValidator)(properties.totalTargetCapacity));
      errors.collect(cdk.propertyValidator("totalTargetCapacity", cdk.validateNumber)(properties.totalTargetCapacity));
      return errors.wrap('supplied properties not correct for "TargetCapacitySpecificationRequestProperty"');
    }
    function cfnEC2FleetTargetCapacitySpecificationRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEC2Fleet_TargetCapacitySpecificationRequestPropertyValidator(properties).assertSuccess();
      return {
        DefaultTargetCapacityType: cdk.stringToCloudFormation(properties.defaultTargetCapacityType),
        OnDemandTargetCapacity: cdk.numberToCloudFormation(properties.onDemandTargetCapacity),
        SpotTargetCapacity: cdk.numberToCloudFormation(properties.spotTargetCapacity),
        TargetCapacityUnitType: cdk.stringToCloudFormation(properties.targetCapacityUnitType),
        TotalTargetCapacity: cdk.numberToCloudFormation(properties.totalTargetCapacity)
      };
    }
    function CfnEC2FleetTargetCapacitySpecificationRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("defaultTargetCapacityType", "DefaultTargetCapacityType", properties.DefaultTargetCapacityType != null ? cfn_parse.FromCloudFormation.getString(properties.DefaultTargetCapacityType) : void 0);
      ret.addPropertyResult("onDemandTargetCapacity", "OnDemandTargetCapacity", properties.OnDemandTargetCapacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.OnDemandTargetCapacity) : void 0);
      ret.addPropertyResult("spotTargetCapacity", "SpotTargetCapacity", properties.SpotTargetCapacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.SpotTargetCapacity) : void 0);
      ret.addPropertyResult("targetCapacityUnitType", "TargetCapacityUnitType", properties.TargetCapacityUnitType != null ? cfn_parse.FromCloudFormation.getString(properties.TargetCapacityUnitType) : void 0);
      ret.addPropertyResult("totalTargetCapacity", "TotalTargetCapacity", cfn_parse.FromCloudFormation.getNumber(properties.TotalTargetCapacity));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEC2Fleet_TotalLocalStorageGBRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("max", cdk.validateNumber)(properties.max));
      errors.collect(cdk.propertyValidator("min", cdk.validateNumber)(properties.min));
      return errors.wrap('supplied properties not correct for "TotalLocalStorageGBRequestProperty"');
    }
    function cfnEC2FleetTotalLocalStorageGBRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEC2Fleet_TotalLocalStorageGBRequestPropertyValidator(properties).assertSuccess();
      return {
        Max: cdk.numberToCloudFormation(properties.max),
        Min: cdk.numberToCloudFormation(properties.min)
      };
    }
    function CfnEC2FleetTotalLocalStorageGBRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("max", "Max", properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : void 0);
      ret.addPropertyResult("min", "Min", properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEC2Fleet_VCpuCountRangeRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("max", cdk.validateNumber)(properties.max));
      errors.collect(cdk.propertyValidator("min", cdk.validateNumber)(properties.min));
      return errors.wrap('supplied properties not correct for "VCpuCountRangeRequestProperty"');
    }
    function cfnEC2FleetVCpuCountRangeRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEC2Fleet_VCpuCountRangeRequestPropertyValidator(properties).assertSuccess();
      return {
        Max: cdk.numberToCloudFormation(properties.max),
        Min: cdk.numberToCloudFormation(properties.min)
      };
    }
    function CfnEC2FleetVCpuCountRangeRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("max", "Max", properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : void 0);
      ret.addPropertyResult("min", "Min", properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnEIPPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("domain", cdk.validateString)(properties.domain));
      errors.collect(cdk.propertyValidator("instanceId", cdk.validateString)(properties.instanceId));
      errors.collect(cdk.propertyValidator("publicIpv4Pool", cdk.validateString)(properties.publicIpv4Pool));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnEIPProps"');
    }
    function cfnEIPPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEIPPropsValidator(properties).assertSuccess();
      return {
        Domain: cdk.stringToCloudFormation(properties.domain),
        InstanceId: cdk.stringToCloudFormation(properties.instanceId),
        PublicIpv4Pool: cdk.stringToCloudFormation(properties.publicIpv4Pool),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnEIPPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("domain", "Domain", properties.Domain != null ? cfn_parse.FromCloudFormation.getString(properties.Domain) : void 0);
      ret.addPropertyResult("instanceId", "InstanceId", properties.InstanceId != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceId) : void 0);
      ret.addPropertyResult("publicIpv4Pool", "PublicIpv4Pool", properties.PublicIpv4Pool != null ? cfn_parse.FromCloudFormation.getString(properties.PublicIpv4Pool) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnEIP = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnEIP.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.attrAllocationId = cdk.Token.asString(this.getAtt("AllocationId"));
        this.domain = props.domain;
        this.instanceId = props.instanceId;
        this.publicIpv4Pool = props.publicIpv4Pool;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::EIP", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnEIPPropsFromCloudFormation(resourceProperties);
        const ret = new CfnEIP(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnEIP.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          domain: this.domain,
          instanceId: this.instanceId,
          publicIpv4Pool: this.publicIpv4Pool,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnEIPPropsToCloudFormation(props);
      }
    };
    exports2.CfnEIP = CfnEIP;
    _l = JSII_RTTI_SYMBOL_1;
    CfnEIP[_l] = { fqn: "@aws-cdk/aws-ec2.CfnEIP", version: "1.132.0" };
    CfnEIP.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::EIP";
    function CfnEIPAssociationPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("allocationId", cdk.validateString)(properties.allocationId));
      errors.collect(cdk.propertyValidator("eip", cdk.validateString)(properties.eip));
      errors.collect(cdk.propertyValidator("instanceId", cdk.validateString)(properties.instanceId));
      errors.collect(cdk.propertyValidator("networkInterfaceId", cdk.validateString)(properties.networkInterfaceId));
      errors.collect(cdk.propertyValidator("privateIpAddress", cdk.validateString)(properties.privateIpAddress));
      return errors.wrap('supplied properties not correct for "CfnEIPAssociationProps"');
    }
    function cfnEIPAssociationPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEIPAssociationPropsValidator(properties).assertSuccess();
      return {
        AllocationId: cdk.stringToCloudFormation(properties.allocationId),
        EIP: cdk.stringToCloudFormation(properties.eip),
        InstanceId: cdk.stringToCloudFormation(properties.instanceId),
        NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),
        PrivateIpAddress: cdk.stringToCloudFormation(properties.privateIpAddress)
      };
    }
    function CfnEIPAssociationPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("allocationId", "AllocationId", properties.AllocationId != null ? cfn_parse.FromCloudFormation.getString(properties.AllocationId) : void 0);
      ret.addPropertyResult("eip", "EIP", properties.EIP != null ? cfn_parse.FromCloudFormation.getString(properties.EIP) : void 0);
      ret.addPropertyResult("instanceId", "InstanceId", properties.InstanceId != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceId) : void 0);
      ret.addPropertyResult("networkInterfaceId", "NetworkInterfaceId", properties.NetworkInterfaceId != null ? cfn_parse.FromCloudFormation.getString(properties.NetworkInterfaceId) : void 0);
      ret.addPropertyResult("privateIpAddress", "PrivateIpAddress", properties.PrivateIpAddress != null ? cfn_parse.FromCloudFormation.getString(properties.PrivateIpAddress) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnEIPAssociation = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnEIPAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.allocationId = props.allocationId;
        this.eip = props.eip;
        this.instanceId = props.instanceId;
        this.networkInterfaceId = props.networkInterfaceId;
        this.privateIpAddress = props.privateIpAddress;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnEIPAssociationPropsFromCloudFormation(resourceProperties);
        const ret = new CfnEIPAssociation(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnEIPAssociation.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          allocationId: this.allocationId,
          eip: this.eip,
          instanceId: this.instanceId,
          networkInterfaceId: this.networkInterfaceId,
          privateIpAddress: this.privateIpAddress
        };
      }
      renderProperties(props) {
        return cfnEIPAssociationPropsToCloudFormation(props);
      }
    };
    exports2.CfnEIPAssociation = CfnEIPAssociation;
    _m = JSII_RTTI_SYMBOL_1;
    CfnEIPAssociation[_m] = { fqn: "@aws-cdk/aws-ec2.CfnEIPAssociation", version: "1.132.0" };
    CfnEIPAssociation.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::EIPAssociation";
    function CfnEgressOnlyInternetGatewayPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("vpcId", cdk.requiredValidator)(properties.vpcId));
      errors.collect(cdk.propertyValidator("vpcId", cdk.validateString)(properties.vpcId));
      return errors.wrap('supplied properties not correct for "CfnEgressOnlyInternetGatewayProps"');
    }
    function cfnEgressOnlyInternetGatewayPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEgressOnlyInternetGatewayPropsValidator(properties).assertSuccess();
      return {
        VpcId: cdk.stringToCloudFormation(properties.vpcId)
      };
    }
    function CfnEgressOnlyInternetGatewayPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("vpcId", "VpcId", cfn_parse.FromCloudFormation.getString(properties.VpcId));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnEgressOnlyInternetGateway = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnEgressOnlyInternetGateway.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "vpcId", this);
        this.attrId = cdk.Token.asString(this.getAtt("Id"));
        this.vpcId = props.vpcId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnEgressOnlyInternetGatewayPropsFromCloudFormation(resourceProperties);
        const ret = new CfnEgressOnlyInternetGateway(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnEgressOnlyInternetGateway.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          vpcId: this.vpcId
        };
      }
      renderProperties(props) {
        return cfnEgressOnlyInternetGatewayPropsToCloudFormation(props);
      }
    };
    exports2.CfnEgressOnlyInternetGateway = CfnEgressOnlyInternetGateway;
    _o = JSII_RTTI_SYMBOL_1;
    CfnEgressOnlyInternetGateway[_o] = { fqn: "@aws-cdk/aws-ec2.CfnEgressOnlyInternetGateway", version: "1.132.0" };
    CfnEgressOnlyInternetGateway.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::EgressOnlyInternetGateway";
    function CfnEnclaveCertificateIamRoleAssociationPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("certificateArn", cdk.requiredValidator)(properties.certificateArn));
      errors.collect(cdk.propertyValidator("certificateArn", cdk.validateString)(properties.certificateArn));
      errors.collect(cdk.propertyValidator("roleArn", cdk.requiredValidator)(properties.roleArn));
      errors.collect(cdk.propertyValidator("roleArn", cdk.validateString)(properties.roleArn));
      return errors.wrap('supplied properties not correct for "CfnEnclaveCertificateIamRoleAssociationProps"');
    }
    function cfnEnclaveCertificateIamRoleAssociationPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEnclaveCertificateIamRoleAssociationPropsValidator(properties).assertSuccess();
      return {
        CertificateArn: cdk.stringToCloudFormation(properties.certificateArn),
        RoleArn: cdk.stringToCloudFormation(properties.roleArn)
      };
    }
    function CfnEnclaveCertificateIamRoleAssociationPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("certificateArn", "CertificateArn", cfn_parse.FromCloudFormation.getString(properties.CertificateArn));
      ret.addPropertyResult("roleArn", "RoleArn", cfn_parse.FromCloudFormation.getString(properties.RoleArn));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnEnclaveCertificateIamRoleAssociation = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnEnclaveCertificateIamRoleAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "certificateArn", this);
        cdk.requireProperty(props, "roleArn", this);
        this.attrCertificateS3BucketName = cdk.Token.asString(this.getAtt("CertificateS3BucketName"));
        this.attrCertificateS3ObjectKey = cdk.Token.asString(this.getAtt("CertificateS3ObjectKey"));
        this.attrEncryptionKmsKeyId = cdk.Token.asString(this.getAtt("EncryptionKmsKeyId"));
        this.certificateArn = props.certificateArn;
        this.roleArn = props.roleArn;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnEnclaveCertificateIamRoleAssociationPropsFromCloudFormation(resourceProperties);
        const ret = new CfnEnclaveCertificateIamRoleAssociation(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnEnclaveCertificateIamRoleAssociation.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          certificateArn: this.certificateArn,
          roleArn: this.roleArn
        };
      }
      renderProperties(props) {
        return cfnEnclaveCertificateIamRoleAssociationPropsToCloudFormation(props);
      }
    };
    exports2.CfnEnclaveCertificateIamRoleAssociation = CfnEnclaveCertificateIamRoleAssociation;
    _p = JSII_RTTI_SYMBOL_1;
    CfnEnclaveCertificateIamRoleAssociation[_p] = { fqn: "@aws-cdk/aws-ec2.CfnEnclaveCertificateIamRoleAssociation", version: "1.132.0" };
    CfnEnclaveCertificateIamRoleAssociation.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::EnclaveCertificateIamRoleAssociation";
    function CfnFlowLogPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("deliverLogsPermissionArn", cdk.validateString)(properties.deliverLogsPermissionArn));
      errors.collect(cdk.propertyValidator("logDestination", cdk.validateString)(properties.logDestination));
      errors.collect(cdk.propertyValidator("logDestinationType", cdk.validateString)(properties.logDestinationType));
      errors.collect(cdk.propertyValidator("logFormat", cdk.validateString)(properties.logFormat));
      errors.collect(cdk.propertyValidator("logGroupName", cdk.validateString)(properties.logGroupName));
      errors.collect(cdk.propertyValidator("maxAggregationInterval", cdk.validateNumber)(properties.maxAggregationInterval));
      errors.collect(cdk.propertyValidator("resourceId", cdk.requiredValidator)(properties.resourceId));
      errors.collect(cdk.propertyValidator("resourceId", cdk.validateString)(properties.resourceId));
      errors.collect(cdk.propertyValidator("resourceType", cdk.requiredValidator)(properties.resourceType));
      errors.collect(cdk.propertyValidator("resourceType", cdk.validateString)(properties.resourceType));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("trafficType", cdk.requiredValidator)(properties.trafficType));
      errors.collect(cdk.propertyValidator("trafficType", cdk.validateString)(properties.trafficType));
      return errors.wrap('supplied properties not correct for "CfnFlowLogProps"');
    }
    function cfnFlowLogPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnFlowLogPropsValidator(properties).assertSuccess();
      return {
        ResourceId: cdk.stringToCloudFormation(properties.resourceId),
        ResourceType: cdk.stringToCloudFormation(properties.resourceType),
        TrafficType: cdk.stringToCloudFormation(properties.trafficType),
        DeliverLogsPermissionArn: cdk.stringToCloudFormation(properties.deliverLogsPermissionArn),
        LogDestination: cdk.stringToCloudFormation(properties.logDestination),
        LogDestinationType: cdk.stringToCloudFormation(properties.logDestinationType),
        LogFormat: cdk.stringToCloudFormation(properties.logFormat),
        LogGroupName: cdk.stringToCloudFormation(properties.logGroupName),
        MaxAggregationInterval: cdk.numberToCloudFormation(properties.maxAggregationInterval),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnFlowLogPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("resourceId", "ResourceId", cfn_parse.FromCloudFormation.getString(properties.ResourceId));
      ret.addPropertyResult("resourceType", "ResourceType", cfn_parse.FromCloudFormation.getString(properties.ResourceType));
      ret.addPropertyResult("trafficType", "TrafficType", cfn_parse.FromCloudFormation.getString(properties.TrafficType));
      ret.addPropertyResult("deliverLogsPermissionArn", "DeliverLogsPermissionArn", properties.DeliverLogsPermissionArn != null ? cfn_parse.FromCloudFormation.getString(properties.DeliverLogsPermissionArn) : void 0);
      ret.addPropertyResult("logDestination", "LogDestination", properties.LogDestination != null ? cfn_parse.FromCloudFormation.getString(properties.LogDestination) : void 0);
      ret.addPropertyResult("logDestinationType", "LogDestinationType", properties.LogDestinationType != null ? cfn_parse.FromCloudFormation.getString(properties.LogDestinationType) : void 0);
      ret.addPropertyResult("logFormat", "LogFormat", properties.LogFormat != null ? cfn_parse.FromCloudFormation.getString(properties.LogFormat) : void 0);
      ret.addPropertyResult("logGroupName", "LogGroupName", properties.LogGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.LogGroupName) : void 0);
      ret.addPropertyResult("maxAggregationInterval", "MaxAggregationInterval", properties.MaxAggregationInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxAggregationInterval) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnFlowLog = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnFlowLog.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "resourceId", this);
        cdk.requireProperty(props, "resourceType", this);
        cdk.requireProperty(props, "trafficType", this);
        this.attrId = cdk.Token.asString(this.getAtt("Id"));
        this.resourceId = props.resourceId;
        this.resourceType = props.resourceType;
        this.trafficType = props.trafficType;
        this.deliverLogsPermissionArn = props.deliverLogsPermissionArn;
        this.logDestination = props.logDestination;
        this.logDestinationType = props.logDestinationType;
        this.logFormat = props.logFormat;
        this.logGroupName = props.logGroupName;
        this.maxAggregationInterval = props.maxAggregationInterval;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::FlowLog", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnFlowLogPropsFromCloudFormation(resourceProperties);
        const ret = new CfnFlowLog(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnFlowLog.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          resourceId: this.resourceId,
          resourceType: this.resourceType,
          trafficType: this.trafficType,
          deliverLogsPermissionArn: this.deliverLogsPermissionArn,
          logDestination: this.logDestination,
          logDestinationType: this.logDestinationType,
          logFormat: this.logFormat,
          logGroupName: this.logGroupName,
          maxAggregationInterval: this.maxAggregationInterval,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnFlowLogPropsToCloudFormation(props);
      }
    };
    exports2.CfnFlowLog = CfnFlowLog;
    _q = JSII_RTTI_SYMBOL_1;
    CfnFlowLog[_q] = { fqn: "@aws-cdk/aws-ec2.CfnFlowLog", version: "1.132.0" };
    CfnFlowLog.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::FlowLog";
    function CfnGatewayRouteTableAssociationPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("gatewayId", cdk.requiredValidator)(properties.gatewayId));
      errors.collect(cdk.propertyValidator("gatewayId", cdk.validateString)(properties.gatewayId));
      errors.collect(cdk.propertyValidator("routeTableId", cdk.requiredValidator)(properties.routeTableId));
      errors.collect(cdk.propertyValidator("routeTableId", cdk.validateString)(properties.routeTableId));
      return errors.wrap('supplied properties not correct for "CfnGatewayRouteTableAssociationProps"');
    }
    function cfnGatewayRouteTableAssociationPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnGatewayRouteTableAssociationPropsValidator(properties).assertSuccess();
      return {
        GatewayId: cdk.stringToCloudFormation(properties.gatewayId),
        RouteTableId: cdk.stringToCloudFormation(properties.routeTableId)
      };
    }
    function CfnGatewayRouteTableAssociationPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("gatewayId", "GatewayId", cfn_parse.FromCloudFormation.getString(properties.GatewayId));
      ret.addPropertyResult("routeTableId", "RouteTableId", cfn_parse.FromCloudFormation.getString(properties.RouteTableId));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnGatewayRouteTableAssociation = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnGatewayRouteTableAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "gatewayId", this);
        cdk.requireProperty(props, "routeTableId", this);
        this.attrAssociationId = cdk.Token.asString(this.getAtt("AssociationId"));
        this.gatewayId = props.gatewayId;
        this.routeTableId = props.routeTableId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnGatewayRouteTableAssociationPropsFromCloudFormation(resourceProperties);
        const ret = new CfnGatewayRouteTableAssociation(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnGatewayRouteTableAssociation.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          gatewayId: this.gatewayId,
          routeTableId: this.routeTableId
        };
      }
      renderProperties(props) {
        return cfnGatewayRouteTableAssociationPropsToCloudFormation(props);
      }
    };
    exports2.CfnGatewayRouteTableAssociation = CfnGatewayRouteTableAssociation;
    _r = JSII_RTTI_SYMBOL_1;
    CfnGatewayRouteTableAssociation[_r] = { fqn: "@aws-cdk/aws-ec2.CfnGatewayRouteTableAssociation", version: "1.132.0" };
    CfnGatewayRouteTableAssociation.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::GatewayRouteTableAssociation";
    function CfnHostPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("autoPlacement", cdk.validateString)(properties.autoPlacement));
      errors.collect(cdk.propertyValidator("availabilityZone", cdk.requiredValidator)(properties.availabilityZone));
      errors.collect(cdk.propertyValidator("availabilityZone", cdk.validateString)(properties.availabilityZone));
      errors.collect(cdk.propertyValidator("hostRecovery", cdk.validateString)(properties.hostRecovery));
      errors.collect(cdk.propertyValidator("instanceType", cdk.requiredValidator)(properties.instanceType));
      errors.collect(cdk.propertyValidator("instanceType", cdk.validateString)(properties.instanceType));
      return errors.wrap('supplied properties not correct for "CfnHostProps"');
    }
    function cfnHostPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnHostPropsValidator(properties).assertSuccess();
      return {
        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),
        InstanceType: cdk.stringToCloudFormation(properties.instanceType),
        AutoPlacement: cdk.stringToCloudFormation(properties.autoPlacement),
        HostRecovery: cdk.stringToCloudFormation(properties.hostRecovery)
      };
    }
    function CfnHostPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("availabilityZone", "AvailabilityZone", cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone));
      ret.addPropertyResult("instanceType", "InstanceType", cfn_parse.FromCloudFormation.getString(properties.InstanceType));
      ret.addPropertyResult("autoPlacement", "AutoPlacement", properties.AutoPlacement != null ? cfn_parse.FromCloudFormation.getString(properties.AutoPlacement) : void 0);
      ret.addPropertyResult("hostRecovery", "HostRecovery", properties.HostRecovery != null ? cfn_parse.FromCloudFormation.getString(properties.HostRecovery) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnHost = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnHost.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "availabilityZone", this);
        cdk.requireProperty(props, "instanceType", this);
        this.availabilityZone = props.availabilityZone;
        this.instanceType = props.instanceType;
        this.autoPlacement = props.autoPlacement;
        this.hostRecovery = props.hostRecovery;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnHostPropsFromCloudFormation(resourceProperties);
        const ret = new CfnHost(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnHost.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          availabilityZone: this.availabilityZone,
          instanceType: this.instanceType,
          autoPlacement: this.autoPlacement,
          hostRecovery: this.hostRecovery
        };
      }
      renderProperties(props) {
        return cfnHostPropsToCloudFormation(props);
      }
    };
    exports2.CfnHost = CfnHost;
    _s = JSII_RTTI_SYMBOL_1;
    CfnHost[_s] = { fqn: "@aws-cdk/aws-ec2.CfnHost", version: "1.132.0" };
    CfnHost.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::Host";
    function CfnInstancePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("additionalInfo", cdk.validateString)(properties.additionalInfo));
      errors.collect(cdk.propertyValidator("affinity", cdk.validateString)(properties.affinity));
      errors.collect(cdk.propertyValidator("availabilityZone", cdk.validateString)(properties.availabilityZone));
      errors.collect(cdk.propertyValidator("blockDeviceMappings", cdk.listValidator(CfnInstance_BlockDeviceMappingPropertyValidator))(properties.blockDeviceMappings));
      errors.collect(cdk.propertyValidator("cpuOptions", CfnInstance_CpuOptionsPropertyValidator)(properties.cpuOptions));
      errors.collect(cdk.propertyValidator("creditSpecification", CfnInstance_CreditSpecificationPropertyValidator)(properties.creditSpecification));
      errors.collect(cdk.propertyValidator("disableApiTermination", cdk.validateBoolean)(properties.disableApiTermination));
      errors.collect(cdk.propertyValidator("ebsOptimized", cdk.validateBoolean)(properties.ebsOptimized));
      errors.collect(cdk.propertyValidator("elasticGpuSpecifications", cdk.listValidator(CfnInstance_ElasticGpuSpecificationPropertyValidator))(properties.elasticGpuSpecifications));
      errors.collect(cdk.propertyValidator("elasticInferenceAccelerators", cdk.listValidator(CfnInstance_ElasticInferenceAcceleratorPropertyValidator))(properties.elasticInferenceAccelerators));
      errors.collect(cdk.propertyValidator("enclaveOptions", CfnInstance_EnclaveOptionsPropertyValidator)(properties.enclaveOptions));
      errors.collect(cdk.propertyValidator("hibernationOptions", CfnInstance_HibernationOptionsPropertyValidator)(properties.hibernationOptions));
      errors.collect(cdk.propertyValidator("hostId", cdk.validateString)(properties.hostId));
      errors.collect(cdk.propertyValidator("hostResourceGroupArn", cdk.validateString)(properties.hostResourceGroupArn));
      errors.collect(cdk.propertyValidator("iamInstanceProfile", cdk.validateString)(properties.iamInstanceProfile));
      errors.collect(cdk.propertyValidator("imageId", cdk.validateString)(properties.imageId));
      errors.collect(cdk.propertyValidator("instanceInitiatedShutdownBehavior", cdk.validateString)(properties.instanceInitiatedShutdownBehavior));
      errors.collect(cdk.propertyValidator("instanceType", cdk.validateString)(properties.instanceType));
      errors.collect(cdk.propertyValidator("ipv6AddressCount", cdk.validateNumber)(properties.ipv6AddressCount));
      errors.collect(cdk.propertyValidator("ipv6Addresses", cdk.listValidator(CfnInstance_InstanceIpv6AddressPropertyValidator))(properties.ipv6Addresses));
      errors.collect(cdk.propertyValidator("kernelId", cdk.validateString)(properties.kernelId));
      errors.collect(cdk.propertyValidator("keyName", cdk.validateString)(properties.keyName));
      errors.collect(cdk.propertyValidator("launchTemplate", CfnInstance_LaunchTemplateSpecificationPropertyValidator)(properties.launchTemplate));
      errors.collect(cdk.propertyValidator("licenseSpecifications", cdk.listValidator(CfnInstance_LicenseSpecificationPropertyValidator))(properties.licenseSpecifications));
      errors.collect(cdk.propertyValidator("monitoring", cdk.validateBoolean)(properties.monitoring));
      errors.collect(cdk.propertyValidator("networkInterfaces", cdk.listValidator(CfnInstance_NetworkInterfacePropertyValidator))(properties.networkInterfaces));
      errors.collect(cdk.propertyValidator("placementGroupName", cdk.validateString)(properties.placementGroupName));
      errors.collect(cdk.propertyValidator("privateIpAddress", cdk.validateString)(properties.privateIpAddress));
      errors.collect(cdk.propertyValidator("ramdiskId", cdk.validateString)(properties.ramdiskId));
      errors.collect(cdk.propertyValidator("securityGroupIds", cdk.listValidator(cdk.validateString))(properties.securityGroupIds));
      errors.collect(cdk.propertyValidator("securityGroups", cdk.listValidator(cdk.validateString))(properties.securityGroups));
      errors.collect(cdk.propertyValidator("sourceDestCheck", cdk.validateBoolean)(properties.sourceDestCheck));
      errors.collect(cdk.propertyValidator("ssmAssociations", cdk.listValidator(CfnInstance_SsmAssociationPropertyValidator))(properties.ssmAssociations));
      errors.collect(cdk.propertyValidator("subnetId", cdk.validateString)(properties.subnetId));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("tenancy", cdk.validateString)(properties.tenancy));
      errors.collect(cdk.propertyValidator("userData", cdk.validateString)(properties.userData));
      errors.collect(cdk.propertyValidator("volumes", cdk.listValidator(CfnInstance_VolumePropertyValidator))(properties.volumes));
      return errors.wrap('supplied properties not correct for "CfnInstanceProps"');
    }
    function cfnInstancePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnInstancePropsValidator(properties).assertSuccess();
      return {
        AdditionalInfo: cdk.stringToCloudFormation(properties.additionalInfo),
        Affinity: cdk.stringToCloudFormation(properties.affinity),
        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),
        BlockDeviceMappings: cdk.listMapper(cfnInstanceBlockDeviceMappingPropertyToCloudFormation)(properties.blockDeviceMappings),
        CpuOptions: cfnInstanceCpuOptionsPropertyToCloudFormation(properties.cpuOptions),
        CreditSpecification: cfnInstanceCreditSpecificationPropertyToCloudFormation(properties.creditSpecification),
        DisableApiTermination: cdk.booleanToCloudFormation(properties.disableApiTermination),
        EbsOptimized: cdk.booleanToCloudFormation(properties.ebsOptimized),
        ElasticGpuSpecifications: cdk.listMapper(cfnInstanceElasticGpuSpecificationPropertyToCloudFormation)(properties.elasticGpuSpecifications),
        ElasticInferenceAccelerators: cdk.listMapper(cfnInstanceElasticInferenceAcceleratorPropertyToCloudFormation)(properties.elasticInferenceAccelerators),
        EnclaveOptions: cfnInstanceEnclaveOptionsPropertyToCloudFormation(properties.enclaveOptions),
        HibernationOptions: cfnInstanceHibernationOptionsPropertyToCloudFormation(properties.hibernationOptions),
        HostId: cdk.stringToCloudFormation(properties.hostId),
        HostResourceGroupArn: cdk.stringToCloudFormation(properties.hostResourceGroupArn),
        IamInstanceProfile: cdk.stringToCloudFormation(properties.iamInstanceProfile),
        ImageId: cdk.stringToCloudFormation(properties.imageId),
        InstanceInitiatedShutdownBehavior: cdk.stringToCloudFormation(properties.instanceInitiatedShutdownBehavior),
        InstanceType: cdk.stringToCloudFormation(properties.instanceType),
        Ipv6AddressCount: cdk.numberToCloudFormation(properties.ipv6AddressCount),
        Ipv6Addresses: cdk.listMapper(cfnInstanceInstanceIpv6AddressPropertyToCloudFormation)(properties.ipv6Addresses),
        KernelId: cdk.stringToCloudFormation(properties.kernelId),
        KeyName: cdk.stringToCloudFormation(properties.keyName),
        LaunchTemplate: cfnInstanceLaunchTemplateSpecificationPropertyToCloudFormation(properties.launchTemplate),
        LicenseSpecifications: cdk.listMapper(cfnInstanceLicenseSpecificationPropertyToCloudFormation)(properties.licenseSpecifications),
        Monitoring: cdk.booleanToCloudFormation(properties.monitoring),
        NetworkInterfaces: cdk.listMapper(cfnInstanceNetworkInterfacePropertyToCloudFormation)(properties.networkInterfaces),
        PlacementGroupName: cdk.stringToCloudFormation(properties.placementGroupName),
        PrivateIpAddress: cdk.stringToCloudFormation(properties.privateIpAddress),
        RamdiskId: cdk.stringToCloudFormation(properties.ramdiskId),
        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),
        SecurityGroups: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroups),
        SourceDestCheck: cdk.booleanToCloudFormation(properties.sourceDestCheck),
        SsmAssociations: cdk.listMapper(cfnInstanceSsmAssociationPropertyToCloudFormation)(properties.ssmAssociations),
        SubnetId: cdk.stringToCloudFormation(properties.subnetId),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
        Tenancy: cdk.stringToCloudFormation(properties.tenancy),
        UserData: cdk.stringToCloudFormation(properties.userData),
        Volumes: cdk.listMapper(cfnInstanceVolumePropertyToCloudFormation)(properties.volumes)
      };
    }
    function CfnInstancePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("additionalInfo", "AdditionalInfo", properties.AdditionalInfo != null ? cfn_parse.FromCloudFormation.getString(properties.AdditionalInfo) : void 0);
      ret.addPropertyResult("affinity", "Affinity", properties.Affinity != null ? cfn_parse.FromCloudFormation.getString(properties.Affinity) : void 0);
      ret.addPropertyResult("availabilityZone", "AvailabilityZone", properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : void 0);
      ret.addPropertyResult("blockDeviceMappings", "BlockDeviceMappings", properties.BlockDeviceMappings != null ? cfn_parse.FromCloudFormation.getArray(CfnInstanceBlockDeviceMappingPropertyFromCloudFormation)(properties.BlockDeviceMappings) : void 0);
      ret.addPropertyResult("cpuOptions", "CpuOptions", properties.CpuOptions != null ? CfnInstanceCpuOptionsPropertyFromCloudFormation(properties.CpuOptions) : void 0);
      ret.addPropertyResult("creditSpecification", "CreditSpecification", properties.CreditSpecification != null ? CfnInstanceCreditSpecificationPropertyFromCloudFormation(properties.CreditSpecification) : void 0);
      ret.addPropertyResult("disableApiTermination", "DisableApiTermination", properties.DisableApiTermination != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DisableApiTermination) : void 0);
      ret.addPropertyResult("ebsOptimized", "EbsOptimized", properties.EbsOptimized != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EbsOptimized) : void 0);
      ret.addPropertyResult("elasticGpuSpecifications", "ElasticGpuSpecifications", properties.ElasticGpuSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnInstanceElasticGpuSpecificationPropertyFromCloudFormation)(properties.ElasticGpuSpecifications) : void 0);
      ret.addPropertyResult("elasticInferenceAccelerators", "ElasticInferenceAccelerators", properties.ElasticInferenceAccelerators != null ? cfn_parse.FromCloudFormation.getArray(CfnInstanceElasticInferenceAcceleratorPropertyFromCloudFormation)(properties.ElasticInferenceAccelerators) : void 0);
      ret.addPropertyResult("enclaveOptions", "EnclaveOptions", properties.EnclaveOptions != null ? CfnInstanceEnclaveOptionsPropertyFromCloudFormation(properties.EnclaveOptions) : void 0);
      ret.addPropertyResult("hibernationOptions", "HibernationOptions", properties.HibernationOptions != null ? CfnInstanceHibernationOptionsPropertyFromCloudFormation(properties.HibernationOptions) : void 0);
      ret.addPropertyResult("hostId", "HostId", properties.HostId != null ? cfn_parse.FromCloudFormation.getString(properties.HostId) : void 0);
      ret.addPropertyResult("hostResourceGroupArn", "HostResourceGroupArn", properties.HostResourceGroupArn != null ? cfn_parse.FromCloudFormation.getString(properties.HostResourceGroupArn) : void 0);
      ret.addPropertyResult("iamInstanceProfile", "IamInstanceProfile", properties.IamInstanceProfile != null ? cfn_parse.FromCloudFormation.getString(properties.IamInstanceProfile) : void 0);
      ret.addPropertyResult("imageId", "ImageId", properties.ImageId != null ? cfn_parse.FromCloudFormation.getString(properties.ImageId) : void 0);
      ret.addPropertyResult("instanceInitiatedShutdownBehavior", "InstanceInitiatedShutdownBehavior", properties.InstanceInitiatedShutdownBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceInitiatedShutdownBehavior) : void 0);
      ret.addPropertyResult("instanceType", "InstanceType", properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : void 0);
      ret.addPropertyResult("ipv6AddressCount", "Ipv6AddressCount", properties.Ipv6AddressCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.Ipv6AddressCount) : void 0);
      ret.addPropertyResult("ipv6Addresses", "Ipv6Addresses", properties.Ipv6Addresses != null ? cfn_parse.FromCloudFormation.getArray(CfnInstanceInstanceIpv6AddressPropertyFromCloudFormation)(properties.Ipv6Addresses) : void 0);
      ret.addPropertyResult("kernelId", "KernelId", properties.KernelId != null ? cfn_parse.FromCloudFormation.getString(properties.KernelId) : void 0);
      ret.addPropertyResult("keyName", "KeyName", properties.KeyName != null ? cfn_parse.FromCloudFormation.getString(properties.KeyName) : void 0);
      ret.addPropertyResult("launchTemplate", "LaunchTemplate", properties.LaunchTemplate != null ? CfnInstanceLaunchTemplateSpecificationPropertyFromCloudFormation(properties.LaunchTemplate) : void 0);
      ret.addPropertyResult("licenseSpecifications", "LicenseSpecifications", properties.LicenseSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnInstanceLicenseSpecificationPropertyFromCloudFormation)(properties.LicenseSpecifications) : void 0);
      ret.addPropertyResult("monitoring", "Monitoring", properties.Monitoring != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Monitoring) : void 0);
      ret.addPropertyResult("networkInterfaces", "NetworkInterfaces", properties.NetworkInterfaces != null ? cfn_parse.FromCloudFormation.getArray(CfnInstanceNetworkInterfacePropertyFromCloudFormation)(properties.NetworkInterfaces) : void 0);
      ret.addPropertyResult("placementGroupName", "PlacementGroupName", properties.PlacementGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.PlacementGroupName) : void 0);
      ret.addPropertyResult("privateIpAddress", "PrivateIpAddress", properties.PrivateIpAddress != null ? cfn_parse.FromCloudFormation.getString(properties.PrivateIpAddress) : void 0);
      ret.addPropertyResult("ramdiskId", "RamdiskId", properties.RamdiskId != null ? cfn_parse.FromCloudFormation.getString(properties.RamdiskId) : void 0);
      ret.addPropertyResult("securityGroupIds", "SecurityGroupIds", properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds) : void 0);
      ret.addPropertyResult("securityGroups", "SecurityGroups", properties.SecurityGroups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroups) : void 0);
      ret.addPropertyResult("sourceDestCheck", "SourceDestCheck", properties.SourceDestCheck != null ? cfn_parse.FromCloudFormation.getBoolean(properties.SourceDestCheck) : void 0);
      ret.addPropertyResult("ssmAssociations", "SsmAssociations", properties.SsmAssociations != null ? cfn_parse.FromCloudFormation.getArray(CfnInstanceSsmAssociationPropertyFromCloudFormation)(properties.SsmAssociations) : void 0);
      ret.addPropertyResult("subnetId", "SubnetId", properties.SubnetId != null ? cfn_parse.FromCloudFormation.getString(properties.SubnetId) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addPropertyResult("tenancy", "Tenancy", properties.Tenancy != null ? cfn_parse.FromCloudFormation.getString(properties.Tenancy) : void 0);
      ret.addPropertyResult("userData", "UserData", properties.UserData != null ? cfn_parse.FromCloudFormation.getString(properties.UserData) : void 0);
      ret.addPropertyResult("volumes", "Volumes", properties.Volumes != null ? cfn_parse.FromCloudFormation.getArray(CfnInstanceVolumePropertyFromCloudFormation)(properties.Volumes) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnInstance = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnInstance.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.attrAvailabilityZone = cdk.Token.asString(this.getAtt("AvailabilityZone"));
        this.attrPrivateDnsName = cdk.Token.asString(this.getAtt("PrivateDnsName"));
        this.attrPrivateIp = cdk.Token.asString(this.getAtt("PrivateIp"));
        this.attrPublicDnsName = cdk.Token.asString(this.getAtt("PublicDnsName"));
        this.attrPublicIp = cdk.Token.asString(this.getAtt("PublicIp"));
        this.additionalInfo = props.additionalInfo;
        this.affinity = props.affinity;
        this.availabilityZone = props.availabilityZone;
        this.blockDeviceMappings = props.blockDeviceMappings;
        this.cpuOptions = props.cpuOptions;
        this.creditSpecification = props.creditSpecification;
        this.disableApiTermination = props.disableApiTermination;
        this.ebsOptimized = props.ebsOptimized;
        this.elasticGpuSpecifications = props.elasticGpuSpecifications;
        this.elasticInferenceAccelerators = props.elasticInferenceAccelerators;
        this.enclaveOptions = props.enclaveOptions;
        this.hibernationOptions = props.hibernationOptions;
        this.hostId = props.hostId;
        this.hostResourceGroupArn = props.hostResourceGroupArn;
        this.iamInstanceProfile = props.iamInstanceProfile;
        this.imageId = props.imageId;
        this.instanceInitiatedShutdownBehavior = props.instanceInitiatedShutdownBehavior;
        this.instanceType = props.instanceType;
        this.ipv6AddressCount = props.ipv6AddressCount;
        this.ipv6Addresses = props.ipv6Addresses;
        this.kernelId = props.kernelId;
        this.keyName = props.keyName;
        this.launchTemplate = props.launchTemplate;
        this.licenseSpecifications = props.licenseSpecifications;
        this.monitoring = props.monitoring;
        this.networkInterfaces = props.networkInterfaces;
        this.placementGroupName = props.placementGroupName;
        this.privateIpAddress = props.privateIpAddress;
        this.ramdiskId = props.ramdiskId;
        this.securityGroupIds = props.securityGroupIds;
        this.securityGroups = props.securityGroups;
        this.sourceDestCheck = props.sourceDestCheck;
        this.ssmAssociations = props.ssmAssociations;
        this.subnetId = props.subnetId;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::Instance", props.tags, { tagPropertyName: "tags" });
        this.tenancy = props.tenancy;
        this.userData = props.userData;
        this.volumes = props.volumes;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnInstancePropsFromCloudFormation(resourceProperties);
        const ret = new CfnInstance(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnInstance.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          additionalInfo: this.additionalInfo,
          affinity: this.affinity,
          availabilityZone: this.availabilityZone,
          blockDeviceMappings: this.blockDeviceMappings,
          cpuOptions: this.cpuOptions,
          creditSpecification: this.creditSpecification,
          disableApiTermination: this.disableApiTermination,
          ebsOptimized: this.ebsOptimized,
          elasticGpuSpecifications: this.elasticGpuSpecifications,
          elasticInferenceAccelerators: this.elasticInferenceAccelerators,
          enclaveOptions: this.enclaveOptions,
          hibernationOptions: this.hibernationOptions,
          hostId: this.hostId,
          hostResourceGroupArn: this.hostResourceGroupArn,
          iamInstanceProfile: this.iamInstanceProfile,
          imageId: this.imageId,
          instanceInitiatedShutdownBehavior: this.instanceInitiatedShutdownBehavior,
          instanceType: this.instanceType,
          ipv6AddressCount: this.ipv6AddressCount,
          ipv6Addresses: this.ipv6Addresses,
          kernelId: this.kernelId,
          keyName: this.keyName,
          launchTemplate: this.launchTemplate,
          licenseSpecifications: this.licenseSpecifications,
          monitoring: this.monitoring,
          networkInterfaces: this.networkInterfaces,
          placementGroupName: this.placementGroupName,
          privateIpAddress: this.privateIpAddress,
          ramdiskId: this.ramdiskId,
          securityGroupIds: this.securityGroupIds,
          securityGroups: this.securityGroups,
          sourceDestCheck: this.sourceDestCheck,
          ssmAssociations: this.ssmAssociations,
          subnetId: this.subnetId,
          tags: this.tags.renderTags(),
          tenancy: this.tenancy,
          userData: this.userData,
          volumes: this.volumes
        };
      }
      renderProperties(props) {
        return cfnInstancePropsToCloudFormation(props);
      }
    };
    exports2.CfnInstance = CfnInstance;
    _t = JSII_RTTI_SYMBOL_1;
    CfnInstance[_t] = { fqn: "@aws-cdk/aws-ec2.CfnInstance", version: "1.132.0" };
    CfnInstance.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::Instance";
    function CfnInstance_AssociationParameterPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("key", cdk.requiredValidator)(properties.key));
      errors.collect(cdk.propertyValidator("key", cdk.validateString)(properties.key));
      errors.collect(cdk.propertyValidator("value", cdk.requiredValidator)(properties.value));
      errors.collect(cdk.propertyValidator("value", cdk.listValidator(cdk.validateString))(properties.value));
      return errors.wrap('supplied properties not correct for "AssociationParameterProperty"');
    }
    function cfnInstanceAssociationParameterPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnInstance_AssociationParameterPropertyValidator(properties).assertSuccess();
      return {
        Key: cdk.stringToCloudFormation(properties.key),
        Value: cdk.listMapper(cdk.stringToCloudFormation)(properties.value)
      };
    }
    function CfnInstanceAssociationParameterPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("key", "Key", cfn_parse.FromCloudFormation.getString(properties.Key));
      ret.addPropertyResult("value", "Value", cfn_parse.FromCloudFormation.getStringArray(properties.Value));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnInstance_BlockDeviceMappingPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("deviceName", cdk.requiredValidator)(properties.deviceName));
      errors.collect(cdk.propertyValidator("deviceName", cdk.validateString)(properties.deviceName));
      errors.collect(cdk.propertyValidator("ebs", CfnInstance_EbsPropertyValidator)(properties.ebs));
      errors.collect(cdk.propertyValidator("noDevice", CfnInstance_NoDevicePropertyValidator)(properties.noDevice));
      errors.collect(cdk.propertyValidator("virtualName", cdk.validateString)(properties.virtualName));
      return errors.wrap('supplied properties not correct for "BlockDeviceMappingProperty"');
    }
    function cfnInstanceBlockDeviceMappingPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnInstance_BlockDeviceMappingPropertyValidator(properties).assertSuccess();
      return {
        DeviceName: cdk.stringToCloudFormation(properties.deviceName),
        Ebs: cfnInstanceEbsPropertyToCloudFormation(properties.ebs),
        NoDevice: cfnInstanceNoDevicePropertyToCloudFormation(properties.noDevice),
        VirtualName: cdk.stringToCloudFormation(properties.virtualName)
      };
    }
    function CfnInstanceBlockDeviceMappingPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("deviceName", "DeviceName", cfn_parse.FromCloudFormation.getString(properties.DeviceName));
      ret.addPropertyResult("ebs", "Ebs", properties.Ebs != null ? CfnInstanceEbsPropertyFromCloudFormation(properties.Ebs) : void 0);
      ret.addPropertyResult("noDevice", "NoDevice", properties.NoDevice != null ? CfnInstanceNoDevicePropertyFromCloudFormation(properties.NoDevice) : void 0);
      ret.addPropertyResult("virtualName", "VirtualName", properties.VirtualName != null ? cfn_parse.FromCloudFormation.getString(properties.VirtualName) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnInstance_CpuOptionsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("coreCount", cdk.validateNumber)(properties.coreCount));
      errors.collect(cdk.propertyValidator("threadsPerCore", cdk.validateNumber)(properties.threadsPerCore));
      return errors.wrap('supplied properties not correct for "CpuOptionsProperty"');
    }
    function cfnInstanceCpuOptionsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnInstance_CpuOptionsPropertyValidator(properties).assertSuccess();
      return {
        CoreCount: cdk.numberToCloudFormation(properties.coreCount),
        ThreadsPerCore: cdk.numberToCloudFormation(properties.threadsPerCore)
      };
    }
    function CfnInstanceCpuOptionsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("coreCount", "CoreCount", properties.CoreCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.CoreCount) : void 0);
      ret.addPropertyResult("threadsPerCore", "ThreadsPerCore", properties.ThreadsPerCore != null ? cfn_parse.FromCloudFormation.getNumber(properties.ThreadsPerCore) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnInstance_CreditSpecificationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("cpuCredits", cdk.validateString)(properties.cpuCredits));
      return errors.wrap('supplied properties not correct for "CreditSpecificationProperty"');
    }
    function cfnInstanceCreditSpecificationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnInstance_CreditSpecificationPropertyValidator(properties).assertSuccess();
      return {
        CPUCredits: cdk.stringToCloudFormation(properties.cpuCredits)
      };
    }
    function CfnInstanceCreditSpecificationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("cpuCredits", "CPUCredits", properties.CPUCredits != null ? cfn_parse.FromCloudFormation.getString(properties.CPUCredits) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnInstance_EbsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("deleteOnTermination", cdk.validateBoolean)(properties.deleteOnTermination));
      errors.collect(cdk.propertyValidator("encrypted", cdk.validateBoolean)(properties.encrypted));
      errors.collect(cdk.propertyValidator("iops", cdk.validateNumber)(properties.iops));
      errors.collect(cdk.propertyValidator("kmsKeyId", cdk.validateString)(properties.kmsKeyId));
      errors.collect(cdk.propertyValidator("snapshotId", cdk.validateString)(properties.snapshotId));
      errors.collect(cdk.propertyValidator("volumeSize", cdk.validateNumber)(properties.volumeSize));
      errors.collect(cdk.propertyValidator("volumeType", cdk.validateString)(properties.volumeType));
      return errors.wrap('supplied properties not correct for "EbsProperty"');
    }
    function cfnInstanceEbsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnInstance_EbsPropertyValidator(properties).assertSuccess();
      return {
        DeleteOnTermination: cdk.booleanToCloudFormation(properties.deleteOnTermination),
        Encrypted: cdk.booleanToCloudFormation(properties.encrypted),
        Iops: cdk.numberToCloudFormation(properties.iops),
        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),
        SnapshotId: cdk.stringToCloudFormation(properties.snapshotId),
        VolumeSize: cdk.numberToCloudFormation(properties.volumeSize),
        VolumeType: cdk.stringToCloudFormation(properties.volumeType)
      };
    }
    function CfnInstanceEbsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("deleteOnTermination", "DeleteOnTermination", properties.DeleteOnTermination != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DeleteOnTermination) : void 0);
      ret.addPropertyResult("encrypted", "Encrypted", properties.Encrypted != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Encrypted) : void 0);
      ret.addPropertyResult("iops", "Iops", properties.Iops != null ? cfn_parse.FromCloudFormation.getNumber(properties.Iops) : void 0);
      ret.addPropertyResult("kmsKeyId", "KmsKeyId", properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : void 0);
      ret.addPropertyResult("snapshotId", "SnapshotId", properties.SnapshotId != null ? cfn_parse.FromCloudFormation.getString(properties.SnapshotId) : void 0);
      ret.addPropertyResult("volumeSize", "VolumeSize", properties.VolumeSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.VolumeSize) : void 0);
      ret.addPropertyResult("volumeType", "VolumeType", properties.VolumeType != null ? cfn_parse.FromCloudFormation.getString(properties.VolumeType) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnInstance_ElasticGpuSpecificationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("type", cdk.requiredValidator)(properties.type));
      errors.collect(cdk.propertyValidator("type", cdk.validateString)(properties.type));
      return errors.wrap('supplied properties not correct for "ElasticGpuSpecificationProperty"');
    }
    function cfnInstanceElasticGpuSpecificationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnInstance_ElasticGpuSpecificationPropertyValidator(properties).assertSuccess();
      return {
        Type: cdk.stringToCloudFormation(properties.type)
      };
    }
    function CfnInstanceElasticGpuSpecificationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("type", "Type", cfn_parse.FromCloudFormation.getString(properties.Type));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnInstance_ElasticInferenceAcceleratorPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("count", cdk.validateNumber)(properties.count));
      errors.collect(cdk.propertyValidator("type", cdk.requiredValidator)(properties.type));
      errors.collect(cdk.propertyValidator("type", cdk.validateString)(properties.type));
      return errors.wrap('supplied properties not correct for "ElasticInferenceAcceleratorProperty"');
    }
    function cfnInstanceElasticInferenceAcceleratorPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnInstance_ElasticInferenceAcceleratorPropertyValidator(properties).assertSuccess();
      return {
        Count: cdk.numberToCloudFormation(properties.count),
        Type: cdk.stringToCloudFormation(properties.type)
      };
    }
    function CfnInstanceElasticInferenceAcceleratorPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("count", "Count", properties.Count != null ? cfn_parse.FromCloudFormation.getNumber(properties.Count) : void 0);
      ret.addPropertyResult("type", "Type", cfn_parse.FromCloudFormation.getString(properties.Type));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnInstance_EnclaveOptionsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("enabled", cdk.validateBoolean)(properties.enabled));
      return errors.wrap('supplied properties not correct for "EnclaveOptionsProperty"');
    }
    function cfnInstanceEnclaveOptionsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnInstance_EnclaveOptionsPropertyValidator(properties).assertSuccess();
      return {
        Enabled: cdk.booleanToCloudFormation(properties.enabled)
      };
    }
    function CfnInstanceEnclaveOptionsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("enabled", "Enabled", properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnInstance_HibernationOptionsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("configured", cdk.validateBoolean)(properties.configured));
      return errors.wrap('supplied properties not correct for "HibernationOptionsProperty"');
    }
    function cfnInstanceHibernationOptionsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnInstance_HibernationOptionsPropertyValidator(properties).assertSuccess();
      return {
        Configured: cdk.booleanToCloudFormation(properties.configured)
      };
    }
    function CfnInstanceHibernationOptionsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("configured", "Configured", properties.Configured != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Configured) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnInstance_InstanceIpv6AddressPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("ipv6Address", cdk.requiredValidator)(properties.ipv6Address));
      errors.collect(cdk.propertyValidator("ipv6Address", cdk.validateString)(properties.ipv6Address));
      return errors.wrap('supplied properties not correct for "InstanceIpv6AddressProperty"');
    }
    function cfnInstanceInstanceIpv6AddressPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnInstance_InstanceIpv6AddressPropertyValidator(properties).assertSuccess();
      return {
        Ipv6Address: cdk.stringToCloudFormation(properties.ipv6Address)
      };
    }
    function CfnInstanceInstanceIpv6AddressPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("ipv6Address", "Ipv6Address", cfn_parse.FromCloudFormation.getString(properties.Ipv6Address));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnInstance_LaunchTemplateSpecificationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("launchTemplateId", cdk.validateString)(properties.launchTemplateId));
      errors.collect(cdk.propertyValidator("launchTemplateName", cdk.validateString)(properties.launchTemplateName));
      errors.collect(cdk.propertyValidator("version", cdk.requiredValidator)(properties.version));
      errors.collect(cdk.propertyValidator("version", cdk.validateString)(properties.version));
      return errors.wrap('supplied properties not correct for "LaunchTemplateSpecificationProperty"');
    }
    function cfnInstanceLaunchTemplateSpecificationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnInstance_LaunchTemplateSpecificationPropertyValidator(properties).assertSuccess();
      return {
        LaunchTemplateId: cdk.stringToCloudFormation(properties.launchTemplateId),
        LaunchTemplateName: cdk.stringToCloudFormation(properties.launchTemplateName),
        Version: cdk.stringToCloudFormation(properties.version)
      };
    }
    function CfnInstanceLaunchTemplateSpecificationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("launchTemplateId", "LaunchTemplateId", properties.LaunchTemplateId != null ? cfn_parse.FromCloudFormation.getString(properties.LaunchTemplateId) : void 0);
      ret.addPropertyResult("launchTemplateName", "LaunchTemplateName", properties.LaunchTemplateName != null ? cfn_parse.FromCloudFormation.getString(properties.LaunchTemplateName) : void 0);
      ret.addPropertyResult("version", "Version", cfn_parse.FromCloudFormation.getString(properties.Version));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnInstance_LicenseSpecificationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("licenseConfigurationArn", cdk.requiredValidator)(properties.licenseConfigurationArn));
      errors.collect(cdk.propertyValidator("licenseConfigurationArn", cdk.validateString)(properties.licenseConfigurationArn));
      return errors.wrap('supplied properties not correct for "LicenseSpecificationProperty"');
    }
    function cfnInstanceLicenseSpecificationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnInstance_LicenseSpecificationPropertyValidator(properties).assertSuccess();
      return {
        LicenseConfigurationArn: cdk.stringToCloudFormation(properties.licenseConfigurationArn)
      };
    }
    function CfnInstanceLicenseSpecificationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("licenseConfigurationArn", "LicenseConfigurationArn", cfn_parse.FromCloudFormation.getString(properties.LicenseConfigurationArn));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnInstance_NetworkInterfacePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("associatePublicIpAddress", cdk.validateBoolean)(properties.associatePublicIpAddress));
      errors.collect(cdk.propertyValidator("deleteOnTermination", cdk.validateBoolean)(properties.deleteOnTermination));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("deviceIndex", cdk.requiredValidator)(properties.deviceIndex));
      errors.collect(cdk.propertyValidator("deviceIndex", cdk.validateString)(properties.deviceIndex));
      errors.collect(cdk.propertyValidator("groupSet", cdk.listValidator(cdk.validateString))(properties.groupSet));
      errors.collect(cdk.propertyValidator("ipv6AddressCount", cdk.validateNumber)(properties.ipv6AddressCount));
      errors.collect(cdk.propertyValidator("ipv6Addresses", cdk.listValidator(CfnInstance_InstanceIpv6AddressPropertyValidator))(properties.ipv6Addresses));
      errors.collect(cdk.propertyValidator("networkInterfaceId", cdk.validateString)(properties.networkInterfaceId));
      errors.collect(cdk.propertyValidator("privateIpAddress", cdk.validateString)(properties.privateIpAddress));
      errors.collect(cdk.propertyValidator("privateIpAddresses", cdk.listValidator(CfnInstance_PrivateIpAddressSpecificationPropertyValidator))(properties.privateIpAddresses));
      errors.collect(cdk.propertyValidator("secondaryPrivateIpAddressCount", cdk.validateNumber)(properties.secondaryPrivateIpAddressCount));
      errors.collect(cdk.propertyValidator("subnetId", cdk.validateString)(properties.subnetId));
      return errors.wrap('supplied properties not correct for "NetworkInterfaceProperty"');
    }
    function cfnInstanceNetworkInterfacePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnInstance_NetworkInterfacePropertyValidator(properties).assertSuccess();
      return {
        AssociatePublicIpAddress: cdk.booleanToCloudFormation(properties.associatePublicIpAddress),
        DeleteOnTermination: cdk.booleanToCloudFormation(properties.deleteOnTermination),
        Description: cdk.stringToCloudFormation(properties.description),
        DeviceIndex: cdk.stringToCloudFormation(properties.deviceIndex),
        GroupSet: cdk.listMapper(cdk.stringToCloudFormation)(properties.groupSet),
        Ipv6AddressCount: cdk.numberToCloudFormation(properties.ipv6AddressCount),
        Ipv6Addresses: cdk.listMapper(cfnInstanceInstanceIpv6AddressPropertyToCloudFormation)(properties.ipv6Addresses),
        NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),
        PrivateIpAddress: cdk.stringToCloudFormation(properties.privateIpAddress),
        PrivateIpAddresses: cdk.listMapper(cfnInstancePrivateIpAddressSpecificationPropertyToCloudFormation)(properties.privateIpAddresses),
        SecondaryPrivateIpAddressCount: cdk.numberToCloudFormation(properties.secondaryPrivateIpAddressCount),
        SubnetId: cdk.stringToCloudFormation(properties.subnetId)
      };
    }
    function CfnInstanceNetworkInterfacePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("associatePublicIpAddress", "AssociatePublicIpAddress", properties.AssociatePublicIpAddress != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AssociatePublicIpAddress) : void 0);
      ret.addPropertyResult("deleteOnTermination", "DeleteOnTermination", properties.DeleteOnTermination != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DeleteOnTermination) : void 0);
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("deviceIndex", "DeviceIndex", cfn_parse.FromCloudFormation.getString(properties.DeviceIndex));
      ret.addPropertyResult("groupSet", "GroupSet", properties.GroupSet != null ? cfn_parse.FromCloudFormation.getStringArray(properties.GroupSet) : void 0);
      ret.addPropertyResult("ipv6AddressCount", "Ipv6AddressCount", properties.Ipv6AddressCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.Ipv6AddressCount) : void 0);
      ret.addPropertyResult("ipv6Addresses", "Ipv6Addresses", properties.Ipv6Addresses != null ? cfn_parse.FromCloudFormation.getArray(CfnInstanceInstanceIpv6AddressPropertyFromCloudFormation)(properties.Ipv6Addresses) : void 0);
      ret.addPropertyResult("networkInterfaceId", "NetworkInterfaceId", properties.NetworkInterfaceId != null ? cfn_parse.FromCloudFormation.getString(properties.NetworkInterfaceId) : void 0);
      ret.addPropertyResult("privateIpAddress", "PrivateIpAddress", properties.PrivateIpAddress != null ? cfn_parse.FromCloudFormation.getString(properties.PrivateIpAddress) : void 0);
      ret.addPropertyResult("privateIpAddresses", "PrivateIpAddresses", properties.PrivateIpAddresses != null ? cfn_parse.FromCloudFormation.getArray(CfnInstancePrivateIpAddressSpecificationPropertyFromCloudFormation)(properties.PrivateIpAddresses) : void 0);
      ret.addPropertyResult("secondaryPrivateIpAddressCount", "SecondaryPrivateIpAddressCount", properties.SecondaryPrivateIpAddressCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.SecondaryPrivateIpAddressCount) : void 0);
      ret.addPropertyResult("subnetId", "SubnetId", properties.SubnetId != null ? cfn_parse.FromCloudFormation.getString(properties.SubnetId) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnInstance_NoDevicePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      return errors.wrap('supplied properties not correct for "NoDeviceProperty"');
    }
    function cfnInstanceNoDevicePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnInstance_NoDevicePropertyValidator(properties).assertSuccess();
      return {};
    }
    function CfnInstanceNoDevicePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnInstance_PrivateIpAddressSpecificationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("primary", cdk.requiredValidator)(properties.primary));
      errors.collect(cdk.propertyValidator("primary", cdk.validateBoolean)(properties.primary));
      errors.collect(cdk.propertyValidator("privateIpAddress", cdk.requiredValidator)(properties.privateIpAddress));
      errors.collect(cdk.propertyValidator("privateIpAddress", cdk.validateString)(properties.privateIpAddress));
      return errors.wrap('supplied properties not correct for "PrivateIpAddressSpecificationProperty"');
    }
    function cfnInstancePrivateIpAddressSpecificationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnInstance_PrivateIpAddressSpecificationPropertyValidator(properties).assertSuccess();
      return {
        Primary: cdk.booleanToCloudFormation(properties.primary),
        PrivateIpAddress: cdk.stringToCloudFormation(properties.privateIpAddress)
      };
    }
    function CfnInstancePrivateIpAddressSpecificationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("primary", "Primary", cfn_parse.FromCloudFormation.getBoolean(properties.Primary));
      ret.addPropertyResult("privateIpAddress", "PrivateIpAddress", cfn_parse.FromCloudFormation.getString(properties.PrivateIpAddress));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnInstance_SsmAssociationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("associationParameters", cdk.listValidator(CfnInstance_AssociationParameterPropertyValidator))(properties.associationParameters));
      errors.collect(cdk.propertyValidator("documentName", cdk.requiredValidator)(properties.documentName));
      errors.collect(cdk.propertyValidator("documentName", cdk.validateString)(properties.documentName));
      return errors.wrap('supplied properties not correct for "SsmAssociationProperty"');
    }
    function cfnInstanceSsmAssociationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnInstance_SsmAssociationPropertyValidator(properties).assertSuccess();
      return {
        AssociationParameters: cdk.listMapper(cfnInstanceAssociationParameterPropertyToCloudFormation)(properties.associationParameters),
        DocumentName: cdk.stringToCloudFormation(properties.documentName)
      };
    }
    function CfnInstanceSsmAssociationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("associationParameters", "AssociationParameters", properties.AssociationParameters != null ? cfn_parse.FromCloudFormation.getArray(CfnInstanceAssociationParameterPropertyFromCloudFormation)(properties.AssociationParameters) : void 0);
      ret.addPropertyResult("documentName", "DocumentName", cfn_parse.FromCloudFormation.getString(properties.DocumentName));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnInstance_VolumePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("device", cdk.requiredValidator)(properties.device));
      errors.collect(cdk.propertyValidator("device", cdk.validateString)(properties.device));
      errors.collect(cdk.propertyValidator("volumeId", cdk.requiredValidator)(properties.volumeId));
      errors.collect(cdk.propertyValidator("volumeId", cdk.validateString)(properties.volumeId));
      return errors.wrap('supplied properties not correct for "VolumeProperty"');
    }
    function cfnInstanceVolumePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnInstance_VolumePropertyValidator(properties).assertSuccess();
      return {
        Device: cdk.stringToCloudFormation(properties.device),
        VolumeId: cdk.stringToCloudFormation(properties.volumeId)
      };
    }
    function CfnInstanceVolumePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("device", "Device", cfn_parse.FromCloudFormation.getString(properties.Device));
      ret.addPropertyResult("volumeId", "VolumeId", cfn_parse.FromCloudFormation.getString(properties.VolumeId));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnInternetGatewayPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnInternetGatewayProps"');
    }
    function cfnInternetGatewayPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnInternetGatewayPropsValidator(properties).assertSuccess();
      return {
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnInternetGatewayPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnInternetGateway = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnInternetGateway.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.attrInternetGatewayId = cdk.Token.asString(this.getAtt("InternetGatewayId"));
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::InternetGateway", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnInternetGatewayPropsFromCloudFormation(resourceProperties);
        const ret = new CfnInternetGateway(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnInternetGateway.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnInternetGatewayPropsToCloudFormation(props);
      }
    };
    exports2.CfnInternetGateway = CfnInternetGateway;
    _u = JSII_RTTI_SYMBOL_1;
    CfnInternetGateway[_u] = { fqn: "@aws-cdk/aws-ec2.CfnInternetGateway", version: "1.132.0" };
    CfnInternetGateway.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::InternetGateway";
    function CfnLaunchTemplatePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("launchTemplateData", CfnLaunchTemplate_LaunchTemplateDataPropertyValidator)(properties.launchTemplateData));
      errors.collect(cdk.propertyValidator("launchTemplateName", cdk.validateString)(properties.launchTemplateName));
      errors.collect(cdk.propertyValidator("tagSpecifications", cdk.listValidator(CfnLaunchTemplate_LaunchTemplateTagSpecificationPropertyValidator))(properties.tagSpecifications));
      return errors.wrap('supplied properties not correct for "CfnLaunchTemplateProps"');
    }
    function cfnLaunchTemplatePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLaunchTemplatePropsValidator(properties).assertSuccess();
      return {
        LaunchTemplateData: cfnLaunchTemplateLaunchTemplateDataPropertyToCloudFormation(properties.launchTemplateData),
        LaunchTemplateName: cdk.stringToCloudFormation(properties.launchTemplateName),
        TagSpecifications: cdk.listMapper(cfnLaunchTemplateLaunchTemplateTagSpecificationPropertyToCloudFormation)(properties.tagSpecifications)
      };
    }
    function CfnLaunchTemplatePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("launchTemplateData", "LaunchTemplateData", properties.LaunchTemplateData != null ? CfnLaunchTemplateLaunchTemplateDataPropertyFromCloudFormation(properties.LaunchTemplateData) : void 0);
      ret.addPropertyResult("launchTemplateName", "LaunchTemplateName", properties.LaunchTemplateName != null ? cfn_parse.FromCloudFormation.getString(properties.LaunchTemplateName) : void 0);
      ret.addPropertyResult("tagSpecifications", "TagSpecifications", properties.TagSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnLaunchTemplateLaunchTemplateTagSpecificationPropertyFromCloudFormation)(properties.TagSpecifications) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnLaunchTemplate = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnLaunchTemplate.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.attrDefaultVersionNumber = cdk.Token.asString(this.getAtt("DefaultVersionNumber"));
        this.attrLatestVersionNumber = cdk.Token.asString(this.getAtt("LatestVersionNumber"));
        this.launchTemplateData = props.launchTemplateData;
        this.launchTemplateName = props.launchTemplateName;
        this.tagSpecifications = props.tagSpecifications;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnLaunchTemplatePropsFromCloudFormation(resourceProperties);
        const ret = new CfnLaunchTemplate(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnLaunchTemplate.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          launchTemplateData: this.launchTemplateData,
          launchTemplateName: this.launchTemplateName,
          tagSpecifications: this.tagSpecifications
        };
      }
      renderProperties(props) {
        return cfnLaunchTemplatePropsToCloudFormation(props);
      }
    };
    exports2.CfnLaunchTemplate = CfnLaunchTemplate;
    _v = JSII_RTTI_SYMBOL_1;
    CfnLaunchTemplate[_v] = { fqn: "@aws-cdk/aws-ec2.CfnLaunchTemplate", version: "1.132.0" };
    CfnLaunchTemplate.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::LaunchTemplate";
    function CfnLaunchTemplate_BlockDeviceMappingPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("deviceName", cdk.validateString)(properties.deviceName));
      errors.collect(cdk.propertyValidator("ebs", CfnLaunchTemplate_EbsPropertyValidator)(properties.ebs));
      errors.collect(cdk.propertyValidator("noDevice", cdk.validateString)(properties.noDevice));
      errors.collect(cdk.propertyValidator("virtualName", cdk.validateString)(properties.virtualName));
      return errors.wrap('supplied properties not correct for "BlockDeviceMappingProperty"');
    }
    function cfnLaunchTemplateBlockDeviceMappingPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLaunchTemplate_BlockDeviceMappingPropertyValidator(properties).assertSuccess();
      return {
        DeviceName: cdk.stringToCloudFormation(properties.deviceName),
        Ebs: cfnLaunchTemplateEbsPropertyToCloudFormation(properties.ebs),
        NoDevice: cdk.stringToCloudFormation(properties.noDevice),
        VirtualName: cdk.stringToCloudFormation(properties.virtualName)
      };
    }
    function CfnLaunchTemplateBlockDeviceMappingPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("deviceName", "DeviceName", properties.DeviceName != null ? cfn_parse.FromCloudFormation.getString(properties.DeviceName) : void 0);
      ret.addPropertyResult("ebs", "Ebs", properties.Ebs != null ? CfnLaunchTemplateEbsPropertyFromCloudFormation(properties.Ebs) : void 0);
      ret.addPropertyResult("noDevice", "NoDevice", properties.NoDevice != null ? cfn_parse.FromCloudFormation.getString(properties.NoDevice) : void 0);
      ret.addPropertyResult("virtualName", "VirtualName", properties.VirtualName != null ? cfn_parse.FromCloudFormation.getString(properties.VirtualName) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnLaunchTemplate_CapacityReservationSpecificationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("capacityReservationPreference", cdk.validateString)(properties.capacityReservationPreference));
      errors.collect(cdk.propertyValidator("capacityReservationTarget", CfnLaunchTemplate_CapacityReservationTargetPropertyValidator)(properties.capacityReservationTarget));
      return errors.wrap('supplied properties not correct for "CapacityReservationSpecificationProperty"');
    }
    function cfnLaunchTemplateCapacityReservationSpecificationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLaunchTemplate_CapacityReservationSpecificationPropertyValidator(properties).assertSuccess();
      return {
        CapacityReservationPreference: cdk.stringToCloudFormation(properties.capacityReservationPreference),
        CapacityReservationTarget: cfnLaunchTemplateCapacityReservationTargetPropertyToCloudFormation(properties.capacityReservationTarget)
      };
    }
    function CfnLaunchTemplateCapacityReservationSpecificationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("capacityReservationPreference", "CapacityReservationPreference", properties.CapacityReservationPreference != null ? cfn_parse.FromCloudFormation.getString(properties.CapacityReservationPreference) : void 0);
      ret.addPropertyResult("capacityReservationTarget", "CapacityReservationTarget", properties.CapacityReservationTarget != null ? CfnLaunchTemplateCapacityReservationTargetPropertyFromCloudFormation(properties.CapacityReservationTarget) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnLaunchTemplate_CapacityReservationTargetPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("capacityReservationId", cdk.validateString)(properties.capacityReservationId));
      errors.collect(cdk.propertyValidator("capacityReservationResourceGroupArn", cdk.validateString)(properties.capacityReservationResourceGroupArn));
      return errors.wrap('supplied properties not correct for "CapacityReservationTargetProperty"');
    }
    function cfnLaunchTemplateCapacityReservationTargetPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLaunchTemplate_CapacityReservationTargetPropertyValidator(properties).assertSuccess();
      return {
        CapacityReservationId: cdk.stringToCloudFormation(properties.capacityReservationId),
        CapacityReservationResourceGroupArn: cdk.stringToCloudFormation(properties.capacityReservationResourceGroupArn)
      };
    }
    function CfnLaunchTemplateCapacityReservationTargetPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("capacityReservationId", "CapacityReservationId", properties.CapacityReservationId != null ? cfn_parse.FromCloudFormation.getString(properties.CapacityReservationId) : void 0);
      ret.addPropertyResult("capacityReservationResourceGroupArn", "CapacityReservationResourceGroupArn", properties.CapacityReservationResourceGroupArn != null ? cfn_parse.FromCloudFormation.getString(properties.CapacityReservationResourceGroupArn) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnLaunchTemplate_CpuOptionsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("coreCount", cdk.validateNumber)(properties.coreCount));
      errors.collect(cdk.propertyValidator("threadsPerCore", cdk.validateNumber)(properties.threadsPerCore));
      return errors.wrap('supplied properties not correct for "CpuOptionsProperty"');
    }
    function cfnLaunchTemplateCpuOptionsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLaunchTemplate_CpuOptionsPropertyValidator(properties).assertSuccess();
      return {
        CoreCount: cdk.numberToCloudFormation(properties.coreCount),
        ThreadsPerCore: cdk.numberToCloudFormation(properties.threadsPerCore)
      };
    }
    function CfnLaunchTemplateCpuOptionsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("coreCount", "CoreCount", properties.CoreCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.CoreCount) : void 0);
      ret.addPropertyResult("threadsPerCore", "ThreadsPerCore", properties.ThreadsPerCore != null ? cfn_parse.FromCloudFormation.getNumber(properties.ThreadsPerCore) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnLaunchTemplate_CreditSpecificationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("cpuCredits", cdk.validateString)(properties.cpuCredits));
      return errors.wrap('supplied properties not correct for "CreditSpecificationProperty"');
    }
    function cfnLaunchTemplateCreditSpecificationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLaunchTemplate_CreditSpecificationPropertyValidator(properties).assertSuccess();
      return {
        CpuCredits: cdk.stringToCloudFormation(properties.cpuCredits)
      };
    }
    function CfnLaunchTemplateCreditSpecificationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("cpuCredits", "CpuCredits", properties.CpuCredits != null ? cfn_parse.FromCloudFormation.getString(properties.CpuCredits) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnLaunchTemplate_EbsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("deleteOnTermination", cdk.validateBoolean)(properties.deleteOnTermination));
      errors.collect(cdk.propertyValidator("encrypted", cdk.validateBoolean)(properties.encrypted));
      errors.collect(cdk.propertyValidator("iops", cdk.validateNumber)(properties.iops));
      errors.collect(cdk.propertyValidator("kmsKeyId", cdk.validateString)(properties.kmsKeyId));
      errors.collect(cdk.propertyValidator("snapshotId", cdk.validateString)(properties.snapshotId));
      errors.collect(cdk.propertyValidator("throughput", cdk.validateNumber)(properties.throughput));
      errors.collect(cdk.propertyValidator("volumeSize", cdk.validateNumber)(properties.volumeSize));
      errors.collect(cdk.propertyValidator("volumeType", cdk.validateString)(properties.volumeType));
      return errors.wrap('supplied properties not correct for "EbsProperty"');
    }
    function cfnLaunchTemplateEbsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLaunchTemplate_EbsPropertyValidator(properties).assertSuccess();
      return {
        DeleteOnTermination: cdk.booleanToCloudFormation(properties.deleteOnTermination),
        Encrypted: cdk.booleanToCloudFormation(properties.encrypted),
        Iops: cdk.numberToCloudFormation(properties.iops),
        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),
        SnapshotId: cdk.stringToCloudFormation(properties.snapshotId),
        Throughput: cdk.numberToCloudFormation(properties.throughput),
        VolumeSize: cdk.numberToCloudFormation(properties.volumeSize),
        VolumeType: cdk.stringToCloudFormation(properties.volumeType)
      };
    }
    function CfnLaunchTemplateEbsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("deleteOnTermination", "DeleteOnTermination", properties.DeleteOnTermination != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DeleteOnTermination) : void 0);
      ret.addPropertyResult("encrypted", "Encrypted", properties.Encrypted != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Encrypted) : void 0);
      ret.addPropertyResult("iops", "Iops", properties.Iops != null ? cfn_parse.FromCloudFormation.getNumber(properties.Iops) : void 0);
      ret.addPropertyResult("kmsKeyId", "KmsKeyId", properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : void 0);
      ret.addPropertyResult("snapshotId", "SnapshotId", properties.SnapshotId != null ? cfn_parse.FromCloudFormation.getString(properties.SnapshotId) : void 0);
      ret.addPropertyResult("throughput", "Throughput", properties.Throughput != null ? cfn_parse.FromCloudFormation.getNumber(properties.Throughput) : void 0);
      ret.addPropertyResult("volumeSize", "VolumeSize", properties.VolumeSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.VolumeSize) : void 0);
      ret.addPropertyResult("volumeType", "VolumeType", properties.VolumeType != null ? cfn_parse.FromCloudFormation.getString(properties.VolumeType) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnLaunchTemplate_ElasticGpuSpecificationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("type", cdk.validateString)(properties.type));
      return errors.wrap('supplied properties not correct for "ElasticGpuSpecificationProperty"');
    }
    function cfnLaunchTemplateElasticGpuSpecificationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLaunchTemplate_ElasticGpuSpecificationPropertyValidator(properties).assertSuccess();
      return {
        Type: cdk.stringToCloudFormation(properties.type)
      };
    }
    function CfnLaunchTemplateElasticGpuSpecificationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("type", "Type", properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnLaunchTemplate_EnclaveOptionsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("enabled", cdk.validateBoolean)(properties.enabled));
      return errors.wrap('supplied properties not correct for "EnclaveOptionsProperty"');
    }
    function cfnLaunchTemplateEnclaveOptionsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLaunchTemplate_EnclaveOptionsPropertyValidator(properties).assertSuccess();
      return {
        Enabled: cdk.booleanToCloudFormation(properties.enabled)
      };
    }
    function CfnLaunchTemplateEnclaveOptionsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("enabled", "Enabled", properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnLaunchTemplate_HibernationOptionsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("configured", cdk.validateBoolean)(properties.configured));
      return errors.wrap('supplied properties not correct for "HibernationOptionsProperty"');
    }
    function cfnLaunchTemplateHibernationOptionsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLaunchTemplate_HibernationOptionsPropertyValidator(properties).assertSuccess();
      return {
        Configured: cdk.booleanToCloudFormation(properties.configured)
      };
    }
    function CfnLaunchTemplateHibernationOptionsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("configured", "Configured", properties.Configured != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Configured) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnLaunchTemplate_IamInstanceProfilePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("arn", cdk.validateString)(properties.arn));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      return errors.wrap('supplied properties not correct for "IamInstanceProfileProperty"');
    }
    function cfnLaunchTemplateIamInstanceProfilePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLaunchTemplate_IamInstanceProfilePropertyValidator(properties).assertSuccess();
      return {
        Arn: cdk.stringToCloudFormation(properties.arn),
        Name: cdk.stringToCloudFormation(properties.name)
      };
    }
    function CfnLaunchTemplateIamInstanceProfilePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("arn", "Arn", properties.Arn != null ? cfn_parse.FromCloudFormation.getString(properties.Arn) : void 0);
      ret.addPropertyResult("name", "Name", properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnLaunchTemplate_InstanceMarketOptionsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("marketType", cdk.validateString)(properties.marketType));
      errors.collect(cdk.propertyValidator("spotOptions", CfnLaunchTemplate_SpotOptionsPropertyValidator)(properties.spotOptions));
      return errors.wrap('supplied properties not correct for "InstanceMarketOptionsProperty"');
    }
    function cfnLaunchTemplateInstanceMarketOptionsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLaunchTemplate_InstanceMarketOptionsPropertyValidator(properties).assertSuccess();
      return {
        MarketType: cdk.stringToCloudFormation(properties.marketType),
        SpotOptions: cfnLaunchTemplateSpotOptionsPropertyToCloudFormation(properties.spotOptions)
      };
    }
    function CfnLaunchTemplateInstanceMarketOptionsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("marketType", "MarketType", properties.MarketType != null ? cfn_parse.FromCloudFormation.getString(properties.MarketType) : void 0);
      ret.addPropertyResult("spotOptions", "SpotOptions", properties.SpotOptions != null ? CfnLaunchTemplateSpotOptionsPropertyFromCloudFormation(properties.SpotOptions) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnLaunchTemplate_Ipv6AddPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("ipv6Address", cdk.validateString)(properties.ipv6Address));
      return errors.wrap('supplied properties not correct for "Ipv6AddProperty"');
    }
    function cfnLaunchTemplateIpv6AddPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLaunchTemplate_Ipv6AddPropertyValidator(properties).assertSuccess();
      return {
        Ipv6Address: cdk.stringToCloudFormation(properties.ipv6Address)
      };
    }
    function CfnLaunchTemplateIpv6AddPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("ipv6Address", "Ipv6Address", properties.Ipv6Address != null ? cfn_parse.FromCloudFormation.getString(properties.Ipv6Address) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnLaunchTemplate_LaunchTemplateDataPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("blockDeviceMappings", cdk.listValidator(CfnLaunchTemplate_BlockDeviceMappingPropertyValidator))(properties.blockDeviceMappings));
      errors.collect(cdk.propertyValidator("capacityReservationSpecification", CfnLaunchTemplate_CapacityReservationSpecificationPropertyValidator)(properties.capacityReservationSpecification));
      errors.collect(cdk.propertyValidator("cpuOptions", CfnLaunchTemplate_CpuOptionsPropertyValidator)(properties.cpuOptions));
      errors.collect(cdk.propertyValidator("creditSpecification", CfnLaunchTemplate_CreditSpecificationPropertyValidator)(properties.creditSpecification));
      errors.collect(cdk.propertyValidator("disableApiTermination", cdk.validateBoolean)(properties.disableApiTermination));
      errors.collect(cdk.propertyValidator("ebsOptimized", cdk.validateBoolean)(properties.ebsOptimized));
      errors.collect(cdk.propertyValidator("elasticGpuSpecifications", cdk.listValidator(CfnLaunchTemplate_ElasticGpuSpecificationPropertyValidator))(properties.elasticGpuSpecifications));
      errors.collect(cdk.propertyValidator("elasticInferenceAccelerators", cdk.listValidator(CfnLaunchTemplate_LaunchTemplateElasticInferenceAcceleratorPropertyValidator))(properties.elasticInferenceAccelerators));
      errors.collect(cdk.propertyValidator("enclaveOptions", CfnLaunchTemplate_EnclaveOptionsPropertyValidator)(properties.enclaveOptions));
      errors.collect(cdk.propertyValidator("hibernationOptions", CfnLaunchTemplate_HibernationOptionsPropertyValidator)(properties.hibernationOptions));
      errors.collect(cdk.propertyValidator("iamInstanceProfile", CfnLaunchTemplate_IamInstanceProfilePropertyValidator)(properties.iamInstanceProfile));
      errors.collect(cdk.propertyValidator("imageId", cdk.validateString)(properties.imageId));
      errors.collect(cdk.propertyValidator("instanceInitiatedShutdownBehavior", cdk.validateString)(properties.instanceInitiatedShutdownBehavior));
      errors.collect(cdk.propertyValidator("instanceMarketOptions", CfnLaunchTemplate_InstanceMarketOptionsPropertyValidator)(properties.instanceMarketOptions));
      errors.collect(cdk.propertyValidator("instanceType", cdk.validateString)(properties.instanceType));
      errors.collect(cdk.propertyValidator("kernelId", cdk.validateString)(properties.kernelId));
      errors.collect(cdk.propertyValidator("keyName", cdk.validateString)(properties.keyName));
      errors.collect(cdk.propertyValidator("licenseSpecifications", cdk.listValidator(CfnLaunchTemplate_LicenseSpecificationPropertyValidator))(properties.licenseSpecifications));
      errors.collect(cdk.propertyValidator("metadataOptions", CfnLaunchTemplate_MetadataOptionsPropertyValidator)(properties.metadataOptions));
      errors.collect(cdk.propertyValidator("monitoring", CfnLaunchTemplate_MonitoringPropertyValidator)(properties.monitoring));
      errors.collect(cdk.propertyValidator("networkInterfaces", cdk.listValidator(CfnLaunchTemplate_NetworkInterfacePropertyValidator))(properties.networkInterfaces));
      errors.collect(cdk.propertyValidator("placement", CfnLaunchTemplate_PlacementPropertyValidator)(properties.placement));
      errors.collect(cdk.propertyValidator("ramDiskId", cdk.validateString)(properties.ramDiskId));
      errors.collect(cdk.propertyValidator("securityGroupIds", cdk.listValidator(cdk.validateString))(properties.securityGroupIds));
      errors.collect(cdk.propertyValidator("securityGroups", cdk.listValidator(cdk.validateString))(properties.securityGroups));
      errors.collect(cdk.propertyValidator("tagSpecifications", cdk.listValidator(CfnLaunchTemplate_TagSpecificationPropertyValidator))(properties.tagSpecifications));
      errors.collect(cdk.propertyValidator("userData", cdk.validateString)(properties.userData));
      return errors.wrap('supplied properties not correct for "LaunchTemplateDataProperty"');
    }
    function cfnLaunchTemplateLaunchTemplateDataPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLaunchTemplate_LaunchTemplateDataPropertyValidator(properties).assertSuccess();
      return {
        BlockDeviceMappings: cdk.listMapper(cfnLaunchTemplateBlockDeviceMappingPropertyToCloudFormation)(properties.blockDeviceMappings),
        CapacityReservationSpecification: cfnLaunchTemplateCapacityReservationSpecificationPropertyToCloudFormation(properties.capacityReservationSpecification),
        CpuOptions: cfnLaunchTemplateCpuOptionsPropertyToCloudFormation(properties.cpuOptions),
        CreditSpecification: cfnLaunchTemplateCreditSpecificationPropertyToCloudFormation(properties.creditSpecification),
        DisableApiTermination: cdk.booleanToCloudFormation(properties.disableApiTermination),
        EbsOptimized: cdk.booleanToCloudFormation(properties.ebsOptimized),
        ElasticGpuSpecifications: cdk.listMapper(cfnLaunchTemplateElasticGpuSpecificationPropertyToCloudFormation)(properties.elasticGpuSpecifications),
        ElasticInferenceAccelerators: cdk.listMapper(cfnLaunchTemplateLaunchTemplateElasticInferenceAcceleratorPropertyToCloudFormation)(properties.elasticInferenceAccelerators),
        EnclaveOptions: cfnLaunchTemplateEnclaveOptionsPropertyToCloudFormation(properties.enclaveOptions),
        HibernationOptions: cfnLaunchTemplateHibernationOptionsPropertyToCloudFormation(properties.hibernationOptions),
        IamInstanceProfile: cfnLaunchTemplateIamInstanceProfilePropertyToCloudFormation(properties.iamInstanceProfile),
        ImageId: cdk.stringToCloudFormation(properties.imageId),
        InstanceInitiatedShutdownBehavior: cdk.stringToCloudFormation(properties.instanceInitiatedShutdownBehavior),
        InstanceMarketOptions: cfnLaunchTemplateInstanceMarketOptionsPropertyToCloudFormation(properties.instanceMarketOptions),
        InstanceType: cdk.stringToCloudFormation(properties.instanceType),
        KernelId: cdk.stringToCloudFormation(properties.kernelId),
        KeyName: cdk.stringToCloudFormation(properties.keyName),
        LicenseSpecifications: cdk.listMapper(cfnLaunchTemplateLicenseSpecificationPropertyToCloudFormation)(properties.licenseSpecifications),
        MetadataOptions: cfnLaunchTemplateMetadataOptionsPropertyToCloudFormation(properties.metadataOptions),
        Monitoring: cfnLaunchTemplateMonitoringPropertyToCloudFormation(properties.monitoring),
        NetworkInterfaces: cdk.listMapper(cfnLaunchTemplateNetworkInterfacePropertyToCloudFormation)(properties.networkInterfaces),
        Placement: cfnLaunchTemplatePlacementPropertyToCloudFormation(properties.placement),
        RamDiskId: cdk.stringToCloudFormation(properties.ramDiskId),
        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),
        SecurityGroups: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroups),
        TagSpecifications: cdk.listMapper(cfnLaunchTemplateTagSpecificationPropertyToCloudFormation)(properties.tagSpecifications),
        UserData: cdk.stringToCloudFormation(properties.userData)
      };
    }
    function CfnLaunchTemplateLaunchTemplateDataPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("blockDeviceMappings", "BlockDeviceMappings", properties.BlockDeviceMappings != null ? cfn_parse.FromCloudFormation.getArray(CfnLaunchTemplateBlockDeviceMappingPropertyFromCloudFormation)(properties.BlockDeviceMappings) : void 0);
      ret.addPropertyResult("capacityReservationSpecification", "CapacityReservationSpecification", properties.CapacityReservationSpecification != null ? CfnLaunchTemplateCapacityReservationSpecificationPropertyFromCloudFormation(properties.CapacityReservationSpecification) : void 0);
      ret.addPropertyResult("cpuOptions", "CpuOptions", properties.CpuOptions != null ? CfnLaunchTemplateCpuOptionsPropertyFromCloudFormation(properties.CpuOptions) : void 0);
      ret.addPropertyResult("creditSpecification", "CreditSpecification", properties.CreditSpecification != null ? CfnLaunchTemplateCreditSpecificationPropertyFromCloudFormation(properties.CreditSpecification) : void 0);
      ret.addPropertyResult("disableApiTermination", "DisableApiTermination", properties.DisableApiTermination != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DisableApiTermination) : void 0);
      ret.addPropertyResult("ebsOptimized", "EbsOptimized", properties.EbsOptimized != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EbsOptimized) : void 0);
      ret.addPropertyResult("elasticGpuSpecifications", "ElasticGpuSpecifications", properties.ElasticGpuSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnLaunchTemplateElasticGpuSpecificationPropertyFromCloudFormation)(properties.ElasticGpuSpecifications) : void 0);
      ret.addPropertyResult("elasticInferenceAccelerators", "ElasticInferenceAccelerators", properties.ElasticInferenceAccelerators != null ? cfn_parse.FromCloudFormation.getArray(CfnLaunchTemplateLaunchTemplateElasticInferenceAcceleratorPropertyFromCloudFormation)(properties.ElasticInferenceAccelerators) : void 0);
      ret.addPropertyResult("enclaveOptions", "EnclaveOptions", properties.EnclaveOptions != null ? CfnLaunchTemplateEnclaveOptionsPropertyFromCloudFormation(properties.EnclaveOptions) : void 0);
      ret.addPropertyResult("hibernationOptions", "HibernationOptions", properties.HibernationOptions != null ? CfnLaunchTemplateHibernationOptionsPropertyFromCloudFormation(properties.HibernationOptions) : void 0);
      ret.addPropertyResult("iamInstanceProfile", "IamInstanceProfile", properties.IamInstanceProfile != null ? CfnLaunchTemplateIamInstanceProfilePropertyFromCloudFormation(properties.IamInstanceProfile) : void 0);
      ret.addPropertyResult("imageId", "ImageId", properties.ImageId != null ? cfn_parse.FromCloudFormation.getString(properties.ImageId) : void 0);
      ret.addPropertyResult("instanceInitiatedShutdownBehavior", "InstanceInitiatedShutdownBehavior", properties.InstanceInitiatedShutdownBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceInitiatedShutdownBehavior) : void 0);
      ret.addPropertyResult("instanceMarketOptions", "InstanceMarketOptions", properties.InstanceMarketOptions != null ? CfnLaunchTemplateInstanceMarketOptionsPropertyFromCloudFormation(properties.InstanceMarketOptions) : void 0);
      ret.addPropertyResult("instanceType", "InstanceType", properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : void 0);
      ret.addPropertyResult("kernelId", "KernelId", properties.KernelId != null ? cfn_parse.FromCloudFormation.getString(properties.KernelId) : void 0);
      ret.addPropertyResult("keyName", "KeyName", properties.KeyName != null ? cfn_parse.FromCloudFormation.getString(properties.KeyName) : void 0);
      ret.addPropertyResult("licenseSpecifications", "LicenseSpecifications", properties.LicenseSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnLaunchTemplateLicenseSpecificationPropertyFromCloudFormation)(properties.LicenseSpecifications) : void 0);
      ret.addPropertyResult("metadataOptions", "MetadataOptions", properties.MetadataOptions != null ? CfnLaunchTemplateMetadataOptionsPropertyFromCloudFormation(properties.MetadataOptions) : void 0);
      ret.addPropertyResult("monitoring", "Monitoring", properties.Monitoring != null ? CfnLaunchTemplateMonitoringPropertyFromCloudFormation(properties.Monitoring) : void 0);
      ret.addPropertyResult("networkInterfaces", "NetworkInterfaces", properties.NetworkInterfaces != null ? cfn_parse.FromCloudFormation.getArray(CfnLaunchTemplateNetworkInterfacePropertyFromCloudFormation)(properties.NetworkInterfaces) : void 0);
      ret.addPropertyResult("placement", "Placement", properties.Placement != null ? CfnLaunchTemplatePlacementPropertyFromCloudFormation(properties.Placement) : void 0);
      ret.addPropertyResult("ramDiskId", "RamDiskId", properties.RamDiskId != null ? cfn_parse.FromCloudFormation.getString(properties.RamDiskId) : void 0);
      ret.addPropertyResult("securityGroupIds", "SecurityGroupIds", properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds) : void 0);
      ret.addPropertyResult("securityGroups", "SecurityGroups", properties.SecurityGroups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroups) : void 0);
      ret.addPropertyResult("tagSpecifications", "TagSpecifications", properties.TagSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnLaunchTemplateTagSpecificationPropertyFromCloudFormation)(properties.TagSpecifications) : void 0);
      ret.addPropertyResult("userData", "UserData", properties.UserData != null ? cfn_parse.FromCloudFormation.getString(properties.UserData) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnLaunchTemplate_LaunchTemplateElasticInferenceAcceleratorPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("count", cdk.validateNumber)(properties.count));
      errors.collect(cdk.propertyValidator("type", cdk.validateString)(properties.type));
      return errors.wrap('supplied properties not correct for "LaunchTemplateElasticInferenceAcceleratorProperty"');
    }
    function cfnLaunchTemplateLaunchTemplateElasticInferenceAcceleratorPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLaunchTemplate_LaunchTemplateElasticInferenceAcceleratorPropertyValidator(properties).assertSuccess();
      return {
        Count: cdk.numberToCloudFormation(properties.count),
        Type: cdk.stringToCloudFormation(properties.type)
      };
    }
    function CfnLaunchTemplateLaunchTemplateElasticInferenceAcceleratorPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("count", "Count", properties.Count != null ? cfn_parse.FromCloudFormation.getNumber(properties.Count) : void 0);
      ret.addPropertyResult("type", "Type", properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnLaunchTemplate_LaunchTemplateTagSpecificationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("resourceType", cdk.validateString)(properties.resourceType));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "LaunchTemplateTagSpecificationProperty"');
    }
    function cfnLaunchTemplateLaunchTemplateTagSpecificationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLaunchTemplate_LaunchTemplateTagSpecificationPropertyValidator(properties).assertSuccess();
      return {
        ResourceType: cdk.stringToCloudFormation(properties.resourceType),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnLaunchTemplateLaunchTemplateTagSpecificationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("resourceType", "ResourceType", properties.ResourceType != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceType) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnLaunchTemplate_LicenseSpecificationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("licenseConfigurationArn", cdk.validateString)(properties.licenseConfigurationArn));
      return errors.wrap('supplied properties not correct for "LicenseSpecificationProperty"');
    }
    function cfnLaunchTemplateLicenseSpecificationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLaunchTemplate_LicenseSpecificationPropertyValidator(properties).assertSuccess();
      return {
        LicenseConfigurationArn: cdk.stringToCloudFormation(properties.licenseConfigurationArn)
      };
    }
    function CfnLaunchTemplateLicenseSpecificationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("licenseConfigurationArn", "LicenseConfigurationArn", properties.LicenseConfigurationArn != null ? cfn_parse.FromCloudFormation.getString(properties.LicenseConfigurationArn) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnLaunchTemplate_MetadataOptionsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("httpEndpoint", cdk.validateString)(properties.httpEndpoint));
      errors.collect(cdk.propertyValidator("httpProtocolIpv6", cdk.validateString)(properties.httpProtocolIpv6));
      errors.collect(cdk.propertyValidator("httpPutResponseHopLimit", cdk.validateNumber)(properties.httpPutResponseHopLimit));
      errors.collect(cdk.propertyValidator("httpTokens", cdk.validateString)(properties.httpTokens));
      return errors.wrap('supplied properties not correct for "MetadataOptionsProperty"');
    }
    function cfnLaunchTemplateMetadataOptionsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLaunchTemplate_MetadataOptionsPropertyValidator(properties).assertSuccess();
      return {
        HttpEndpoint: cdk.stringToCloudFormation(properties.httpEndpoint),
        HttpProtocolIpv6: cdk.stringToCloudFormation(properties.httpProtocolIpv6),
        HttpPutResponseHopLimit: cdk.numberToCloudFormation(properties.httpPutResponseHopLimit),
        HttpTokens: cdk.stringToCloudFormation(properties.httpTokens)
      };
    }
    function CfnLaunchTemplateMetadataOptionsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("httpEndpoint", "HttpEndpoint", properties.HttpEndpoint != null ? cfn_parse.FromCloudFormation.getString(properties.HttpEndpoint) : void 0);
      ret.addPropertyResult("httpProtocolIpv6", "HttpProtocolIpv6", properties.HttpProtocolIpv6 != null ? cfn_parse.FromCloudFormation.getString(properties.HttpProtocolIpv6) : void 0);
      ret.addPropertyResult("httpPutResponseHopLimit", "HttpPutResponseHopLimit", properties.HttpPutResponseHopLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.HttpPutResponseHopLimit) : void 0);
      ret.addPropertyResult("httpTokens", "HttpTokens", properties.HttpTokens != null ? cfn_parse.FromCloudFormation.getString(properties.HttpTokens) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnLaunchTemplate_MonitoringPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("enabled", cdk.validateBoolean)(properties.enabled));
      return errors.wrap('supplied properties not correct for "MonitoringProperty"');
    }
    function cfnLaunchTemplateMonitoringPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLaunchTemplate_MonitoringPropertyValidator(properties).assertSuccess();
      return {
        Enabled: cdk.booleanToCloudFormation(properties.enabled)
      };
    }
    function CfnLaunchTemplateMonitoringPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("enabled", "Enabled", properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnLaunchTemplate_NetworkInterfacePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("associateCarrierIpAddress", cdk.validateBoolean)(properties.associateCarrierIpAddress));
      errors.collect(cdk.propertyValidator("associatePublicIpAddress", cdk.validateBoolean)(properties.associatePublicIpAddress));
      errors.collect(cdk.propertyValidator("deleteOnTermination", cdk.validateBoolean)(properties.deleteOnTermination));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("deviceIndex", cdk.validateNumber)(properties.deviceIndex));
      errors.collect(cdk.propertyValidator("groups", cdk.listValidator(cdk.validateString))(properties.groups));
      errors.collect(cdk.propertyValidator("interfaceType", cdk.validateString)(properties.interfaceType));
      errors.collect(cdk.propertyValidator("ipv6AddressCount", cdk.validateNumber)(properties.ipv6AddressCount));
      errors.collect(cdk.propertyValidator("ipv6Addresses", cdk.listValidator(CfnLaunchTemplate_Ipv6AddPropertyValidator))(properties.ipv6Addresses));
      errors.collect(cdk.propertyValidator("networkCardIndex", cdk.validateNumber)(properties.networkCardIndex));
      errors.collect(cdk.propertyValidator("networkInterfaceId", cdk.validateString)(properties.networkInterfaceId));
      errors.collect(cdk.propertyValidator("privateIpAddress", cdk.validateString)(properties.privateIpAddress));
      errors.collect(cdk.propertyValidator("privateIpAddresses", cdk.listValidator(CfnLaunchTemplate_PrivateIpAddPropertyValidator))(properties.privateIpAddresses));
      errors.collect(cdk.propertyValidator("secondaryPrivateIpAddressCount", cdk.validateNumber)(properties.secondaryPrivateIpAddressCount));
      errors.collect(cdk.propertyValidator("subnetId", cdk.validateString)(properties.subnetId));
      return errors.wrap('supplied properties not correct for "NetworkInterfaceProperty"');
    }
    function cfnLaunchTemplateNetworkInterfacePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLaunchTemplate_NetworkInterfacePropertyValidator(properties).assertSuccess();
      return {
        AssociateCarrierIpAddress: cdk.booleanToCloudFormation(properties.associateCarrierIpAddress),
        AssociatePublicIpAddress: cdk.booleanToCloudFormation(properties.associatePublicIpAddress),
        DeleteOnTermination: cdk.booleanToCloudFormation(properties.deleteOnTermination),
        Description: cdk.stringToCloudFormation(properties.description),
        DeviceIndex: cdk.numberToCloudFormation(properties.deviceIndex),
        Groups: cdk.listMapper(cdk.stringToCloudFormation)(properties.groups),
        InterfaceType: cdk.stringToCloudFormation(properties.interfaceType),
        Ipv6AddressCount: cdk.numberToCloudFormation(properties.ipv6AddressCount),
        Ipv6Addresses: cdk.listMapper(cfnLaunchTemplateIpv6AddPropertyToCloudFormation)(properties.ipv6Addresses),
        NetworkCardIndex: cdk.numberToCloudFormation(properties.networkCardIndex),
        NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),
        PrivateIpAddress: cdk.stringToCloudFormation(properties.privateIpAddress),
        PrivateIpAddresses: cdk.listMapper(cfnLaunchTemplatePrivateIpAddPropertyToCloudFormation)(properties.privateIpAddresses),
        SecondaryPrivateIpAddressCount: cdk.numberToCloudFormation(properties.secondaryPrivateIpAddressCount),
        SubnetId: cdk.stringToCloudFormation(properties.subnetId)
      };
    }
    function CfnLaunchTemplateNetworkInterfacePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("associateCarrierIpAddress", "AssociateCarrierIpAddress", properties.AssociateCarrierIpAddress != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AssociateCarrierIpAddress) : void 0);
      ret.addPropertyResult("associatePublicIpAddress", "AssociatePublicIpAddress", properties.AssociatePublicIpAddress != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AssociatePublicIpAddress) : void 0);
      ret.addPropertyResult("deleteOnTermination", "DeleteOnTermination", properties.DeleteOnTermination != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DeleteOnTermination) : void 0);
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("deviceIndex", "DeviceIndex", properties.DeviceIndex != null ? cfn_parse.FromCloudFormation.getNumber(properties.DeviceIndex) : void 0);
      ret.addPropertyResult("groups", "Groups", properties.Groups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Groups) : void 0);
      ret.addPropertyResult("interfaceType", "InterfaceType", properties.InterfaceType != null ? cfn_parse.FromCloudFormation.getString(properties.InterfaceType) : void 0);
      ret.addPropertyResult("ipv6AddressCount", "Ipv6AddressCount", properties.Ipv6AddressCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.Ipv6AddressCount) : void 0);
      ret.addPropertyResult("ipv6Addresses", "Ipv6Addresses", properties.Ipv6Addresses != null ? cfn_parse.FromCloudFormation.getArray(CfnLaunchTemplateIpv6AddPropertyFromCloudFormation)(properties.Ipv6Addresses) : void 0);
      ret.addPropertyResult("networkCardIndex", "NetworkCardIndex", properties.NetworkCardIndex != null ? cfn_parse.FromCloudFormation.getNumber(properties.NetworkCardIndex) : void 0);
      ret.addPropertyResult("networkInterfaceId", "NetworkInterfaceId", properties.NetworkInterfaceId != null ? cfn_parse.FromCloudFormation.getString(properties.NetworkInterfaceId) : void 0);
      ret.addPropertyResult("privateIpAddress", "PrivateIpAddress", properties.PrivateIpAddress != null ? cfn_parse.FromCloudFormation.getString(properties.PrivateIpAddress) : void 0);
      ret.addPropertyResult("privateIpAddresses", "PrivateIpAddresses", properties.PrivateIpAddresses != null ? cfn_parse.FromCloudFormation.getArray(CfnLaunchTemplatePrivateIpAddPropertyFromCloudFormation)(properties.PrivateIpAddresses) : void 0);
      ret.addPropertyResult("secondaryPrivateIpAddressCount", "SecondaryPrivateIpAddressCount", properties.SecondaryPrivateIpAddressCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.SecondaryPrivateIpAddressCount) : void 0);
      ret.addPropertyResult("subnetId", "SubnetId", properties.SubnetId != null ? cfn_parse.FromCloudFormation.getString(properties.SubnetId) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnLaunchTemplate_PlacementPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("affinity", cdk.validateString)(properties.affinity));
      errors.collect(cdk.propertyValidator("availabilityZone", cdk.validateString)(properties.availabilityZone));
      errors.collect(cdk.propertyValidator("groupName", cdk.validateString)(properties.groupName));
      errors.collect(cdk.propertyValidator("hostId", cdk.validateString)(properties.hostId));
      errors.collect(cdk.propertyValidator("hostResourceGroupArn", cdk.validateString)(properties.hostResourceGroupArn));
      errors.collect(cdk.propertyValidator("partitionNumber", cdk.validateNumber)(properties.partitionNumber));
      errors.collect(cdk.propertyValidator("spreadDomain", cdk.validateString)(properties.spreadDomain));
      errors.collect(cdk.propertyValidator("tenancy", cdk.validateString)(properties.tenancy));
      return errors.wrap('supplied properties not correct for "PlacementProperty"');
    }
    function cfnLaunchTemplatePlacementPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLaunchTemplate_PlacementPropertyValidator(properties).assertSuccess();
      return {
        Affinity: cdk.stringToCloudFormation(properties.affinity),
        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),
        GroupName: cdk.stringToCloudFormation(properties.groupName),
        HostId: cdk.stringToCloudFormation(properties.hostId),
        HostResourceGroupArn: cdk.stringToCloudFormation(properties.hostResourceGroupArn),
        PartitionNumber: cdk.numberToCloudFormation(properties.partitionNumber),
        SpreadDomain: cdk.stringToCloudFormation(properties.spreadDomain),
        Tenancy: cdk.stringToCloudFormation(properties.tenancy)
      };
    }
    function CfnLaunchTemplatePlacementPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("affinity", "Affinity", properties.Affinity != null ? cfn_parse.FromCloudFormation.getString(properties.Affinity) : void 0);
      ret.addPropertyResult("availabilityZone", "AvailabilityZone", properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : void 0);
      ret.addPropertyResult("groupName", "GroupName", properties.GroupName != null ? cfn_parse.FromCloudFormation.getString(properties.GroupName) : void 0);
      ret.addPropertyResult("hostId", "HostId", properties.HostId != null ? cfn_parse.FromCloudFormation.getString(properties.HostId) : void 0);
      ret.addPropertyResult("hostResourceGroupArn", "HostResourceGroupArn", properties.HostResourceGroupArn != null ? cfn_parse.FromCloudFormation.getString(properties.HostResourceGroupArn) : void 0);
      ret.addPropertyResult("partitionNumber", "PartitionNumber", properties.PartitionNumber != null ? cfn_parse.FromCloudFormation.getNumber(properties.PartitionNumber) : void 0);
      ret.addPropertyResult("spreadDomain", "SpreadDomain", properties.SpreadDomain != null ? cfn_parse.FromCloudFormation.getString(properties.SpreadDomain) : void 0);
      ret.addPropertyResult("tenancy", "Tenancy", properties.Tenancy != null ? cfn_parse.FromCloudFormation.getString(properties.Tenancy) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnLaunchTemplate_PrivateIpAddPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("primary", cdk.validateBoolean)(properties.primary));
      errors.collect(cdk.propertyValidator("privateIpAddress", cdk.validateString)(properties.privateIpAddress));
      return errors.wrap('supplied properties not correct for "PrivateIpAddProperty"');
    }
    function cfnLaunchTemplatePrivateIpAddPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLaunchTemplate_PrivateIpAddPropertyValidator(properties).assertSuccess();
      return {
        Primary: cdk.booleanToCloudFormation(properties.primary),
        PrivateIpAddress: cdk.stringToCloudFormation(properties.privateIpAddress)
      };
    }
    function CfnLaunchTemplatePrivateIpAddPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("primary", "Primary", properties.Primary != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Primary) : void 0);
      ret.addPropertyResult("privateIpAddress", "PrivateIpAddress", properties.PrivateIpAddress != null ? cfn_parse.FromCloudFormation.getString(properties.PrivateIpAddress) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnLaunchTemplate_SpotOptionsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("blockDurationMinutes", cdk.validateNumber)(properties.blockDurationMinutes));
      errors.collect(cdk.propertyValidator("instanceInterruptionBehavior", cdk.validateString)(properties.instanceInterruptionBehavior));
      errors.collect(cdk.propertyValidator("maxPrice", cdk.validateString)(properties.maxPrice));
      errors.collect(cdk.propertyValidator("spotInstanceType", cdk.validateString)(properties.spotInstanceType));
      errors.collect(cdk.propertyValidator("validUntil", cdk.validateString)(properties.validUntil));
      return errors.wrap('supplied properties not correct for "SpotOptionsProperty"');
    }
    function cfnLaunchTemplateSpotOptionsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLaunchTemplate_SpotOptionsPropertyValidator(properties).assertSuccess();
      return {
        BlockDurationMinutes: cdk.numberToCloudFormation(properties.blockDurationMinutes),
        InstanceInterruptionBehavior: cdk.stringToCloudFormation(properties.instanceInterruptionBehavior),
        MaxPrice: cdk.stringToCloudFormation(properties.maxPrice),
        SpotInstanceType: cdk.stringToCloudFormation(properties.spotInstanceType),
        ValidUntil: cdk.stringToCloudFormation(properties.validUntil)
      };
    }
    function CfnLaunchTemplateSpotOptionsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("blockDurationMinutes", "BlockDurationMinutes", properties.BlockDurationMinutes != null ? cfn_parse.FromCloudFormation.getNumber(properties.BlockDurationMinutes) : void 0);
      ret.addPropertyResult("instanceInterruptionBehavior", "InstanceInterruptionBehavior", properties.InstanceInterruptionBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceInterruptionBehavior) : void 0);
      ret.addPropertyResult("maxPrice", "MaxPrice", properties.MaxPrice != null ? cfn_parse.FromCloudFormation.getString(properties.MaxPrice) : void 0);
      ret.addPropertyResult("spotInstanceType", "SpotInstanceType", properties.SpotInstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.SpotInstanceType) : void 0);
      ret.addPropertyResult("validUntil", "ValidUntil", properties.ValidUntil != null ? cfn_parse.FromCloudFormation.getString(properties.ValidUntil) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnLaunchTemplate_TagSpecificationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("resourceType", cdk.validateString)(properties.resourceType));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "TagSpecificationProperty"');
    }
    function cfnLaunchTemplateTagSpecificationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLaunchTemplate_TagSpecificationPropertyValidator(properties).assertSuccess();
      return {
        ResourceType: cdk.stringToCloudFormation(properties.resourceType),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnLaunchTemplateTagSpecificationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("resourceType", "ResourceType", properties.ResourceType != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceType) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnLocalGatewayRoutePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("destinationCidrBlock", cdk.requiredValidator)(properties.destinationCidrBlock));
      errors.collect(cdk.propertyValidator("destinationCidrBlock", cdk.validateString)(properties.destinationCidrBlock));
      errors.collect(cdk.propertyValidator("localGatewayRouteTableId", cdk.requiredValidator)(properties.localGatewayRouteTableId));
      errors.collect(cdk.propertyValidator("localGatewayRouteTableId", cdk.validateString)(properties.localGatewayRouteTableId));
      errors.collect(cdk.propertyValidator("localGatewayVirtualInterfaceGroupId", cdk.requiredValidator)(properties.localGatewayVirtualInterfaceGroupId));
      errors.collect(cdk.propertyValidator("localGatewayVirtualInterfaceGroupId", cdk.validateString)(properties.localGatewayVirtualInterfaceGroupId));
      return errors.wrap('supplied properties not correct for "CfnLocalGatewayRouteProps"');
    }
    function cfnLocalGatewayRoutePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLocalGatewayRoutePropsValidator(properties).assertSuccess();
      return {
        DestinationCidrBlock: cdk.stringToCloudFormation(properties.destinationCidrBlock),
        LocalGatewayRouteTableId: cdk.stringToCloudFormation(properties.localGatewayRouteTableId),
        LocalGatewayVirtualInterfaceGroupId: cdk.stringToCloudFormation(properties.localGatewayVirtualInterfaceGroupId)
      };
    }
    function CfnLocalGatewayRoutePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("destinationCidrBlock", "DestinationCidrBlock", cfn_parse.FromCloudFormation.getString(properties.DestinationCidrBlock));
      ret.addPropertyResult("localGatewayRouteTableId", "LocalGatewayRouteTableId", cfn_parse.FromCloudFormation.getString(properties.LocalGatewayRouteTableId));
      ret.addPropertyResult("localGatewayVirtualInterfaceGroupId", "LocalGatewayVirtualInterfaceGroupId", cfn_parse.FromCloudFormation.getString(properties.LocalGatewayVirtualInterfaceGroupId));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnLocalGatewayRoute = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnLocalGatewayRoute.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "destinationCidrBlock", this);
        cdk.requireProperty(props, "localGatewayRouteTableId", this);
        cdk.requireProperty(props, "localGatewayVirtualInterfaceGroupId", this);
        this.attrState = cdk.Token.asString(this.getAtt("State"));
        this.attrType = cdk.Token.asString(this.getAtt("Type"));
        this.destinationCidrBlock = props.destinationCidrBlock;
        this.localGatewayRouteTableId = props.localGatewayRouteTableId;
        this.localGatewayVirtualInterfaceGroupId = props.localGatewayVirtualInterfaceGroupId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnLocalGatewayRoutePropsFromCloudFormation(resourceProperties);
        const ret = new CfnLocalGatewayRoute(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnLocalGatewayRoute.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          destinationCidrBlock: this.destinationCidrBlock,
          localGatewayRouteTableId: this.localGatewayRouteTableId,
          localGatewayVirtualInterfaceGroupId: this.localGatewayVirtualInterfaceGroupId
        };
      }
      renderProperties(props) {
        return cfnLocalGatewayRoutePropsToCloudFormation(props);
      }
    };
    exports2.CfnLocalGatewayRoute = CfnLocalGatewayRoute;
    _w = JSII_RTTI_SYMBOL_1;
    CfnLocalGatewayRoute[_w] = { fqn: "@aws-cdk/aws-ec2.CfnLocalGatewayRoute", version: "1.132.0" };
    CfnLocalGatewayRoute.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::LocalGatewayRoute";
    function CfnLocalGatewayRouteTableVPCAssociationPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("localGatewayRouteTableId", cdk.requiredValidator)(properties.localGatewayRouteTableId));
      errors.collect(cdk.propertyValidator("localGatewayRouteTableId", cdk.validateString)(properties.localGatewayRouteTableId));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("vpcId", cdk.requiredValidator)(properties.vpcId));
      errors.collect(cdk.propertyValidator("vpcId", cdk.validateString)(properties.vpcId));
      return errors.wrap('supplied properties not correct for "CfnLocalGatewayRouteTableVPCAssociationProps"');
    }
    function cfnLocalGatewayRouteTableVPCAssociationPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLocalGatewayRouteTableVPCAssociationPropsValidator(properties).assertSuccess();
      return {
        LocalGatewayRouteTableId: cdk.stringToCloudFormation(properties.localGatewayRouteTableId),
        VpcId: cdk.stringToCloudFormation(properties.vpcId),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnLocalGatewayRouteTableVPCAssociationPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("localGatewayRouteTableId", "LocalGatewayRouteTableId", cfn_parse.FromCloudFormation.getString(properties.LocalGatewayRouteTableId));
      ret.addPropertyResult("vpcId", "VpcId", cfn_parse.FromCloudFormation.getString(properties.VpcId));
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnLocalGatewayRouteTableVPCAssociation = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnLocalGatewayRouteTableVPCAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "localGatewayRouteTableId", this);
        cdk.requireProperty(props, "vpcId", this);
        this.attrLocalGatewayId = cdk.Token.asString(this.getAtt("LocalGatewayId"));
        this.attrLocalGatewayRouteTableVpcAssociationId = cdk.Token.asString(this.getAtt("LocalGatewayRouteTableVpcAssociationId"));
        this.attrState = cdk.Token.asString(this.getAtt("State"));
        this.localGatewayRouteTableId = props.localGatewayRouteTableId;
        this.vpcId = props.vpcId;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::LocalGatewayRouteTableVPCAssociation", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnLocalGatewayRouteTableVPCAssociationPropsFromCloudFormation(resourceProperties);
        const ret = new CfnLocalGatewayRouteTableVPCAssociation(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnLocalGatewayRouteTableVPCAssociation.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          localGatewayRouteTableId: this.localGatewayRouteTableId,
          vpcId: this.vpcId,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnLocalGatewayRouteTableVPCAssociationPropsToCloudFormation(props);
      }
    };
    exports2.CfnLocalGatewayRouteTableVPCAssociation = CfnLocalGatewayRouteTableVPCAssociation;
    _x = JSII_RTTI_SYMBOL_1;
    CfnLocalGatewayRouteTableVPCAssociation[_x] = { fqn: "@aws-cdk/aws-ec2.CfnLocalGatewayRouteTableVPCAssociation", version: "1.132.0" };
    CfnLocalGatewayRouteTableVPCAssociation.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::LocalGatewayRouteTableVPCAssociation";
    function CfnNatGatewayPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("allocationId", cdk.validateString)(properties.allocationId));
      errors.collect(cdk.propertyValidator("connectivityType", cdk.validateString)(properties.connectivityType));
      errors.collect(cdk.propertyValidator("subnetId", cdk.requiredValidator)(properties.subnetId));
      errors.collect(cdk.propertyValidator("subnetId", cdk.validateString)(properties.subnetId));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnNatGatewayProps"');
    }
    function cfnNatGatewayPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnNatGatewayPropsValidator(properties).assertSuccess();
      return {
        SubnetId: cdk.stringToCloudFormation(properties.subnetId),
        AllocationId: cdk.stringToCloudFormation(properties.allocationId),
        ConnectivityType: cdk.stringToCloudFormation(properties.connectivityType),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnNatGatewayPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("subnetId", "SubnetId", cfn_parse.FromCloudFormation.getString(properties.SubnetId));
      ret.addPropertyResult("allocationId", "AllocationId", properties.AllocationId != null ? cfn_parse.FromCloudFormation.getString(properties.AllocationId) : void 0);
      ret.addPropertyResult("connectivityType", "ConnectivityType", properties.ConnectivityType != null ? cfn_parse.FromCloudFormation.getString(properties.ConnectivityType) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnNatGateway = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnNatGateway.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "subnetId", this);
        this.subnetId = props.subnetId;
        this.allocationId = props.allocationId;
        this.connectivityType = props.connectivityType;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::NatGateway", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnNatGatewayPropsFromCloudFormation(resourceProperties);
        const ret = new CfnNatGateway(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnNatGateway.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          subnetId: this.subnetId,
          allocationId: this.allocationId,
          connectivityType: this.connectivityType,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnNatGatewayPropsToCloudFormation(props);
      }
    };
    exports2.CfnNatGateway = CfnNatGateway;
    _y = JSII_RTTI_SYMBOL_1;
    CfnNatGateway[_y] = { fqn: "@aws-cdk/aws-ec2.CfnNatGateway", version: "1.132.0" };
    CfnNatGateway.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::NatGateway";
    function CfnNetworkAclPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("vpcId", cdk.requiredValidator)(properties.vpcId));
      errors.collect(cdk.propertyValidator("vpcId", cdk.validateString)(properties.vpcId));
      return errors.wrap('supplied properties not correct for "CfnNetworkAclProps"');
    }
    function cfnNetworkAclPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnNetworkAclPropsValidator(properties).assertSuccess();
      return {
        VpcId: cdk.stringToCloudFormation(properties.vpcId),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnNetworkAclPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("vpcId", "VpcId", cfn_parse.FromCloudFormation.getString(properties.VpcId));
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnNetworkAcl = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnNetworkAcl.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "vpcId", this);
        this.attrId = cdk.Token.asString(this.getAtt("Id"));
        this.vpcId = props.vpcId;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::NetworkAcl", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnNetworkAclPropsFromCloudFormation(resourceProperties);
        const ret = new CfnNetworkAcl(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnNetworkAcl.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          vpcId: this.vpcId,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnNetworkAclPropsToCloudFormation(props);
      }
    };
    exports2.CfnNetworkAcl = CfnNetworkAcl;
    _z = JSII_RTTI_SYMBOL_1;
    CfnNetworkAcl[_z] = { fqn: "@aws-cdk/aws-ec2.CfnNetworkAcl", version: "1.132.0" };
    CfnNetworkAcl.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::NetworkAcl";
    function CfnNetworkAclEntryPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("cidrBlock", cdk.validateString)(properties.cidrBlock));
      errors.collect(cdk.propertyValidator("egress", cdk.validateBoolean)(properties.egress));
      errors.collect(cdk.propertyValidator("icmp", CfnNetworkAclEntry_IcmpPropertyValidator)(properties.icmp));
      errors.collect(cdk.propertyValidator("ipv6CidrBlock", cdk.validateString)(properties.ipv6CidrBlock));
      errors.collect(cdk.propertyValidator("networkAclId", cdk.requiredValidator)(properties.networkAclId));
      errors.collect(cdk.propertyValidator("networkAclId", cdk.validateString)(properties.networkAclId));
      errors.collect(cdk.propertyValidator("portRange", CfnNetworkAclEntry_PortRangePropertyValidator)(properties.portRange));
      errors.collect(cdk.propertyValidator("protocol", cdk.requiredValidator)(properties.protocol));
      errors.collect(cdk.propertyValidator("protocol", cdk.validateNumber)(properties.protocol));
      errors.collect(cdk.propertyValidator("ruleAction", cdk.requiredValidator)(properties.ruleAction));
      errors.collect(cdk.propertyValidator("ruleAction", cdk.validateString)(properties.ruleAction));
      errors.collect(cdk.propertyValidator("ruleNumber", cdk.requiredValidator)(properties.ruleNumber));
      errors.collect(cdk.propertyValidator("ruleNumber", cdk.validateNumber)(properties.ruleNumber));
      return errors.wrap('supplied properties not correct for "CfnNetworkAclEntryProps"');
    }
    function cfnNetworkAclEntryPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnNetworkAclEntryPropsValidator(properties).assertSuccess();
      return {
        NetworkAclId: cdk.stringToCloudFormation(properties.networkAclId),
        Protocol: cdk.numberToCloudFormation(properties.protocol),
        RuleAction: cdk.stringToCloudFormation(properties.ruleAction),
        RuleNumber: cdk.numberToCloudFormation(properties.ruleNumber),
        CidrBlock: cdk.stringToCloudFormation(properties.cidrBlock),
        Egress: cdk.booleanToCloudFormation(properties.egress),
        Icmp: cfnNetworkAclEntryIcmpPropertyToCloudFormation(properties.icmp),
        Ipv6CidrBlock: cdk.stringToCloudFormation(properties.ipv6CidrBlock),
        PortRange: cfnNetworkAclEntryPortRangePropertyToCloudFormation(properties.portRange)
      };
    }
    function CfnNetworkAclEntryPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("networkAclId", "NetworkAclId", cfn_parse.FromCloudFormation.getString(properties.NetworkAclId));
      ret.addPropertyResult("protocol", "Protocol", cfn_parse.FromCloudFormation.getNumber(properties.Protocol));
      ret.addPropertyResult("ruleAction", "RuleAction", cfn_parse.FromCloudFormation.getString(properties.RuleAction));
      ret.addPropertyResult("ruleNumber", "RuleNumber", cfn_parse.FromCloudFormation.getNumber(properties.RuleNumber));
      ret.addPropertyResult("cidrBlock", "CidrBlock", properties.CidrBlock != null ? cfn_parse.FromCloudFormation.getString(properties.CidrBlock) : void 0);
      ret.addPropertyResult("egress", "Egress", properties.Egress != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Egress) : void 0);
      ret.addPropertyResult("icmp", "Icmp", properties.Icmp != null ? CfnNetworkAclEntryIcmpPropertyFromCloudFormation(properties.Icmp) : void 0);
      ret.addPropertyResult("ipv6CidrBlock", "Ipv6CidrBlock", properties.Ipv6CidrBlock != null ? cfn_parse.FromCloudFormation.getString(properties.Ipv6CidrBlock) : void 0);
      ret.addPropertyResult("portRange", "PortRange", properties.PortRange != null ? CfnNetworkAclEntryPortRangePropertyFromCloudFormation(properties.PortRange) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnNetworkAclEntry = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnNetworkAclEntry.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "networkAclId", this);
        cdk.requireProperty(props, "protocol", this);
        cdk.requireProperty(props, "ruleAction", this);
        cdk.requireProperty(props, "ruleNumber", this);
        this.attrId = cdk.Token.asString(this.getAtt("Id"));
        this.networkAclId = props.networkAclId;
        this.protocol = props.protocol;
        this.ruleAction = props.ruleAction;
        this.ruleNumber = props.ruleNumber;
        this.cidrBlock = props.cidrBlock;
        this.egress = props.egress;
        this.icmp = props.icmp;
        this.ipv6CidrBlock = props.ipv6CidrBlock;
        this.portRange = props.portRange;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnNetworkAclEntryPropsFromCloudFormation(resourceProperties);
        const ret = new CfnNetworkAclEntry(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnNetworkAclEntry.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          networkAclId: this.networkAclId,
          protocol: this.protocol,
          ruleAction: this.ruleAction,
          ruleNumber: this.ruleNumber,
          cidrBlock: this.cidrBlock,
          egress: this.egress,
          icmp: this.icmp,
          ipv6CidrBlock: this.ipv6CidrBlock,
          portRange: this.portRange
        };
      }
      renderProperties(props) {
        return cfnNetworkAclEntryPropsToCloudFormation(props);
      }
    };
    exports2.CfnNetworkAclEntry = CfnNetworkAclEntry;
    _0 = JSII_RTTI_SYMBOL_1;
    CfnNetworkAclEntry[_0] = { fqn: "@aws-cdk/aws-ec2.CfnNetworkAclEntry", version: "1.132.0" };
    CfnNetworkAclEntry.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::NetworkAclEntry";
    function CfnNetworkAclEntry_IcmpPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("code", cdk.validateNumber)(properties.code));
      errors.collect(cdk.propertyValidator("type", cdk.validateNumber)(properties.type));
      return errors.wrap('supplied properties not correct for "IcmpProperty"');
    }
    function cfnNetworkAclEntryIcmpPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnNetworkAclEntry_IcmpPropertyValidator(properties).assertSuccess();
      return {
        Code: cdk.numberToCloudFormation(properties.code),
        Type: cdk.numberToCloudFormation(properties.type)
      };
    }
    function CfnNetworkAclEntryIcmpPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("code", "Code", properties.Code != null ? cfn_parse.FromCloudFormation.getNumber(properties.Code) : void 0);
      ret.addPropertyResult("type", "Type", properties.Type != null ? cfn_parse.FromCloudFormation.getNumber(properties.Type) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnNetworkAclEntry_PortRangePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("from", cdk.validateNumber)(properties.from));
      errors.collect(cdk.propertyValidator("to", cdk.validateNumber)(properties.to));
      return errors.wrap('supplied properties not correct for "PortRangeProperty"');
    }
    function cfnNetworkAclEntryPortRangePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnNetworkAclEntry_PortRangePropertyValidator(properties).assertSuccess();
      return {
        From: cdk.numberToCloudFormation(properties.from),
        To: cdk.numberToCloudFormation(properties.to)
      };
    }
    function CfnNetworkAclEntryPortRangePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("from", "From", properties.From != null ? cfn_parse.FromCloudFormation.getNumber(properties.From) : void 0);
      ret.addPropertyResult("to", "To", properties.To != null ? cfn_parse.FromCloudFormation.getNumber(properties.To) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnNetworkInsightsAnalysisPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("filterInArns", cdk.listValidator(cdk.validateString))(properties.filterInArns));
      errors.collect(cdk.propertyValidator("networkInsightsPathId", cdk.requiredValidator)(properties.networkInsightsPathId));
      errors.collect(cdk.propertyValidator("networkInsightsPathId", cdk.validateString)(properties.networkInsightsPathId));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnNetworkInsightsAnalysisProps"');
    }
    function cfnNetworkInsightsAnalysisPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnNetworkInsightsAnalysisPropsValidator(properties).assertSuccess();
      return {
        NetworkInsightsPathId: cdk.stringToCloudFormation(properties.networkInsightsPathId),
        FilterInArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.filterInArns),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnNetworkInsightsAnalysisPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("networkInsightsPathId", "NetworkInsightsPathId", cfn_parse.FromCloudFormation.getString(properties.NetworkInsightsPathId));
      ret.addPropertyResult("filterInArns", "FilterInArns", properties.FilterInArns != null ? cfn_parse.FromCloudFormation.getStringArray(properties.FilterInArns) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnNetworkInsightsAnalysis = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnNetworkInsightsAnalysis.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "networkInsightsPathId", this);
        this.attrAlternatePathHints = this.getAtt("AlternatePathHints");
        this.attrExplanations = this.getAtt("Explanations");
        this.attrForwardPathComponents = this.getAtt("ForwardPathComponents");
        this.attrNetworkInsightsAnalysisArn = cdk.Token.asString(this.getAtt("NetworkInsightsAnalysisArn"));
        this.attrNetworkInsightsAnalysisId = cdk.Token.asString(this.getAtt("NetworkInsightsAnalysisId"));
        this.attrNetworkPathFound = this.getAtt("NetworkPathFound");
        this.attrReturnPathComponents = this.getAtt("ReturnPathComponents");
        this.attrStartDate = cdk.Token.asString(this.getAtt("StartDate"));
        this.attrStatus = cdk.Token.asString(this.getAtt("Status"));
        this.attrStatusMessage = cdk.Token.asString(this.getAtt("StatusMessage"));
        this.networkInsightsPathId = props.networkInsightsPathId;
        this.filterInArns = props.filterInArns;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::NetworkInsightsAnalysis", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnNetworkInsightsAnalysisPropsFromCloudFormation(resourceProperties);
        const ret = new CfnNetworkInsightsAnalysis(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnNetworkInsightsAnalysis.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          networkInsightsPathId: this.networkInsightsPathId,
          filterInArns: this.filterInArns,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnNetworkInsightsAnalysisPropsToCloudFormation(props);
      }
    };
    exports2.CfnNetworkInsightsAnalysis = CfnNetworkInsightsAnalysis;
    _1 = JSII_RTTI_SYMBOL_1;
    CfnNetworkInsightsAnalysis[_1] = { fqn: "@aws-cdk/aws-ec2.CfnNetworkInsightsAnalysis", version: "1.132.0" };
    CfnNetworkInsightsAnalysis.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::NetworkInsightsAnalysis";
    function CfnNetworkInsightsPathPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("destination", cdk.requiredValidator)(properties.destination));
      errors.collect(cdk.propertyValidator("destination", cdk.validateString)(properties.destination));
      errors.collect(cdk.propertyValidator("destinationIp", cdk.validateString)(properties.destinationIp));
      errors.collect(cdk.propertyValidator("destinationPort", cdk.validateNumber)(properties.destinationPort));
      errors.collect(cdk.propertyValidator("protocol", cdk.requiredValidator)(properties.protocol));
      errors.collect(cdk.propertyValidator("protocol", cdk.validateString)(properties.protocol));
      errors.collect(cdk.propertyValidator("source", cdk.requiredValidator)(properties.source));
      errors.collect(cdk.propertyValidator("source", cdk.validateString)(properties.source));
      errors.collect(cdk.propertyValidator("sourceIp", cdk.validateString)(properties.sourceIp));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnNetworkInsightsPathProps"');
    }
    function cfnNetworkInsightsPathPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnNetworkInsightsPathPropsValidator(properties).assertSuccess();
      return {
        Destination: cdk.stringToCloudFormation(properties.destination),
        Protocol: cdk.stringToCloudFormation(properties.protocol),
        Source: cdk.stringToCloudFormation(properties.source),
        DestinationIp: cdk.stringToCloudFormation(properties.destinationIp),
        DestinationPort: cdk.numberToCloudFormation(properties.destinationPort),
        SourceIp: cdk.stringToCloudFormation(properties.sourceIp),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnNetworkInsightsPathPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("destination", "Destination", cfn_parse.FromCloudFormation.getString(properties.Destination));
      ret.addPropertyResult("protocol", "Protocol", cfn_parse.FromCloudFormation.getString(properties.Protocol));
      ret.addPropertyResult("source", "Source", cfn_parse.FromCloudFormation.getString(properties.Source));
      ret.addPropertyResult("destinationIp", "DestinationIp", properties.DestinationIp != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationIp) : void 0);
      ret.addPropertyResult("destinationPort", "DestinationPort", properties.DestinationPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.DestinationPort) : void 0);
      ret.addPropertyResult("sourceIp", "SourceIp", properties.SourceIp != null ? cfn_parse.FromCloudFormation.getString(properties.SourceIp) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnNetworkInsightsPath = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnNetworkInsightsPath.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "destination", this);
        cdk.requireProperty(props, "protocol", this);
        cdk.requireProperty(props, "source", this);
        this.attrCreatedDate = cdk.Token.asString(this.getAtt("CreatedDate"));
        this.attrNetworkInsightsPathArn = cdk.Token.asString(this.getAtt("NetworkInsightsPathArn"));
        this.attrNetworkInsightsPathId = cdk.Token.asString(this.getAtt("NetworkInsightsPathId"));
        this.destination = props.destination;
        this.protocol = props.protocol;
        this.source = props.source;
        this.destinationIp = props.destinationIp;
        this.destinationPort = props.destinationPort;
        this.sourceIp = props.sourceIp;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::NetworkInsightsPath", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnNetworkInsightsPathPropsFromCloudFormation(resourceProperties);
        const ret = new CfnNetworkInsightsPath(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnNetworkInsightsPath.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          destination: this.destination,
          protocol: this.protocol,
          source: this.source,
          destinationIp: this.destinationIp,
          destinationPort: this.destinationPort,
          sourceIp: this.sourceIp,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnNetworkInsightsPathPropsToCloudFormation(props);
      }
    };
    exports2.CfnNetworkInsightsPath = CfnNetworkInsightsPath;
    _2 = JSII_RTTI_SYMBOL_1;
    CfnNetworkInsightsPath[_2] = { fqn: "@aws-cdk/aws-ec2.CfnNetworkInsightsPath", version: "1.132.0" };
    CfnNetworkInsightsPath.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::NetworkInsightsPath";
    function CfnNetworkInterfacePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("groupSet", cdk.listValidator(cdk.validateString))(properties.groupSet));
      errors.collect(cdk.propertyValidator("interfaceType", cdk.validateString)(properties.interfaceType));
      errors.collect(cdk.propertyValidator("ipv6AddressCount", cdk.validateNumber)(properties.ipv6AddressCount));
      errors.collect(cdk.propertyValidator("ipv6Addresses", cdk.listValidator(CfnNetworkInterface_InstanceIpv6AddressPropertyValidator))(properties.ipv6Addresses));
      errors.collect(cdk.propertyValidator("privateIpAddress", cdk.validateString)(properties.privateIpAddress));
      errors.collect(cdk.propertyValidator("privateIpAddresses", cdk.listValidator(CfnNetworkInterface_PrivateIpAddressSpecificationPropertyValidator))(properties.privateIpAddresses));
      errors.collect(cdk.propertyValidator("secondaryPrivateIpAddressCount", cdk.validateNumber)(properties.secondaryPrivateIpAddressCount));
      errors.collect(cdk.propertyValidator("sourceDestCheck", cdk.validateBoolean)(properties.sourceDestCheck));
      errors.collect(cdk.propertyValidator("subnetId", cdk.requiredValidator)(properties.subnetId));
      errors.collect(cdk.propertyValidator("subnetId", cdk.validateString)(properties.subnetId));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnNetworkInterfaceProps"');
    }
    function cfnNetworkInterfacePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnNetworkInterfacePropsValidator(properties).assertSuccess();
      return {
        SubnetId: cdk.stringToCloudFormation(properties.subnetId),
        Description: cdk.stringToCloudFormation(properties.description),
        GroupSet: cdk.listMapper(cdk.stringToCloudFormation)(properties.groupSet),
        InterfaceType: cdk.stringToCloudFormation(properties.interfaceType),
        Ipv6AddressCount: cdk.numberToCloudFormation(properties.ipv6AddressCount),
        Ipv6Addresses: cdk.listMapper(cfnNetworkInterfaceInstanceIpv6AddressPropertyToCloudFormation)(properties.ipv6Addresses),
        PrivateIpAddress: cdk.stringToCloudFormation(properties.privateIpAddress),
        PrivateIpAddresses: cdk.listMapper(cfnNetworkInterfacePrivateIpAddressSpecificationPropertyToCloudFormation)(properties.privateIpAddresses),
        SecondaryPrivateIpAddressCount: cdk.numberToCloudFormation(properties.secondaryPrivateIpAddressCount),
        SourceDestCheck: cdk.booleanToCloudFormation(properties.sourceDestCheck),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnNetworkInterfacePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("subnetId", "SubnetId", cfn_parse.FromCloudFormation.getString(properties.SubnetId));
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("groupSet", "GroupSet", properties.GroupSet != null ? cfn_parse.FromCloudFormation.getStringArray(properties.GroupSet) : void 0);
      ret.addPropertyResult("interfaceType", "InterfaceType", properties.InterfaceType != null ? cfn_parse.FromCloudFormation.getString(properties.InterfaceType) : void 0);
      ret.addPropertyResult("ipv6AddressCount", "Ipv6AddressCount", properties.Ipv6AddressCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.Ipv6AddressCount) : void 0);
      ret.addPropertyResult("ipv6Addresses", "Ipv6Addresses", properties.Ipv6Addresses != null ? cfn_parse.FromCloudFormation.getArray(CfnNetworkInterfaceInstanceIpv6AddressPropertyFromCloudFormation)(properties.Ipv6Addresses) : void 0);
      ret.addPropertyResult("privateIpAddress", "PrivateIpAddress", properties.PrivateIpAddress != null ? cfn_parse.FromCloudFormation.getString(properties.PrivateIpAddress) : void 0);
      ret.addPropertyResult("privateIpAddresses", "PrivateIpAddresses", properties.PrivateIpAddresses != null ? cfn_parse.FromCloudFormation.getArray(CfnNetworkInterfacePrivateIpAddressSpecificationPropertyFromCloudFormation)(properties.PrivateIpAddresses) : void 0);
      ret.addPropertyResult("secondaryPrivateIpAddressCount", "SecondaryPrivateIpAddressCount", properties.SecondaryPrivateIpAddressCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.SecondaryPrivateIpAddressCount) : void 0);
      ret.addPropertyResult("sourceDestCheck", "SourceDestCheck", properties.SourceDestCheck != null ? cfn_parse.FromCloudFormation.getBoolean(properties.SourceDestCheck) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnNetworkInterface = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnNetworkInterface.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "subnetId", this);
        this.attrId = cdk.Token.asString(this.getAtt("Id"));
        this.attrPrimaryPrivateIpAddress = cdk.Token.asString(this.getAtt("PrimaryPrivateIpAddress"));
        this.attrSecondaryPrivateIpAddresses = cdk.Token.asList(this.getAtt("SecondaryPrivateIpAddresses"));
        this.subnetId = props.subnetId;
        this.description = props.description;
        this.groupSet = props.groupSet;
        this.interfaceType = props.interfaceType;
        this.ipv6AddressCount = props.ipv6AddressCount;
        this.ipv6Addresses = props.ipv6Addresses;
        this.privateIpAddress = props.privateIpAddress;
        this.privateIpAddresses = props.privateIpAddresses;
        this.secondaryPrivateIpAddressCount = props.secondaryPrivateIpAddressCount;
        this.sourceDestCheck = props.sourceDestCheck;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::NetworkInterface", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnNetworkInterfacePropsFromCloudFormation(resourceProperties);
        const ret = new CfnNetworkInterface(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnNetworkInterface.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          subnetId: this.subnetId,
          description: this.description,
          groupSet: this.groupSet,
          interfaceType: this.interfaceType,
          ipv6AddressCount: this.ipv6AddressCount,
          ipv6Addresses: this.ipv6Addresses,
          privateIpAddress: this.privateIpAddress,
          privateIpAddresses: this.privateIpAddresses,
          secondaryPrivateIpAddressCount: this.secondaryPrivateIpAddressCount,
          sourceDestCheck: this.sourceDestCheck,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnNetworkInterfacePropsToCloudFormation(props);
      }
    };
    exports2.CfnNetworkInterface = CfnNetworkInterface;
    _3 = JSII_RTTI_SYMBOL_1;
    CfnNetworkInterface[_3] = { fqn: "@aws-cdk/aws-ec2.CfnNetworkInterface", version: "1.132.0" };
    CfnNetworkInterface.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::NetworkInterface";
    function CfnNetworkInterface_InstanceIpv6AddressPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("ipv6Address", cdk.requiredValidator)(properties.ipv6Address));
      errors.collect(cdk.propertyValidator("ipv6Address", cdk.validateString)(properties.ipv6Address));
      return errors.wrap('supplied properties not correct for "InstanceIpv6AddressProperty"');
    }
    function cfnNetworkInterfaceInstanceIpv6AddressPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnNetworkInterface_InstanceIpv6AddressPropertyValidator(properties).assertSuccess();
      return {
        Ipv6Address: cdk.stringToCloudFormation(properties.ipv6Address)
      };
    }
    function CfnNetworkInterfaceInstanceIpv6AddressPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("ipv6Address", "Ipv6Address", cfn_parse.FromCloudFormation.getString(properties.Ipv6Address));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnNetworkInterface_PrivateIpAddressSpecificationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("primary", cdk.requiredValidator)(properties.primary));
      errors.collect(cdk.propertyValidator("primary", cdk.validateBoolean)(properties.primary));
      errors.collect(cdk.propertyValidator("privateIpAddress", cdk.requiredValidator)(properties.privateIpAddress));
      errors.collect(cdk.propertyValidator("privateIpAddress", cdk.validateString)(properties.privateIpAddress));
      return errors.wrap('supplied properties not correct for "PrivateIpAddressSpecificationProperty"');
    }
    function cfnNetworkInterfacePrivateIpAddressSpecificationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnNetworkInterface_PrivateIpAddressSpecificationPropertyValidator(properties).assertSuccess();
      return {
        Primary: cdk.booleanToCloudFormation(properties.primary),
        PrivateIpAddress: cdk.stringToCloudFormation(properties.privateIpAddress)
      };
    }
    function CfnNetworkInterfacePrivateIpAddressSpecificationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("primary", "Primary", cfn_parse.FromCloudFormation.getBoolean(properties.Primary));
      ret.addPropertyResult("privateIpAddress", "PrivateIpAddress", cfn_parse.FromCloudFormation.getString(properties.PrivateIpAddress));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnNetworkInterfaceAttachmentPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("deleteOnTermination", cdk.validateBoolean)(properties.deleteOnTermination));
      errors.collect(cdk.propertyValidator("deviceIndex", cdk.requiredValidator)(properties.deviceIndex));
      errors.collect(cdk.propertyValidator("deviceIndex", cdk.validateString)(properties.deviceIndex));
      errors.collect(cdk.propertyValidator("instanceId", cdk.requiredValidator)(properties.instanceId));
      errors.collect(cdk.propertyValidator("instanceId", cdk.validateString)(properties.instanceId));
      errors.collect(cdk.propertyValidator("networkInterfaceId", cdk.requiredValidator)(properties.networkInterfaceId));
      errors.collect(cdk.propertyValidator("networkInterfaceId", cdk.validateString)(properties.networkInterfaceId));
      return errors.wrap('supplied properties not correct for "CfnNetworkInterfaceAttachmentProps"');
    }
    function cfnNetworkInterfaceAttachmentPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnNetworkInterfaceAttachmentPropsValidator(properties).assertSuccess();
      return {
        DeviceIndex: cdk.stringToCloudFormation(properties.deviceIndex),
        InstanceId: cdk.stringToCloudFormation(properties.instanceId),
        NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),
        DeleteOnTermination: cdk.booleanToCloudFormation(properties.deleteOnTermination)
      };
    }
    function CfnNetworkInterfaceAttachmentPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("deviceIndex", "DeviceIndex", cfn_parse.FromCloudFormation.getString(properties.DeviceIndex));
      ret.addPropertyResult("instanceId", "InstanceId", cfn_parse.FromCloudFormation.getString(properties.InstanceId));
      ret.addPropertyResult("networkInterfaceId", "NetworkInterfaceId", cfn_parse.FromCloudFormation.getString(properties.NetworkInterfaceId));
      ret.addPropertyResult("deleteOnTermination", "DeleteOnTermination", properties.DeleteOnTermination != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DeleteOnTermination) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnNetworkInterfaceAttachment = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnNetworkInterfaceAttachment.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "deviceIndex", this);
        cdk.requireProperty(props, "instanceId", this);
        cdk.requireProperty(props, "networkInterfaceId", this);
        this.deviceIndex = props.deviceIndex;
        this.instanceId = props.instanceId;
        this.networkInterfaceId = props.networkInterfaceId;
        this.deleteOnTermination = props.deleteOnTermination;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnNetworkInterfaceAttachmentPropsFromCloudFormation(resourceProperties);
        const ret = new CfnNetworkInterfaceAttachment(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnNetworkInterfaceAttachment.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          deviceIndex: this.deviceIndex,
          instanceId: this.instanceId,
          networkInterfaceId: this.networkInterfaceId,
          deleteOnTermination: this.deleteOnTermination
        };
      }
      renderProperties(props) {
        return cfnNetworkInterfaceAttachmentPropsToCloudFormation(props);
      }
    };
    exports2.CfnNetworkInterfaceAttachment = CfnNetworkInterfaceAttachment;
    _4 = JSII_RTTI_SYMBOL_1;
    CfnNetworkInterfaceAttachment[_4] = { fqn: "@aws-cdk/aws-ec2.CfnNetworkInterfaceAttachment", version: "1.132.0" };
    CfnNetworkInterfaceAttachment.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::NetworkInterfaceAttachment";
    function CfnNetworkInterfacePermissionPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("awsAccountId", cdk.requiredValidator)(properties.awsAccountId));
      errors.collect(cdk.propertyValidator("awsAccountId", cdk.validateString)(properties.awsAccountId));
      errors.collect(cdk.propertyValidator("networkInterfaceId", cdk.requiredValidator)(properties.networkInterfaceId));
      errors.collect(cdk.propertyValidator("networkInterfaceId", cdk.validateString)(properties.networkInterfaceId));
      errors.collect(cdk.propertyValidator("permission", cdk.requiredValidator)(properties.permission));
      errors.collect(cdk.propertyValidator("permission", cdk.validateString)(properties.permission));
      return errors.wrap('supplied properties not correct for "CfnNetworkInterfacePermissionProps"');
    }
    function cfnNetworkInterfacePermissionPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnNetworkInterfacePermissionPropsValidator(properties).assertSuccess();
      return {
        AwsAccountId: cdk.stringToCloudFormation(properties.awsAccountId),
        NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),
        Permission: cdk.stringToCloudFormation(properties.permission)
      };
    }
    function CfnNetworkInterfacePermissionPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("awsAccountId", "AwsAccountId", cfn_parse.FromCloudFormation.getString(properties.AwsAccountId));
      ret.addPropertyResult("networkInterfaceId", "NetworkInterfaceId", cfn_parse.FromCloudFormation.getString(properties.NetworkInterfaceId));
      ret.addPropertyResult("permission", "Permission", cfn_parse.FromCloudFormation.getString(properties.Permission));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnNetworkInterfacePermission = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnNetworkInterfacePermission.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "awsAccountId", this);
        cdk.requireProperty(props, "networkInterfaceId", this);
        cdk.requireProperty(props, "permission", this);
        this.awsAccountId = props.awsAccountId;
        this.networkInterfaceId = props.networkInterfaceId;
        this.permission = props.permission;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnNetworkInterfacePermissionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnNetworkInterfacePermission(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnNetworkInterfacePermission.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          awsAccountId: this.awsAccountId,
          networkInterfaceId: this.networkInterfaceId,
          permission: this.permission
        };
      }
      renderProperties(props) {
        return cfnNetworkInterfacePermissionPropsToCloudFormation(props);
      }
    };
    exports2.CfnNetworkInterfacePermission = CfnNetworkInterfacePermission;
    _5 = JSII_RTTI_SYMBOL_1;
    CfnNetworkInterfacePermission[_5] = { fqn: "@aws-cdk/aws-ec2.CfnNetworkInterfacePermission", version: "1.132.0" };
    CfnNetworkInterfacePermission.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::NetworkInterfacePermission";
    function CfnPlacementGroupPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("strategy", cdk.validateString)(properties.strategy));
      return errors.wrap('supplied properties not correct for "CfnPlacementGroupProps"');
    }
    function cfnPlacementGroupPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnPlacementGroupPropsValidator(properties).assertSuccess();
      return {
        Strategy: cdk.stringToCloudFormation(properties.strategy)
      };
    }
    function CfnPlacementGroupPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("strategy", "Strategy", properties.Strategy != null ? cfn_parse.FromCloudFormation.getString(properties.Strategy) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnPlacementGroup = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnPlacementGroup.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.strategy = props.strategy;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnPlacementGroupPropsFromCloudFormation(resourceProperties);
        const ret = new CfnPlacementGroup(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnPlacementGroup.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          strategy: this.strategy
        };
      }
      renderProperties(props) {
        return cfnPlacementGroupPropsToCloudFormation(props);
      }
    };
    exports2.CfnPlacementGroup = CfnPlacementGroup;
    _6 = JSII_RTTI_SYMBOL_1;
    CfnPlacementGroup[_6] = { fqn: "@aws-cdk/aws-ec2.CfnPlacementGroup", version: "1.132.0" };
    CfnPlacementGroup.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::PlacementGroup";
    function CfnPrefixListPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("addressFamily", cdk.requiredValidator)(properties.addressFamily));
      errors.collect(cdk.propertyValidator("addressFamily", cdk.validateString)(properties.addressFamily));
      errors.collect(cdk.propertyValidator("entries", cdk.listValidator(CfnPrefixList_EntryPropertyValidator))(properties.entries));
      errors.collect(cdk.propertyValidator("maxEntries", cdk.requiredValidator)(properties.maxEntries));
      errors.collect(cdk.propertyValidator("maxEntries", cdk.validateNumber)(properties.maxEntries));
      errors.collect(cdk.propertyValidator("prefixListName", cdk.requiredValidator)(properties.prefixListName));
      errors.collect(cdk.propertyValidator("prefixListName", cdk.validateString)(properties.prefixListName));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnPrefixListProps"');
    }
    function cfnPrefixListPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnPrefixListPropsValidator(properties).assertSuccess();
      return {
        AddressFamily: cdk.stringToCloudFormation(properties.addressFamily),
        MaxEntries: cdk.numberToCloudFormation(properties.maxEntries),
        PrefixListName: cdk.stringToCloudFormation(properties.prefixListName),
        Entries: cdk.listMapper(cfnPrefixListEntryPropertyToCloudFormation)(properties.entries),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnPrefixListPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("addressFamily", "AddressFamily", cfn_parse.FromCloudFormation.getString(properties.AddressFamily));
      ret.addPropertyResult("maxEntries", "MaxEntries", cfn_parse.FromCloudFormation.getNumber(properties.MaxEntries));
      ret.addPropertyResult("prefixListName", "PrefixListName", cfn_parse.FromCloudFormation.getString(properties.PrefixListName));
      ret.addPropertyResult("entries", "Entries", properties.Entries != null ? cfn_parse.FromCloudFormation.getArray(CfnPrefixListEntryPropertyFromCloudFormation)(properties.Entries) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnPrefixList = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnPrefixList.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "addressFamily", this);
        cdk.requireProperty(props, "maxEntries", this);
        cdk.requireProperty(props, "prefixListName", this);
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.attrOwnerId = cdk.Token.asString(this.getAtt("OwnerId"));
        this.attrPrefixListId = cdk.Token.asString(this.getAtt("PrefixListId"));
        this.attrVersion = cdk.Token.asNumber(this.getAtt("Version"));
        this.addressFamily = props.addressFamily;
        this.maxEntries = props.maxEntries;
        this.prefixListName = props.prefixListName;
        this.entries = props.entries;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::PrefixList", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnPrefixListPropsFromCloudFormation(resourceProperties);
        const ret = new CfnPrefixList(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnPrefixList.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          addressFamily: this.addressFamily,
          maxEntries: this.maxEntries,
          prefixListName: this.prefixListName,
          entries: this.entries,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnPrefixListPropsToCloudFormation(props);
      }
    };
    exports2.CfnPrefixList = CfnPrefixList;
    _7 = JSII_RTTI_SYMBOL_1;
    CfnPrefixList[_7] = { fqn: "@aws-cdk/aws-ec2.CfnPrefixList", version: "1.132.0" };
    CfnPrefixList.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::PrefixList";
    function CfnPrefixList_EntryPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("cidr", cdk.requiredValidator)(properties.cidr));
      errors.collect(cdk.propertyValidator("cidr", cdk.validateString)(properties.cidr));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      return errors.wrap('supplied properties not correct for "EntryProperty"');
    }
    function cfnPrefixListEntryPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnPrefixList_EntryPropertyValidator(properties).assertSuccess();
      return {
        Cidr: cdk.stringToCloudFormation(properties.cidr),
        Description: cdk.stringToCloudFormation(properties.description)
      };
    }
    function CfnPrefixListEntryPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("cidr", "Cidr", cfn_parse.FromCloudFormation.getString(properties.Cidr));
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnRoutePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("carrierGatewayId", cdk.validateString)(properties.carrierGatewayId));
      errors.collect(cdk.propertyValidator("destinationCidrBlock", cdk.validateString)(properties.destinationCidrBlock));
      errors.collect(cdk.propertyValidator("destinationIpv6CidrBlock", cdk.validateString)(properties.destinationIpv6CidrBlock));
      errors.collect(cdk.propertyValidator("egressOnlyInternetGatewayId", cdk.validateString)(properties.egressOnlyInternetGatewayId));
      errors.collect(cdk.propertyValidator("gatewayId", cdk.validateString)(properties.gatewayId));
      errors.collect(cdk.propertyValidator("instanceId", cdk.validateString)(properties.instanceId));
      errors.collect(cdk.propertyValidator("localGatewayId", cdk.validateString)(properties.localGatewayId));
      errors.collect(cdk.propertyValidator("natGatewayId", cdk.validateString)(properties.natGatewayId));
      errors.collect(cdk.propertyValidator("networkInterfaceId", cdk.validateString)(properties.networkInterfaceId));
      errors.collect(cdk.propertyValidator("routeTableId", cdk.requiredValidator)(properties.routeTableId));
      errors.collect(cdk.propertyValidator("routeTableId", cdk.validateString)(properties.routeTableId));
      errors.collect(cdk.propertyValidator("transitGatewayId", cdk.validateString)(properties.transitGatewayId));
      errors.collect(cdk.propertyValidator("vpcEndpointId", cdk.validateString)(properties.vpcEndpointId));
      errors.collect(cdk.propertyValidator("vpcPeeringConnectionId", cdk.validateString)(properties.vpcPeeringConnectionId));
      return errors.wrap('supplied properties not correct for "CfnRouteProps"');
    }
    function cfnRoutePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRoutePropsValidator(properties).assertSuccess();
      return {
        RouteTableId: cdk.stringToCloudFormation(properties.routeTableId),
        CarrierGatewayId: cdk.stringToCloudFormation(properties.carrierGatewayId),
        DestinationCidrBlock: cdk.stringToCloudFormation(properties.destinationCidrBlock),
        DestinationIpv6CidrBlock: cdk.stringToCloudFormation(properties.destinationIpv6CidrBlock),
        EgressOnlyInternetGatewayId: cdk.stringToCloudFormation(properties.egressOnlyInternetGatewayId),
        GatewayId: cdk.stringToCloudFormation(properties.gatewayId),
        InstanceId: cdk.stringToCloudFormation(properties.instanceId),
        LocalGatewayId: cdk.stringToCloudFormation(properties.localGatewayId),
        NatGatewayId: cdk.stringToCloudFormation(properties.natGatewayId),
        NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),
        TransitGatewayId: cdk.stringToCloudFormation(properties.transitGatewayId),
        VpcEndpointId: cdk.stringToCloudFormation(properties.vpcEndpointId),
        VpcPeeringConnectionId: cdk.stringToCloudFormation(properties.vpcPeeringConnectionId)
      };
    }
    function CfnRoutePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("routeTableId", "RouteTableId", cfn_parse.FromCloudFormation.getString(properties.RouteTableId));
      ret.addPropertyResult("carrierGatewayId", "CarrierGatewayId", properties.CarrierGatewayId != null ? cfn_parse.FromCloudFormation.getString(properties.CarrierGatewayId) : void 0);
      ret.addPropertyResult("destinationCidrBlock", "DestinationCidrBlock", properties.DestinationCidrBlock != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationCidrBlock) : void 0);
      ret.addPropertyResult("destinationIpv6CidrBlock", "DestinationIpv6CidrBlock", properties.DestinationIpv6CidrBlock != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationIpv6CidrBlock) : void 0);
      ret.addPropertyResult("egressOnlyInternetGatewayId", "EgressOnlyInternetGatewayId", properties.EgressOnlyInternetGatewayId != null ? cfn_parse.FromCloudFormation.getString(properties.EgressOnlyInternetGatewayId) : void 0);
      ret.addPropertyResult("gatewayId", "GatewayId", properties.GatewayId != null ? cfn_parse.FromCloudFormation.getString(properties.GatewayId) : void 0);
      ret.addPropertyResult("instanceId", "InstanceId", properties.InstanceId != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceId) : void 0);
      ret.addPropertyResult("localGatewayId", "LocalGatewayId", properties.LocalGatewayId != null ? cfn_parse.FromCloudFormation.getString(properties.LocalGatewayId) : void 0);
      ret.addPropertyResult("natGatewayId", "NatGatewayId", properties.NatGatewayId != null ? cfn_parse.FromCloudFormation.getString(properties.NatGatewayId) : void 0);
      ret.addPropertyResult("networkInterfaceId", "NetworkInterfaceId", properties.NetworkInterfaceId != null ? cfn_parse.FromCloudFormation.getString(properties.NetworkInterfaceId) : void 0);
      ret.addPropertyResult("transitGatewayId", "TransitGatewayId", properties.TransitGatewayId != null ? cfn_parse.FromCloudFormation.getString(properties.TransitGatewayId) : void 0);
      ret.addPropertyResult("vpcEndpointId", "VpcEndpointId", properties.VpcEndpointId != null ? cfn_parse.FromCloudFormation.getString(properties.VpcEndpointId) : void 0);
      ret.addPropertyResult("vpcPeeringConnectionId", "VpcPeeringConnectionId", properties.VpcPeeringConnectionId != null ? cfn_parse.FromCloudFormation.getString(properties.VpcPeeringConnectionId) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnRoute = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnRoute.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "routeTableId", this);
        this.routeTableId = props.routeTableId;
        this.carrierGatewayId = props.carrierGatewayId;
        this.destinationCidrBlock = props.destinationCidrBlock;
        this.destinationIpv6CidrBlock = props.destinationIpv6CidrBlock;
        this.egressOnlyInternetGatewayId = props.egressOnlyInternetGatewayId;
        this.gatewayId = props.gatewayId;
        this.instanceId = props.instanceId;
        this.localGatewayId = props.localGatewayId;
        this.natGatewayId = props.natGatewayId;
        this.networkInterfaceId = props.networkInterfaceId;
        this.transitGatewayId = props.transitGatewayId;
        this.vpcEndpointId = props.vpcEndpointId;
        this.vpcPeeringConnectionId = props.vpcPeeringConnectionId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnRoutePropsFromCloudFormation(resourceProperties);
        const ret = new CfnRoute(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnRoute.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          routeTableId: this.routeTableId,
          carrierGatewayId: this.carrierGatewayId,
          destinationCidrBlock: this.destinationCidrBlock,
          destinationIpv6CidrBlock: this.destinationIpv6CidrBlock,
          egressOnlyInternetGatewayId: this.egressOnlyInternetGatewayId,
          gatewayId: this.gatewayId,
          instanceId: this.instanceId,
          localGatewayId: this.localGatewayId,
          natGatewayId: this.natGatewayId,
          networkInterfaceId: this.networkInterfaceId,
          transitGatewayId: this.transitGatewayId,
          vpcEndpointId: this.vpcEndpointId,
          vpcPeeringConnectionId: this.vpcPeeringConnectionId
        };
      }
      renderProperties(props) {
        return cfnRoutePropsToCloudFormation(props);
      }
    };
    exports2.CfnRoute = CfnRoute;
    _8 = JSII_RTTI_SYMBOL_1;
    CfnRoute[_8] = { fqn: "@aws-cdk/aws-ec2.CfnRoute", version: "1.132.0" };
    CfnRoute.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::Route";
    function CfnRouteTablePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("vpcId", cdk.requiredValidator)(properties.vpcId));
      errors.collect(cdk.propertyValidator("vpcId", cdk.validateString)(properties.vpcId));
      return errors.wrap('supplied properties not correct for "CfnRouteTableProps"');
    }
    function cfnRouteTablePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRouteTablePropsValidator(properties).assertSuccess();
      return {
        VpcId: cdk.stringToCloudFormation(properties.vpcId),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnRouteTablePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("vpcId", "VpcId", cfn_parse.FromCloudFormation.getString(properties.VpcId));
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnRouteTable = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnRouteTable.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "vpcId", this);
        this.attrRouteTableId = cdk.Token.asString(this.getAtt("RouteTableId"));
        this.vpcId = props.vpcId;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::RouteTable", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnRouteTablePropsFromCloudFormation(resourceProperties);
        const ret = new CfnRouteTable(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnRouteTable.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          vpcId: this.vpcId,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnRouteTablePropsToCloudFormation(props);
      }
    };
    exports2.CfnRouteTable = CfnRouteTable;
    _9 = JSII_RTTI_SYMBOL_1;
    CfnRouteTable[_9] = { fqn: "@aws-cdk/aws-ec2.CfnRouteTable", version: "1.132.0" };
    CfnRouteTable.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::RouteTable";
    function CfnSecurityGroupPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("groupDescription", cdk.requiredValidator)(properties.groupDescription));
      errors.collect(cdk.propertyValidator("groupDescription", cdk.validateString)(properties.groupDescription));
      errors.collect(cdk.propertyValidator("groupName", cdk.validateString)(properties.groupName));
      errors.collect(cdk.propertyValidator("securityGroupEgress", cdk.listValidator(CfnSecurityGroup_EgressPropertyValidator))(properties.securityGroupEgress));
      errors.collect(cdk.propertyValidator("securityGroupIngress", cdk.listValidator(CfnSecurityGroup_IngressPropertyValidator))(properties.securityGroupIngress));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("vpcId", cdk.validateString)(properties.vpcId));
      return errors.wrap('supplied properties not correct for "CfnSecurityGroupProps"');
    }
    function cfnSecurityGroupPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSecurityGroupPropsValidator(properties).assertSuccess();
      return {
        GroupDescription: cdk.stringToCloudFormation(properties.groupDescription),
        GroupName: cdk.stringToCloudFormation(properties.groupName),
        SecurityGroupEgress: cdk.listMapper(cfnSecurityGroupEgressPropertyToCloudFormation)(properties.securityGroupEgress),
        SecurityGroupIngress: cdk.listMapper(cfnSecurityGroupIngressPropertyToCloudFormation)(properties.securityGroupIngress),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
        VpcId: cdk.stringToCloudFormation(properties.vpcId)
      };
    }
    function CfnSecurityGroupPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("groupDescription", "GroupDescription", cfn_parse.FromCloudFormation.getString(properties.GroupDescription));
      ret.addPropertyResult("groupName", "GroupName", properties.GroupName != null ? cfn_parse.FromCloudFormation.getString(properties.GroupName) : void 0);
      ret.addPropertyResult("securityGroupEgress", "SecurityGroupEgress", properties.SecurityGroupEgress != null ? cfn_parse.FromCloudFormation.getArray(CfnSecurityGroupEgressPropertyFromCloudFormation)(properties.SecurityGroupEgress) : void 0);
      ret.addPropertyResult("securityGroupIngress", "SecurityGroupIngress", properties.SecurityGroupIngress != null ? cfn_parse.FromCloudFormation.getArray(CfnSecurityGroupIngressPropertyFromCloudFormation)(properties.SecurityGroupIngress) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addPropertyResult("vpcId", "VpcId", properties.VpcId != null ? cfn_parse.FromCloudFormation.getString(properties.VpcId) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnSecurityGroup = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnSecurityGroup.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "groupDescription", this);
        this.attrGroupId = cdk.Token.asString(this.getAtt("GroupId"));
        this.attrVpcId = cdk.Token.asString(this.getAtt("VpcId"));
        this.groupDescription = props.groupDescription;
        this.groupName = props.groupName;
        this.securityGroupEgress = props.securityGroupEgress;
        this.securityGroupIngress = props.securityGroupIngress;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::SecurityGroup", props.tags, { tagPropertyName: "tags" });
        this.vpcId = props.vpcId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnSecurityGroupPropsFromCloudFormation(resourceProperties);
        const ret = new CfnSecurityGroup(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnSecurityGroup.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          groupDescription: this.groupDescription,
          groupName: this.groupName,
          securityGroupEgress: this.securityGroupEgress,
          securityGroupIngress: this.securityGroupIngress,
          tags: this.tags.renderTags(),
          vpcId: this.vpcId
        };
      }
      renderProperties(props) {
        return cfnSecurityGroupPropsToCloudFormation(props);
      }
    };
    exports2.CfnSecurityGroup = CfnSecurityGroup;
    _10 = JSII_RTTI_SYMBOL_1;
    CfnSecurityGroup[_10] = { fqn: "@aws-cdk/aws-ec2.CfnSecurityGroup", version: "1.132.0" };
    CfnSecurityGroup.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::SecurityGroup";
    function CfnSecurityGroup_EgressPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("cidrIp", cdk.validateString)(properties.cidrIp));
      errors.collect(cdk.propertyValidator("cidrIpv6", cdk.validateString)(properties.cidrIpv6));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("destinationPrefixListId", cdk.validateString)(properties.destinationPrefixListId));
      errors.collect(cdk.propertyValidator("destinationSecurityGroupId", cdk.validateString)(properties.destinationSecurityGroupId));
      errors.collect(cdk.propertyValidator("fromPort", cdk.validateNumber)(properties.fromPort));
      errors.collect(cdk.propertyValidator("ipProtocol", cdk.requiredValidator)(properties.ipProtocol));
      errors.collect(cdk.propertyValidator("ipProtocol", cdk.validateString)(properties.ipProtocol));
      errors.collect(cdk.propertyValidator("toPort", cdk.validateNumber)(properties.toPort));
      return errors.wrap('supplied properties not correct for "EgressProperty"');
    }
    function cfnSecurityGroupEgressPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSecurityGroup_EgressPropertyValidator(properties).assertSuccess();
      return {
        CidrIp: cdk.stringToCloudFormation(properties.cidrIp),
        CidrIpv6: cdk.stringToCloudFormation(properties.cidrIpv6),
        Description: cdk.stringToCloudFormation(properties.description),
        DestinationPrefixListId: cdk.stringToCloudFormation(properties.destinationPrefixListId),
        DestinationSecurityGroupId: cdk.stringToCloudFormation(properties.destinationSecurityGroupId),
        FromPort: cdk.numberToCloudFormation(properties.fromPort),
        IpProtocol: cdk.stringToCloudFormation(properties.ipProtocol),
        ToPort: cdk.numberToCloudFormation(properties.toPort)
      };
    }
    function CfnSecurityGroupEgressPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("cidrIp", "CidrIp", properties.CidrIp != null ? cfn_parse.FromCloudFormation.getString(properties.CidrIp) : void 0);
      ret.addPropertyResult("cidrIpv6", "CidrIpv6", properties.CidrIpv6 != null ? cfn_parse.FromCloudFormation.getString(properties.CidrIpv6) : void 0);
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("destinationPrefixListId", "DestinationPrefixListId", properties.DestinationPrefixListId != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationPrefixListId) : void 0);
      ret.addPropertyResult("destinationSecurityGroupId", "DestinationSecurityGroupId", properties.DestinationSecurityGroupId != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationSecurityGroupId) : void 0);
      ret.addPropertyResult("fromPort", "FromPort", properties.FromPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.FromPort) : void 0);
      ret.addPropertyResult("ipProtocol", "IpProtocol", cfn_parse.FromCloudFormation.getString(properties.IpProtocol));
      ret.addPropertyResult("toPort", "ToPort", properties.ToPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.ToPort) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSecurityGroup_IngressPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("cidrIp", cdk.validateString)(properties.cidrIp));
      errors.collect(cdk.propertyValidator("cidrIpv6", cdk.validateString)(properties.cidrIpv6));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("fromPort", cdk.validateNumber)(properties.fromPort));
      errors.collect(cdk.propertyValidator("ipProtocol", cdk.requiredValidator)(properties.ipProtocol));
      errors.collect(cdk.propertyValidator("ipProtocol", cdk.validateString)(properties.ipProtocol));
      errors.collect(cdk.propertyValidator("sourcePrefixListId", cdk.validateString)(properties.sourcePrefixListId));
      errors.collect(cdk.propertyValidator("sourceSecurityGroupId", cdk.validateString)(properties.sourceSecurityGroupId));
      errors.collect(cdk.propertyValidator("sourceSecurityGroupName", cdk.validateString)(properties.sourceSecurityGroupName));
      errors.collect(cdk.propertyValidator("sourceSecurityGroupOwnerId", cdk.validateString)(properties.sourceSecurityGroupOwnerId));
      errors.collect(cdk.propertyValidator("toPort", cdk.validateNumber)(properties.toPort));
      return errors.wrap('supplied properties not correct for "IngressProperty"');
    }
    function cfnSecurityGroupIngressPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSecurityGroup_IngressPropertyValidator(properties).assertSuccess();
      return {
        CidrIp: cdk.stringToCloudFormation(properties.cidrIp),
        CidrIpv6: cdk.stringToCloudFormation(properties.cidrIpv6),
        Description: cdk.stringToCloudFormation(properties.description),
        FromPort: cdk.numberToCloudFormation(properties.fromPort),
        IpProtocol: cdk.stringToCloudFormation(properties.ipProtocol),
        SourcePrefixListId: cdk.stringToCloudFormation(properties.sourcePrefixListId),
        SourceSecurityGroupId: cdk.stringToCloudFormation(properties.sourceSecurityGroupId),
        SourceSecurityGroupName: cdk.stringToCloudFormation(properties.sourceSecurityGroupName),
        SourceSecurityGroupOwnerId: cdk.stringToCloudFormation(properties.sourceSecurityGroupOwnerId),
        ToPort: cdk.numberToCloudFormation(properties.toPort)
      };
    }
    function CfnSecurityGroupIngressPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("cidrIp", "CidrIp", properties.CidrIp != null ? cfn_parse.FromCloudFormation.getString(properties.CidrIp) : void 0);
      ret.addPropertyResult("cidrIpv6", "CidrIpv6", properties.CidrIpv6 != null ? cfn_parse.FromCloudFormation.getString(properties.CidrIpv6) : void 0);
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("fromPort", "FromPort", properties.FromPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.FromPort) : void 0);
      ret.addPropertyResult("ipProtocol", "IpProtocol", cfn_parse.FromCloudFormation.getString(properties.IpProtocol));
      ret.addPropertyResult("sourcePrefixListId", "SourcePrefixListId", properties.SourcePrefixListId != null ? cfn_parse.FromCloudFormation.getString(properties.SourcePrefixListId) : void 0);
      ret.addPropertyResult("sourceSecurityGroupId", "SourceSecurityGroupId", properties.SourceSecurityGroupId != null ? cfn_parse.FromCloudFormation.getString(properties.SourceSecurityGroupId) : void 0);
      ret.addPropertyResult("sourceSecurityGroupName", "SourceSecurityGroupName", properties.SourceSecurityGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.SourceSecurityGroupName) : void 0);
      ret.addPropertyResult("sourceSecurityGroupOwnerId", "SourceSecurityGroupOwnerId", properties.SourceSecurityGroupOwnerId != null ? cfn_parse.FromCloudFormation.getString(properties.SourceSecurityGroupOwnerId) : void 0);
      ret.addPropertyResult("toPort", "ToPort", properties.ToPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.ToPort) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSecurityGroupEgressPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("cidrIp", cdk.validateString)(properties.cidrIp));
      errors.collect(cdk.propertyValidator("cidrIpv6", cdk.validateString)(properties.cidrIpv6));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("destinationPrefixListId", cdk.validateString)(properties.destinationPrefixListId));
      errors.collect(cdk.propertyValidator("destinationSecurityGroupId", cdk.validateString)(properties.destinationSecurityGroupId));
      errors.collect(cdk.propertyValidator("fromPort", cdk.validateNumber)(properties.fromPort));
      errors.collect(cdk.propertyValidator("groupId", cdk.requiredValidator)(properties.groupId));
      errors.collect(cdk.propertyValidator("groupId", cdk.validateString)(properties.groupId));
      errors.collect(cdk.propertyValidator("ipProtocol", cdk.requiredValidator)(properties.ipProtocol));
      errors.collect(cdk.propertyValidator("ipProtocol", cdk.validateString)(properties.ipProtocol));
      errors.collect(cdk.propertyValidator("toPort", cdk.validateNumber)(properties.toPort));
      return errors.wrap('supplied properties not correct for "CfnSecurityGroupEgressProps"');
    }
    function cfnSecurityGroupEgressPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSecurityGroupEgressPropsValidator(properties).assertSuccess();
      return {
        GroupId: cdk.stringToCloudFormation(properties.groupId),
        IpProtocol: cdk.stringToCloudFormation(properties.ipProtocol),
        CidrIp: cdk.stringToCloudFormation(properties.cidrIp),
        CidrIpv6: cdk.stringToCloudFormation(properties.cidrIpv6),
        Description: cdk.stringToCloudFormation(properties.description),
        DestinationPrefixListId: cdk.stringToCloudFormation(properties.destinationPrefixListId),
        DestinationSecurityGroupId: cdk.stringToCloudFormation(properties.destinationSecurityGroupId),
        FromPort: cdk.numberToCloudFormation(properties.fromPort),
        ToPort: cdk.numberToCloudFormation(properties.toPort)
      };
    }
    function CfnSecurityGroupEgressPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("groupId", "GroupId", cfn_parse.FromCloudFormation.getString(properties.GroupId));
      ret.addPropertyResult("ipProtocol", "IpProtocol", cfn_parse.FromCloudFormation.getString(properties.IpProtocol));
      ret.addPropertyResult("cidrIp", "CidrIp", properties.CidrIp != null ? cfn_parse.FromCloudFormation.getString(properties.CidrIp) : void 0);
      ret.addPropertyResult("cidrIpv6", "CidrIpv6", properties.CidrIpv6 != null ? cfn_parse.FromCloudFormation.getString(properties.CidrIpv6) : void 0);
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("destinationPrefixListId", "DestinationPrefixListId", properties.DestinationPrefixListId != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationPrefixListId) : void 0);
      ret.addPropertyResult("destinationSecurityGroupId", "DestinationSecurityGroupId", properties.DestinationSecurityGroupId != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationSecurityGroupId) : void 0);
      ret.addPropertyResult("fromPort", "FromPort", properties.FromPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.FromPort) : void 0);
      ret.addPropertyResult("toPort", "ToPort", properties.ToPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.ToPort) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnSecurityGroupEgress = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnSecurityGroupEgress.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "groupId", this);
        cdk.requireProperty(props, "ipProtocol", this);
        this.groupId = props.groupId;
        this.ipProtocol = props.ipProtocol;
        this.cidrIp = props.cidrIp;
        this.cidrIpv6 = props.cidrIpv6;
        this.description = props.description;
        this.destinationPrefixListId = props.destinationPrefixListId;
        this.destinationSecurityGroupId = props.destinationSecurityGroupId;
        this.fromPort = props.fromPort;
        this.toPort = props.toPort;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnSecurityGroupEgressPropsFromCloudFormation(resourceProperties);
        const ret = new CfnSecurityGroupEgress(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnSecurityGroupEgress.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          groupId: this.groupId,
          ipProtocol: this.ipProtocol,
          cidrIp: this.cidrIp,
          cidrIpv6: this.cidrIpv6,
          description: this.description,
          destinationPrefixListId: this.destinationPrefixListId,
          destinationSecurityGroupId: this.destinationSecurityGroupId,
          fromPort: this.fromPort,
          toPort: this.toPort
        };
      }
      renderProperties(props) {
        return cfnSecurityGroupEgressPropsToCloudFormation(props);
      }
    };
    exports2.CfnSecurityGroupEgress = CfnSecurityGroupEgress;
    _11 = JSII_RTTI_SYMBOL_1;
    CfnSecurityGroupEgress[_11] = { fqn: "@aws-cdk/aws-ec2.CfnSecurityGroupEgress", version: "1.132.0" };
    CfnSecurityGroupEgress.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::SecurityGroupEgress";
    function CfnSecurityGroupIngressPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("cidrIp", cdk.validateString)(properties.cidrIp));
      errors.collect(cdk.propertyValidator("cidrIpv6", cdk.validateString)(properties.cidrIpv6));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("fromPort", cdk.validateNumber)(properties.fromPort));
      errors.collect(cdk.propertyValidator("groupId", cdk.validateString)(properties.groupId));
      errors.collect(cdk.propertyValidator("groupName", cdk.validateString)(properties.groupName));
      errors.collect(cdk.propertyValidator("ipProtocol", cdk.requiredValidator)(properties.ipProtocol));
      errors.collect(cdk.propertyValidator("ipProtocol", cdk.validateString)(properties.ipProtocol));
      errors.collect(cdk.propertyValidator("sourcePrefixListId", cdk.validateString)(properties.sourcePrefixListId));
      errors.collect(cdk.propertyValidator("sourceSecurityGroupId", cdk.validateString)(properties.sourceSecurityGroupId));
      errors.collect(cdk.propertyValidator("sourceSecurityGroupName", cdk.validateString)(properties.sourceSecurityGroupName));
      errors.collect(cdk.propertyValidator("sourceSecurityGroupOwnerId", cdk.validateString)(properties.sourceSecurityGroupOwnerId));
      errors.collect(cdk.propertyValidator("toPort", cdk.validateNumber)(properties.toPort));
      return errors.wrap('supplied properties not correct for "CfnSecurityGroupIngressProps"');
    }
    function cfnSecurityGroupIngressPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSecurityGroupIngressPropsValidator(properties).assertSuccess();
      return {
        IpProtocol: cdk.stringToCloudFormation(properties.ipProtocol),
        CidrIp: cdk.stringToCloudFormation(properties.cidrIp),
        CidrIpv6: cdk.stringToCloudFormation(properties.cidrIpv6),
        Description: cdk.stringToCloudFormation(properties.description),
        FromPort: cdk.numberToCloudFormation(properties.fromPort),
        GroupId: cdk.stringToCloudFormation(properties.groupId),
        GroupName: cdk.stringToCloudFormation(properties.groupName),
        SourcePrefixListId: cdk.stringToCloudFormation(properties.sourcePrefixListId),
        SourceSecurityGroupId: cdk.stringToCloudFormation(properties.sourceSecurityGroupId),
        SourceSecurityGroupName: cdk.stringToCloudFormation(properties.sourceSecurityGroupName),
        SourceSecurityGroupOwnerId: cdk.stringToCloudFormation(properties.sourceSecurityGroupOwnerId),
        ToPort: cdk.numberToCloudFormation(properties.toPort)
      };
    }
    function CfnSecurityGroupIngressPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("ipProtocol", "IpProtocol", cfn_parse.FromCloudFormation.getString(properties.IpProtocol));
      ret.addPropertyResult("cidrIp", "CidrIp", properties.CidrIp != null ? cfn_parse.FromCloudFormation.getString(properties.CidrIp) : void 0);
      ret.addPropertyResult("cidrIpv6", "CidrIpv6", properties.CidrIpv6 != null ? cfn_parse.FromCloudFormation.getString(properties.CidrIpv6) : void 0);
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("fromPort", "FromPort", properties.FromPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.FromPort) : void 0);
      ret.addPropertyResult("groupId", "GroupId", properties.GroupId != null ? cfn_parse.FromCloudFormation.getString(properties.GroupId) : void 0);
      ret.addPropertyResult("groupName", "GroupName", properties.GroupName != null ? cfn_parse.FromCloudFormation.getString(properties.GroupName) : void 0);
      ret.addPropertyResult("sourcePrefixListId", "SourcePrefixListId", properties.SourcePrefixListId != null ? cfn_parse.FromCloudFormation.getString(properties.SourcePrefixListId) : void 0);
      ret.addPropertyResult("sourceSecurityGroupId", "SourceSecurityGroupId", properties.SourceSecurityGroupId != null ? cfn_parse.FromCloudFormation.getString(properties.SourceSecurityGroupId) : void 0);
      ret.addPropertyResult("sourceSecurityGroupName", "SourceSecurityGroupName", properties.SourceSecurityGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.SourceSecurityGroupName) : void 0);
      ret.addPropertyResult("sourceSecurityGroupOwnerId", "SourceSecurityGroupOwnerId", properties.SourceSecurityGroupOwnerId != null ? cfn_parse.FromCloudFormation.getString(properties.SourceSecurityGroupOwnerId) : void 0);
      ret.addPropertyResult("toPort", "ToPort", properties.ToPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.ToPort) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnSecurityGroupIngress = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnSecurityGroupIngress.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "ipProtocol", this);
        this.ipProtocol = props.ipProtocol;
        this.cidrIp = props.cidrIp;
        this.cidrIpv6 = props.cidrIpv6;
        this.description = props.description;
        this.fromPort = props.fromPort;
        this.groupId = props.groupId;
        this.groupName = props.groupName;
        this.sourcePrefixListId = props.sourcePrefixListId;
        this.sourceSecurityGroupId = props.sourceSecurityGroupId;
        this.sourceSecurityGroupName = props.sourceSecurityGroupName;
        this.sourceSecurityGroupOwnerId = props.sourceSecurityGroupOwnerId;
        this.toPort = props.toPort;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnSecurityGroupIngressPropsFromCloudFormation(resourceProperties);
        const ret = new CfnSecurityGroupIngress(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnSecurityGroupIngress.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          ipProtocol: this.ipProtocol,
          cidrIp: this.cidrIp,
          cidrIpv6: this.cidrIpv6,
          description: this.description,
          fromPort: this.fromPort,
          groupId: this.groupId,
          groupName: this.groupName,
          sourcePrefixListId: this.sourcePrefixListId,
          sourceSecurityGroupId: this.sourceSecurityGroupId,
          sourceSecurityGroupName: this.sourceSecurityGroupName,
          sourceSecurityGroupOwnerId: this.sourceSecurityGroupOwnerId,
          toPort: this.toPort
        };
      }
      renderProperties(props) {
        return cfnSecurityGroupIngressPropsToCloudFormation(props);
      }
    };
    exports2.CfnSecurityGroupIngress = CfnSecurityGroupIngress;
    _12 = JSII_RTTI_SYMBOL_1;
    CfnSecurityGroupIngress[_12] = { fqn: "@aws-cdk/aws-ec2.CfnSecurityGroupIngress", version: "1.132.0" };
    CfnSecurityGroupIngress.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::SecurityGroupIngress";
    function CfnSpotFleetPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("spotFleetRequestConfigData", cdk.requiredValidator)(properties.spotFleetRequestConfigData));
      errors.collect(cdk.propertyValidator("spotFleetRequestConfigData", CfnSpotFleet_SpotFleetRequestConfigDataPropertyValidator)(properties.spotFleetRequestConfigData));
      return errors.wrap('supplied properties not correct for "CfnSpotFleetProps"');
    }
    function cfnSpotFleetPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleetPropsValidator(properties).assertSuccess();
      return {
        SpotFleetRequestConfigData: cfnSpotFleetSpotFleetRequestConfigDataPropertyToCloudFormation(properties.spotFleetRequestConfigData)
      };
    }
    function CfnSpotFleetPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("spotFleetRequestConfigData", "SpotFleetRequestConfigData", CfnSpotFleetSpotFleetRequestConfigDataPropertyFromCloudFormation(properties.SpotFleetRequestConfigData));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnSpotFleet = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnSpotFleet.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "spotFleetRequestConfigData", this);
        this.attrId = cdk.Token.asString(this.getAtt("Id"));
        this.spotFleetRequestConfigData = props.spotFleetRequestConfigData;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnSpotFleetPropsFromCloudFormation(resourceProperties);
        const ret = new CfnSpotFleet(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnSpotFleet.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          spotFleetRequestConfigData: this.spotFleetRequestConfigData
        };
      }
      renderProperties(props) {
        return cfnSpotFleetPropsToCloudFormation(props);
      }
    };
    exports2.CfnSpotFleet = CfnSpotFleet;
    _13 = JSII_RTTI_SYMBOL_1;
    CfnSpotFleet[_13] = { fqn: "@aws-cdk/aws-ec2.CfnSpotFleet", version: "1.132.0" };
    CfnSpotFleet.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::SpotFleet";
    function CfnSpotFleet_AcceleratorCountRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("max", cdk.validateNumber)(properties.max));
      errors.collect(cdk.propertyValidator("min", cdk.validateNumber)(properties.min));
      return errors.wrap('supplied properties not correct for "AcceleratorCountRequestProperty"');
    }
    function cfnSpotFleetAcceleratorCountRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_AcceleratorCountRequestPropertyValidator(properties).assertSuccess();
      return {
        Max: cdk.numberToCloudFormation(properties.max),
        Min: cdk.numberToCloudFormation(properties.min)
      };
    }
    function CfnSpotFleetAcceleratorCountRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("max", "Max", properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : void 0);
      ret.addPropertyResult("min", "Min", properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_AcceleratorTotalMemoryMiBRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("max", cdk.validateNumber)(properties.max));
      errors.collect(cdk.propertyValidator("min", cdk.validateNumber)(properties.min));
      return errors.wrap('supplied properties not correct for "AcceleratorTotalMemoryMiBRequestProperty"');
    }
    function cfnSpotFleetAcceleratorTotalMemoryMiBRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_AcceleratorTotalMemoryMiBRequestPropertyValidator(properties).assertSuccess();
      return {
        Max: cdk.numberToCloudFormation(properties.max),
        Min: cdk.numberToCloudFormation(properties.min)
      };
    }
    function CfnSpotFleetAcceleratorTotalMemoryMiBRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("max", "Max", properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : void 0);
      ret.addPropertyResult("min", "Min", properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_BaselineEbsBandwidthMbpsRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("max", cdk.validateNumber)(properties.max));
      errors.collect(cdk.propertyValidator("min", cdk.validateNumber)(properties.min));
      return errors.wrap('supplied properties not correct for "BaselineEbsBandwidthMbpsRequestProperty"');
    }
    function cfnSpotFleetBaselineEbsBandwidthMbpsRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_BaselineEbsBandwidthMbpsRequestPropertyValidator(properties).assertSuccess();
      return {
        Max: cdk.numberToCloudFormation(properties.max),
        Min: cdk.numberToCloudFormation(properties.min)
      };
    }
    function CfnSpotFleetBaselineEbsBandwidthMbpsRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("max", "Max", properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : void 0);
      ret.addPropertyResult("min", "Min", properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_BlockDeviceMappingPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("deviceName", cdk.requiredValidator)(properties.deviceName));
      errors.collect(cdk.propertyValidator("deviceName", cdk.validateString)(properties.deviceName));
      errors.collect(cdk.propertyValidator("ebs", CfnSpotFleet_EbsBlockDevicePropertyValidator)(properties.ebs));
      errors.collect(cdk.propertyValidator("noDevice", cdk.validateString)(properties.noDevice));
      errors.collect(cdk.propertyValidator("virtualName", cdk.validateString)(properties.virtualName));
      return errors.wrap('supplied properties not correct for "BlockDeviceMappingProperty"');
    }
    function cfnSpotFleetBlockDeviceMappingPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_BlockDeviceMappingPropertyValidator(properties).assertSuccess();
      return {
        DeviceName: cdk.stringToCloudFormation(properties.deviceName),
        Ebs: cfnSpotFleetEbsBlockDevicePropertyToCloudFormation(properties.ebs),
        NoDevice: cdk.stringToCloudFormation(properties.noDevice),
        VirtualName: cdk.stringToCloudFormation(properties.virtualName)
      };
    }
    function CfnSpotFleetBlockDeviceMappingPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("deviceName", "DeviceName", cfn_parse.FromCloudFormation.getString(properties.DeviceName));
      ret.addPropertyResult("ebs", "Ebs", properties.Ebs != null ? CfnSpotFleetEbsBlockDevicePropertyFromCloudFormation(properties.Ebs) : void 0);
      ret.addPropertyResult("noDevice", "NoDevice", properties.NoDevice != null ? cfn_parse.FromCloudFormation.getString(properties.NoDevice) : void 0);
      ret.addPropertyResult("virtualName", "VirtualName", properties.VirtualName != null ? cfn_parse.FromCloudFormation.getString(properties.VirtualName) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_ClassicLoadBalancerPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("name", cdk.requiredValidator)(properties.name));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      return errors.wrap('supplied properties not correct for "ClassicLoadBalancerProperty"');
    }
    function cfnSpotFleetClassicLoadBalancerPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_ClassicLoadBalancerPropertyValidator(properties).assertSuccess();
      return {
        Name: cdk.stringToCloudFormation(properties.name)
      };
    }
    function CfnSpotFleetClassicLoadBalancerPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("name", "Name", cfn_parse.FromCloudFormation.getString(properties.Name));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_ClassicLoadBalancersConfigPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("classicLoadBalancers", cdk.requiredValidator)(properties.classicLoadBalancers));
      errors.collect(cdk.propertyValidator("classicLoadBalancers", cdk.listValidator(CfnSpotFleet_ClassicLoadBalancerPropertyValidator))(properties.classicLoadBalancers));
      return errors.wrap('supplied properties not correct for "ClassicLoadBalancersConfigProperty"');
    }
    function cfnSpotFleetClassicLoadBalancersConfigPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_ClassicLoadBalancersConfigPropertyValidator(properties).assertSuccess();
      return {
        ClassicLoadBalancers: cdk.listMapper(cfnSpotFleetClassicLoadBalancerPropertyToCloudFormation)(properties.classicLoadBalancers)
      };
    }
    function CfnSpotFleetClassicLoadBalancersConfigPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("classicLoadBalancers", "ClassicLoadBalancers", cfn_parse.FromCloudFormation.getArray(CfnSpotFleetClassicLoadBalancerPropertyFromCloudFormation)(properties.ClassicLoadBalancers));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_EbsBlockDevicePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("deleteOnTermination", cdk.validateBoolean)(properties.deleteOnTermination));
      errors.collect(cdk.propertyValidator("encrypted", cdk.validateBoolean)(properties.encrypted));
      errors.collect(cdk.propertyValidator("iops", cdk.validateNumber)(properties.iops));
      errors.collect(cdk.propertyValidator("snapshotId", cdk.validateString)(properties.snapshotId));
      errors.collect(cdk.propertyValidator("volumeSize", cdk.validateNumber)(properties.volumeSize));
      errors.collect(cdk.propertyValidator("volumeType", cdk.validateString)(properties.volumeType));
      return errors.wrap('supplied properties not correct for "EbsBlockDeviceProperty"');
    }
    function cfnSpotFleetEbsBlockDevicePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_EbsBlockDevicePropertyValidator(properties).assertSuccess();
      return {
        DeleteOnTermination: cdk.booleanToCloudFormation(properties.deleteOnTermination),
        Encrypted: cdk.booleanToCloudFormation(properties.encrypted),
        Iops: cdk.numberToCloudFormation(properties.iops),
        SnapshotId: cdk.stringToCloudFormation(properties.snapshotId),
        VolumeSize: cdk.numberToCloudFormation(properties.volumeSize),
        VolumeType: cdk.stringToCloudFormation(properties.volumeType)
      };
    }
    function CfnSpotFleetEbsBlockDevicePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("deleteOnTermination", "DeleteOnTermination", properties.DeleteOnTermination != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DeleteOnTermination) : void 0);
      ret.addPropertyResult("encrypted", "Encrypted", properties.Encrypted != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Encrypted) : void 0);
      ret.addPropertyResult("iops", "Iops", properties.Iops != null ? cfn_parse.FromCloudFormation.getNumber(properties.Iops) : void 0);
      ret.addPropertyResult("snapshotId", "SnapshotId", properties.SnapshotId != null ? cfn_parse.FromCloudFormation.getString(properties.SnapshotId) : void 0);
      ret.addPropertyResult("volumeSize", "VolumeSize", properties.VolumeSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.VolumeSize) : void 0);
      ret.addPropertyResult("volumeType", "VolumeType", properties.VolumeType != null ? cfn_parse.FromCloudFormation.getString(properties.VolumeType) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_FleetLaunchTemplateSpecificationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("launchTemplateId", cdk.validateString)(properties.launchTemplateId));
      errors.collect(cdk.propertyValidator("launchTemplateName", cdk.validateString)(properties.launchTemplateName));
      errors.collect(cdk.propertyValidator("version", cdk.requiredValidator)(properties.version));
      errors.collect(cdk.propertyValidator("version", cdk.validateString)(properties.version));
      return errors.wrap('supplied properties not correct for "FleetLaunchTemplateSpecificationProperty"');
    }
    function cfnSpotFleetFleetLaunchTemplateSpecificationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_FleetLaunchTemplateSpecificationPropertyValidator(properties).assertSuccess();
      return {
        LaunchTemplateId: cdk.stringToCloudFormation(properties.launchTemplateId),
        LaunchTemplateName: cdk.stringToCloudFormation(properties.launchTemplateName),
        Version: cdk.stringToCloudFormation(properties.version)
      };
    }
    function CfnSpotFleetFleetLaunchTemplateSpecificationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("launchTemplateId", "LaunchTemplateId", properties.LaunchTemplateId != null ? cfn_parse.FromCloudFormation.getString(properties.LaunchTemplateId) : void 0);
      ret.addPropertyResult("launchTemplateName", "LaunchTemplateName", properties.LaunchTemplateName != null ? cfn_parse.FromCloudFormation.getString(properties.LaunchTemplateName) : void 0);
      ret.addPropertyResult("version", "Version", cfn_parse.FromCloudFormation.getString(properties.Version));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_GroupIdentifierPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("groupId", cdk.requiredValidator)(properties.groupId));
      errors.collect(cdk.propertyValidator("groupId", cdk.validateString)(properties.groupId));
      return errors.wrap('supplied properties not correct for "GroupIdentifierProperty"');
    }
    function cfnSpotFleetGroupIdentifierPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_GroupIdentifierPropertyValidator(properties).assertSuccess();
      return {
        GroupId: cdk.stringToCloudFormation(properties.groupId)
      };
    }
    function CfnSpotFleetGroupIdentifierPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("groupId", "GroupId", cfn_parse.FromCloudFormation.getString(properties.GroupId));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_IamInstanceProfileSpecificationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("arn", cdk.validateString)(properties.arn));
      return errors.wrap('supplied properties not correct for "IamInstanceProfileSpecificationProperty"');
    }
    function cfnSpotFleetIamInstanceProfileSpecificationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_IamInstanceProfileSpecificationPropertyValidator(properties).assertSuccess();
      return {
        Arn: cdk.stringToCloudFormation(properties.arn)
      };
    }
    function CfnSpotFleetIamInstanceProfileSpecificationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("arn", "Arn", properties.Arn != null ? cfn_parse.FromCloudFormation.getString(properties.Arn) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_InstanceIpv6AddressPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("ipv6Address", cdk.requiredValidator)(properties.ipv6Address));
      errors.collect(cdk.propertyValidator("ipv6Address", cdk.validateString)(properties.ipv6Address));
      return errors.wrap('supplied properties not correct for "InstanceIpv6AddressProperty"');
    }
    function cfnSpotFleetInstanceIpv6AddressPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_InstanceIpv6AddressPropertyValidator(properties).assertSuccess();
      return {
        Ipv6Address: cdk.stringToCloudFormation(properties.ipv6Address)
      };
    }
    function CfnSpotFleetInstanceIpv6AddressPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("ipv6Address", "Ipv6Address", cfn_parse.FromCloudFormation.getString(properties.Ipv6Address));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_InstanceNetworkInterfaceSpecificationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("associatePublicIpAddress", cdk.validateBoolean)(properties.associatePublicIpAddress));
      errors.collect(cdk.propertyValidator("deleteOnTermination", cdk.validateBoolean)(properties.deleteOnTermination));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("deviceIndex", cdk.validateNumber)(properties.deviceIndex));
      errors.collect(cdk.propertyValidator("groups", cdk.listValidator(cdk.validateString))(properties.groups));
      errors.collect(cdk.propertyValidator("ipv6AddressCount", cdk.validateNumber)(properties.ipv6AddressCount));
      errors.collect(cdk.propertyValidator("ipv6Addresses", cdk.listValidator(CfnSpotFleet_InstanceIpv6AddressPropertyValidator))(properties.ipv6Addresses));
      errors.collect(cdk.propertyValidator("networkInterfaceId", cdk.validateString)(properties.networkInterfaceId));
      errors.collect(cdk.propertyValidator("privateIpAddresses", cdk.listValidator(CfnSpotFleet_PrivateIpAddressSpecificationPropertyValidator))(properties.privateIpAddresses));
      errors.collect(cdk.propertyValidator("secondaryPrivateIpAddressCount", cdk.validateNumber)(properties.secondaryPrivateIpAddressCount));
      errors.collect(cdk.propertyValidator("subnetId", cdk.validateString)(properties.subnetId));
      return errors.wrap('supplied properties not correct for "InstanceNetworkInterfaceSpecificationProperty"');
    }
    function cfnSpotFleetInstanceNetworkInterfaceSpecificationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_InstanceNetworkInterfaceSpecificationPropertyValidator(properties).assertSuccess();
      return {
        AssociatePublicIpAddress: cdk.booleanToCloudFormation(properties.associatePublicIpAddress),
        DeleteOnTermination: cdk.booleanToCloudFormation(properties.deleteOnTermination),
        Description: cdk.stringToCloudFormation(properties.description),
        DeviceIndex: cdk.numberToCloudFormation(properties.deviceIndex),
        Groups: cdk.listMapper(cdk.stringToCloudFormation)(properties.groups),
        Ipv6AddressCount: cdk.numberToCloudFormation(properties.ipv6AddressCount),
        Ipv6Addresses: cdk.listMapper(cfnSpotFleetInstanceIpv6AddressPropertyToCloudFormation)(properties.ipv6Addresses),
        NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),
        PrivateIpAddresses: cdk.listMapper(cfnSpotFleetPrivateIpAddressSpecificationPropertyToCloudFormation)(properties.privateIpAddresses),
        SecondaryPrivateIpAddressCount: cdk.numberToCloudFormation(properties.secondaryPrivateIpAddressCount),
        SubnetId: cdk.stringToCloudFormation(properties.subnetId)
      };
    }
    function CfnSpotFleetInstanceNetworkInterfaceSpecificationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("associatePublicIpAddress", "AssociatePublicIpAddress", properties.AssociatePublicIpAddress != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AssociatePublicIpAddress) : void 0);
      ret.addPropertyResult("deleteOnTermination", "DeleteOnTermination", properties.DeleteOnTermination != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DeleteOnTermination) : void 0);
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("deviceIndex", "DeviceIndex", properties.DeviceIndex != null ? cfn_parse.FromCloudFormation.getNumber(properties.DeviceIndex) : void 0);
      ret.addPropertyResult("groups", "Groups", properties.Groups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Groups) : void 0);
      ret.addPropertyResult("ipv6AddressCount", "Ipv6AddressCount", properties.Ipv6AddressCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.Ipv6AddressCount) : void 0);
      ret.addPropertyResult("ipv6Addresses", "Ipv6Addresses", properties.Ipv6Addresses != null ? cfn_parse.FromCloudFormation.getArray(CfnSpotFleetInstanceIpv6AddressPropertyFromCloudFormation)(properties.Ipv6Addresses) : void 0);
      ret.addPropertyResult("networkInterfaceId", "NetworkInterfaceId", properties.NetworkInterfaceId != null ? cfn_parse.FromCloudFormation.getString(properties.NetworkInterfaceId) : void 0);
      ret.addPropertyResult("privateIpAddresses", "PrivateIpAddresses", properties.PrivateIpAddresses != null ? cfn_parse.FromCloudFormation.getArray(CfnSpotFleetPrivateIpAddressSpecificationPropertyFromCloudFormation)(properties.PrivateIpAddresses) : void 0);
      ret.addPropertyResult("secondaryPrivateIpAddressCount", "SecondaryPrivateIpAddressCount", properties.SecondaryPrivateIpAddressCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.SecondaryPrivateIpAddressCount) : void 0);
      ret.addPropertyResult("subnetId", "SubnetId", properties.SubnetId != null ? cfn_parse.FromCloudFormation.getString(properties.SubnetId) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_InstanceRequirementsRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("acceleratorCount", CfnSpotFleet_AcceleratorCountRequestPropertyValidator)(properties.acceleratorCount));
      errors.collect(cdk.propertyValidator("acceleratorManufacturers", cdk.listValidator(cdk.validateString))(properties.acceleratorManufacturers));
      errors.collect(cdk.propertyValidator("acceleratorNames", cdk.listValidator(cdk.validateString))(properties.acceleratorNames));
      errors.collect(cdk.propertyValidator("acceleratorTotalMemoryMiB", CfnSpotFleet_AcceleratorTotalMemoryMiBRequestPropertyValidator)(properties.acceleratorTotalMemoryMiB));
      errors.collect(cdk.propertyValidator("acceleratorTypes", cdk.listValidator(cdk.validateString))(properties.acceleratorTypes));
      errors.collect(cdk.propertyValidator("bareMetal", cdk.validateString)(properties.bareMetal));
      errors.collect(cdk.propertyValidator("baselineEbsBandwidthMbps", CfnSpotFleet_BaselineEbsBandwidthMbpsRequestPropertyValidator)(properties.baselineEbsBandwidthMbps));
      errors.collect(cdk.propertyValidator("burstablePerformance", cdk.validateString)(properties.burstablePerformance));
      errors.collect(cdk.propertyValidator("cpuManufacturers", cdk.listValidator(cdk.validateString))(properties.cpuManufacturers));
      errors.collect(cdk.propertyValidator("excludedInstanceTypes", cdk.listValidator(cdk.validateString))(properties.excludedInstanceTypes));
      errors.collect(cdk.propertyValidator("instanceGenerations", cdk.listValidator(cdk.validateString))(properties.instanceGenerations));
      errors.collect(cdk.propertyValidator("localStorage", cdk.validateString)(properties.localStorage));
      errors.collect(cdk.propertyValidator("localStorageTypes", cdk.listValidator(cdk.validateString))(properties.localStorageTypes));
      errors.collect(cdk.propertyValidator("memoryGiBPerVCpu", CfnSpotFleet_MemoryGiBPerVCpuRequestPropertyValidator)(properties.memoryGiBPerVCpu));
      errors.collect(cdk.propertyValidator("memoryMiB", CfnSpotFleet_MemoryMiBRequestPropertyValidator)(properties.memoryMiB));
      errors.collect(cdk.propertyValidator("networkInterfaceCount", CfnSpotFleet_NetworkInterfaceCountRequestPropertyValidator)(properties.networkInterfaceCount));
      errors.collect(cdk.propertyValidator("onDemandMaxPricePercentageOverLowestPrice", cdk.validateNumber)(properties.onDemandMaxPricePercentageOverLowestPrice));
      errors.collect(cdk.propertyValidator("requireHibernateSupport", cdk.validateBoolean)(properties.requireHibernateSupport));
      errors.collect(cdk.propertyValidator("spotMaxPricePercentageOverLowestPrice", cdk.validateNumber)(properties.spotMaxPricePercentageOverLowestPrice));
      errors.collect(cdk.propertyValidator("totalLocalStorageGb", CfnSpotFleet_TotalLocalStorageGBRequestPropertyValidator)(properties.totalLocalStorageGb));
      errors.collect(cdk.propertyValidator("vCpuCount", CfnSpotFleet_VCpuCountRangeRequestPropertyValidator)(properties.vCpuCount));
      return errors.wrap('supplied properties not correct for "InstanceRequirementsRequestProperty"');
    }
    function cfnSpotFleetInstanceRequirementsRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_InstanceRequirementsRequestPropertyValidator(properties).assertSuccess();
      return {
        AcceleratorCount: cfnSpotFleetAcceleratorCountRequestPropertyToCloudFormation(properties.acceleratorCount),
        AcceleratorManufacturers: cdk.listMapper(cdk.stringToCloudFormation)(properties.acceleratorManufacturers),
        AcceleratorNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.acceleratorNames),
        AcceleratorTotalMemoryMiB: cfnSpotFleetAcceleratorTotalMemoryMiBRequestPropertyToCloudFormation(properties.acceleratorTotalMemoryMiB),
        AcceleratorTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.acceleratorTypes),
        BareMetal: cdk.stringToCloudFormation(properties.bareMetal),
        BaselineEbsBandwidthMbps: cfnSpotFleetBaselineEbsBandwidthMbpsRequestPropertyToCloudFormation(properties.baselineEbsBandwidthMbps),
        BurstablePerformance: cdk.stringToCloudFormation(properties.burstablePerformance),
        CpuManufacturers: cdk.listMapper(cdk.stringToCloudFormation)(properties.cpuManufacturers),
        ExcludedInstanceTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.excludedInstanceTypes),
        InstanceGenerations: cdk.listMapper(cdk.stringToCloudFormation)(properties.instanceGenerations),
        LocalStorage: cdk.stringToCloudFormation(properties.localStorage),
        LocalStorageTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.localStorageTypes),
        MemoryGiBPerVCpu: cfnSpotFleetMemoryGiBPerVCpuRequestPropertyToCloudFormation(properties.memoryGiBPerVCpu),
        MemoryMiB: cfnSpotFleetMemoryMiBRequestPropertyToCloudFormation(properties.memoryMiB),
        NetworkInterfaceCount: cfnSpotFleetNetworkInterfaceCountRequestPropertyToCloudFormation(properties.networkInterfaceCount),
        OnDemandMaxPricePercentageOverLowestPrice: cdk.numberToCloudFormation(properties.onDemandMaxPricePercentageOverLowestPrice),
        RequireHibernateSupport: cdk.booleanToCloudFormation(properties.requireHibernateSupport),
        SpotMaxPricePercentageOverLowestPrice: cdk.numberToCloudFormation(properties.spotMaxPricePercentageOverLowestPrice),
        TotalLocalStorageGB: cfnSpotFleetTotalLocalStorageGBRequestPropertyToCloudFormation(properties.totalLocalStorageGb),
        VCpuCount: cfnSpotFleetVCpuCountRangeRequestPropertyToCloudFormation(properties.vCpuCount)
      };
    }
    function CfnSpotFleetInstanceRequirementsRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("acceleratorCount", "AcceleratorCount", properties.AcceleratorCount != null ? CfnSpotFleetAcceleratorCountRequestPropertyFromCloudFormation(properties.AcceleratorCount) : void 0);
      ret.addPropertyResult("acceleratorManufacturers", "AcceleratorManufacturers", properties.AcceleratorManufacturers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AcceleratorManufacturers) : void 0);
      ret.addPropertyResult("acceleratorNames", "AcceleratorNames", properties.AcceleratorNames != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AcceleratorNames) : void 0);
      ret.addPropertyResult("acceleratorTotalMemoryMiB", "AcceleratorTotalMemoryMiB", properties.AcceleratorTotalMemoryMiB != null ? CfnSpotFleetAcceleratorTotalMemoryMiBRequestPropertyFromCloudFormation(properties.AcceleratorTotalMemoryMiB) : void 0);
      ret.addPropertyResult("acceleratorTypes", "AcceleratorTypes", properties.AcceleratorTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AcceleratorTypes) : void 0);
      ret.addPropertyResult("bareMetal", "BareMetal", properties.BareMetal != null ? cfn_parse.FromCloudFormation.getString(properties.BareMetal) : void 0);
      ret.addPropertyResult("baselineEbsBandwidthMbps", "BaselineEbsBandwidthMbps", properties.BaselineEbsBandwidthMbps != null ? CfnSpotFleetBaselineEbsBandwidthMbpsRequestPropertyFromCloudFormation(properties.BaselineEbsBandwidthMbps) : void 0);
      ret.addPropertyResult("burstablePerformance", "BurstablePerformance", properties.BurstablePerformance != null ? cfn_parse.FromCloudFormation.getString(properties.BurstablePerformance) : void 0);
      ret.addPropertyResult("cpuManufacturers", "CpuManufacturers", properties.CpuManufacturers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.CpuManufacturers) : void 0);
      ret.addPropertyResult("excludedInstanceTypes", "ExcludedInstanceTypes", properties.ExcludedInstanceTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ExcludedInstanceTypes) : void 0);
      ret.addPropertyResult("instanceGenerations", "InstanceGenerations", properties.InstanceGenerations != null ? cfn_parse.FromCloudFormation.getStringArray(properties.InstanceGenerations) : void 0);
      ret.addPropertyResult("localStorage", "LocalStorage", properties.LocalStorage != null ? cfn_parse.FromCloudFormation.getString(properties.LocalStorage) : void 0);
      ret.addPropertyResult("localStorageTypes", "LocalStorageTypes", properties.LocalStorageTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.LocalStorageTypes) : void 0);
      ret.addPropertyResult("memoryGiBPerVCpu", "MemoryGiBPerVCpu", properties.MemoryGiBPerVCpu != null ? CfnSpotFleetMemoryGiBPerVCpuRequestPropertyFromCloudFormation(properties.MemoryGiBPerVCpu) : void 0);
      ret.addPropertyResult("memoryMiB", "MemoryMiB", properties.MemoryMiB != null ? CfnSpotFleetMemoryMiBRequestPropertyFromCloudFormation(properties.MemoryMiB) : void 0);
      ret.addPropertyResult("networkInterfaceCount", "NetworkInterfaceCount", properties.NetworkInterfaceCount != null ? CfnSpotFleetNetworkInterfaceCountRequestPropertyFromCloudFormation(properties.NetworkInterfaceCount) : void 0);
      ret.addPropertyResult("onDemandMaxPricePercentageOverLowestPrice", "OnDemandMaxPricePercentageOverLowestPrice", properties.OnDemandMaxPricePercentageOverLowestPrice != null ? cfn_parse.FromCloudFormation.getNumber(properties.OnDemandMaxPricePercentageOverLowestPrice) : void 0);
      ret.addPropertyResult("requireHibernateSupport", "RequireHibernateSupport", properties.RequireHibernateSupport != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RequireHibernateSupport) : void 0);
      ret.addPropertyResult("spotMaxPricePercentageOverLowestPrice", "SpotMaxPricePercentageOverLowestPrice", properties.SpotMaxPricePercentageOverLowestPrice != null ? cfn_parse.FromCloudFormation.getNumber(properties.SpotMaxPricePercentageOverLowestPrice) : void 0);
      ret.addPropertyResult("totalLocalStorageGb", "TotalLocalStorageGB", properties.TotalLocalStorageGB != null ? CfnSpotFleetTotalLocalStorageGBRequestPropertyFromCloudFormation(properties.TotalLocalStorageGB) : void 0);
      ret.addPropertyResult("vCpuCount", "VCpuCount", properties.VCpuCount != null ? CfnSpotFleetVCpuCountRangeRequestPropertyFromCloudFormation(properties.VCpuCount) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_LaunchTemplateConfigPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("launchTemplateSpecification", CfnSpotFleet_FleetLaunchTemplateSpecificationPropertyValidator)(properties.launchTemplateSpecification));
      errors.collect(cdk.propertyValidator("overrides", cdk.listValidator(CfnSpotFleet_LaunchTemplateOverridesPropertyValidator))(properties.overrides));
      return errors.wrap('supplied properties not correct for "LaunchTemplateConfigProperty"');
    }
    function cfnSpotFleetLaunchTemplateConfigPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_LaunchTemplateConfigPropertyValidator(properties).assertSuccess();
      return {
        LaunchTemplateSpecification: cfnSpotFleetFleetLaunchTemplateSpecificationPropertyToCloudFormation(properties.launchTemplateSpecification),
        Overrides: cdk.listMapper(cfnSpotFleetLaunchTemplateOverridesPropertyToCloudFormation)(properties.overrides)
      };
    }
    function CfnSpotFleetLaunchTemplateConfigPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("launchTemplateSpecification", "LaunchTemplateSpecification", properties.LaunchTemplateSpecification != null ? CfnSpotFleetFleetLaunchTemplateSpecificationPropertyFromCloudFormation(properties.LaunchTemplateSpecification) : void 0);
      ret.addPropertyResult("overrides", "Overrides", properties.Overrides != null ? cfn_parse.FromCloudFormation.getArray(CfnSpotFleetLaunchTemplateOverridesPropertyFromCloudFormation)(properties.Overrides) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_LaunchTemplateOverridesPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("availabilityZone", cdk.validateString)(properties.availabilityZone));
      errors.collect(cdk.propertyValidator("instanceRequirements", CfnSpotFleet_InstanceRequirementsRequestPropertyValidator)(properties.instanceRequirements));
      errors.collect(cdk.propertyValidator("instanceType", cdk.validateString)(properties.instanceType));
      errors.collect(cdk.propertyValidator("spotPrice", cdk.validateString)(properties.spotPrice));
      errors.collect(cdk.propertyValidator("subnetId", cdk.validateString)(properties.subnetId));
      errors.collect(cdk.propertyValidator("weightedCapacity", cdk.validateNumber)(properties.weightedCapacity));
      return errors.wrap('supplied properties not correct for "LaunchTemplateOverridesProperty"');
    }
    function cfnSpotFleetLaunchTemplateOverridesPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_LaunchTemplateOverridesPropertyValidator(properties).assertSuccess();
      return {
        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),
        InstanceRequirements: cfnSpotFleetInstanceRequirementsRequestPropertyToCloudFormation(properties.instanceRequirements),
        InstanceType: cdk.stringToCloudFormation(properties.instanceType),
        SpotPrice: cdk.stringToCloudFormation(properties.spotPrice),
        SubnetId: cdk.stringToCloudFormation(properties.subnetId),
        WeightedCapacity: cdk.numberToCloudFormation(properties.weightedCapacity)
      };
    }
    function CfnSpotFleetLaunchTemplateOverridesPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("availabilityZone", "AvailabilityZone", properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : void 0);
      ret.addPropertyResult("instanceRequirements", "InstanceRequirements", properties.InstanceRequirements != null ? CfnSpotFleetInstanceRequirementsRequestPropertyFromCloudFormation(properties.InstanceRequirements) : void 0);
      ret.addPropertyResult("instanceType", "InstanceType", properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : void 0);
      ret.addPropertyResult("spotPrice", "SpotPrice", properties.SpotPrice != null ? cfn_parse.FromCloudFormation.getString(properties.SpotPrice) : void 0);
      ret.addPropertyResult("subnetId", "SubnetId", properties.SubnetId != null ? cfn_parse.FromCloudFormation.getString(properties.SubnetId) : void 0);
      ret.addPropertyResult("weightedCapacity", "WeightedCapacity", properties.WeightedCapacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.WeightedCapacity) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_LoadBalancersConfigPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("classicLoadBalancersConfig", CfnSpotFleet_ClassicLoadBalancersConfigPropertyValidator)(properties.classicLoadBalancersConfig));
      errors.collect(cdk.propertyValidator("targetGroupsConfig", CfnSpotFleet_TargetGroupsConfigPropertyValidator)(properties.targetGroupsConfig));
      return errors.wrap('supplied properties not correct for "LoadBalancersConfigProperty"');
    }
    function cfnSpotFleetLoadBalancersConfigPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_LoadBalancersConfigPropertyValidator(properties).assertSuccess();
      return {
        ClassicLoadBalancersConfig: cfnSpotFleetClassicLoadBalancersConfigPropertyToCloudFormation(properties.classicLoadBalancersConfig),
        TargetGroupsConfig: cfnSpotFleetTargetGroupsConfigPropertyToCloudFormation(properties.targetGroupsConfig)
      };
    }
    function CfnSpotFleetLoadBalancersConfigPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("classicLoadBalancersConfig", "ClassicLoadBalancersConfig", properties.ClassicLoadBalancersConfig != null ? CfnSpotFleetClassicLoadBalancersConfigPropertyFromCloudFormation(properties.ClassicLoadBalancersConfig) : void 0);
      ret.addPropertyResult("targetGroupsConfig", "TargetGroupsConfig", properties.TargetGroupsConfig != null ? CfnSpotFleetTargetGroupsConfigPropertyFromCloudFormation(properties.TargetGroupsConfig) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_MemoryGiBPerVCpuRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("max", cdk.validateNumber)(properties.max));
      errors.collect(cdk.propertyValidator("min", cdk.validateNumber)(properties.min));
      return errors.wrap('supplied properties not correct for "MemoryGiBPerVCpuRequestProperty"');
    }
    function cfnSpotFleetMemoryGiBPerVCpuRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_MemoryGiBPerVCpuRequestPropertyValidator(properties).assertSuccess();
      return {
        Max: cdk.numberToCloudFormation(properties.max),
        Min: cdk.numberToCloudFormation(properties.min)
      };
    }
    function CfnSpotFleetMemoryGiBPerVCpuRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("max", "Max", properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : void 0);
      ret.addPropertyResult("min", "Min", properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_MemoryMiBRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("max", cdk.validateNumber)(properties.max));
      errors.collect(cdk.propertyValidator("min", cdk.validateNumber)(properties.min));
      return errors.wrap('supplied properties not correct for "MemoryMiBRequestProperty"');
    }
    function cfnSpotFleetMemoryMiBRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_MemoryMiBRequestPropertyValidator(properties).assertSuccess();
      return {
        Max: cdk.numberToCloudFormation(properties.max),
        Min: cdk.numberToCloudFormation(properties.min)
      };
    }
    function CfnSpotFleetMemoryMiBRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("max", "Max", properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : void 0);
      ret.addPropertyResult("min", "Min", properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_NetworkInterfaceCountRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("max", cdk.validateNumber)(properties.max));
      errors.collect(cdk.propertyValidator("min", cdk.validateNumber)(properties.min));
      return errors.wrap('supplied properties not correct for "NetworkInterfaceCountRequestProperty"');
    }
    function cfnSpotFleetNetworkInterfaceCountRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_NetworkInterfaceCountRequestPropertyValidator(properties).assertSuccess();
      return {
        Max: cdk.numberToCloudFormation(properties.max),
        Min: cdk.numberToCloudFormation(properties.min)
      };
    }
    function CfnSpotFleetNetworkInterfaceCountRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("max", "Max", properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : void 0);
      ret.addPropertyResult("min", "Min", properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_PrivateIpAddressSpecificationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("primary", cdk.validateBoolean)(properties.primary));
      errors.collect(cdk.propertyValidator("privateIpAddress", cdk.requiredValidator)(properties.privateIpAddress));
      errors.collect(cdk.propertyValidator("privateIpAddress", cdk.validateString)(properties.privateIpAddress));
      return errors.wrap('supplied properties not correct for "PrivateIpAddressSpecificationProperty"');
    }
    function cfnSpotFleetPrivateIpAddressSpecificationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_PrivateIpAddressSpecificationPropertyValidator(properties).assertSuccess();
      return {
        Primary: cdk.booleanToCloudFormation(properties.primary),
        PrivateIpAddress: cdk.stringToCloudFormation(properties.privateIpAddress)
      };
    }
    function CfnSpotFleetPrivateIpAddressSpecificationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("primary", "Primary", properties.Primary != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Primary) : void 0);
      ret.addPropertyResult("privateIpAddress", "PrivateIpAddress", cfn_parse.FromCloudFormation.getString(properties.PrivateIpAddress));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_SpotCapacityRebalancePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("replacementStrategy", cdk.validateString)(properties.replacementStrategy));
      errors.collect(cdk.propertyValidator("terminationDelay", cdk.validateNumber)(properties.terminationDelay));
      return errors.wrap('supplied properties not correct for "SpotCapacityRebalanceProperty"');
    }
    function cfnSpotFleetSpotCapacityRebalancePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_SpotCapacityRebalancePropertyValidator(properties).assertSuccess();
      return {
        ReplacementStrategy: cdk.stringToCloudFormation(properties.replacementStrategy),
        TerminationDelay: cdk.numberToCloudFormation(properties.terminationDelay)
      };
    }
    function CfnSpotFleetSpotCapacityRebalancePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("replacementStrategy", "ReplacementStrategy", properties.ReplacementStrategy != null ? cfn_parse.FromCloudFormation.getString(properties.ReplacementStrategy) : void 0);
      ret.addPropertyResult("terminationDelay", "TerminationDelay", properties.TerminationDelay != null ? cfn_parse.FromCloudFormation.getNumber(properties.TerminationDelay) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_SpotFleetLaunchSpecificationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("blockDeviceMappings", cdk.listValidator(CfnSpotFleet_BlockDeviceMappingPropertyValidator))(properties.blockDeviceMappings));
      errors.collect(cdk.propertyValidator("ebsOptimized", cdk.validateBoolean)(properties.ebsOptimized));
      errors.collect(cdk.propertyValidator("iamInstanceProfile", CfnSpotFleet_IamInstanceProfileSpecificationPropertyValidator)(properties.iamInstanceProfile));
      errors.collect(cdk.propertyValidator("imageId", cdk.requiredValidator)(properties.imageId));
      errors.collect(cdk.propertyValidator("imageId", cdk.validateString)(properties.imageId));
      errors.collect(cdk.propertyValidator("instanceRequirements", CfnSpotFleet_InstanceRequirementsRequestPropertyValidator)(properties.instanceRequirements));
      errors.collect(cdk.propertyValidator("instanceType", cdk.validateString)(properties.instanceType));
      errors.collect(cdk.propertyValidator("kernelId", cdk.validateString)(properties.kernelId));
      errors.collect(cdk.propertyValidator("keyName", cdk.validateString)(properties.keyName));
      errors.collect(cdk.propertyValidator("monitoring", CfnSpotFleet_SpotFleetMonitoringPropertyValidator)(properties.monitoring));
      errors.collect(cdk.propertyValidator("networkInterfaces", cdk.listValidator(CfnSpotFleet_InstanceNetworkInterfaceSpecificationPropertyValidator))(properties.networkInterfaces));
      errors.collect(cdk.propertyValidator("placement", CfnSpotFleet_SpotPlacementPropertyValidator)(properties.placement));
      errors.collect(cdk.propertyValidator("ramdiskId", cdk.validateString)(properties.ramdiskId));
      errors.collect(cdk.propertyValidator("securityGroups", cdk.listValidator(CfnSpotFleet_GroupIdentifierPropertyValidator))(properties.securityGroups));
      errors.collect(cdk.propertyValidator("spotPrice", cdk.validateString)(properties.spotPrice));
      errors.collect(cdk.propertyValidator("subnetId", cdk.validateString)(properties.subnetId));
      errors.collect(cdk.propertyValidator("tagSpecifications", cdk.listValidator(CfnSpotFleet_SpotFleetTagSpecificationPropertyValidator))(properties.tagSpecifications));
      errors.collect(cdk.propertyValidator("userData", cdk.validateString)(properties.userData));
      errors.collect(cdk.propertyValidator("weightedCapacity", cdk.validateNumber)(properties.weightedCapacity));
      return errors.wrap('supplied properties not correct for "SpotFleetLaunchSpecificationProperty"');
    }
    function cfnSpotFleetSpotFleetLaunchSpecificationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_SpotFleetLaunchSpecificationPropertyValidator(properties).assertSuccess();
      return {
        BlockDeviceMappings: cdk.listMapper(cfnSpotFleetBlockDeviceMappingPropertyToCloudFormation)(properties.blockDeviceMappings),
        EbsOptimized: cdk.booleanToCloudFormation(properties.ebsOptimized),
        IamInstanceProfile: cfnSpotFleetIamInstanceProfileSpecificationPropertyToCloudFormation(properties.iamInstanceProfile),
        ImageId: cdk.stringToCloudFormation(properties.imageId),
        InstanceRequirements: cfnSpotFleetInstanceRequirementsRequestPropertyToCloudFormation(properties.instanceRequirements),
        InstanceType: cdk.stringToCloudFormation(properties.instanceType),
        KernelId: cdk.stringToCloudFormation(properties.kernelId),
        KeyName: cdk.stringToCloudFormation(properties.keyName),
        Monitoring: cfnSpotFleetSpotFleetMonitoringPropertyToCloudFormation(properties.monitoring),
        NetworkInterfaces: cdk.listMapper(cfnSpotFleetInstanceNetworkInterfaceSpecificationPropertyToCloudFormation)(properties.networkInterfaces),
        Placement: cfnSpotFleetSpotPlacementPropertyToCloudFormation(properties.placement),
        RamdiskId: cdk.stringToCloudFormation(properties.ramdiskId),
        SecurityGroups: cdk.listMapper(cfnSpotFleetGroupIdentifierPropertyToCloudFormation)(properties.securityGroups),
        SpotPrice: cdk.stringToCloudFormation(properties.spotPrice),
        SubnetId: cdk.stringToCloudFormation(properties.subnetId),
        TagSpecifications: cdk.listMapper(cfnSpotFleetSpotFleetTagSpecificationPropertyToCloudFormation)(properties.tagSpecifications),
        UserData: cdk.stringToCloudFormation(properties.userData),
        WeightedCapacity: cdk.numberToCloudFormation(properties.weightedCapacity)
      };
    }
    function CfnSpotFleetSpotFleetLaunchSpecificationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("blockDeviceMappings", "BlockDeviceMappings", properties.BlockDeviceMappings != null ? cfn_parse.FromCloudFormation.getArray(CfnSpotFleetBlockDeviceMappingPropertyFromCloudFormation)(properties.BlockDeviceMappings) : void 0);
      ret.addPropertyResult("ebsOptimized", "EbsOptimized", properties.EbsOptimized != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EbsOptimized) : void 0);
      ret.addPropertyResult("iamInstanceProfile", "IamInstanceProfile", properties.IamInstanceProfile != null ? CfnSpotFleetIamInstanceProfileSpecificationPropertyFromCloudFormation(properties.IamInstanceProfile) : void 0);
      ret.addPropertyResult("imageId", "ImageId", cfn_parse.FromCloudFormation.getString(properties.ImageId));
      ret.addPropertyResult("instanceRequirements", "InstanceRequirements", properties.InstanceRequirements != null ? CfnSpotFleetInstanceRequirementsRequestPropertyFromCloudFormation(properties.InstanceRequirements) : void 0);
      ret.addPropertyResult("instanceType", "InstanceType", properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : void 0);
      ret.addPropertyResult("kernelId", "KernelId", properties.KernelId != null ? cfn_parse.FromCloudFormation.getString(properties.KernelId) : void 0);
      ret.addPropertyResult("keyName", "KeyName", properties.KeyName != null ? cfn_parse.FromCloudFormation.getString(properties.KeyName) : void 0);
      ret.addPropertyResult("monitoring", "Monitoring", properties.Monitoring != null ? CfnSpotFleetSpotFleetMonitoringPropertyFromCloudFormation(properties.Monitoring) : void 0);
      ret.addPropertyResult("networkInterfaces", "NetworkInterfaces", properties.NetworkInterfaces != null ? cfn_parse.FromCloudFormation.getArray(CfnSpotFleetInstanceNetworkInterfaceSpecificationPropertyFromCloudFormation)(properties.NetworkInterfaces) : void 0);
      ret.addPropertyResult("placement", "Placement", properties.Placement != null ? CfnSpotFleetSpotPlacementPropertyFromCloudFormation(properties.Placement) : void 0);
      ret.addPropertyResult("ramdiskId", "RamdiskId", properties.RamdiskId != null ? cfn_parse.FromCloudFormation.getString(properties.RamdiskId) : void 0);
      ret.addPropertyResult("securityGroups", "SecurityGroups", properties.SecurityGroups != null ? cfn_parse.FromCloudFormation.getArray(CfnSpotFleetGroupIdentifierPropertyFromCloudFormation)(properties.SecurityGroups) : void 0);
      ret.addPropertyResult("spotPrice", "SpotPrice", properties.SpotPrice != null ? cfn_parse.FromCloudFormation.getString(properties.SpotPrice) : void 0);
      ret.addPropertyResult("subnetId", "SubnetId", properties.SubnetId != null ? cfn_parse.FromCloudFormation.getString(properties.SubnetId) : void 0);
      ret.addPropertyResult("tagSpecifications", "TagSpecifications", properties.TagSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnSpotFleetSpotFleetTagSpecificationPropertyFromCloudFormation)(properties.TagSpecifications) : void 0);
      ret.addPropertyResult("userData", "UserData", properties.UserData != null ? cfn_parse.FromCloudFormation.getString(properties.UserData) : void 0);
      ret.addPropertyResult("weightedCapacity", "WeightedCapacity", properties.WeightedCapacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.WeightedCapacity) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_SpotFleetMonitoringPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("enabled", cdk.validateBoolean)(properties.enabled));
      return errors.wrap('supplied properties not correct for "SpotFleetMonitoringProperty"');
    }
    function cfnSpotFleetSpotFleetMonitoringPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_SpotFleetMonitoringPropertyValidator(properties).assertSuccess();
      return {
        Enabled: cdk.booleanToCloudFormation(properties.enabled)
      };
    }
    function CfnSpotFleetSpotFleetMonitoringPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("enabled", "Enabled", properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_SpotFleetRequestConfigDataPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("allocationStrategy", cdk.validateString)(properties.allocationStrategy));
      errors.collect(cdk.propertyValidator("context", cdk.validateString)(properties.context));
      errors.collect(cdk.propertyValidator("excessCapacityTerminationPolicy", cdk.validateString)(properties.excessCapacityTerminationPolicy));
      errors.collect(cdk.propertyValidator("iamFleetRole", cdk.requiredValidator)(properties.iamFleetRole));
      errors.collect(cdk.propertyValidator("iamFleetRole", cdk.validateString)(properties.iamFleetRole));
      errors.collect(cdk.propertyValidator("instanceInterruptionBehavior", cdk.validateString)(properties.instanceInterruptionBehavior));
      errors.collect(cdk.propertyValidator("instancePoolsToUseCount", cdk.validateNumber)(properties.instancePoolsToUseCount));
      errors.collect(cdk.propertyValidator("launchSpecifications", cdk.listValidator(CfnSpotFleet_SpotFleetLaunchSpecificationPropertyValidator))(properties.launchSpecifications));
      errors.collect(cdk.propertyValidator("launchTemplateConfigs", cdk.listValidator(CfnSpotFleet_LaunchTemplateConfigPropertyValidator))(properties.launchTemplateConfigs));
      errors.collect(cdk.propertyValidator("loadBalancersConfig", CfnSpotFleet_LoadBalancersConfigPropertyValidator)(properties.loadBalancersConfig));
      errors.collect(cdk.propertyValidator("onDemandAllocationStrategy", cdk.validateString)(properties.onDemandAllocationStrategy));
      errors.collect(cdk.propertyValidator("onDemandMaxTotalPrice", cdk.validateString)(properties.onDemandMaxTotalPrice));
      errors.collect(cdk.propertyValidator("onDemandTargetCapacity", cdk.validateNumber)(properties.onDemandTargetCapacity));
      errors.collect(cdk.propertyValidator("replaceUnhealthyInstances", cdk.validateBoolean)(properties.replaceUnhealthyInstances));
      errors.collect(cdk.propertyValidator("spotMaintenanceStrategies", CfnSpotFleet_SpotMaintenanceStrategiesPropertyValidator)(properties.spotMaintenanceStrategies));
      errors.collect(cdk.propertyValidator("spotMaxTotalPrice", cdk.validateString)(properties.spotMaxTotalPrice));
      errors.collect(cdk.propertyValidator("spotPrice", cdk.validateString)(properties.spotPrice));
      errors.collect(cdk.propertyValidator("targetCapacity", cdk.requiredValidator)(properties.targetCapacity));
      errors.collect(cdk.propertyValidator("targetCapacity", cdk.validateNumber)(properties.targetCapacity));
      errors.collect(cdk.propertyValidator("targetCapacityUnitType", cdk.validateString)(properties.targetCapacityUnitType));
      errors.collect(cdk.propertyValidator("terminateInstancesWithExpiration", cdk.validateBoolean)(properties.terminateInstancesWithExpiration));
      errors.collect(cdk.propertyValidator("type", cdk.validateString)(properties.type));
      errors.collect(cdk.propertyValidator("validFrom", cdk.validateString)(properties.validFrom));
      errors.collect(cdk.propertyValidator("validUntil", cdk.validateString)(properties.validUntil));
      return errors.wrap('supplied properties not correct for "SpotFleetRequestConfigDataProperty"');
    }
    function cfnSpotFleetSpotFleetRequestConfigDataPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_SpotFleetRequestConfigDataPropertyValidator(properties).assertSuccess();
      return {
        AllocationStrategy: cdk.stringToCloudFormation(properties.allocationStrategy),
        Context: cdk.stringToCloudFormation(properties.context),
        ExcessCapacityTerminationPolicy: cdk.stringToCloudFormation(properties.excessCapacityTerminationPolicy),
        IamFleetRole: cdk.stringToCloudFormation(properties.iamFleetRole),
        InstanceInterruptionBehavior: cdk.stringToCloudFormation(properties.instanceInterruptionBehavior),
        InstancePoolsToUseCount: cdk.numberToCloudFormation(properties.instancePoolsToUseCount),
        LaunchSpecifications: cdk.listMapper(cfnSpotFleetSpotFleetLaunchSpecificationPropertyToCloudFormation)(properties.launchSpecifications),
        LaunchTemplateConfigs: cdk.listMapper(cfnSpotFleetLaunchTemplateConfigPropertyToCloudFormation)(properties.launchTemplateConfigs),
        LoadBalancersConfig: cfnSpotFleetLoadBalancersConfigPropertyToCloudFormation(properties.loadBalancersConfig),
        OnDemandAllocationStrategy: cdk.stringToCloudFormation(properties.onDemandAllocationStrategy),
        OnDemandMaxTotalPrice: cdk.stringToCloudFormation(properties.onDemandMaxTotalPrice),
        OnDemandTargetCapacity: cdk.numberToCloudFormation(properties.onDemandTargetCapacity),
        ReplaceUnhealthyInstances: cdk.booleanToCloudFormation(properties.replaceUnhealthyInstances),
        SpotMaintenanceStrategies: cfnSpotFleetSpotMaintenanceStrategiesPropertyToCloudFormation(properties.spotMaintenanceStrategies),
        SpotMaxTotalPrice: cdk.stringToCloudFormation(properties.spotMaxTotalPrice),
        SpotPrice: cdk.stringToCloudFormation(properties.spotPrice),
        TargetCapacity: cdk.numberToCloudFormation(properties.targetCapacity),
        TargetCapacityUnitType: cdk.stringToCloudFormation(properties.targetCapacityUnitType),
        TerminateInstancesWithExpiration: cdk.booleanToCloudFormation(properties.terminateInstancesWithExpiration),
        Type: cdk.stringToCloudFormation(properties.type),
        ValidFrom: cdk.stringToCloudFormation(properties.validFrom),
        ValidUntil: cdk.stringToCloudFormation(properties.validUntil)
      };
    }
    function CfnSpotFleetSpotFleetRequestConfigDataPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("allocationStrategy", "AllocationStrategy", properties.AllocationStrategy != null ? cfn_parse.FromCloudFormation.getString(properties.AllocationStrategy) : void 0);
      ret.addPropertyResult("context", "Context", properties.Context != null ? cfn_parse.FromCloudFormation.getString(properties.Context) : void 0);
      ret.addPropertyResult("excessCapacityTerminationPolicy", "ExcessCapacityTerminationPolicy", properties.ExcessCapacityTerminationPolicy != null ? cfn_parse.FromCloudFormation.getString(properties.ExcessCapacityTerminationPolicy) : void 0);
      ret.addPropertyResult("iamFleetRole", "IamFleetRole", cfn_parse.FromCloudFormation.getString(properties.IamFleetRole));
      ret.addPropertyResult("instanceInterruptionBehavior", "InstanceInterruptionBehavior", properties.InstanceInterruptionBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceInterruptionBehavior) : void 0);
      ret.addPropertyResult("instancePoolsToUseCount", "InstancePoolsToUseCount", properties.InstancePoolsToUseCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.InstancePoolsToUseCount) : void 0);
      ret.addPropertyResult("launchSpecifications", "LaunchSpecifications", properties.LaunchSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnSpotFleetSpotFleetLaunchSpecificationPropertyFromCloudFormation)(properties.LaunchSpecifications) : void 0);
      ret.addPropertyResult("launchTemplateConfigs", "LaunchTemplateConfigs", properties.LaunchTemplateConfigs != null ? cfn_parse.FromCloudFormation.getArray(CfnSpotFleetLaunchTemplateConfigPropertyFromCloudFormation)(properties.LaunchTemplateConfigs) : void 0);
      ret.addPropertyResult("loadBalancersConfig", "LoadBalancersConfig", properties.LoadBalancersConfig != null ? CfnSpotFleetLoadBalancersConfigPropertyFromCloudFormation(properties.LoadBalancersConfig) : void 0);
      ret.addPropertyResult("onDemandAllocationStrategy", "OnDemandAllocationStrategy", properties.OnDemandAllocationStrategy != null ? cfn_parse.FromCloudFormation.getString(properties.OnDemandAllocationStrategy) : void 0);
      ret.addPropertyResult("onDemandMaxTotalPrice", "OnDemandMaxTotalPrice", properties.OnDemandMaxTotalPrice != null ? cfn_parse.FromCloudFormation.getString(properties.OnDemandMaxTotalPrice) : void 0);
      ret.addPropertyResult("onDemandTargetCapacity", "OnDemandTargetCapacity", properties.OnDemandTargetCapacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.OnDemandTargetCapacity) : void 0);
      ret.addPropertyResult("replaceUnhealthyInstances", "ReplaceUnhealthyInstances", properties.ReplaceUnhealthyInstances != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ReplaceUnhealthyInstances) : void 0);
      ret.addPropertyResult("spotMaintenanceStrategies", "SpotMaintenanceStrategies", properties.SpotMaintenanceStrategies != null ? CfnSpotFleetSpotMaintenanceStrategiesPropertyFromCloudFormation(properties.SpotMaintenanceStrategies) : void 0);
      ret.addPropertyResult("spotMaxTotalPrice", "SpotMaxTotalPrice", properties.SpotMaxTotalPrice != null ? cfn_parse.FromCloudFormation.getString(properties.SpotMaxTotalPrice) : void 0);
      ret.addPropertyResult("spotPrice", "SpotPrice", properties.SpotPrice != null ? cfn_parse.FromCloudFormation.getString(properties.SpotPrice) : void 0);
      ret.addPropertyResult("targetCapacity", "TargetCapacity", cfn_parse.FromCloudFormation.getNumber(properties.TargetCapacity));
      ret.addPropertyResult("targetCapacityUnitType", "TargetCapacityUnitType", properties.TargetCapacityUnitType != null ? cfn_parse.FromCloudFormation.getString(properties.TargetCapacityUnitType) : void 0);
      ret.addPropertyResult("terminateInstancesWithExpiration", "TerminateInstancesWithExpiration", properties.TerminateInstancesWithExpiration != null ? cfn_parse.FromCloudFormation.getBoolean(properties.TerminateInstancesWithExpiration) : void 0);
      ret.addPropertyResult("type", "Type", properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : void 0);
      ret.addPropertyResult("validFrom", "ValidFrom", properties.ValidFrom != null ? cfn_parse.FromCloudFormation.getString(properties.ValidFrom) : void 0);
      ret.addPropertyResult("validUntil", "ValidUntil", properties.ValidUntil != null ? cfn_parse.FromCloudFormation.getString(properties.ValidUntil) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_SpotFleetTagSpecificationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("resourceType", cdk.validateString)(properties.resourceType));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "SpotFleetTagSpecificationProperty"');
    }
    function cfnSpotFleetSpotFleetTagSpecificationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_SpotFleetTagSpecificationPropertyValidator(properties).assertSuccess();
      return {
        ResourceType: cdk.stringToCloudFormation(properties.resourceType),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnSpotFleetSpotFleetTagSpecificationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("resourceType", "ResourceType", properties.ResourceType != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceType) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_SpotMaintenanceStrategiesPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("capacityRebalance", CfnSpotFleet_SpotCapacityRebalancePropertyValidator)(properties.capacityRebalance));
      return errors.wrap('supplied properties not correct for "SpotMaintenanceStrategiesProperty"');
    }
    function cfnSpotFleetSpotMaintenanceStrategiesPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_SpotMaintenanceStrategiesPropertyValidator(properties).assertSuccess();
      return {
        CapacityRebalance: cfnSpotFleetSpotCapacityRebalancePropertyToCloudFormation(properties.capacityRebalance)
      };
    }
    function CfnSpotFleetSpotMaintenanceStrategiesPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("capacityRebalance", "CapacityRebalance", properties.CapacityRebalance != null ? CfnSpotFleetSpotCapacityRebalancePropertyFromCloudFormation(properties.CapacityRebalance) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_SpotPlacementPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("availabilityZone", cdk.validateString)(properties.availabilityZone));
      errors.collect(cdk.propertyValidator("groupName", cdk.validateString)(properties.groupName));
      errors.collect(cdk.propertyValidator("tenancy", cdk.validateString)(properties.tenancy));
      return errors.wrap('supplied properties not correct for "SpotPlacementProperty"');
    }
    function cfnSpotFleetSpotPlacementPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_SpotPlacementPropertyValidator(properties).assertSuccess();
      return {
        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),
        GroupName: cdk.stringToCloudFormation(properties.groupName),
        Tenancy: cdk.stringToCloudFormation(properties.tenancy)
      };
    }
    function CfnSpotFleetSpotPlacementPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("availabilityZone", "AvailabilityZone", properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : void 0);
      ret.addPropertyResult("groupName", "GroupName", properties.GroupName != null ? cfn_parse.FromCloudFormation.getString(properties.GroupName) : void 0);
      ret.addPropertyResult("tenancy", "Tenancy", properties.Tenancy != null ? cfn_parse.FromCloudFormation.getString(properties.Tenancy) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_TargetGroupPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("arn", cdk.requiredValidator)(properties.arn));
      errors.collect(cdk.propertyValidator("arn", cdk.validateString)(properties.arn));
      return errors.wrap('supplied properties not correct for "TargetGroupProperty"');
    }
    function cfnSpotFleetTargetGroupPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_TargetGroupPropertyValidator(properties).assertSuccess();
      return {
        Arn: cdk.stringToCloudFormation(properties.arn)
      };
    }
    function CfnSpotFleetTargetGroupPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("arn", "Arn", cfn_parse.FromCloudFormation.getString(properties.Arn));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_TargetGroupsConfigPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("targetGroups", cdk.requiredValidator)(properties.targetGroups));
      errors.collect(cdk.propertyValidator("targetGroups", cdk.listValidator(CfnSpotFleet_TargetGroupPropertyValidator))(properties.targetGroups));
      return errors.wrap('supplied properties not correct for "TargetGroupsConfigProperty"');
    }
    function cfnSpotFleetTargetGroupsConfigPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_TargetGroupsConfigPropertyValidator(properties).assertSuccess();
      return {
        TargetGroups: cdk.listMapper(cfnSpotFleetTargetGroupPropertyToCloudFormation)(properties.targetGroups)
      };
    }
    function CfnSpotFleetTargetGroupsConfigPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("targetGroups", "TargetGroups", cfn_parse.FromCloudFormation.getArray(CfnSpotFleetTargetGroupPropertyFromCloudFormation)(properties.TargetGroups));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_TotalLocalStorageGBRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("max", cdk.validateNumber)(properties.max));
      errors.collect(cdk.propertyValidator("min", cdk.validateNumber)(properties.min));
      return errors.wrap('supplied properties not correct for "TotalLocalStorageGBRequestProperty"');
    }
    function cfnSpotFleetTotalLocalStorageGBRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_TotalLocalStorageGBRequestPropertyValidator(properties).assertSuccess();
      return {
        Max: cdk.numberToCloudFormation(properties.max),
        Min: cdk.numberToCloudFormation(properties.min)
      };
    }
    function CfnSpotFleetTotalLocalStorageGBRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("max", "Max", properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : void 0);
      ret.addPropertyResult("min", "Min", properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSpotFleet_VCpuCountRangeRequestPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("max", cdk.validateNumber)(properties.max));
      errors.collect(cdk.propertyValidator("min", cdk.validateNumber)(properties.min));
      return errors.wrap('supplied properties not correct for "VCpuCountRangeRequestProperty"');
    }
    function cfnSpotFleetVCpuCountRangeRequestPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSpotFleet_VCpuCountRangeRequestPropertyValidator(properties).assertSuccess();
      return {
        Max: cdk.numberToCloudFormation(properties.max),
        Min: cdk.numberToCloudFormation(properties.min)
      };
    }
    function CfnSpotFleetVCpuCountRangeRequestPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("max", "Max", properties.Max != null ? cfn_parse.FromCloudFormation.getNumber(properties.Max) : void 0);
      ret.addPropertyResult("min", "Min", properties.Min != null ? cfn_parse.FromCloudFormation.getNumber(properties.Min) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnSubnetPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("assignIpv6AddressOnCreation", cdk.validateBoolean)(properties.assignIpv6AddressOnCreation));
      errors.collect(cdk.propertyValidator("availabilityZone", cdk.validateString)(properties.availabilityZone));
      errors.collect(cdk.propertyValidator("cidrBlock", cdk.requiredValidator)(properties.cidrBlock));
      errors.collect(cdk.propertyValidator("cidrBlock", cdk.validateString)(properties.cidrBlock));
      errors.collect(cdk.propertyValidator("ipv6CidrBlock", cdk.validateString)(properties.ipv6CidrBlock));
      errors.collect(cdk.propertyValidator("mapPublicIpOnLaunch", cdk.validateBoolean)(properties.mapPublicIpOnLaunch));
      errors.collect(cdk.propertyValidator("outpostArn", cdk.validateString)(properties.outpostArn));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("vpcId", cdk.requiredValidator)(properties.vpcId));
      errors.collect(cdk.propertyValidator("vpcId", cdk.validateString)(properties.vpcId));
      return errors.wrap('supplied properties not correct for "CfnSubnetProps"');
    }
    function cfnSubnetPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSubnetPropsValidator(properties).assertSuccess();
      return {
        CidrBlock: cdk.stringToCloudFormation(properties.cidrBlock),
        VpcId: cdk.stringToCloudFormation(properties.vpcId),
        AssignIpv6AddressOnCreation: cdk.booleanToCloudFormation(properties.assignIpv6AddressOnCreation),
        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),
        Ipv6CidrBlock: cdk.stringToCloudFormation(properties.ipv6CidrBlock),
        MapPublicIpOnLaunch: cdk.booleanToCloudFormation(properties.mapPublicIpOnLaunch),
        OutpostArn: cdk.stringToCloudFormation(properties.outpostArn),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnSubnetPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("cidrBlock", "CidrBlock", cfn_parse.FromCloudFormation.getString(properties.CidrBlock));
      ret.addPropertyResult("vpcId", "VpcId", cfn_parse.FromCloudFormation.getString(properties.VpcId));
      ret.addPropertyResult("assignIpv6AddressOnCreation", "AssignIpv6AddressOnCreation", properties.AssignIpv6AddressOnCreation != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AssignIpv6AddressOnCreation) : void 0);
      ret.addPropertyResult("availabilityZone", "AvailabilityZone", properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : void 0);
      ret.addPropertyResult("ipv6CidrBlock", "Ipv6CidrBlock", properties.Ipv6CidrBlock != null ? cfn_parse.FromCloudFormation.getString(properties.Ipv6CidrBlock) : void 0);
      ret.addPropertyResult("mapPublicIpOnLaunch", "MapPublicIpOnLaunch", properties.MapPublicIpOnLaunch != null ? cfn_parse.FromCloudFormation.getBoolean(properties.MapPublicIpOnLaunch) : void 0);
      ret.addPropertyResult("outpostArn", "OutpostArn", properties.OutpostArn != null ? cfn_parse.FromCloudFormation.getString(properties.OutpostArn) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnSubnet = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnSubnet.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "cidrBlock", this);
        cdk.requireProperty(props, "vpcId", this);
        this.attrAvailabilityZone = cdk.Token.asString(this.getAtt("AvailabilityZone"));
        this.attrIpv6CidrBlocks = cdk.Token.asList(this.getAtt("Ipv6CidrBlocks"));
        this.attrNetworkAclAssociationId = cdk.Token.asString(this.getAtt("NetworkAclAssociationId"));
        this.attrOutpostArn = cdk.Token.asString(this.getAtt("OutpostArn"));
        this.attrVpcId = cdk.Token.asString(this.getAtt("VpcId"));
        this.cidrBlock = props.cidrBlock;
        this.vpcId = props.vpcId;
        this.assignIpv6AddressOnCreation = props.assignIpv6AddressOnCreation;
        this.availabilityZone = props.availabilityZone;
        this.ipv6CidrBlock = props.ipv6CidrBlock;
        this.mapPublicIpOnLaunch = props.mapPublicIpOnLaunch;
        this.outpostArn = props.outpostArn;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::Subnet", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnSubnetPropsFromCloudFormation(resourceProperties);
        const ret = new CfnSubnet(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnSubnet.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          cidrBlock: this.cidrBlock,
          vpcId: this.vpcId,
          assignIpv6AddressOnCreation: this.assignIpv6AddressOnCreation,
          availabilityZone: this.availabilityZone,
          ipv6CidrBlock: this.ipv6CidrBlock,
          mapPublicIpOnLaunch: this.mapPublicIpOnLaunch,
          outpostArn: this.outpostArn,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnSubnetPropsToCloudFormation(props);
      }
    };
    exports2.CfnSubnet = CfnSubnet;
    _14 = JSII_RTTI_SYMBOL_1;
    CfnSubnet[_14] = { fqn: "@aws-cdk/aws-ec2.CfnSubnet", version: "1.132.0" };
    CfnSubnet.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::Subnet";
    function CfnSubnetCidrBlockPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("ipv6CidrBlock", cdk.requiredValidator)(properties.ipv6CidrBlock));
      errors.collect(cdk.propertyValidator("ipv6CidrBlock", cdk.validateString)(properties.ipv6CidrBlock));
      errors.collect(cdk.propertyValidator("subnetId", cdk.requiredValidator)(properties.subnetId));
      errors.collect(cdk.propertyValidator("subnetId", cdk.validateString)(properties.subnetId));
      return errors.wrap('supplied properties not correct for "CfnSubnetCidrBlockProps"');
    }
    function cfnSubnetCidrBlockPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSubnetCidrBlockPropsValidator(properties).assertSuccess();
      return {
        Ipv6CidrBlock: cdk.stringToCloudFormation(properties.ipv6CidrBlock),
        SubnetId: cdk.stringToCloudFormation(properties.subnetId)
      };
    }
    function CfnSubnetCidrBlockPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("ipv6CidrBlock", "Ipv6CidrBlock", cfn_parse.FromCloudFormation.getString(properties.Ipv6CidrBlock));
      ret.addPropertyResult("subnetId", "SubnetId", cfn_parse.FromCloudFormation.getString(properties.SubnetId));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnSubnetCidrBlock = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnSubnetCidrBlock.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "ipv6CidrBlock", this);
        cdk.requireProperty(props, "subnetId", this);
        this.ipv6CidrBlock = props.ipv6CidrBlock;
        this.subnetId = props.subnetId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnSubnetCidrBlockPropsFromCloudFormation(resourceProperties);
        const ret = new CfnSubnetCidrBlock(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnSubnetCidrBlock.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          ipv6CidrBlock: this.ipv6CidrBlock,
          subnetId: this.subnetId
        };
      }
      renderProperties(props) {
        return cfnSubnetCidrBlockPropsToCloudFormation(props);
      }
    };
    exports2.CfnSubnetCidrBlock = CfnSubnetCidrBlock;
    _15 = JSII_RTTI_SYMBOL_1;
    CfnSubnetCidrBlock[_15] = { fqn: "@aws-cdk/aws-ec2.CfnSubnetCidrBlock", version: "1.132.0" };
    CfnSubnetCidrBlock.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::SubnetCidrBlock";
    function CfnSubnetNetworkAclAssociationPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("networkAclId", cdk.requiredValidator)(properties.networkAclId));
      errors.collect(cdk.propertyValidator("networkAclId", cdk.validateString)(properties.networkAclId));
      errors.collect(cdk.propertyValidator("subnetId", cdk.requiredValidator)(properties.subnetId));
      errors.collect(cdk.propertyValidator("subnetId", cdk.validateString)(properties.subnetId));
      return errors.wrap('supplied properties not correct for "CfnSubnetNetworkAclAssociationProps"');
    }
    function cfnSubnetNetworkAclAssociationPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSubnetNetworkAclAssociationPropsValidator(properties).assertSuccess();
      return {
        NetworkAclId: cdk.stringToCloudFormation(properties.networkAclId),
        SubnetId: cdk.stringToCloudFormation(properties.subnetId)
      };
    }
    function CfnSubnetNetworkAclAssociationPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("networkAclId", "NetworkAclId", cfn_parse.FromCloudFormation.getString(properties.NetworkAclId));
      ret.addPropertyResult("subnetId", "SubnetId", cfn_parse.FromCloudFormation.getString(properties.SubnetId));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnSubnetNetworkAclAssociation = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnSubnetNetworkAclAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "networkAclId", this);
        cdk.requireProperty(props, "subnetId", this);
        this.attrAssociationId = cdk.Token.asString(this.getAtt("AssociationId"));
        this.networkAclId = props.networkAclId;
        this.subnetId = props.subnetId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnSubnetNetworkAclAssociationPropsFromCloudFormation(resourceProperties);
        const ret = new CfnSubnetNetworkAclAssociation(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnSubnetNetworkAclAssociation.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          networkAclId: this.networkAclId,
          subnetId: this.subnetId
        };
      }
      renderProperties(props) {
        return cfnSubnetNetworkAclAssociationPropsToCloudFormation(props);
      }
    };
    exports2.CfnSubnetNetworkAclAssociation = CfnSubnetNetworkAclAssociation;
    _16 = JSII_RTTI_SYMBOL_1;
    CfnSubnetNetworkAclAssociation[_16] = { fqn: "@aws-cdk/aws-ec2.CfnSubnetNetworkAclAssociation", version: "1.132.0" };
    CfnSubnetNetworkAclAssociation.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::SubnetNetworkAclAssociation";
    function CfnSubnetRouteTableAssociationPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("routeTableId", cdk.requiredValidator)(properties.routeTableId));
      errors.collect(cdk.propertyValidator("routeTableId", cdk.validateString)(properties.routeTableId));
      errors.collect(cdk.propertyValidator("subnetId", cdk.requiredValidator)(properties.subnetId));
      errors.collect(cdk.propertyValidator("subnetId", cdk.validateString)(properties.subnetId));
      return errors.wrap('supplied properties not correct for "CfnSubnetRouteTableAssociationProps"');
    }
    function cfnSubnetRouteTableAssociationPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSubnetRouteTableAssociationPropsValidator(properties).assertSuccess();
      return {
        RouteTableId: cdk.stringToCloudFormation(properties.routeTableId),
        SubnetId: cdk.stringToCloudFormation(properties.subnetId)
      };
    }
    function CfnSubnetRouteTableAssociationPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("routeTableId", "RouteTableId", cfn_parse.FromCloudFormation.getString(properties.RouteTableId));
      ret.addPropertyResult("subnetId", "SubnetId", cfn_parse.FromCloudFormation.getString(properties.SubnetId));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnSubnetRouteTableAssociation = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnSubnetRouteTableAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "routeTableId", this);
        cdk.requireProperty(props, "subnetId", this);
        this.routeTableId = props.routeTableId;
        this.subnetId = props.subnetId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnSubnetRouteTableAssociationPropsFromCloudFormation(resourceProperties);
        const ret = new CfnSubnetRouteTableAssociation(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnSubnetRouteTableAssociation.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          routeTableId: this.routeTableId,
          subnetId: this.subnetId
        };
      }
      renderProperties(props) {
        return cfnSubnetRouteTableAssociationPropsToCloudFormation(props);
      }
    };
    exports2.CfnSubnetRouteTableAssociation = CfnSubnetRouteTableAssociation;
    _17 = JSII_RTTI_SYMBOL_1;
    CfnSubnetRouteTableAssociation[_17] = { fqn: "@aws-cdk/aws-ec2.CfnSubnetRouteTableAssociation", version: "1.132.0" };
    CfnSubnetRouteTableAssociation.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::SubnetRouteTableAssociation";
    function CfnTrafficMirrorFilterPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("networkServices", cdk.listValidator(cdk.validateString))(properties.networkServices));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnTrafficMirrorFilterProps"');
    }
    function cfnTrafficMirrorFilterPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnTrafficMirrorFilterPropsValidator(properties).assertSuccess();
      return {
        Description: cdk.stringToCloudFormation(properties.description),
        NetworkServices: cdk.listMapper(cdk.stringToCloudFormation)(properties.networkServices),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnTrafficMirrorFilterPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("networkServices", "NetworkServices", properties.NetworkServices != null ? cfn_parse.FromCloudFormation.getStringArray(properties.NetworkServices) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnTrafficMirrorFilter = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnTrafficMirrorFilter.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.description = props.description;
        this.networkServices = props.networkServices;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::TrafficMirrorFilter", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnTrafficMirrorFilterPropsFromCloudFormation(resourceProperties);
        const ret = new CfnTrafficMirrorFilter(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnTrafficMirrorFilter.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          description: this.description,
          networkServices: this.networkServices,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnTrafficMirrorFilterPropsToCloudFormation(props);
      }
    };
    exports2.CfnTrafficMirrorFilter = CfnTrafficMirrorFilter;
    _18 = JSII_RTTI_SYMBOL_1;
    CfnTrafficMirrorFilter[_18] = { fqn: "@aws-cdk/aws-ec2.CfnTrafficMirrorFilter", version: "1.132.0" };
    CfnTrafficMirrorFilter.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::TrafficMirrorFilter";
    function CfnTrafficMirrorFilterRulePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("destinationCidrBlock", cdk.requiredValidator)(properties.destinationCidrBlock));
      errors.collect(cdk.propertyValidator("destinationCidrBlock", cdk.validateString)(properties.destinationCidrBlock));
      errors.collect(cdk.propertyValidator("destinationPortRange", CfnTrafficMirrorFilterRule_TrafficMirrorPortRangePropertyValidator)(properties.destinationPortRange));
      errors.collect(cdk.propertyValidator("protocol", cdk.validateNumber)(properties.protocol));
      errors.collect(cdk.propertyValidator("ruleAction", cdk.requiredValidator)(properties.ruleAction));
      errors.collect(cdk.propertyValidator("ruleAction", cdk.validateString)(properties.ruleAction));
      errors.collect(cdk.propertyValidator("ruleNumber", cdk.requiredValidator)(properties.ruleNumber));
      errors.collect(cdk.propertyValidator("ruleNumber", cdk.validateNumber)(properties.ruleNumber));
      errors.collect(cdk.propertyValidator("sourceCidrBlock", cdk.requiredValidator)(properties.sourceCidrBlock));
      errors.collect(cdk.propertyValidator("sourceCidrBlock", cdk.validateString)(properties.sourceCidrBlock));
      errors.collect(cdk.propertyValidator("sourcePortRange", CfnTrafficMirrorFilterRule_TrafficMirrorPortRangePropertyValidator)(properties.sourcePortRange));
      errors.collect(cdk.propertyValidator("trafficDirection", cdk.requiredValidator)(properties.trafficDirection));
      errors.collect(cdk.propertyValidator("trafficDirection", cdk.validateString)(properties.trafficDirection));
      errors.collect(cdk.propertyValidator("trafficMirrorFilterId", cdk.requiredValidator)(properties.trafficMirrorFilterId));
      errors.collect(cdk.propertyValidator("trafficMirrorFilterId", cdk.validateString)(properties.trafficMirrorFilterId));
      return errors.wrap('supplied properties not correct for "CfnTrafficMirrorFilterRuleProps"');
    }
    function cfnTrafficMirrorFilterRulePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnTrafficMirrorFilterRulePropsValidator(properties).assertSuccess();
      return {
        DestinationCidrBlock: cdk.stringToCloudFormation(properties.destinationCidrBlock),
        RuleAction: cdk.stringToCloudFormation(properties.ruleAction),
        RuleNumber: cdk.numberToCloudFormation(properties.ruleNumber),
        SourceCidrBlock: cdk.stringToCloudFormation(properties.sourceCidrBlock),
        TrafficDirection: cdk.stringToCloudFormation(properties.trafficDirection),
        TrafficMirrorFilterId: cdk.stringToCloudFormation(properties.trafficMirrorFilterId),
        Description: cdk.stringToCloudFormation(properties.description),
        DestinationPortRange: cfnTrafficMirrorFilterRuleTrafficMirrorPortRangePropertyToCloudFormation(properties.destinationPortRange),
        Protocol: cdk.numberToCloudFormation(properties.protocol),
        SourcePortRange: cfnTrafficMirrorFilterRuleTrafficMirrorPortRangePropertyToCloudFormation(properties.sourcePortRange)
      };
    }
    function CfnTrafficMirrorFilterRulePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("destinationCidrBlock", "DestinationCidrBlock", cfn_parse.FromCloudFormation.getString(properties.DestinationCidrBlock));
      ret.addPropertyResult("ruleAction", "RuleAction", cfn_parse.FromCloudFormation.getString(properties.RuleAction));
      ret.addPropertyResult("ruleNumber", "RuleNumber", cfn_parse.FromCloudFormation.getNumber(properties.RuleNumber));
      ret.addPropertyResult("sourceCidrBlock", "SourceCidrBlock", cfn_parse.FromCloudFormation.getString(properties.SourceCidrBlock));
      ret.addPropertyResult("trafficDirection", "TrafficDirection", cfn_parse.FromCloudFormation.getString(properties.TrafficDirection));
      ret.addPropertyResult("trafficMirrorFilterId", "TrafficMirrorFilterId", cfn_parse.FromCloudFormation.getString(properties.TrafficMirrorFilterId));
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("destinationPortRange", "DestinationPortRange", properties.DestinationPortRange != null ? CfnTrafficMirrorFilterRuleTrafficMirrorPortRangePropertyFromCloudFormation(properties.DestinationPortRange) : void 0);
      ret.addPropertyResult("protocol", "Protocol", properties.Protocol != null ? cfn_parse.FromCloudFormation.getNumber(properties.Protocol) : void 0);
      ret.addPropertyResult("sourcePortRange", "SourcePortRange", properties.SourcePortRange != null ? CfnTrafficMirrorFilterRuleTrafficMirrorPortRangePropertyFromCloudFormation(properties.SourcePortRange) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnTrafficMirrorFilterRule = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnTrafficMirrorFilterRule.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "destinationCidrBlock", this);
        cdk.requireProperty(props, "ruleAction", this);
        cdk.requireProperty(props, "ruleNumber", this);
        cdk.requireProperty(props, "sourceCidrBlock", this);
        cdk.requireProperty(props, "trafficDirection", this);
        cdk.requireProperty(props, "trafficMirrorFilterId", this);
        this.destinationCidrBlock = props.destinationCidrBlock;
        this.ruleAction = props.ruleAction;
        this.ruleNumber = props.ruleNumber;
        this.sourceCidrBlock = props.sourceCidrBlock;
        this.trafficDirection = props.trafficDirection;
        this.trafficMirrorFilterId = props.trafficMirrorFilterId;
        this.description = props.description;
        this.destinationPortRange = props.destinationPortRange;
        this.protocol = props.protocol;
        this.sourcePortRange = props.sourcePortRange;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnTrafficMirrorFilterRulePropsFromCloudFormation(resourceProperties);
        const ret = new CfnTrafficMirrorFilterRule(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnTrafficMirrorFilterRule.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          destinationCidrBlock: this.destinationCidrBlock,
          ruleAction: this.ruleAction,
          ruleNumber: this.ruleNumber,
          sourceCidrBlock: this.sourceCidrBlock,
          trafficDirection: this.trafficDirection,
          trafficMirrorFilterId: this.trafficMirrorFilterId,
          description: this.description,
          destinationPortRange: this.destinationPortRange,
          protocol: this.protocol,
          sourcePortRange: this.sourcePortRange
        };
      }
      renderProperties(props) {
        return cfnTrafficMirrorFilterRulePropsToCloudFormation(props);
      }
    };
    exports2.CfnTrafficMirrorFilterRule = CfnTrafficMirrorFilterRule;
    _19 = JSII_RTTI_SYMBOL_1;
    CfnTrafficMirrorFilterRule[_19] = { fqn: "@aws-cdk/aws-ec2.CfnTrafficMirrorFilterRule", version: "1.132.0" };
    CfnTrafficMirrorFilterRule.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::TrafficMirrorFilterRule";
    function CfnTrafficMirrorFilterRule_TrafficMirrorPortRangePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("fromPort", cdk.requiredValidator)(properties.fromPort));
      errors.collect(cdk.propertyValidator("fromPort", cdk.validateNumber)(properties.fromPort));
      errors.collect(cdk.propertyValidator("toPort", cdk.requiredValidator)(properties.toPort));
      errors.collect(cdk.propertyValidator("toPort", cdk.validateNumber)(properties.toPort));
      return errors.wrap('supplied properties not correct for "TrafficMirrorPortRangeProperty"');
    }
    function cfnTrafficMirrorFilterRuleTrafficMirrorPortRangePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnTrafficMirrorFilterRule_TrafficMirrorPortRangePropertyValidator(properties).assertSuccess();
      return {
        FromPort: cdk.numberToCloudFormation(properties.fromPort),
        ToPort: cdk.numberToCloudFormation(properties.toPort)
      };
    }
    function CfnTrafficMirrorFilterRuleTrafficMirrorPortRangePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("fromPort", "FromPort", cfn_parse.FromCloudFormation.getNumber(properties.FromPort));
      ret.addPropertyResult("toPort", "ToPort", cfn_parse.FromCloudFormation.getNumber(properties.ToPort));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnTrafficMirrorSessionPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("networkInterfaceId", cdk.requiredValidator)(properties.networkInterfaceId));
      errors.collect(cdk.propertyValidator("networkInterfaceId", cdk.validateString)(properties.networkInterfaceId));
      errors.collect(cdk.propertyValidator("packetLength", cdk.validateNumber)(properties.packetLength));
      errors.collect(cdk.propertyValidator("sessionNumber", cdk.requiredValidator)(properties.sessionNumber));
      errors.collect(cdk.propertyValidator("sessionNumber", cdk.validateNumber)(properties.sessionNumber));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("trafficMirrorFilterId", cdk.requiredValidator)(properties.trafficMirrorFilterId));
      errors.collect(cdk.propertyValidator("trafficMirrorFilterId", cdk.validateString)(properties.trafficMirrorFilterId));
      errors.collect(cdk.propertyValidator("trafficMirrorTargetId", cdk.requiredValidator)(properties.trafficMirrorTargetId));
      errors.collect(cdk.propertyValidator("trafficMirrorTargetId", cdk.validateString)(properties.trafficMirrorTargetId));
      errors.collect(cdk.propertyValidator("virtualNetworkId", cdk.validateNumber)(properties.virtualNetworkId));
      return errors.wrap('supplied properties not correct for "CfnTrafficMirrorSessionProps"');
    }
    function cfnTrafficMirrorSessionPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnTrafficMirrorSessionPropsValidator(properties).assertSuccess();
      return {
        NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),
        SessionNumber: cdk.numberToCloudFormation(properties.sessionNumber),
        TrafficMirrorFilterId: cdk.stringToCloudFormation(properties.trafficMirrorFilterId),
        TrafficMirrorTargetId: cdk.stringToCloudFormation(properties.trafficMirrorTargetId),
        Description: cdk.stringToCloudFormation(properties.description),
        PacketLength: cdk.numberToCloudFormation(properties.packetLength),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
        VirtualNetworkId: cdk.numberToCloudFormation(properties.virtualNetworkId)
      };
    }
    function CfnTrafficMirrorSessionPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("networkInterfaceId", "NetworkInterfaceId", cfn_parse.FromCloudFormation.getString(properties.NetworkInterfaceId));
      ret.addPropertyResult("sessionNumber", "SessionNumber", cfn_parse.FromCloudFormation.getNumber(properties.SessionNumber));
      ret.addPropertyResult("trafficMirrorFilterId", "TrafficMirrorFilterId", cfn_parse.FromCloudFormation.getString(properties.TrafficMirrorFilterId));
      ret.addPropertyResult("trafficMirrorTargetId", "TrafficMirrorTargetId", cfn_parse.FromCloudFormation.getString(properties.TrafficMirrorTargetId));
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("packetLength", "PacketLength", properties.PacketLength != null ? cfn_parse.FromCloudFormation.getNumber(properties.PacketLength) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addPropertyResult("virtualNetworkId", "VirtualNetworkId", properties.VirtualNetworkId != null ? cfn_parse.FromCloudFormation.getNumber(properties.VirtualNetworkId) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnTrafficMirrorSession = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnTrafficMirrorSession.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "networkInterfaceId", this);
        cdk.requireProperty(props, "sessionNumber", this);
        cdk.requireProperty(props, "trafficMirrorFilterId", this);
        cdk.requireProperty(props, "trafficMirrorTargetId", this);
        this.networkInterfaceId = props.networkInterfaceId;
        this.sessionNumber = props.sessionNumber;
        this.trafficMirrorFilterId = props.trafficMirrorFilterId;
        this.trafficMirrorTargetId = props.trafficMirrorTargetId;
        this.description = props.description;
        this.packetLength = props.packetLength;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::TrafficMirrorSession", props.tags, { tagPropertyName: "tags" });
        this.virtualNetworkId = props.virtualNetworkId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnTrafficMirrorSessionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnTrafficMirrorSession(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnTrafficMirrorSession.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          networkInterfaceId: this.networkInterfaceId,
          sessionNumber: this.sessionNumber,
          trafficMirrorFilterId: this.trafficMirrorFilterId,
          trafficMirrorTargetId: this.trafficMirrorTargetId,
          description: this.description,
          packetLength: this.packetLength,
          tags: this.tags.renderTags(),
          virtualNetworkId: this.virtualNetworkId
        };
      }
      renderProperties(props) {
        return cfnTrafficMirrorSessionPropsToCloudFormation(props);
      }
    };
    exports2.CfnTrafficMirrorSession = CfnTrafficMirrorSession;
    _20 = JSII_RTTI_SYMBOL_1;
    CfnTrafficMirrorSession[_20] = { fqn: "@aws-cdk/aws-ec2.CfnTrafficMirrorSession", version: "1.132.0" };
    CfnTrafficMirrorSession.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::TrafficMirrorSession";
    function CfnTrafficMirrorTargetPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("networkInterfaceId", cdk.validateString)(properties.networkInterfaceId));
      errors.collect(cdk.propertyValidator("networkLoadBalancerArn", cdk.validateString)(properties.networkLoadBalancerArn));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnTrafficMirrorTargetProps"');
    }
    function cfnTrafficMirrorTargetPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnTrafficMirrorTargetPropsValidator(properties).assertSuccess();
      return {
        Description: cdk.stringToCloudFormation(properties.description),
        NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),
        NetworkLoadBalancerArn: cdk.stringToCloudFormation(properties.networkLoadBalancerArn),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnTrafficMirrorTargetPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("networkInterfaceId", "NetworkInterfaceId", properties.NetworkInterfaceId != null ? cfn_parse.FromCloudFormation.getString(properties.NetworkInterfaceId) : void 0);
      ret.addPropertyResult("networkLoadBalancerArn", "NetworkLoadBalancerArn", properties.NetworkLoadBalancerArn != null ? cfn_parse.FromCloudFormation.getString(properties.NetworkLoadBalancerArn) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnTrafficMirrorTarget = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnTrafficMirrorTarget.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.description = props.description;
        this.networkInterfaceId = props.networkInterfaceId;
        this.networkLoadBalancerArn = props.networkLoadBalancerArn;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::TrafficMirrorTarget", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnTrafficMirrorTargetPropsFromCloudFormation(resourceProperties);
        const ret = new CfnTrafficMirrorTarget(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnTrafficMirrorTarget.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          description: this.description,
          networkInterfaceId: this.networkInterfaceId,
          networkLoadBalancerArn: this.networkLoadBalancerArn,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnTrafficMirrorTargetPropsToCloudFormation(props);
      }
    };
    exports2.CfnTrafficMirrorTarget = CfnTrafficMirrorTarget;
    _21 = JSII_RTTI_SYMBOL_1;
    CfnTrafficMirrorTarget[_21] = { fqn: "@aws-cdk/aws-ec2.CfnTrafficMirrorTarget", version: "1.132.0" };
    CfnTrafficMirrorTarget.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::TrafficMirrorTarget";
    function CfnTransitGatewayPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("amazonSideAsn", cdk.validateNumber)(properties.amazonSideAsn));
      errors.collect(cdk.propertyValidator("associationDefaultRouteTableId", cdk.validateString)(properties.associationDefaultRouteTableId));
      errors.collect(cdk.propertyValidator("autoAcceptSharedAttachments", cdk.validateString)(properties.autoAcceptSharedAttachments));
      errors.collect(cdk.propertyValidator("defaultRouteTableAssociation", cdk.validateString)(properties.defaultRouteTableAssociation));
      errors.collect(cdk.propertyValidator("defaultRouteTablePropagation", cdk.validateString)(properties.defaultRouteTablePropagation));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("dnsSupport", cdk.validateString)(properties.dnsSupport));
      errors.collect(cdk.propertyValidator("multicastSupport", cdk.validateString)(properties.multicastSupport));
      errors.collect(cdk.propertyValidator("propagationDefaultRouteTableId", cdk.validateString)(properties.propagationDefaultRouteTableId));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("transitGatewayCidrBlocks", cdk.listValidator(cdk.validateString))(properties.transitGatewayCidrBlocks));
      errors.collect(cdk.propertyValidator("vpnEcmpSupport", cdk.validateString)(properties.vpnEcmpSupport));
      return errors.wrap('supplied properties not correct for "CfnTransitGatewayProps"');
    }
    function cfnTransitGatewayPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnTransitGatewayPropsValidator(properties).assertSuccess();
      return {
        AmazonSideAsn: cdk.numberToCloudFormation(properties.amazonSideAsn),
        AssociationDefaultRouteTableId: cdk.stringToCloudFormation(properties.associationDefaultRouteTableId),
        AutoAcceptSharedAttachments: cdk.stringToCloudFormation(properties.autoAcceptSharedAttachments),
        DefaultRouteTableAssociation: cdk.stringToCloudFormation(properties.defaultRouteTableAssociation),
        DefaultRouteTablePropagation: cdk.stringToCloudFormation(properties.defaultRouteTablePropagation),
        Description: cdk.stringToCloudFormation(properties.description),
        DnsSupport: cdk.stringToCloudFormation(properties.dnsSupport),
        MulticastSupport: cdk.stringToCloudFormation(properties.multicastSupport),
        PropagationDefaultRouteTableId: cdk.stringToCloudFormation(properties.propagationDefaultRouteTableId),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
        TransitGatewayCidrBlocks: cdk.listMapper(cdk.stringToCloudFormation)(properties.transitGatewayCidrBlocks),
        VpnEcmpSupport: cdk.stringToCloudFormation(properties.vpnEcmpSupport)
      };
    }
    function CfnTransitGatewayPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("amazonSideAsn", "AmazonSideAsn", properties.AmazonSideAsn != null ? cfn_parse.FromCloudFormation.getNumber(properties.AmazonSideAsn) : void 0);
      ret.addPropertyResult("associationDefaultRouteTableId", "AssociationDefaultRouteTableId", properties.AssociationDefaultRouteTableId != null ? cfn_parse.FromCloudFormation.getString(properties.AssociationDefaultRouteTableId) : void 0);
      ret.addPropertyResult("autoAcceptSharedAttachments", "AutoAcceptSharedAttachments", properties.AutoAcceptSharedAttachments != null ? cfn_parse.FromCloudFormation.getString(properties.AutoAcceptSharedAttachments) : void 0);
      ret.addPropertyResult("defaultRouteTableAssociation", "DefaultRouteTableAssociation", properties.DefaultRouteTableAssociation != null ? cfn_parse.FromCloudFormation.getString(properties.DefaultRouteTableAssociation) : void 0);
      ret.addPropertyResult("defaultRouteTablePropagation", "DefaultRouteTablePropagation", properties.DefaultRouteTablePropagation != null ? cfn_parse.FromCloudFormation.getString(properties.DefaultRouteTablePropagation) : void 0);
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("dnsSupport", "DnsSupport", properties.DnsSupport != null ? cfn_parse.FromCloudFormation.getString(properties.DnsSupport) : void 0);
      ret.addPropertyResult("multicastSupport", "MulticastSupport", properties.MulticastSupport != null ? cfn_parse.FromCloudFormation.getString(properties.MulticastSupport) : void 0);
      ret.addPropertyResult("propagationDefaultRouteTableId", "PropagationDefaultRouteTableId", properties.PropagationDefaultRouteTableId != null ? cfn_parse.FromCloudFormation.getString(properties.PropagationDefaultRouteTableId) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addPropertyResult("transitGatewayCidrBlocks", "TransitGatewayCidrBlocks", properties.TransitGatewayCidrBlocks != null ? cfn_parse.FromCloudFormation.getStringArray(properties.TransitGatewayCidrBlocks) : void 0);
      ret.addPropertyResult("vpnEcmpSupport", "VpnEcmpSupport", properties.VpnEcmpSupport != null ? cfn_parse.FromCloudFormation.getString(properties.VpnEcmpSupport) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnTransitGateway = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnTransitGateway.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.attrId = cdk.Token.asString(this.getAtt("Id"));
        this.amazonSideAsn = props.amazonSideAsn;
        this.associationDefaultRouteTableId = props.associationDefaultRouteTableId;
        this.autoAcceptSharedAttachments = props.autoAcceptSharedAttachments;
        this.defaultRouteTableAssociation = props.defaultRouteTableAssociation;
        this.defaultRouteTablePropagation = props.defaultRouteTablePropagation;
        this.description = props.description;
        this.dnsSupport = props.dnsSupport;
        this.multicastSupport = props.multicastSupport;
        this.propagationDefaultRouteTableId = props.propagationDefaultRouteTableId;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::TransitGateway", props.tags, { tagPropertyName: "tags" });
        this.transitGatewayCidrBlocks = props.transitGatewayCidrBlocks;
        this.vpnEcmpSupport = props.vpnEcmpSupport;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnTransitGatewayPropsFromCloudFormation(resourceProperties);
        const ret = new CfnTransitGateway(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnTransitGateway.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          amazonSideAsn: this.amazonSideAsn,
          associationDefaultRouteTableId: this.associationDefaultRouteTableId,
          autoAcceptSharedAttachments: this.autoAcceptSharedAttachments,
          defaultRouteTableAssociation: this.defaultRouteTableAssociation,
          defaultRouteTablePropagation: this.defaultRouteTablePropagation,
          description: this.description,
          dnsSupport: this.dnsSupport,
          multicastSupport: this.multicastSupport,
          propagationDefaultRouteTableId: this.propagationDefaultRouteTableId,
          tags: this.tags.renderTags(),
          transitGatewayCidrBlocks: this.transitGatewayCidrBlocks,
          vpnEcmpSupport: this.vpnEcmpSupport
        };
      }
      renderProperties(props) {
        return cfnTransitGatewayPropsToCloudFormation(props);
      }
    };
    exports2.CfnTransitGateway = CfnTransitGateway;
    _22 = JSII_RTTI_SYMBOL_1;
    CfnTransitGateway[_22] = { fqn: "@aws-cdk/aws-ec2.CfnTransitGateway", version: "1.132.0" };
    CfnTransitGateway.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::TransitGateway";
    function CfnTransitGatewayAttachmentPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("subnetIds", cdk.requiredValidator)(properties.subnetIds));
      errors.collect(cdk.propertyValidator("subnetIds", cdk.listValidator(cdk.validateString))(properties.subnetIds));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("transitGatewayId", cdk.requiredValidator)(properties.transitGatewayId));
      errors.collect(cdk.propertyValidator("transitGatewayId", cdk.validateString)(properties.transitGatewayId));
      errors.collect(cdk.propertyValidator("vpcId", cdk.requiredValidator)(properties.vpcId));
      errors.collect(cdk.propertyValidator("vpcId", cdk.validateString)(properties.vpcId));
      return errors.wrap('supplied properties not correct for "CfnTransitGatewayAttachmentProps"');
    }
    function cfnTransitGatewayAttachmentPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnTransitGatewayAttachmentPropsValidator(properties).assertSuccess();
      return {
        SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),
        TransitGatewayId: cdk.stringToCloudFormation(properties.transitGatewayId),
        VpcId: cdk.stringToCloudFormation(properties.vpcId),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnTransitGatewayAttachmentPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("subnetIds", "SubnetIds", cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds));
      ret.addPropertyResult("transitGatewayId", "TransitGatewayId", cfn_parse.FromCloudFormation.getString(properties.TransitGatewayId));
      ret.addPropertyResult("vpcId", "VpcId", cfn_parse.FromCloudFormation.getString(properties.VpcId));
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnTransitGatewayAttachment = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnTransitGatewayAttachment.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "subnetIds", this);
        cdk.requireProperty(props, "transitGatewayId", this);
        cdk.requireProperty(props, "vpcId", this);
        this.subnetIds = props.subnetIds;
        this.transitGatewayId = props.transitGatewayId;
        this.vpcId = props.vpcId;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::TransitGatewayAttachment", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnTransitGatewayAttachmentPropsFromCloudFormation(resourceProperties);
        const ret = new CfnTransitGatewayAttachment(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnTransitGatewayAttachment.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          subnetIds: this.subnetIds,
          transitGatewayId: this.transitGatewayId,
          vpcId: this.vpcId,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnTransitGatewayAttachmentPropsToCloudFormation(props);
      }
    };
    exports2.CfnTransitGatewayAttachment = CfnTransitGatewayAttachment;
    _23 = JSII_RTTI_SYMBOL_1;
    CfnTransitGatewayAttachment[_23] = { fqn: "@aws-cdk/aws-ec2.CfnTransitGatewayAttachment", version: "1.132.0" };
    CfnTransitGatewayAttachment.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::TransitGatewayAttachment";
    function CfnTransitGatewayConnectPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("options", cdk.requiredValidator)(properties.options));
      errors.collect(cdk.propertyValidator("options", CfnTransitGatewayConnect_TransitGatewayConnectOptionsPropertyValidator)(properties.options));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("transportTransitGatewayAttachmentId", cdk.requiredValidator)(properties.transportTransitGatewayAttachmentId));
      errors.collect(cdk.propertyValidator("transportTransitGatewayAttachmentId", cdk.validateString)(properties.transportTransitGatewayAttachmentId));
      return errors.wrap('supplied properties not correct for "CfnTransitGatewayConnectProps"');
    }
    function cfnTransitGatewayConnectPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnTransitGatewayConnectPropsValidator(properties).assertSuccess();
      return {
        Options: cfnTransitGatewayConnectTransitGatewayConnectOptionsPropertyToCloudFormation(properties.options),
        TransportTransitGatewayAttachmentId: cdk.stringToCloudFormation(properties.transportTransitGatewayAttachmentId),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnTransitGatewayConnectPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("options", "Options", CfnTransitGatewayConnectTransitGatewayConnectOptionsPropertyFromCloudFormation(properties.Options));
      ret.addPropertyResult("transportTransitGatewayAttachmentId", "TransportTransitGatewayAttachmentId", cfn_parse.FromCloudFormation.getString(properties.TransportTransitGatewayAttachmentId));
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnTransitGatewayConnect = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnTransitGatewayConnect.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "options", this);
        cdk.requireProperty(props, "transportTransitGatewayAttachmentId", this);
        this.attrCreationTime = cdk.Token.asString(this.getAtt("CreationTime"));
        this.attrState = cdk.Token.asString(this.getAtt("State"));
        this.attrTransitGatewayAttachmentId = cdk.Token.asString(this.getAtt("TransitGatewayAttachmentId"));
        this.attrTransitGatewayId = cdk.Token.asString(this.getAtt("TransitGatewayId"));
        this.options = props.options;
        this.transportTransitGatewayAttachmentId = props.transportTransitGatewayAttachmentId;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::TransitGatewayConnect", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnTransitGatewayConnectPropsFromCloudFormation(resourceProperties);
        const ret = new CfnTransitGatewayConnect(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnTransitGatewayConnect.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          options: this.options,
          transportTransitGatewayAttachmentId: this.transportTransitGatewayAttachmentId,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnTransitGatewayConnectPropsToCloudFormation(props);
      }
    };
    exports2.CfnTransitGatewayConnect = CfnTransitGatewayConnect;
    _24 = JSII_RTTI_SYMBOL_1;
    CfnTransitGatewayConnect[_24] = { fqn: "@aws-cdk/aws-ec2.CfnTransitGatewayConnect", version: "1.132.0" };
    CfnTransitGatewayConnect.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::TransitGatewayConnect";
    function CfnTransitGatewayConnect_TransitGatewayConnectOptionsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("protocol", cdk.validateString)(properties.protocol));
      return errors.wrap('supplied properties not correct for "TransitGatewayConnectOptionsProperty"');
    }
    function cfnTransitGatewayConnectTransitGatewayConnectOptionsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnTransitGatewayConnect_TransitGatewayConnectOptionsPropertyValidator(properties).assertSuccess();
      return {
        Protocol: cdk.stringToCloudFormation(properties.protocol)
      };
    }
    function CfnTransitGatewayConnectTransitGatewayConnectOptionsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("protocol", "Protocol", properties.Protocol != null ? cfn_parse.FromCloudFormation.getString(properties.Protocol) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnTransitGatewayMulticastDomainPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("options", cdk.validateObject)(properties.options));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("transitGatewayId", cdk.requiredValidator)(properties.transitGatewayId));
      errors.collect(cdk.propertyValidator("transitGatewayId", cdk.validateString)(properties.transitGatewayId));
      return errors.wrap('supplied properties not correct for "CfnTransitGatewayMulticastDomainProps"');
    }
    function cfnTransitGatewayMulticastDomainPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnTransitGatewayMulticastDomainPropsValidator(properties).assertSuccess();
      return {
        TransitGatewayId: cdk.stringToCloudFormation(properties.transitGatewayId),
        Options: cdk.objectToCloudFormation(properties.options),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnTransitGatewayMulticastDomainPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("transitGatewayId", "TransitGatewayId", cfn_parse.FromCloudFormation.getString(properties.TransitGatewayId));
      ret.addPropertyResult("options", "Options", properties.Options != null ? cfn_parse.FromCloudFormation.getAny(properties.Options) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnTransitGatewayMulticastDomain = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnTransitGatewayMulticastDomain.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "transitGatewayId", this);
        this.attrCreationTime = cdk.Token.asString(this.getAtt("CreationTime"));
        this.attrState = cdk.Token.asString(this.getAtt("State"));
        this.attrTransitGatewayMulticastDomainArn = cdk.Token.asString(this.getAtt("TransitGatewayMulticastDomainArn"));
        this.attrTransitGatewayMulticastDomainId = cdk.Token.asString(this.getAtt("TransitGatewayMulticastDomainId"));
        this.transitGatewayId = props.transitGatewayId;
        this.options = props.options;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::TransitGatewayMulticastDomain", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnTransitGatewayMulticastDomainPropsFromCloudFormation(resourceProperties);
        const ret = new CfnTransitGatewayMulticastDomain(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnTransitGatewayMulticastDomain.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          transitGatewayId: this.transitGatewayId,
          options: this.options,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnTransitGatewayMulticastDomainPropsToCloudFormation(props);
      }
    };
    exports2.CfnTransitGatewayMulticastDomain = CfnTransitGatewayMulticastDomain;
    _25 = JSII_RTTI_SYMBOL_1;
    CfnTransitGatewayMulticastDomain[_25] = { fqn: "@aws-cdk/aws-ec2.CfnTransitGatewayMulticastDomain", version: "1.132.0" };
    CfnTransitGatewayMulticastDomain.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::TransitGatewayMulticastDomain";
    function CfnTransitGatewayMulticastDomainAssociationPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("subnetId", cdk.requiredValidator)(properties.subnetId));
      errors.collect(cdk.propertyValidator("subnetId", cdk.validateString)(properties.subnetId));
      errors.collect(cdk.propertyValidator("transitGatewayAttachmentId", cdk.requiredValidator)(properties.transitGatewayAttachmentId));
      errors.collect(cdk.propertyValidator("transitGatewayAttachmentId", cdk.validateString)(properties.transitGatewayAttachmentId));
      errors.collect(cdk.propertyValidator("transitGatewayMulticastDomainId", cdk.requiredValidator)(properties.transitGatewayMulticastDomainId));
      errors.collect(cdk.propertyValidator("transitGatewayMulticastDomainId", cdk.validateString)(properties.transitGatewayMulticastDomainId));
      return errors.wrap('supplied properties not correct for "CfnTransitGatewayMulticastDomainAssociationProps"');
    }
    function cfnTransitGatewayMulticastDomainAssociationPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnTransitGatewayMulticastDomainAssociationPropsValidator(properties).assertSuccess();
      return {
        SubnetId: cdk.stringToCloudFormation(properties.subnetId),
        TransitGatewayAttachmentId: cdk.stringToCloudFormation(properties.transitGatewayAttachmentId),
        TransitGatewayMulticastDomainId: cdk.stringToCloudFormation(properties.transitGatewayMulticastDomainId)
      };
    }
    function CfnTransitGatewayMulticastDomainAssociationPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("subnetId", "SubnetId", cfn_parse.FromCloudFormation.getString(properties.SubnetId));
      ret.addPropertyResult("transitGatewayAttachmentId", "TransitGatewayAttachmentId", cfn_parse.FromCloudFormation.getString(properties.TransitGatewayAttachmentId));
      ret.addPropertyResult("transitGatewayMulticastDomainId", "TransitGatewayMulticastDomainId", cfn_parse.FromCloudFormation.getString(properties.TransitGatewayMulticastDomainId));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnTransitGatewayMulticastDomainAssociation = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnTransitGatewayMulticastDomainAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "subnetId", this);
        cdk.requireProperty(props, "transitGatewayAttachmentId", this);
        cdk.requireProperty(props, "transitGatewayMulticastDomainId", this);
        this.attrResourceId = cdk.Token.asString(this.getAtt("ResourceId"));
        this.attrResourceType = cdk.Token.asString(this.getAtt("ResourceType"));
        this.attrState = cdk.Token.asString(this.getAtt("State"));
        this.subnetId = props.subnetId;
        this.transitGatewayAttachmentId = props.transitGatewayAttachmentId;
        this.transitGatewayMulticastDomainId = props.transitGatewayMulticastDomainId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnTransitGatewayMulticastDomainAssociationPropsFromCloudFormation(resourceProperties);
        const ret = new CfnTransitGatewayMulticastDomainAssociation(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnTransitGatewayMulticastDomainAssociation.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          subnetId: this.subnetId,
          transitGatewayAttachmentId: this.transitGatewayAttachmentId,
          transitGatewayMulticastDomainId: this.transitGatewayMulticastDomainId
        };
      }
      renderProperties(props) {
        return cfnTransitGatewayMulticastDomainAssociationPropsToCloudFormation(props);
      }
    };
    exports2.CfnTransitGatewayMulticastDomainAssociation = CfnTransitGatewayMulticastDomainAssociation;
    _26 = JSII_RTTI_SYMBOL_1;
    CfnTransitGatewayMulticastDomainAssociation[_26] = { fqn: "@aws-cdk/aws-ec2.CfnTransitGatewayMulticastDomainAssociation", version: "1.132.0" };
    CfnTransitGatewayMulticastDomainAssociation.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::TransitGatewayMulticastDomainAssociation";
    function CfnTransitGatewayMulticastGroupMemberPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("groupIpAddress", cdk.requiredValidator)(properties.groupIpAddress));
      errors.collect(cdk.propertyValidator("groupIpAddress", cdk.validateString)(properties.groupIpAddress));
      errors.collect(cdk.propertyValidator("networkInterfaceId", cdk.requiredValidator)(properties.networkInterfaceId));
      errors.collect(cdk.propertyValidator("networkInterfaceId", cdk.validateString)(properties.networkInterfaceId));
      errors.collect(cdk.propertyValidator("transitGatewayMulticastDomainId", cdk.requiredValidator)(properties.transitGatewayMulticastDomainId));
      errors.collect(cdk.propertyValidator("transitGatewayMulticastDomainId", cdk.validateString)(properties.transitGatewayMulticastDomainId));
      return errors.wrap('supplied properties not correct for "CfnTransitGatewayMulticastGroupMemberProps"');
    }
    function cfnTransitGatewayMulticastGroupMemberPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnTransitGatewayMulticastGroupMemberPropsValidator(properties).assertSuccess();
      return {
        GroupIpAddress: cdk.stringToCloudFormation(properties.groupIpAddress),
        NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),
        TransitGatewayMulticastDomainId: cdk.stringToCloudFormation(properties.transitGatewayMulticastDomainId)
      };
    }
    function CfnTransitGatewayMulticastGroupMemberPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("groupIpAddress", "GroupIpAddress", cfn_parse.FromCloudFormation.getString(properties.GroupIpAddress));
      ret.addPropertyResult("networkInterfaceId", "NetworkInterfaceId", cfn_parse.FromCloudFormation.getString(properties.NetworkInterfaceId));
      ret.addPropertyResult("transitGatewayMulticastDomainId", "TransitGatewayMulticastDomainId", cfn_parse.FromCloudFormation.getString(properties.TransitGatewayMulticastDomainId));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnTransitGatewayMulticastGroupMember = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnTransitGatewayMulticastGroupMember.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "groupIpAddress", this);
        cdk.requireProperty(props, "networkInterfaceId", this);
        cdk.requireProperty(props, "transitGatewayMulticastDomainId", this);
        this.attrGroupMember = this.getAtt("GroupMember");
        this.attrGroupSource = this.getAtt("GroupSource");
        this.attrMemberType = cdk.Token.asString(this.getAtt("MemberType"));
        this.attrResourceId = cdk.Token.asString(this.getAtt("ResourceId"));
        this.attrResourceType = cdk.Token.asString(this.getAtt("ResourceType"));
        this.attrSourceType = cdk.Token.asString(this.getAtt("SourceType"));
        this.attrSubnetId = cdk.Token.asString(this.getAtt("SubnetId"));
        this.attrTransitGatewayAttachmentId = cdk.Token.asString(this.getAtt("TransitGatewayAttachmentId"));
        this.groupIpAddress = props.groupIpAddress;
        this.networkInterfaceId = props.networkInterfaceId;
        this.transitGatewayMulticastDomainId = props.transitGatewayMulticastDomainId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnTransitGatewayMulticastGroupMemberPropsFromCloudFormation(resourceProperties);
        const ret = new CfnTransitGatewayMulticastGroupMember(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnTransitGatewayMulticastGroupMember.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          groupIpAddress: this.groupIpAddress,
          networkInterfaceId: this.networkInterfaceId,
          transitGatewayMulticastDomainId: this.transitGatewayMulticastDomainId
        };
      }
      renderProperties(props) {
        return cfnTransitGatewayMulticastGroupMemberPropsToCloudFormation(props);
      }
    };
    exports2.CfnTransitGatewayMulticastGroupMember = CfnTransitGatewayMulticastGroupMember;
    _27 = JSII_RTTI_SYMBOL_1;
    CfnTransitGatewayMulticastGroupMember[_27] = { fqn: "@aws-cdk/aws-ec2.CfnTransitGatewayMulticastGroupMember", version: "1.132.0" };
    CfnTransitGatewayMulticastGroupMember.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::TransitGatewayMulticastGroupMember";
    function CfnTransitGatewayMulticastGroupSourcePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("groupIpAddress", cdk.requiredValidator)(properties.groupIpAddress));
      errors.collect(cdk.propertyValidator("groupIpAddress", cdk.validateString)(properties.groupIpAddress));
      errors.collect(cdk.propertyValidator("networkInterfaceId", cdk.requiredValidator)(properties.networkInterfaceId));
      errors.collect(cdk.propertyValidator("networkInterfaceId", cdk.validateString)(properties.networkInterfaceId));
      errors.collect(cdk.propertyValidator("transitGatewayMulticastDomainId", cdk.requiredValidator)(properties.transitGatewayMulticastDomainId));
      errors.collect(cdk.propertyValidator("transitGatewayMulticastDomainId", cdk.validateString)(properties.transitGatewayMulticastDomainId));
      return errors.wrap('supplied properties not correct for "CfnTransitGatewayMulticastGroupSourceProps"');
    }
    function cfnTransitGatewayMulticastGroupSourcePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnTransitGatewayMulticastGroupSourcePropsValidator(properties).assertSuccess();
      return {
        GroupIpAddress: cdk.stringToCloudFormation(properties.groupIpAddress),
        NetworkInterfaceId: cdk.stringToCloudFormation(properties.networkInterfaceId),
        TransitGatewayMulticastDomainId: cdk.stringToCloudFormation(properties.transitGatewayMulticastDomainId)
      };
    }
    function CfnTransitGatewayMulticastGroupSourcePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("groupIpAddress", "GroupIpAddress", cfn_parse.FromCloudFormation.getString(properties.GroupIpAddress));
      ret.addPropertyResult("networkInterfaceId", "NetworkInterfaceId", cfn_parse.FromCloudFormation.getString(properties.NetworkInterfaceId));
      ret.addPropertyResult("transitGatewayMulticastDomainId", "TransitGatewayMulticastDomainId", cfn_parse.FromCloudFormation.getString(properties.TransitGatewayMulticastDomainId));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnTransitGatewayMulticastGroupSource = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnTransitGatewayMulticastGroupSource.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "groupIpAddress", this);
        cdk.requireProperty(props, "networkInterfaceId", this);
        cdk.requireProperty(props, "transitGatewayMulticastDomainId", this);
        this.attrGroupMember = this.getAtt("GroupMember");
        this.attrGroupSource = this.getAtt("GroupSource");
        this.attrMemberType = cdk.Token.asString(this.getAtt("MemberType"));
        this.attrResourceId = cdk.Token.asString(this.getAtt("ResourceId"));
        this.attrResourceType = cdk.Token.asString(this.getAtt("ResourceType"));
        this.attrSourceType = cdk.Token.asString(this.getAtt("SourceType"));
        this.attrSubnetId = cdk.Token.asString(this.getAtt("SubnetId"));
        this.attrTransitGatewayAttachmentId = cdk.Token.asString(this.getAtt("TransitGatewayAttachmentId"));
        this.groupIpAddress = props.groupIpAddress;
        this.networkInterfaceId = props.networkInterfaceId;
        this.transitGatewayMulticastDomainId = props.transitGatewayMulticastDomainId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnTransitGatewayMulticastGroupSourcePropsFromCloudFormation(resourceProperties);
        const ret = new CfnTransitGatewayMulticastGroupSource(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnTransitGatewayMulticastGroupSource.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          groupIpAddress: this.groupIpAddress,
          networkInterfaceId: this.networkInterfaceId,
          transitGatewayMulticastDomainId: this.transitGatewayMulticastDomainId
        };
      }
      renderProperties(props) {
        return cfnTransitGatewayMulticastGroupSourcePropsToCloudFormation(props);
      }
    };
    exports2.CfnTransitGatewayMulticastGroupSource = CfnTransitGatewayMulticastGroupSource;
    _28 = JSII_RTTI_SYMBOL_1;
    CfnTransitGatewayMulticastGroupSource[_28] = { fqn: "@aws-cdk/aws-ec2.CfnTransitGatewayMulticastGroupSource", version: "1.132.0" };
    CfnTransitGatewayMulticastGroupSource.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::TransitGatewayMulticastGroupSource";
    function CfnTransitGatewayPeeringAttachmentPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("options", CfnTransitGatewayPeeringAttachment_TransitGatewayPeeringAttachmentOptionsPropertyValidator)(properties.options));
      errors.collect(cdk.propertyValidator("peerAccountId", cdk.requiredValidator)(properties.peerAccountId));
      errors.collect(cdk.propertyValidator("peerAccountId", cdk.validateString)(properties.peerAccountId));
      errors.collect(cdk.propertyValidator("peerRegion", cdk.requiredValidator)(properties.peerRegion));
      errors.collect(cdk.propertyValidator("peerRegion", cdk.validateString)(properties.peerRegion));
      errors.collect(cdk.propertyValidator("peerTransitGatewayId", cdk.requiredValidator)(properties.peerTransitGatewayId));
      errors.collect(cdk.propertyValidator("peerTransitGatewayId", cdk.validateString)(properties.peerTransitGatewayId));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("transitGatewayId", cdk.requiredValidator)(properties.transitGatewayId));
      errors.collect(cdk.propertyValidator("transitGatewayId", cdk.validateString)(properties.transitGatewayId));
      return errors.wrap('supplied properties not correct for "CfnTransitGatewayPeeringAttachmentProps"');
    }
    function cfnTransitGatewayPeeringAttachmentPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnTransitGatewayPeeringAttachmentPropsValidator(properties).assertSuccess();
      return {
        PeerAccountId: cdk.stringToCloudFormation(properties.peerAccountId),
        PeerRegion: cdk.stringToCloudFormation(properties.peerRegion),
        PeerTransitGatewayId: cdk.stringToCloudFormation(properties.peerTransitGatewayId),
        TransitGatewayId: cdk.stringToCloudFormation(properties.transitGatewayId),
        Options: cfnTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentOptionsPropertyToCloudFormation(properties.options),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnTransitGatewayPeeringAttachmentPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("peerAccountId", "PeerAccountId", cfn_parse.FromCloudFormation.getString(properties.PeerAccountId));
      ret.addPropertyResult("peerRegion", "PeerRegion", cfn_parse.FromCloudFormation.getString(properties.PeerRegion));
      ret.addPropertyResult("peerTransitGatewayId", "PeerTransitGatewayId", cfn_parse.FromCloudFormation.getString(properties.PeerTransitGatewayId));
      ret.addPropertyResult("transitGatewayId", "TransitGatewayId", cfn_parse.FromCloudFormation.getString(properties.TransitGatewayId));
      ret.addPropertyResult("options", "Options", properties.Options != null ? CfnTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentOptionsPropertyFromCloudFormation(properties.Options) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnTransitGatewayPeeringAttachment = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnTransitGatewayPeeringAttachment.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "peerAccountId", this);
        cdk.requireProperty(props, "peerRegion", this);
        cdk.requireProperty(props, "peerTransitGatewayId", this);
        cdk.requireProperty(props, "transitGatewayId", this);
        this.attrCreationTime = cdk.Token.asString(this.getAtt("CreationTime"));
        this.attrState = cdk.Token.asString(this.getAtt("State"));
        this.attrTransitGatewayAttachmentId = cdk.Token.asString(this.getAtt("TransitGatewayAttachmentId"));
        this.peerAccountId = props.peerAccountId;
        this.peerRegion = props.peerRegion;
        this.peerTransitGatewayId = props.peerTransitGatewayId;
        this.transitGatewayId = props.transitGatewayId;
        this.options = props.options;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::TransitGatewayPeeringAttachment", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnTransitGatewayPeeringAttachmentPropsFromCloudFormation(resourceProperties);
        const ret = new CfnTransitGatewayPeeringAttachment(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnTransitGatewayPeeringAttachment.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          peerAccountId: this.peerAccountId,
          peerRegion: this.peerRegion,
          peerTransitGatewayId: this.peerTransitGatewayId,
          transitGatewayId: this.transitGatewayId,
          options: this.options,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnTransitGatewayPeeringAttachmentPropsToCloudFormation(props);
      }
    };
    exports2.CfnTransitGatewayPeeringAttachment = CfnTransitGatewayPeeringAttachment;
    _29 = JSII_RTTI_SYMBOL_1;
    CfnTransitGatewayPeeringAttachment[_29] = { fqn: "@aws-cdk/aws-ec2.CfnTransitGatewayPeeringAttachment", version: "1.132.0" };
    CfnTransitGatewayPeeringAttachment.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::TransitGatewayPeeringAttachment";
    function CfnTransitGatewayPeeringAttachment_TransitGatewayPeeringAttachmentOptionsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("dynamicRouting", cdk.validateString)(properties.dynamicRouting));
      return errors.wrap('supplied properties not correct for "TransitGatewayPeeringAttachmentOptionsProperty"');
    }
    function cfnTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentOptionsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnTransitGatewayPeeringAttachment_TransitGatewayPeeringAttachmentOptionsPropertyValidator(properties).assertSuccess();
      return {
        DynamicRouting: cdk.stringToCloudFormation(properties.dynamicRouting)
      };
    }
    function CfnTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentOptionsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("dynamicRouting", "DynamicRouting", properties.DynamicRouting != null ? cfn_parse.FromCloudFormation.getString(properties.DynamicRouting) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnTransitGatewayRoutePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("blackhole", cdk.validateBoolean)(properties.blackhole));
      errors.collect(cdk.propertyValidator("destinationCidrBlock", cdk.validateString)(properties.destinationCidrBlock));
      errors.collect(cdk.propertyValidator("transitGatewayAttachmentId", cdk.validateString)(properties.transitGatewayAttachmentId));
      errors.collect(cdk.propertyValidator("transitGatewayRouteTableId", cdk.requiredValidator)(properties.transitGatewayRouteTableId));
      errors.collect(cdk.propertyValidator("transitGatewayRouteTableId", cdk.validateString)(properties.transitGatewayRouteTableId));
      return errors.wrap('supplied properties not correct for "CfnTransitGatewayRouteProps"');
    }
    function cfnTransitGatewayRoutePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnTransitGatewayRoutePropsValidator(properties).assertSuccess();
      return {
        TransitGatewayRouteTableId: cdk.stringToCloudFormation(properties.transitGatewayRouteTableId),
        Blackhole: cdk.booleanToCloudFormation(properties.blackhole),
        DestinationCidrBlock: cdk.stringToCloudFormation(properties.destinationCidrBlock),
        TransitGatewayAttachmentId: cdk.stringToCloudFormation(properties.transitGatewayAttachmentId)
      };
    }
    function CfnTransitGatewayRoutePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("transitGatewayRouteTableId", "TransitGatewayRouteTableId", cfn_parse.FromCloudFormation.getString(properties.TransitGatewayRouteTableId));
      ret.addPropertyResult("blackhole", "Blackhole", properties.Blackhole != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Blackhole) : void 0);
      ret.addPropertyResult("destinationCidrBlock", "DestinationCidrBlock", properties.DestinationCidrBlock != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationCidrBlock) : void 0);
      ret.addPropertyResult("transitGatewayAttachmentId", "TransitGatewayAttachmentId", properties.TransitGatewayAttachmentId != null ? cfn_parse.FromCloudFormation.getString(properties.TransitGatewayAttachmentId) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnTransitGatewayRoute = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnTransitGatewayRoute.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "transitGatewayRouteTableId", this);
        this.transitGatewayRouteTableId = props.transitGatewayRouteTableId;
        this.blackhole = props.blackhole;
        this.destinationCidrBlock = props.destinationCidrBlock;
        this.transitGatewayAttachmentId = props.transitGatewayAttachmentId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnTransitGatewayRoutePropsFromCloudFormation(resourceProperties);
        const ret = new CfnTransitGatewayRoute(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnTransitGatewayRoute.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          transitGatewayRouteTableId: this.transitGatewayRouteTableId,
          blackhole: this.blackhole,
          destinationCidrBlock: this.destinationCidrBlock,
          transitGatewayAttachmentId: this.transitGatewayAttachmentId
        };
      }
      renderProperties(props) {
        return cfnTransitGatewayRoutePropsToCloudFormation(props);
      }
    };
    exports2.CfnTransitGatewayRoute = CfnTransitGatewayRoute;
    _30 = JSII_RTTI_SYMBOL_1;
    CfnTransitGatewayRoute[_30] = { fqn: "@aws-cdk/aws-ec2.CfnTransitGatewayRoute", version: "1.132.0" };
    CfnTransitGatewayRoute.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::TransitGatewayRoute";
    function CfnTransitGatewayRouteTablePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("transitGatewayId", cdk.requiredValidator)(properties.transitGatewayId));
      errors.collect(cdk.propertyValidator("transitGatewayId", cdk.validateString)(properties.transitGatewayId));
      return errors.wrap('supplied properties not correct for "CfnTransitGatewayRouteTableProps"');
    }
    function cfnTransitGatewayRouteTablePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnTransitGatewayRouteTablePropsValidator(properties).assertSuccess();
      return {
        TransitGatewayId: cdk.stringToCloudFormation(properties.transitGatewayId),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnTransitGatewayRouteTablePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("transitGatewayId", "TransitGatewayId", cfn_parse.FromCloudFormation.getString(properties.TransitGatewayId));
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnTransitGatewayRouteTable = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnTransitGatewayRouteTable.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "transitGatewayId", this);
        this.transitGatewayId = props.transitGatewayId;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::TransitGatewayRouteTable", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnTransitGatewayRouteTablePropsFromCloudFormation(resourceProperties);
        const ret = new CfnTransitGatewayRouteTable(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnTransitGatewayRouteTable.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          transitGatewayId: this.transitGatewayId,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnTransitGatewayRouteTablePropsToCloudFormation(props);
      }
    };
    exports2.CfnTransitGatewayRouteTable = CfnTransitGatewayRouteTable;
    _31 = JSII_RTTI_SYMBOL_1;
    CfnTransitGatewayRouteTable[_31] = { fqn: "@aws-cdk/aws-ec2.CfnTransitGatewayRouteTable", version: "1.132.0" };
    CfnTransitGatewayRouteTable.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::TransitGatewayRouteTable";
    function CfnTransitGatewayRouteTableAssociationPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("transitGatewayAttachmentId", cdk.requiredValidator)(properties.transitGatewayAttachmentId));
      errors.collect(cdk.propertyValidator("transitGatewayAttachmentId", cdk.validateString)(properties.transitGatewayAttachmentId));
      errors.collect(cdk.propertyValidator("transitGatewayRouteTableId", cdk.requiredValidator)(properties.transitGatewayRouteTableId));
      errors.collect(cdk.propertyValidator("transitGatewayRouteTableId", cdk.validateString)(properties.transitGatewayRouteTableId));
      return errors.wrap('supplied properties not correct for "CfnTransitGatewayRouteTableAssociationProps"');
    }
    function cfnTransitGatewayRouteTableAssociationPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnTransitGatewayRouteTableAssociationPropsValidator(properties).assertSuccess();
      return {
        TransitGatewayAttachmentId: cdk.stringToCloudFormation(properties.transitGatewayAttachmentId),
        TransitGatewayRouteTableId: cdk.stringToCloudFormation(properties.transitGatewayRouteTableId)
      };
    }
    function CfnTransitGatewayRouteTableAssociationPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("transitGatewayAttachmentId", "TransitGatewayAttachmentId", cfn_parse.FromCloudFormation.getString(properties.TransitGatewayAttachmentId));
      ret.addPropertyResult("transitGatewayRouteTableId", "TransitGatewayRouteTableId", cfn_parse.FromCloudFormation.getString(properties.TransitGatewayRouteTableId));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnTransitGatewayRouteTableAssociation = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnTransitGatewayRouteTableAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "transitGatewayAttachmentId", this);
        cdk.requireProperty(props, "transitGatewayRouteTableId", this);
        this.transitGatewayAttachmentId = props.transitGatewayAttachmentId;
        this.transitGatewayRouteTableId = props.transitGatewayRouteTableId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnTransitGatewayRouteTableAssociationPropsFromCloudFormation(resourceProperties);
        const ret = new CfnTransitGatewayRouteTableAssociation(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnTransitGatewayRouteTableAssociation.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          transitGatewayAttachmentId: this.transitGatewayAttachmentId,
          transitGatewayRouteTableId: this.transitGatewayRouteTableId
        };
      }
      renderProperties(props) {
        return cfnTransitGatewayRouteTableAssociationPropsToCloudFormation(props);
      }
    };
    exports2.CfnTransitGatewayRouteTableAssociation = CfnTransitGatewayRouteTableAssociation;
    _32 = JSII_RTTI_SYMBOL_1;
    CfnTransitGatewayRouteTableAssociation[_32] = { fqn: "@aws-cdk/aws-ec2.CfnTransitGatewayRouteTableAssociation", version: "1.132.0" };
    CfnTransitGatewayRouteTableAssociation.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::TransitGatewayRouteTableAssociation";
    function CfnTransitGatewayRouteTablePropagationPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("transitGatewayAttachmentId", cdk.requiredValidator)(properties.transitGatewayAttachmentId));
      errors.collect(cdk.propertyValidator("transitGatewayAttachmentId", cdk.validateString)(properties.transitGatewayAttachmentId));
      errors.collect(cdk.propertyValidator("transitGatewayRouteTableId", cdk.requiredValidator)(properties.transitGatewayRouteTableId));
      errors.collect(cdk.propertyValidator("transitGatewayRouteTableId", cdk.validateString)(properties.transitGatewayRouteTableId));
      return errors.wrap('supplied properties not correct for "CfnTransitGatewayRouteTablePropagationProps"');
    }
    function cfnTransitGatewayRouteTablePropagationPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnTransitGatewayRouteTablePropagationPropsValidator(properties).assertSuccess();
      return {
        TransitGatewayAttachmentId: cdk.stringToCloudFormation(properties.transitGatewayAttachmentId),
        TransitGatewayRouteTableId: cdk.stringToCloudFormation(properties.transitGatewayRouteTableId)
      };
    }
    function CfnTransitGatewayRouteTablePropagationPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("transitGatewayAttachmentId", "TransitGatewayAttachmentId", cfn_parse.FromCloudFormation.getString(properties.TransitGatewayAttachmentId));
      ret.addPropertyResult("transitGatewayRouteTableId", "TransitGatewayRouteTableId", cfn_parse.FromCloudFormation.getString(properties.TransitGatewayRouteTableId));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnTransitGatewayRouteTablePropagation = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnTransitGatewayRouteTablePropagation.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "transitGatewayAttachmentId", this);
        cdk.requireProperty(props, "transitGatewayRouteTableId", this);
        this.transitGatewayAttachmentId = props.transitGatewayAttachmentId;
        this.transitGatewayRouteTableId = props.transitGatewayRouteTableId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnTransitGatewayRouteTablePropagationPropsFromCloudFormation(resourceProperties);
        const ret = new CfnTransitGatewayRouteTablePropagation(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnTransitGatewayRouteTablePropagation.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          transitGatewayAttachmentId: this.transitGatewayAttachmentId,
          transitGatewayRouteTableId: this.transitGatewayRouteTableId
        };
      }
      renderProperties(props) {
        return cfnTransitGatewayRouteTablePropagationPropsToCloudFormation(props);
      }
    };
    exports2.CfnTransitGatewayRouteTablePropagation = CfnTransitGatewayRouteTablePropagation;
    _33 = JSII_RTTI_SYMBOL_1;
    CfnTransitGatewayRouteTablePropagation[_33] = { fqn: "@aws-cdk/aws-ec2.CfnTransitGatewayRouteTablePropagation", version: "1.132.0" };
    CfnTransitGatewayRouteTablePropagation.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::TransitGatewayRouteTablePropagation";
    function CfnTransitGatewayVpcAttachmentPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("addSubnetIds", cdk.listValidator(cdk.validateString))(properties.addSubnetIds));
      errors.collect(cdk.propertyValidator("options", cdk.validateObject)(properties.options));
      errors.collect(cdk.propertyValidator("removeSubnetIds", cdk.listValidator(cdk.validateString))(properties.removeSubnetIds));
      errors.collect(cdk.propertyValidator("subnetIds", cdk.listValidator(cdk.validateString))(properties.subnetIds));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("transitGatewayId", cdk.validateString)(properties.transitGatewayId));
      errors.collect(cdk.propertyValidator("vpcId", cdk.validateString)(properties.vpcId));
      return errors.wrap('supplied properties not correct for "CfnTransitGatewayVpcAttachmentProps"');
    }
    function cfnTransitGatewayVpcAttachmentPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnTransitGatewayVpcAttachmentPropsValidator(properties).assertSuccess();
      return {
        AddSubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.addSubnetIds),
        Options: cdk.objectToCloudFormation(properties.options),
        RemoveSubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.removeSubnetIds),
        SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
        TransitGatewayId: cdk.stringToCloudFormation(properties.transitGatewayId),
        VpcId: cdk.stringToCloudFormation(properties.vpcId)
      };
    }
    function CfnTransitGatewayVpcAttachmentPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("addSubnetIds", "AddSubnetIds", properties.AddSubnetIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AddSubnetIds) : void 0);
      ret.addPropertyResult("options", "Options", properties.Options != null ? cfn_parse.FromCloudFormation.getAny(properties.Options) : void 0);
      ret.addPropertyResult("removeSubnetIds", "RemoveSubnetIds", properties.RemoveSubnetIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.RemoveSubnetIds) : void 0);
      ret.addPropertyResult("subnetIds", "SubnetIds", properties.SubnetIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addPropertyResult("transitGatewayId", "TransitGatewayId", properties.TransitGatewayId != null ? cfn_parse.FromCloudFormation.getString(properties.TransitGatewayId) : void 0);
      ret.addPropertyResult("vpcId", "VpcId", properties.VpcId != null ? cfn_parse.FromCloudFormation.getString(properties.VpcId) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnTransitGatewayVpcAttachment = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnTransitGatewayVpcAttachment.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.attrId = cdk.Token.asString(this.getAtt("Id"));
        this.addSubnetIds = props.addSubnetIds;
        this.options = props.options;
        this.removeSubnetIds = props.removeSubnetIds;
        this.subnetIds = props.subnetIds;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::TransitGatewayVpcAttachment", props.tags, { tagPropertyName: "tags" });
        this.transitGatewayId = props.transitGatewayId;
        this.vpcId = props.vpcId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnTransitGatewayVpcAttachmentPropsFromCloudFormation(resourceProperties);
        const ret = new CfnTransitGatewayVpcAttachment(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnTransitGatewayVpcAttachment.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          addSubnetIds: this.addSubnetIds,
          options: this.options,
          removeSubnetIds: this.removeSubnetIds,
          subnetIds: this.subnetIds,
          tags: this.tags.renderTags(),
          transitGatewayId: this.transitGatewayId,
          vpcId: this.vpcId
        };
      }
      renderProperties(props) {
        return cfnTransitGatewayVpcAttachmentPropsToCloudFormation(props);
      }
    };
    exports2.CfnTransitGatewayVpcAttachment = CfnTransitGatewayVpcAttachment;
    _34 = JSII_RTTI_SYMBOL_1;
    CfnTransitGatewayVpcAttachment[_34] = { fqn: "@aws-cdk/aws-ec2.CfnTransitGatewayVpcAttachment", version: "1.132.0" };
    CfnTransitGatewayVpcAttachment.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::TransitGatewayVpcAttachment";
    function CfnVPCPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("cidrBlock", cdk.requiredValidator)(properties.cidrBlock));
      errors.collect(cdk.propertyValidator("cidrBlock", cdk.validateString)(properties.cidrBlock));
      errors.collect(cdk.propertyValidator("enableDnsHostnames", cdk.validateBoolean)(properties.enableDnsHostnames));
      errors.collect(cdk.propertyValidator("enableDnsSupport", cdk.validateBoolean)(properties.enableDnsSupport));
      errors.collect(cdk.propertyValidator("instanceTenancy", cdk.validateString)(properties.instanceTenancy));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnVPCProps"');
    }
    function cfnVPCPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnVPCPropsValidator(properties).assertSuccess();
      return {
        CidrBlock: cdk.stringToCloudFormation(properties.cidrBlock),
        EnableDnsHostnames: cdk.booleanToCloudFormation(properties.enableDnsHostnames),
        EnableDnsSupport: cdk.booleanToCloudFormation(properties.enableDnsSupport),
        InstanceTenancy: cdk.stringToCloudFormation(properties.instanceTenancy),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnVPCPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("cidrBlock", "CidrBlock", cfn_parse.FromCloudFormation.getString(properties.CidrBlock));
      ret.addPropertyResult("enableDnsHostnames", "EnableDnsHostnames", properties.EnableDnsHostnames != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableDnsHostnames) : void 0);
      ret.addPropertyResult("enableDnsSupport", "EnableDnsSupport", properties.EnableDnsSupport != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableDnsSupport) : void 0);
      ret.addPropertyResult("instanceTenancy", "InstanceTenancy", properties.InstanceTenancy != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceTenancy) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnVPC = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnVPC.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "cidrBlock", this);
        this.attrCidrBlock = cdk.Token.asString(this.getAtt("CidrBlock"));
        this.attrCidrBlockAssociations = cdk.Token.asList(this.getAtt("CidrBlockAssociations"));
        this.attrDefaultNetworkAcl = cdk.Token.asString(this.getAtt("DefaultNetworkAcl"));
        this.attrDefaultSecurityGroup = cdk.Token.asString(this.getAtt("DefaultSecurityGroup"));
        this.attrIpv6CidrBlocks = cdk.Token.asList(this.getAtt("Ipv6CidrBlocks"));
        this.cidrBlock = props.cidrBlock;
        this.enableDnsHostnames = props.enableDnsHostnames;
        this.enableDnsSupport = props.enableDnsSupport;
        this.instanceTenancy = props.instanceTenancy;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::VPC", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnVPCPropsFromCloudFormation(resourceProperties);
        const ret = new CfnVPC(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnVPC.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          cidrBlock: this.cidrBlock,
          enableDnsHostnames: this.enableDnsHostnames,
          enableDnsSupport: this.enableDnsSupport,
          instanceTenancy: this.instanceTenancy,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnVPCPropsToCloudFormation(props);
      }
    };
    exports2.CfnVPC = CfnVPC;
    _35 = JSII_RTTI_SYMBOL_1;
    CfnVPC[_35] = { fqn: "@aws-cdk/aws-ec2.CfnVPC", version: "1.132.0" };
    CfnVPC.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::VPC";
    function CfnVPCCidrBlockPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("amazonProvidedIpv6CidrBlock", cdk.validateBoolean)(properties.amazonProvidedIpv6CidrBlock));
      errors.collect(cdk.propertyValidator("cidrBlock", cdk.validateString)(properties.cidrBlock));
      errors.collect(cdk.propertyValidator("ipv6CidrBlock", cdk.validateString)(properties.ipv6CidrBlock));
      errors.collect(cdk.propertyValidator("ipv6Pool", cdk.validateString)(properties.ipv6Pool));
      errors.collect(cdk.propertyValidator("vpcId", cdk.requiredValidator)(properties.vpcId));
      errors.collect(cdk.propertyValidator("vpcId", cdk.validateString)(properties.vpcId));
      return errors.wrap('supplied properties not correct for "CfnVPCCidrBlockProps"');
    }
    function cfnVPCCidrBlockPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnVPCCidrBlockPropsValidator(properties).assertSuccess();
      return {
        VpcId: cdk.stringToCloudFormation(properties.vpcId),
        AmazonProvidedIpv6CidrBlock: cdk.booleanToCloudFormation(properties.amazonProvidedIpv6CidrBlock),
        CidrBlock: cdk.stringToCloudFormation(properties.cidrBlock),
        Ipv6CidrBlock: cdk.stringToCloudFormation(properties.ipv6CidrBlock),
        Ipv6Pool: cdk.stringToCloudFormation(properties.ipv6Pool)
      };
    }
    function CfnVPCCidrBlockPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("vpcId", "VpcId", cfn_parse.FromCloudFormation.getString(properties.VpcId));
      ret.addPropertyResult("amazonProvidedIpv6CidrBlock", "AmazonProvidedIpv6CidrBlock", properties.AmazonProvidedIpv6CidrBlock != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AmazonProvidedIpv6CidrBlock) : void 0);
      ret.addPropertyResult("cidrBlock", "CidrBlock", properties.CidrBlock != null ? cfn_parse.FromCloudFormation.getString(properties.CidrBlock) : void 0);
      ret.addPropertyResult("ipv6CidrBlock", "Ipv6CidrBlock", properties.Ipv6CidrBlock != null ? cfn_parse.FromCloudFormation.getString(properties.Ipv6CidrBlock) : void 0);
      ret.addPropertyResult("ipv6Pool", "Ipv6Pool", properties.Ipv6Pool != null ? cfn_parse.FromCloudFormation.getString(properties.Ipv6Pool) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnVPCCidrBlock = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnVPCCidrBlock.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "vpcId", this);
        this.vpcId = props.vpcId;
        this.amazonProvidedIpv6CidrBlock = props.amazonProvidedIpv6CidrBlock;
        this.cidrBlock = props.cidrBlock;
        this.ipv6CidrBlock = props.ipv6CidrBlock;
        this.ipv6Pool = props.ipv6Pool;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnVPCCidrBlockPropsFromCloudFormation(resourceProperties);
        const ret = new CfnVPCCidrBlock(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnVPCCidrBlock.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          vpcId: this.vpcId,
          amazonProvidedIpv6CidrBlock: this.amazonProvidedIpv6CidrBlock,
          cidrBlock: this.cidrBlock,
          ipv6CidrBlock: this.ipv6CidrBlock,
          ipv6Pool: this.ipv6Pool
        };
      }
      renderProperties(props) {
        return cfnVPCCidrBlockPropsToCloudFormation(props);
      }
    };
    exports2.CfnVPCCidrBlock = CfnVPCCidrBlock;
    _36 = JSII_RTTI_SYMBOL_1;
    CfnVPCCidrBlock[_36] = { fqn: "@aws-cdk/aws-ec2.CfnVPCCidrBlock", version: "1.132.0" };
    CfnVPCCidrBlock.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::VPCCidrBlock";
    function CfnVPCDHCPOptionsAssociationPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("dhcpOptionsId", cdk.requiredValidator)(properties.dhcpOptionsId));
      errors.collect(cdk.propertyValidator("dhcpOptionsId", cdk.validateString)(properties.dhcpOptionsId));
      errors.collect(cdk.propertyValidator("vpcId", cdk.requiredValidator)(properties.vpcId));
      errors.collect(cdk.propertyValidator("vpcId", cdk.validateString)(properties.vpcId));
      return errors.wrap('supplied properties not correct for "CfnVPCDHCPOptionsAssociationProps"');
    }
    function cfnVPCDHCPOptionsAssociationPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnVPCDHCPOptionsAssociationPropsValidator(properties).assertSuccess();
      return {
        DhcpOptionsId: cdk.stringToCloudFormation(properties.dhcpOptionsId),
        VpcId: cdk.stringToCloudFormation(properties.vpcId)
      };
    }
    function CfnVPCDHCPOptionsAssociationPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("dhcpOptionsId", "DhcpOptionsId", cfn_parse.FromCloudFormation.getString(properties.DhcpOptionsId));
      ret.addPropertyResult("vpcId", "VpcId", cfn_parse.FromCloudFormation.getString(properties.VpcId));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnVPCDHCPOptionsAssociation = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnVPCDHCPOptionsAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "dhcpOptionsId", this);
        cdk.requireProperty(props, "vpcId", this);
        this.dhcpOptionsId = props.dhcpOptionsId;
        this.vpcId = props.vpcId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnVPCDHCPOptionsAssociationPropsFromCloudFormation(resourceProperties);
        const ret = new CfnVPCDHCPOptionsAssociation(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnVPCDHCPOptionsAssociation.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          dhcpOptionsId: this.dhcpOptionsId,
          vpcId: this.vpcId
        };
      }
      renderProperties(props) {
        return cfnVPCDHCPOptionsAssociationPropsToCloudFormation(props);
      }
    };
    exports2.CfnVPCDHCPOptionsAssociation = CfnVPCDHCPOptionsAssociation;
    _37 = JSII_RTTI_SYMBOL_1;
    CfnVPCDHCPOptionsAssociation[_37] = { fqn: "@aws-cdk/aws-ec2.CfnVPCDHCPOptionsAssociation", version: "1.132.0" };
    CfnVPCDHCPOptionsAssociation.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::VPCDHCPOptionsAssociation";
    function CfnVPCEndpointPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("policyDocument", cdk.validateObject)(properties.policyDocument));
      errors.collect(cdk.propertyValidator("privateDnsEnabled", cdk.validateBoolean)(properties.privateDnsEnabled));
      errors.collect(cdk.propertyValidator("routeTableIds", cdk.listValidator(cdk.validateString))(properties.routeTableIds));
      errors.collect(cdk.propertyValidator("securityGroupIds", cdk.listValidator(cdk.validateString))(properties.securityGroupIds));
      errors.collect(cdk.propertyValidator("serviceName", cdk.requiredValidator)(properties.serviceName));
      errors.collect(cdk.propertyValidator("serviceName", cdk.validateString)(properties.serviceName));
      errors.collect(cdk.propertyValidator("subnetIds", cdk.listValidator(cdk.validateString))(properties.subnetIds));
      errors.collect(cdk.propertyValidator("vpcEndpointType", cdk.validateString)(properties.vpcEndpointType));
      errors.collect(cdk.propertyValidator("vpcId", cdk.requiredValidator)(properties.vpcId));
      errors.collect(cdk.propertyValidator("vpcId", cdk.validateString)(properties.vpcId));
      return errors.wrap('supplied properties not correct for "CfnVPCEndpointProps"');
    }
    function cfnVPCEndpointPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnVPCEndpointPropsValidator(properties).assertSuccess();
      return {
        ServiceName: cdk.stringToCloudFormation(properties.serviceName),
        VpcId: cdk.stringToCloudFormation(properties.vpcId),
        PolicyDocument: cdk.objectToCloudFormation(properties.policyDocument),
        PrivateDnsEnabled: cdk.booleanToCloudFormation(properties.privateDnsEnabled),
        RouteTableIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.routeTableIds),
        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),
        SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),
        VpcEndpointType: cdk.stringToCloudFormation(properties.vpcEndpointType)
      };
    }
    function CfnVPCEndpointPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("serviceName", "ServiceName", cfn_parse.FromCloudFormation.getString(properties.ServiceName));
      ret.addPropertyResult("vpcId", "VpcId", cfn_parse.FromCloudFormation.getString(properties.VpcId));
      ret.addPropertyResult("policyDocument", "PolicyDocument", properties.PolicyDocument != null ? cfn_parse.FromCloudFormation.getAny(properties.PolicyDocument) : void 0);
      ret.addPropertyResult("privateDnsEnabled", "PrivateDnsEnabled", properties.PrivateDnsEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.PrivateDnsEnabled) : void 0);
      ret.addPropertyResult("routeTableIds", "RouteTableIds", properties.RouteTableIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.RouteTableIds) : void 0);
      ret.addPropertyResult("securityGroupIds", "SecurityGroupIds", properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds) : void 0);
      ret.addPropertyResult("subnetIds", "SubnetIds", properties.SubnetIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds) : void 0);
      ret.addPropertyResult("vpcEndpointType", "VpcEndpointType", properties.VpcEndpointType != null ? cfn_parse.FromCloudFormation.getString(properties.VpcEndpointType) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnVPCEndpoint = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnVPCEndpoint.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "serviceName", this);
        cdk.requireProperty(props, "vpcId", this);
        this.attrCreationTimestamp = cdk.Token.asString(this.getAtt("CreationTimestamp"));
        this.attrDnsEntries = cdk.Token.asList(this.getAtt("DnsEntries"));
        this.attrNetworkInterfaceIds = cdk.Token.asList(this.getAtt("NetworkInterfaceIds"));
        this.serviceName = props.serviceName;
        this.vpcId = props.vpcId;
        this.policyDocument = props.policyDocument;
        this.privateDnsEnabled = props.privateDnsEnabled;
        this.routeTableIds = props.routeTableIds;
        this.securityGroupIds = props.securityGroupIds;
        this.subnetIds = props.subnetIds;
        this.vpcEndpointType = props.vpcEndpointType;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnVPCEndpointPropsFromCloudFormation(resourceProperties);
        const ret = new CfnVPCEndpoint(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnVPCEndpoint.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          serviceName: this.serviceName,
          vpcId: this.vpcId,
          policyDocument: this.policyDocument,
          privateDnsEnabled: this.privateDnsEnabled,
          routeTableIds: this.routeTableIds,
          securityGroupIds: this.securityGroupIds,
          subnetIds: this.subnetIds,
          vpcEndpointType: this.vpcEndpointType
        };
      }
      renderProperties(props) {
        return cfnVPCEndpointPropsToCloudFormation(props);
      }
    };
    exports2.CfnVPCEndpoint = CfnVPCEndpoint;
    _38 = JSII_RTTI_SYMBOL_1;
    CfnVPCEndpoint[_38] = { fqn: "@aws-cdk/aws-ec2.CfnVPCEndpoint", version: "1.132.0" };
    CfnVPCEndpoint.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::VPCEndpoint";
    function CfnVPCEndpointConnectionNotificationPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("connectionEvents", cdk.requiredValidator)(properties.connectionEvents));
      errors.collect(cdk.propertyValidator("connectionEvents", cdk.listValidator(cdk.validateString))(properties.connectionEvents));
      errors.collect(cdk.propertyValidator("connectionNotificationArn", cdk.requiredValidator)(properties.connectionNotificationArn));
      errors.collect(cdk.propertyValidator("connectionNotificationArn", cdk.validateString)(properties.connectionNotificationArn));
      errors.collect(cdk.propertyValidator("serviceId", cdk.validateString)(properties.serviceId));
      errors.collect(cdk.propertyValidator("vpcEndpointId", cdk.validateString)(properties.vpcEndpointId));
      return errors.wrap('supplied properties not correct for "CfnVPCEndpointConnectionNotificationProps"');
    }
    function cfnVPCEndpointConnectionNotificationPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnVPCEndpointConnectionNotificationPropsValidator(properties).assertSuccess();
      return {
        ConnectionEvents: cdk.listMapper(cdk.stringToCloudFormation)(properties.connectionEvents),
        ConnectionNotificationArn: cdk.stringToCloudFormation(properties.connectionNotificationArn),
        ServiceId: cdk.stringToCloudFormation(properties.serviceId),
        VPCEndpointId: cdk.stringToCloudFormation(properties.vpcEndpointId)
      };
    }
    function CfnVPCEndpointConnectionNotificationPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("connectionEvents", "ConnectionEvents", cfn_parse.FromCloudFormation.getStringArray(properties.ConnectionEvents));
      ret.addPropertyResult("connectionNotificationArn", "ConnectionNotificationArn", cfn_parse.FromCloudFormation.getString(properties.ConnectionNotificationArn));
      ret.addPropertyResult("serviceId", "ServiceId", properties.ServiceId != null ? cfn_parse.FromCloudFormation.getString(properties.ServiceId) : void 0);
      ret.addPropertyResult("vpcEndpointId", "VPCEndpointId", properties.VPCEndpointId != null ? cfn_parse.FromCloudFormation.getString(properties.VPCEndpointId) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnVPCEndpointConnectionNotification = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnVPCEndpointConnectionNotification.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "connectionEvents", this);
        cdk.requireProperty(props, "connectionNotificationArn", this);
        this.connectionEvents = props.connectionEvents;
        this.connectionNotificationArn = props.connectionNotificationArn;
        this.serviceId = props.serviceId;
        this.vpcEndpointId = props.vpcEndpointId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnVPCEndpointConnectionNotificationPropsFromCloudFormation(resourceProperties);
        const ret = new CfnVPCEndpointConnectionNotification(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnVPCEndpointConnectionNotification.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          connectionEvents: this.connectionEvents,
          connectionNotificationArn: this.connectionNotificationArn,
          serviceId: this.serviceId,
          vpcEndpointId: this.vpcEndpointId
        };
      }
      renderProperties(props) {
        return cfnVPCEndpointConnectionNotificationPropsToCloudFormation(props);
      }
    };
    exports2.CfnVPCEndpointConnectionNotification = CfnVPCEndpointConnectionNotification;
    _39 = JSII_RTTI_SYMBOL_1;
    CfnVPCEndpointConnectionNotification[_39] = { fqn: "@aws-cdk/aws-ec2.CfnVPCEndpointConnectionNotification", version: "1.132.0" };
    CfnVPCEndpointConnectionNotification.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::VPCEndpointConnectionNotification";
    function CfnVPCEndpointServicePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("acceptanceRequired", cdk.validateBoolean)(properties.acceptanceRequired));
      errors.collect(cdk.propertyValidator("gatewayLoadBalancerArns", cdk.listValidator(cdk.validateString))(properties.gatewayLoadBalancerArns));
      errors.collect(cdk.propertyValidator("networkLoadBalancerArns", cdk.listValidator(cdk.validateString))(properties.networkLoadBalancerArns));
      errors.collect(cdk.propertyValidator("payerResponsibility", cdk.validateString)(properties.payerResponsibility));
      return errors.wrap('supplied properties not correct for "CfnVPCEndpointServiceProps"');
    }
    function cfnVPCEndpointServicePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnVPCEndpointServicePropsValidator(properties).assertSuccess();
      return {
        AcceptanceRequired: cdk.booleanToCloudFormation(properties.acceptanceRequired),
        GatewayLoadBalancerArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.gatewayLoadBalancerArns),
        NetworkLoadBalancerArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.networkLoadBalancerArns),
        PayerResponsibility: cdk.stringToCloudFormation(properties.payerResponsibility)
      };
    }
    function CfnVPCEndpointServicePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("acceptanceRequired", "AcceptanceRequired", properties.AcceptanceRequired != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AcceptanceRequired) : void 0);
      ret.addPropertyResult("gatewayLoadBalancerArns", "GatewayLoadBalancerArns", properties.GatewayLoadBalancerArns != null ? cfn_parse.FromCloudFormation.getStringArray(properties.GatewayLoadBalancerArns) : void 0);
      ret.addPropertyResult("networkLoadBalancerArns", "NetworkLoadBalancerArns", properties.NetworkLoadBalancerArns != null ? cfn_parse.FromCloudFormation.getStringArray(properties.NetworkLoadBalancerArns) : void 0);
      ret.addPropertyResult("payerResponsibility", "PayerResponsibility", properties.PayerResponsibility != null ? cfn_parse.FromCloudFormation.getString(properties.PayerResponsibility) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnVPCEndpointService = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnVPCEndpointService.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.acceptanceRequired = props.acceptanceRequired;
        this.gatewayLoadBalancerArns = props.gatewayLoadBalancerArns;
        this.networkLoadBalancerArns = props.networkLoadBalancerArns;
        this.payerResponsibility = props.payerResponsibility;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnVPCEndpointServicePropsFromCloudFormation(resourceProperties);
        const ret = new CfnVPCEndpointService(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnVPCEndpointService.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          acceptanceRequired: this.acceptanceRequired,
          gatewayLoadBalancerArns: this.gatewayLoadBalancerArns,
          networkLoadBalancerArns: this.networkLoadBalancerArns,
          payerResponsibility: this.payerResponsibility
        };
      }
      renderProperties(props) {
        return cfnVPCEndpointServicePropsToCloudFormation(props);
      }
    };
    exports2.CfnVPCEndpointService = CfnVPCEndpointService;
    _40 = JSII_RTTI_SYMBOL_1;
    CfnVPCEndpointService[_40] = { fqn: "@aws-cdk/aws-ec2.CfnVPCEndpointService", version: "1.132.0" };
    CfnVPCEndpointService.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::VPCEndpointService";
    function CfnVPCEndpointServicePermissionsPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("allowedPrincipals", cdk.listValidator(cdk.validateString))(properties.allowedPrincipals));
      errors.collect(cdk.propertyValidator("serviceId", cdk.requiredValidator)(properties.serviceId));
      errors.collect(cdk.propertyValidator("serviceId", cdk.validateString)(properties.serviceId));
      return errors.wrap('supplied properties not correct for "CfnVPCEndpointServicePermissionsProps"');
    }
    function cfnVPCEndpointServicePermissionsPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnVPCEndpointServicePermissionsPropsValidator(properties).assertSuccess();
      return {
        ServiceId: cdk.stringToCloudFormation(properties.serviceId),
        AllowedPrincipals: cdk.listMapper(cdk.stringToCloudFormation)(properties.allowedPrincipals)
      };
    }
    function CfnVPCEndpointServicePermissionsPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("serviceId", "ServiceId", cfn_parse.FromCloudFormation.getString(properties.ServiceId));
      ret.addPropertyResult("allowedPrincipals", "AllowedPrincipals", properties.AllowedPrincipals != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AllowedPrincipals) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnVPCEndpointServicePermissions = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnVPCEndpointServicePermissions.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "serviceId", this);
        this.serviceId = props.serviceId;
        this.allowedPrincipals = props.allowedPrincipals;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnVPCEndpointServicePermissionsPropsFromCloudFormation(resourceProperties);
        const ret = new CfnVPCEndpointServicePermissions(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnVPCEndpointServicePermissions.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          serviceId: this.serviceId,
          allowedPrincipals: this.allowedPrincipals
        };
      }
      renderProperties(props) {
        return cfnVPCEndpointServicePermissionsPropsToCloudFormation(props);
      }
    };
    exports2.CfnVPCEndpointServicePermissions = CfnVPCEndpointServicePermissions;
    _41 = JSII_RTTI_SYMBOL_1;
    CfnVPCEndpointServicePermissions[_41] = { fqn: "@aws-cdk/aws-ec2.CfnVPCEndpointServicePermissions", version: "1.132.0" };
    CfnVPCEndpointServicePermissions.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::VPCEndpointServicePermissions";
    function CfnVPCGatewayAttachmentPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("internetGatewayId", cdk.validateString)(properties.internetGatewayId));
      errors.collect(cdk.propertyValidator("vpcId", cdk.requiredValidator)(properties.vpcId));
      errors.collect(cdk.propertyValidator("vpcId", cdk.validateString)(properties.vpcId));
      errors.collect(cdk.propertyValidator("vpnGatewayId", cdk.validateString)(properties.vpnGatewayId));
      return errors.wrap('supplied properties not correct for "CfnVPCGatewayAttachmentProps"');
    }
    function cfnVPCGatewayAttachmentPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnVPCGatewayAttachmentPropsValidator(properties).assertSuccess();
      return {
        VpcId: cdk.stringToCloudFormation(properties.vpcId),
        InternetGatewayId: cdk.stringToCloudFormation(properties.internetGatewayId),
        VpnGatewayId: cdk.stringToCloudFormation(properties.vpnGatewayId)
      };
    }
    function CfnVPCGatewayAttachmentPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("vpcId", "VpcId", cfn_parse.FromCloudFormation.getString(properties.VpcId));
      ret.addPropertyResult("internetGatewayId", "InternetGatewayId", properties.InternetGatewayId != null ? cfn_parse.FromCloudFormation.getString(properties.InternetGatewayId) : void 0);
      ret.addPropertyResult("vpnGatewayId", "VpnGatewayId", properties.VpnGatewayId != null ? cfn_parse.FromCloudFormation.getString(properties.VpnGatewayId) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnVPCGatewayAttachment = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnVPCGatewayAttachment.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "vpcId", this);
        this.vpcId = props.vpcId;
        this.internetGatewayId = props.internetGatewayId;
        this.vpnGatewayId = props.vpnGatewayId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnVPCGatewayAttachmentPropsFromCloudFormation(resourceProperties);
        const ret = new CfnVPCGatewayAttachment(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnVPCGatewayAttachment.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          vpcId: this.vpcId,
          internetGatewayId: this.internetGatewayId,
          vpnGatewayId: this.vpnGatewayId
        };
      }
      renderProperties(props) {
        return cfnVPCGatewayAttachmentPropsToCloudFormation(props);
      }
    };
    exports2.CfnVPCGatewayAttachment = CfnVPCGatewayAttachment;
    _42 = JSII_RTTI_SYMBOL_1;
    CfnVPCGatewayAttachment[_42] = { fqn: "@aws-cdk/aws-ec2.CfnVPCGatewayAttachment", version: "1.132.0" };
    CfnVPCGatewayAttachment.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::VPCGatewayAttachment";
    function CfnVPCPeeringConnectionPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("peerOwnerId", cdk.validateString)(properties.peerOwnerId));
      errors.collect(cdk.propertyValidator("peerRegion", cdk.validateString)(properties.peerRegion));
      errors.collect(cdk.propertyValidator("peerRoleArn", cdk.validateString)(properties.peerRoleArn));
      errors.collect(cdk.propertyValidator("peerVpcId", cdk.requiredValidator)(properties.peerVpcId));
      errors.collect(cdk.propertyValidator("peerVpcId", cdk.validateString)(properties.peerVpcId));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("vpcId", cdk.requiredValidator)(properties.vpcId));
      errors.collect(cdk.propertyValidator("vpcId", cdk.validateString)(properties.vpcId));
      return errors.wrap('supplied properties not correct for "CfnVPCPeeringConnectionProps"');
    }
    function cfnVPCPeeringConnectionPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnVPCPeeringConnectionPropsValidator(properties).assertSuccess();
      return {
        PeerVpcId: cdk.stringToCloudFormation(properties.peerVpcId),
        VpcId: cdk.stringToCloudFormation(properties.vpcId),
        PeerOwnerId: cdk.stringToCloudFormation(properties.peerOwnerId),
        PeerRegion: cdk.stringToCloudFormation(properties.peerRegion),
        PeerRoleArn: cdk.stringToCloudFormation(properties.peerRoleArn),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnVPCPeeringConnectionPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("peerVpcId", "PeerVpcId", cfn_parse.FromCloudFormation.getString(properties.PeerVpcId));
      ret.addPropertyResult("vpcId", "VpcId", cfn_parse.FromCloudFormation.getString(properties.VpcId));
      ret.addPropertyResult("peerOwnerId", "PeerOwnerId", properties.PeerOwnerId != null ? cfn_parse.FromCloudFormation.getString(properties.PeerOwnerId) : void 0);
      ret.addPropertyResult("peerRegion", "PeerRegion", properties.PeerRegion != null ? cfn_parse.FromCloudFormation.getString(properties.PeerRegion) : void 0);
      ret.addPropertyResult("peerRoleArn", "PeerRoleArn", properties.PeerRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.PeerRoleArn) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnVPCPeeringConnection = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnVPCPeeringConnection.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "peerVpcId", this);
        cdk.requireProperty(props, "vpcId", this);
        this.peerVpcId = props.peerVpcId;
        this.vpcId = props.vpcId;
        this.peerOwnerId = props.peerOwnerId;
        this.peerRegion = props.peerRegion;
        this.peerRoleArn = props.peerRoleArn;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::VPCPeeringConnection", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnVPCPeeringConnectionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnVPCPeeringConnection(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnVPCPeeringConnection.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          peerVpcId: this.peerVpcId,
          vpcId: this.vpcId,
          peerOwnerId: this.peerOwnerId,
          peerRegion: this.peerRegion,
          peerRoleArn: this.peerRoleArn,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnVPCPeeringConnectionPropsToCloudFormation(props);
      }
    };
    exports2.CfnVPCPeeringConnection = CfnVPCPeeringConnection;
    _43 = JSII_RTTI_SYMBOL_1;
    CfnVPCPeeringConnection[_43] = { fqn: "@aws-cdk/aws-ec2.CfnVPCPeeringConnection", version: "1.132.0" };
    CfnVPCPeeringConnection.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::VPCPeeringConnection";
    function CfnVPNConnectionPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("customerGatewayId", cdk.requiredValidator)(properties.customerGatewayId));
      errors.collect(cdk.propertyValidator("customerGatewayId", cdk.validateString)(properties.customerGatewayId));
      errors.collect(cdk.propertyValidator("staticRoutesOnly", cdk.validateBoolean)(properties.staticRoutesOnly));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("transitGatewayId", cdk.validateString)(properties.transitGatewayId));
      errors.collect(cdk.propertyValidator("type", cdk.requiredValidator)(properties.type));
      errors.collect(cdk.propertyValidator("type", cdk.validateString)(properties.type));
      errors.collect(cdk.propertyValidator("vpnGatewayId", cdk.validateString)(properties.vpnGatewayId));
      errors.collect(cdk.propertyValidator("vpnTunnelOptionsSpecifications", cdk.listValidator(CfnVPNConnection_VpnTunnelOptionsSpecificationPropertyValidator))(properties.vpnTunnelOptionsSpecifications));
      return errors.wrap('supplied properties not correct for "CfnVPNConnectionProps"');
    }
    function cfnVPNConnectionPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnVPNConnectionPropsValidator(properties).assertSuccess();
      return {
        CustomerGatewayId: cdk.stringToCloudFormation(properties.customerGatewayId),
        Type: cdk.stringToCloudFormation(properties.type),
        StaticRoutesOnly: cdk.booleanToCloudFormation(properties.staticRoutesOnly),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
        TransitGatewayId: cdk.stringToCloudFormation(properties.transitGatewayId),
        VpnGatewayId: cdk.stringToCloudFormation(properties.vpnGatewayId),
        VpnTunnelOptionsSpecifications: cdk.listMapper(cfnVPNConnectionVpnTunnelOptionsSpecificationPropertyToCloudFormation)(properties.vpnTunnelOptionsSpecifications)
      };
    }
    function CfnVPNConnectionPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("customerGatewayId", "CustomerGatewayId", cfn_parse.FromCloudFormation.getString(properties.CustomerGatewayId));
      ret.addPropertyResult("type", "Type", cfn_parse.FromCloudFormation.getString(properties.Type));
      ret.addPropertyResult("staticRoutesOnly", "StaticRoutesOnly", properties.StaticRoutesOnly != null ? cfn_parse.FromCloudFormation.getBoolean(properties.StaticRoutesOnly) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addPropertyResult("transitGatewayId", "TransitGatewayId", properties.TransitGatewayId != null ? cfn_parse.FromCloudFormation.getString(properties.TransitGatewayId) : void 0);
      ret.addPropertyResult("vpnGatewayId", "VpnGatewayId", properties.VpnGatewayId != null ? cfn_parse.FromCloudFormation.getString(properties.VpnGatewayId) : void 0);
      ret.addPropertyResult("vpnTunnelOptionsSpecifications", "VpnTunnelOptionsSpecifications", properties.VpnTunnelOptionsSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnVPNConnectionVpnTunnelOptionsSpecificationPropertyFromCloudFormation)(properties.VpnTunnelOptionsSpecifications) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnVPNConnection = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnVPNConnection.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "customerGatewayId", this);
        cdk.requireProperty(props, "type", this);
        this.customerGatewayId = props.customerGatewayId;
        this.type = props.type;
        this.staticRoutesOnly = props.staticRoutesOnly;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::VPNConnection", props.tags, { tagPropertyName: "tags" });
        this.transitGatewayId = props.transitGatewayId;
        this.vpnGatewayId = props.vpnGatewayId;
        this.vpnTunnelOptionsSpecifications = props.vpnTunnelOptionsSpecifications;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnVPNConnectionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnVPNConnection(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnVPNConnection.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          customerGatewayId: this.customerGatewayId,
          type: this.type,
          staticRoutesOnly: this.staticRoutesOnly,
          tags: this.tags.renderTags(),
          transitGatewayId: this.transitGatewayId,
          vpnGatewayId: this.vpnGatewayId,
          vpnTunnelOptionsSpecifications: this.vpnTunnelOptionsSpecifications
        };
      }
      renderProperties(props) {
        return cfnVPNConnectionPropsToCloudFormation(props);
      }
    };
    exports2.CfnVPNConnection = CfnVPNConnection;
    _44 = JSII_RTTI_SYMBOL_1;
    CfnVPNConnection[_44] = { fqn: "@aws-cdk/aws-ec2.CfnVPNConnection", version: "1.132.0" };
    CfnVPNConnection.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::VPNConnection";
    function CfnVPNConnection_VpnTunnelOptionsSpecificationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("preSharedKey", cdk.validateString)(properties.preSharedKey));
      errors.collect(cdk.propertyValidator("tunnelInsideCidr", cdk.validateString)(properties.tunnelInsideCidr));
      return errors.wrap('supplied properties not correct for "VpnTunnelOptionsSpecificationProperty"');
    }
    function cfnVPNConnectionVpnTunnelOptionsSpecificationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnVPNConnection_VpnTunnelOptionsSpecificationPropertyValidator(properties).assertSuccess();
      return {
        PreSharedKey: cdk.stringToCloudFormation(properties.preSharedKey),
        TunnelInsideCidr: cdk.stringToCloudFormation(properties.tunnelInsideCidr)
      };
    }
    function CfnVPNConnectionVpnTunnelOptionsSpecificationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("preSharedKey", "PreSharedKey", properties.PreSharedKey != null ? cfn_parse.FromCloudFormation.getString(properties.PreSharedKey) : void 0);
      ret.addPropertyResult("tunnelInsideCidr", "TunnelInsideCidr", properties.TunnelInsideCidr != null ? cfn_parse.FromCloudFormation.getString(properties.TunnelInsideCidr) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnVPNConnectionRoutePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("destinationCidrBlock", cdk.requiredValidator)(properties.destinationCidrBlock));
      errors.collect(cdk.propertyValidator("destinationCidrBlock", cdk.validateString)(properties.destinationCidrBlock));
      errors.collect(cdk.propertyValidator("vpnConnectionId", cdk.requiredValidator)(properties.vpnConnectionId));
      errors.collect(cdk.propertyValidator("vpnConnectionId", cdk.validateString)(properties.vpnConnectionId));
      return errors.wrap('supplied properties not correct for "CfnVPNConnectionRouteProps"');
    }
    function cfnVPNConnectionRoutePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnVPNConnectionRoutePropsValidator(properties).assertSuccess();
      return {
        DestinationCidrBlock: cdk.stringToCloudFormation(properties.destinationCidrBlock),
        VpnConnectionId: cdk.stringToCloudFormation(properties.vpnConnectionId)
      };
    }
    function CfnVPNConnectionRoutePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("destinationCidrBlock", "DestinationCidrBlock", cfn_parse.FromCloudFormation.getString(properties.DestinationCidrBlock));
      ret.addPropertyResult("vpnConnectionId", "VpnConnectionId", cfn_parse.FromCloudFormation.getString(properties.VpnConnectionId));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnVPNConnectionRoute = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnVPNConnectionRoute.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "destinationCidrBlock", this);
        cdk.requireProperty(props, "vpnConnectionId", this);
        this.destinationCidrBlock = props.destinationCidrBlock;
        this.vpnConnectionId = props.vpnConnectionId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnVPNConnectionRoutePropsFromCloudFormation(resourceProperties);
        const ret = new CfnVPNConnectionRoute(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnVPNConnectionRoute.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          destinationCidrBlock: this.destinationCidrBlock,
          vpnConnectionId: this.vpnConnectionId
        };
      }
      renderProperties(props) {
        return cfnVPNConnectionRoutePropsToCloudFormation(props);
      }
    };
    exports2.CfnVPNConnectionRoute = CfnVPNConnectionRoute;
    _45 = JSII_RTTI_SYMBOL_1;
    CfnVPNConnectionRoute[_45] = { fqn: "@aws-cdk/aws-ec2.CfnVPNConnectionRoute", version: "1.132.0" };
    CfnVPNConnectionRoute.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::VPNConnectionRoute";
    function CfnVPNGatewayPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("amazonSideAsn", cdk.validateNumber)(properties.amazonSideAsn));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("type", cdk.requiredValidator)(properties.type));
      errors.collect(cdk.propertyValidator("type", cdk.validateString)(properties.type));
      return errors.wrap('supplied properties not correct for "CfnVPNGatewayProps"');
    }
    function cfnVPNGatewayPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnVPNGatewayPropsValidator(properties).assertSuccess();
      return {
        Type: cdk.stringToCloudFormation(properties.type),
        AmazonSideAsn: cdk.numberToCloudFormation(properties.amazonSideAsn),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnVPNGatewayPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("type", "Type", cfn_parse.FromCloudFormation.getString(properties.Type));
      ret.addPropertyResult("amazonSideAsn", "AmazonSideAsn", properties.AmazonSideAsn != null ? cfn_parse.FromCloudFormation.getNumber(properties.AmazonSideAsn) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnVPNGateway = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnVPNGateway.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "type", this);
        this.type = props.type;
        this.amazonSideAsn = props.amazonSideAsn;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::VPNGateway", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnVPNGatewayPropsFromCloudFormation(resourceProperties);
        const ret = new CfnVPNGateway(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnVPNGateway.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          type: this.type,
          amazonSideAsn: this.amazonSideAsn,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnVPNGatewayPropsToCloudFormation(props);
      }
    };
    exports2.CfnVPNGateway = CfnVPNGateway;
    _46 = JSII_RTTI_SYMBOL_1;
    CfnVPNGateway[_46] = { fqn: "@aws-cdk/aws-ec2.CfnVPNGateway", version: "1.132.0" };
    CfnVPNGateway.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::VPNGateway";
    function CfnVPNGatewayRoutePropagationPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("routeTableIds", cdk.requiredValidator)(properties.routeTableIds));
      errors.collect(cdk.propertyValidator("routeTableIds", cdk.listValidator(cdk.validateString))(properties.routeTableIds));
      errors.collect(cdk.propertyValidator("vpnGatewayId", cdk.requiredValidator)(properties.vpnGatewayId));
      errors.collect(cdk.propertyValidator("vpnGatewayId", cdk.validateString)(properties.vpnGatewayId));
      return errors.wrap('supplied properties not correct for "CfnVPNGatewayRoutePropagationProps"');
    }
    function cfnVPNGatewayRoutePropagationPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnVPNGatewayRoutePropagationPropsValidator(properties).assertSuccess();
      return {
        RouteTableIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.routeTableIds),
        VpnGatewayId: cdk.stringToCloudFormation(properties.vpnGatewayId)
      };
    }
    function CfnVPNGatewayRoutePropagationPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("routeTableIds", "RouteTableIds", cfn_parse.FromCloudFormation.getStringArray(properties.RouteTableIds));
      ret.addPropertyResult("vpnGatewayId", "VpnGatewayId", cfn_parse.FromCloudFormation.getString(properties.VpnGatewayId));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnVPNGatewayRoutePropagation = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnVPNGatewayRoutePropagation.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "routeTableIds", this);
        cdk.requireProperty(props, "vpnGatewayId", this);
        this.routeTableIds = props.routeTableIds;
        this.vpnGatewayId = props.vpnGatewayId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnVPNGatewayRoutePropagationPropsFromCloudFormation(resourceProperties);
        const ret = new CfnVPNGatewayRoutePropagation(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnVPNGatewayRoutePropagation.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          routeTableIds: this.routeTableIds,
          vpnGatewayId: this.vpnGatewayId
        };
      }
      renderProperties(props) {
        return cfnVPNGatewayRoutePropagationPropsToCloudFormation(props);
      }
    };
    exports2.CfnVPNGatewayRoutePropagation = CfnVPNGatewayRoutePropagation;
    _47 = JSII_RTTI_SYMBOL_1;
    CfnVPNGatewayRoutePropagation[_47] = { fqn: "@aws-cdk/aws-ec2.CfnVPNGatewayRoutePropagation", version: "1.132.0" };
    CfnVPNGatewayRoutePropagation.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::VPNGatewayRoutePropagation";
    function CfnVolumePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("autoEnableIo", cdk.validateBoolean)(properties.autoEnableIo));
      errors.collect(cdk.propertyValidator("availabilityZone", cdk.requiredValidator)(properties.availabilityZone));
      errors.collect(cdk.propertyValidator("availabilityZone", cdk.validateString)(properties.availabilityZone));
      errors.collect(cdk.propertyValidator("encrypted", cdk.validateBoolean)(properties.encrypted));
      errors.collect(cdk.propertyValidator("iops", cdk.validateNumber)(properties.iops));
      errors.collect(cdk.propertyValidator("kmsKeyId", cdk.validateString)(properties.kmsKeyId));
      errors.collect(cdk.propertyValidator("multiAttachEnabled", cdk.validateBoolean)(properties.multiAttachEnabled));
      errors.collect(cdk.propertyValidator("outpostArn", cdk.validateString)(properties.outpostArn));
      errors.collect(cdk.propertyValidator("size", cdk.validateNumber)(properties.size));
      errors.collect(cdk.propertyValidator("snapshotId", cdk.validateString)(properties.snapshotId));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("throughput", cdk.validateNumber)(properties.throughput));
      errors.collect(cdk.propertyValidator("volumeType", cdk.validateString)(properties.volumeType));
      return errors.wrap('supplied properties not correct for "CfnVolumeProps"');
    }
    function cfnVolumePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnVolumePropsValidator(properties).assertSuccess();
      return {
        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),
        AutoEnableIO: cdk.booleanToCloudFormation(properties.autoEnableIo),
        Encrypted: cdk.booleanToCloudFormation(properties.encrypted),
        Iops: cdk.numberToCloudFormation(properties.iops),
        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),
        MultiAttachEnabled: cdk.booleanToCloudFormation(properties.multiAttachEnabled),
        OutpostArn: cdk.stringToCloudFormation(properties.outpostArn),
        Size: cdk.numberToCloudFormation(properties.size),
        SnapshotId: cdk.stringToCloudFormation(properties.snapshotId),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
        Throughput: cdk.numberToCloudFormation(properties.throughput),
        VolumeType: cdk.stringToCloudFormation(properties.volumeType)
      };
    }
    function CfnVolumePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("availabilityZone", "AvailabilityZone", cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone));
      ret.addPropertyResult("autoEnableIo", "AutoEnableIO", properties.AutoEnableIO != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AutoEnableIO) : void 0);
      ret.addPropertyResult("encrypted", "Encrypted", properties.Encrypted != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Encrypted) : void 0);
      ret.addPropertyResult("iops", "Iops", properties.Iops != null ? cfn_parse.FromCloudFormation.getNumber(properties.Iops) : void 0);
      ret.addPropertyResult("kmsKeyId", "KmsKeyId", properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : void 0);
      ret.addPropertyResult("multiAttachEnabled", "MultiAttachEnabled", properties.MultiAttachEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.MultiAttachEnabled) : void 0);
      ret.addPropertyResult("outpostArn", "OutpostArn", properties.OutpostArn != null ? cfn_parse.FromCloudFormation.getString(properties.OutpostArn) : void 0);
      ret.addPropertyResult("size", "Size", properties.Size != null ? cfn_parse.FromCloudFormation.getNumber(properties.Size) : void 0);
      ret.addPropertyResult("snapshotId", "SnapshotId", properties.SnapshotId != null ? cfn_parse.FromCloudFormation.getString(properties.SnapshotId) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addPropertyResult("throughput", "Throughput", properties.Throughput != null ? cfn_parse.FromCloudFormation.getNumber(properties.Throughput) : void 0);
      ret.addPropertyResult("volumeType", "VolumeType", properties.VolumeType != null ? cfn_parse.FromCloudFormation.getString(properties.VolumeType) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnVolume = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnVolume.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "availabilityZone", this);
        this.availabilityZone = props.availabilityZone;
        this.autoEnableIo = props.autoEnableIo;
        this.encrypted = props.encrypted;
        this.iops = props.iops;
        this.kmsKeyId = props.kmsKeyId;
        this.multiAttachEnabled = props.multiAttachEnabled;
        this.outpostArn = props.outpostArn;
        this.size = props.size;
        this.snapshotId = props.snapshotId;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::EC2::Volume", props.tags, { tagPropertyName: "tags" });
        this.throughput = props.throughput;
        this.volumeType = props.volumeType;
        if (this.node.scope && cdk.Resource.isResource(this.node.scope)) {
          this.node.addValidation({ validate: () => this.cfnOptions.deletionPolicy === void 0 ? ["'AWS::EC2::Volume' is a stateful resource type, and you must specify a Removal Policy for it. Call 'resource.applyRemovalPolicy()'."] : [] });
        }
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnVolumePropsFromCloudFormation(resourceProperties);
        const ret = new CfnVolume(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnVolume.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          availabilityZone: this.availabilityZone,
          autoEnableIo: this.autoEnableIo,
          encrypted: this.encrypted,
          iops: this.iops,
          kmsKeyId: this.kmsKeyId,
          multiAttachEnabled: this.multiAttachEnabled,
          outpostArn: this.outpostArn,
          size: this.size,
          snapshotId: this.snapshotId,
          tags: this.tags.renderTags(),
          throughput: this.throughput,
          volumeType: this.volumeType
        };
      }
      renderProperties(props) {
        return cfnVolumePropsToCloudFormation(props);
      }
    };
    exports2.CfnVolume = CfnVolume;
    _48 = JSII_RTTI_SYMBOL_1;
    CfnVolume[_48] = { fqn: "@aws-cdk/aws-ec2.CfnVolume", version: "1.132.0" };
    CfnVolume.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::Volume";
    function CfnVolumeAttachmentPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("device", cdk.requiredValidator)(properties.device));
      errors.collect(cdk.propertyValidator("device", cdk.validateString)(properties.device));
      errors.collect(cdk.propertyValidator("instanceId", cdk.requiredValidator)(properties.instanceId));
      errors.collect(cdk.propertyValidator("instanceId", cdk.validateString)(properties.instanceId));
      errors.collect(cdk.propertyValidator("volumeId", cdk.requiredValidator)(properties.volumeId));
      errors.collect(cdk.propertyValidator("volumeId", cdk.validateString)(properties.volumeId));
      return errors.wrap('supplied properties not correct for "CfnVolumeAttachmentProps"');
    }
    function cfnVolumeAttachmentPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnVolumeAttachmentPropsValidator(properties).assertSuccess();
      return {
        Device: cdk.stringToCloudFormation(properties.device),
        InstanceId: cdk.stringToCloudFormation(properties.instanceId),
        VolumeId: cdk.stringToCloudFormation(properties.volumeId)
      };
    }
    function CfnVolumeAttachmentPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("device", "Device", cfn_parse.FromCloudFormation.getString(properties.Device));
      ret.addPropertyResult("instanceId", "InstanceId", cfn_parse.FromCloudFormation.getString(properties.InstanceId));
      ret.addPropertyResult("volumeId", "VolumeId", cfn_parse.FromCloudFormation.getString(properties.VolumeId));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnVolumeAttachment = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnVolumeAttachment.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "device", this);
        cdk.requireProperty(props, "instanceId", this);
        cdk.requireProperty(props, "volumeId", this);
        this.device = props.device;
        this.instanceId = props.instanceId;
        this.volumeId = props.volumeId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnVolumeAttachmentPropsFromCloudFormation(resourceProperties);
        const ret = new CfnVolumeAttachment(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnVolumeAttachment.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          device: this.device,
          instanceId: this.instanceId,
          volumeId: this.volumeId
        };
      }
      renderProperties(props) {
        return cfnVolumeAttachmentPropsToCloudFormation(props);
      }
    };
    exports2.CfnVolumeAttachment = CfnVolumeAttachment;
    _49 = JSII_RTTI_SYMBOL_1;
    CfnVolumeAttachment[_49] = { fqn: "@aws-cdk/aws-ec2.CfnVolumeAttachment", version: "1.132.0" };
    CfnVolumeAttachment.CFN_RESOURCE_TYPE_NAME = "AWS::EC2::VolumeAttachment";
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/peer.js
var require_peer = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/peer.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Peer = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var connections_1 = require_connections();
    var Peer = class {
      constructor() {
      }
      static ipv4(cidrIp) {
        return new CidrIPv4(cidrIp);
      }
      static anyIpv4() {
        return new AnyIPv4();
      }
      static ipv6(cidrIp) {
        return new CidrIPv6(cidrIp);
      }
      static anyIpv6() {
        return new AnyIPv6();
      }
      static prefixList(prefixListId) {
        return new PrefixList(prefixListId);
      }
    };
    exports2.Peer = Peer;
    _a = JSII_RTTI_SYMBOL_1;
    Peer[_a] = { fqn: "@aws-cdk/aws-ec2.Peer", version: "1.132.0" };
    var CidrIPv4 = class {
      constructor(cidrIp) {
        this.cidrIp = cidrIp;
        this.canInlineRule = true;
        this.connections = new connections_1.Connections({ peer: this });
        if (!core_1.Token.isUnresolved(cidrIp)) {
          const cidrMatch = cidrIp.match(/^(\d{1,3}\.){3}\d{1,3}(\/\d+)?$/);
          if (!cidrMatch) {
            throw new Error(`Invalid IPv4 CIDR: "${cidrIp}"`);
          }
          if (!cidrMatch[2]) {
            throw new Error(`CIDR mask is missing in IPv4: "${cidrIp}". Did you mean "${cidrIp}/32"?`);
          }
        }
        this.uniqueId = cidrIp;
      }
      toIngressRuleConfig() {
        return { cidrIp: this.cidrIp };
      }
      toEgressRuleConfig() {
        return { cidrIp: this.cidrIp };
      }
    };
    var AnyIPv4 = class extends CidrIPv4 {
      constructor() {
        super("0.0.0.0/0");
      }
    };
    var CidrIPv6 = class {
      constructor(cidrIpv6) {
        this.cidrIpv6 = cidrIpv6;
        this.canInlineRule = true;
        this.connections = new connections_1.Connections({ peer: this });
        if (!core_1.Token.isUnresolved(cidrIpv6)) {
          const cidrMatch = cidrIpv6.match(/^([\da-f]{0,4}:){2,7}([\da-f]{0,4})?(\/\d+)?$/);
          if (!cidrMatch) {
            throw new Error(`Invalid IPv6 CIDR: "${cidrIpv6}"`);
          }
          if (!cidrMatch[3]) {
            throw new Error(`CIDR mask is missing in IPv6: "${cidrIpv6}". Did you mean "${cidrIpv6}/128"?`);
          }
        }
        this.uniqueId = cidrIpv6;
      }
      toIngressRuleConfig() {
        return { cidrIpv6: this.cidrIpv6 };
      }
      toEgressRuleConfig() {
        return { cidrIpv6: this.cidrIpv6 };
      }
    };
    var AnyIPv6 = class extends CidrIPv6 {
      constructor() {
        super("::/0");
      }
    };
    var PrefixList = class {
      constructor(prefixListId) {
        this.prefixListId = prefixListId;
        this.canInlineRule = false;
        this.connections = new connections_1.Connections({ peer: this });
        this.uniqueId = prefixListId;
      }
      toIngressRuleConfig() {
        return { sourcePrefixListId: this.prefixListId };
      }
      toEgressRuleConfig() {
        return { destinationPrefixListId: this.prefixListId };
      }
    };
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/connections.js
var require_connections = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/connections.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Connections = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var peer_1 = require_peer();
    var Connections = class {
      constructor(props = {}) {
        this._securityGroups = new ReactiveList();
        this._securityGroupRules = new ReactiveList();
        this.skip = false;
        this.remoteRule = false;
        this.connections = this;
        this._securityGroups.push(...props.securityGroups || []);
        this._securityGroupRules.push(...this._securityGroups.asArray());
        if (props.peer) {
          this._securityGroupRules.push(props.peer);
        }
        this.defaultPort = props.defaultPort;
      }
      get securityGroups() {
        return this._securityGroups.asArray();
      }
      addSecurityGroup(...securityGroups) {
        for (const securityGroup of securityGroups) {
          this._securityGroups.push(securityGroup);
          this._securityGroupRules.push(securityGroup);
        }
      }
      allowTo(other, portRange, description) {
        if (this.skip) {
          return;
        }
        const remoteRule = this.remoteRule;
        this._securityGroups.forEachAndForever((securityGroup) => {
          other.connections._securityGroupRules.forEachAndForever((rule) => {
            securityGroup.addEgressRule(rule, portRange, description, remoteRule);
          });
        });
        this.skip = true;
        other.connections.remoteRule = true;
        try {
          other.connections.allowFrom(this, portRange, description);
        } finally {
          this.skip = false;
          other.connections.remoteRule = false;
        }
      }
      allowFrom(other, portRange, description) {
        if (this.skip) {
          return;
        }
        const remoteRule = this.remoteRule;
        this._securityGroups.forEachAndForever((securityGroup) => {
          other.connections._securityGroupRules.forEachAndForever((rule) => {
            securityGroup.addIngressRule(rule, portRange, description, remoteRule);
          });
        });
        this.skip = true;
        other.connections.remoteRule = true;
        try {
          other.connections.allowTo(this, portRange, description);
        } finally {
          this.skip = false;
          other.connections.remoteRule = false;
        }
      }
      allowInternally(portRange, description) {
        this._securityGroups.forEachAndForever((securityGroup) => {
          this._securityGroupRules.forEachAndForever((rule) => {
            securityGroup.addIngressRule(rule, portRange, description);
            securityGroup.addEgressRule(rule, portRange, description);
          });
        });
      }
      allowToAnyIpv4(portRange, description) {
        this.allowTo(peer_1.Peer.anyIpv4(), portRange, description);
      }
      allowFromAnyIpv4(portRange, description) {
        this.allowFrom(peer_1.Peer.anyIpv4(), portRange, description);
      }
      allowDefaultPortFrom(other, description) {
        if (!this.defaultPort) {
          throw new Error("Cannot call allowDefaultPortFrom(): this resource has no default port");
        }
        this.allowFrom(other, this.defaultPort, description);
      }
      allowDefaultPortInternally(description) {
        if (!this.defaultPort) {
          throw new Error("Cannot call allowDefaultPortInternally(): this resource has no default port");
        }
        this.allowInternally(this.defaultPort, description);
      }
      allowDefaultPortFromAnyIpv4(description) {
        if (!this.defaultPort) {
          throw new Error("Cannot call allowDefaultPortFromAnyIpv4(): this resource has no default port");
        }
        this.allowFromAnyIpv4(this.defaultPort, description);
      }
      allowToDefaultPort(other, description) {
        if (other.connections.defaultPort === void 0) {
          throw new Error("Cannot call allowToDefaultPort(): other resource has no default port");
        }
        this.allowTo(other, other.connections.defaultPort, description);
      }
      allowDefaultPortTo(other, description) {
        if (!this.defaultPort) {
          throw new Error("Cannot call allowDefaultPortTo(): this resource has no default port");
        }
        this.allowTo(other, this.defaultPort, description);
      }
    };
    exports2.Connections = Connections;
    _a = JSII_RTTI_SYMBOL_1;
    Connections[_a] = { fqn: "@aws-cdk/aws-ec2.Connections", version: "1.132.0" };
    var ReactiveList = class {
      constructor() {
        this.elements = new Array();
        this.listeners = new Array();
      }
      push(...xs) {
        this.elements.push(...xs);
        for (const listener of this.listeners) {
          for (const x of xs) {
            listener(x);
          }
        }
      }
      forEachAndForever(listener) {
        for (const element of this.elements) {
          listener(element);
        }
        this.listeners.push(listener);
      }
      asArray() {
        return this.elements.slice();
      }
      get length() {
        return this.elements.length;
      }
    };
  }
});

// asset-input/node_modules/@aws-cdk/aws-kms/lib/kms.generated.js
var require_kms_generated = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-kms/lib/kms.generated.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnReplicaKey = exports2.CfnKey = exports2.CfnAlias = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var cfn_parse = require_cfn_parse();
    function CfnAliasPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("aliasName", cdk.requiredValidator)(properties.aliasName));
      errors.collect(cdk.propertyValidator("aliasName", cdk.validateString)(properties.aliasName));
      errors.collect(cdk.propertyValidator("targetKeyId", cdk.requiredValidator)(properties.targetKeyId));
      errors.collect(cdk.propertyValidator("targetKeyId", cdk.validateString)(properties.targetKeyId));
      return errors.wrap('supplied properties not correct for "CfnAliasProps"');
    }
    function cfnAliasPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnAliasPropsValidator(properties).assertSuccess();
      return {
        AliasName: cdk.stringToCloudFormation(properties.aliasName),
        TargetKeyId: cdk.stringToCloudFormation(properties.targetKeyId)
      };
    }
    function CfnAliasPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("aliasName", "AliasName", cfn_parse.FromCloudFormation.getString(properties.AliasName));
      ret.addPropertyResult("targetKeyId", "TargetKeyId", cfn_parse.FromCloudFormation.getString(properties.TargetKeyId));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnAlias = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnAlias.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "aliasName", this);
        cdk.requireProperty(props, "targetKeyId", this);
        this.aliasName = props.aliasName;
        this.targetKeyId = props.targetKeyId;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnAliasPropsFromCloudFormation(resourceProperties);
        const ret = new CfnAlias(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnAlias.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          aliasName: this.aliasName,
          targetKeyId: this.targetKeyId
        };
      }
      renderProperties(props) {
        return cfnAliasPropsToCloudFormation(props);
      }
    };
    exports2.CfnAlias = CfnAlias;
    _a = JSII_RTTI_SYMBOL_1;
    CfnAlias[_a] = { fqn: "@aws-cdk/aws-kms.CfnAlias", version: "1.132.0" };
    CfnAlias.CFN_RESOURCE_TYPE_NAME = "AWS::KMS::Alias";
    function CfnKeyPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("enableKeyRotation", cdk.validateBoolean)(properties.enableKeyRotation));
      errors.collect(cdk.propertyValidator("enabled", cdk.validateBoolean)(properties.enabled));
      errors.collect(cdk.propertyValidator("keyPolicy", cdk.requiredValidator)(properties.keyPolicy));
      errors.collect(cdk.propertyValidator("keyPolicy", cdk.validateObject)(properties.keyPolicy));
      errors.collect(cdk.propertyValidator("keySpec", cdk.validateString)(properties.keySpec));
      errors.collect(cdk.propertyValidator("keyUsage", cdk.validateString)(properties.keyUsage));
      errors.collect(cdk.propertyValidator("multiRegion", cdk.validateBoolean)(properties.multiRegion));
      errors.collect(cdk.propertyValidator("pendingWindowInDays", cdk.validateNumber)(properties.pendingWindowInDays));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnKeyProps"');
    }
    function cfnKeyPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnKeyPropsValidator(properties).assertSuccess();
      return {
        KeyPolicy: cdk.objectToCloudFormation(properties.keyPolicy),
        Description: cdk.stringToCloudFormation(properties.description),
        Enabled: cdk.booleanToCloudFormation(properties.enabled),
        EnableKeyRotation: cdk.booleanToCloudFormation(properties.enableKeyRotation),
        KeySpec: cdk.stringToCloudFormation(properties.keySpec),
        KeyUsage: cdk.stringToCloudFormation(properties.keyUsage),
        MultiRegion: cdk.booleanToCloudFormation(properties.multiRegion),
        PendingWindowInDays: cdk.numberToCloudFormation(properties.pendingWindowInDays),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnKeyPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("keyPolicy", "KeyPolicy", cfn_parse.FromCloudFormation.getAny(properties.KeyPolicy));
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("enabled", "Enabled", properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : void 0);
      ret.addPropertyResult("enableKeyRotation", "EnableKeyRotation", properties.EnableKeyRotation != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableKeyRotation) : void 0);
      ret.addPropertyResult("keySpec", "KeySpec", properties.KeySpec != null ? cfn_parse.FromCloudFormation.getString(properties.KeySpec) : void 0);
      ret.addPropertyResult("keyUsage", "KeyUsage", properties.KeyUsage != null ? cfn_parse.FromCloudFormation.getString(properties.KeyUsage) : void 0);
      ret.addPropertyResult("multiRegion", "MultiRegion", properties.MultiRegion != null ? cfn_parse.FromCloudFormation.getBoolean(properties.MultiRegion) : void 0);
      ret.addPropertyResult("pendingWindowInDays", "PendingWindowInDays", properties.PendingWindowInDays != null ? cfn_parse.FromCloudFormation.getNumber(properties.PendingWindowInDays) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnKey = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnKey.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "keyPolicy", this);
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.attrKeyId = cdk.Token.asString(this.getAtt("KeyId"));
        this.keyPolicy = props.keyPolicy;
        this.description = props.description;
        this.enabled = props.enabled;
        this.enableKeyRotation = props.enableKeyRotation;
        this.keySpec = props.keySpec;
        this.keyUsage = props.keyUsage;
        this.multiRegion = props.multiRegion;
        this.pendingWindowInDays = props.pendingWindowInDays;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::KMS::Key", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnKeyPropsFromCloudFormation(resourceProperties);
        const ret = new CfnKey(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnKey.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          keyPolicy: this.keyPolicy,
          description: this.description,
          enabled: this.enabled,
          enableKeyRotation: this.enableKeyRotation,
          keySpec: this.keySpec,
          keyUsage: this.keyUsage,
          multiRegion: this.multiRegion,
          pendingWindowInDays: this.pendingWindowInDays,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnKeyPropsToCloudFormation(props);
      }
    };
    exports2.CfnKey = CfnKey;
    _b = JSII_RTTI_SYMBOL_1;
    CfnKey[_b] = { fqn: "@aws-cdk/aws-kms.CfnKey", version: "1.132.0" };
    CfnKey.CFN_RESOURCE_TYPE_NAME = "AWS::KMS::Key";
    function CfnReplicaKeyPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("enabled", cdk.validateBoolean)(properties.enabled));
      errors.collect(cdk.propertyValidator("keyPolicy", cdk.requiredValidator)(properties.keyPolicy));
      errors.collect(cdk.propertyValidator("keyPolicy", cdk.validateObject)(properties.keyPolicy));
      errors.collect(cdk.propertyValidator("pendingWindowInDays", cdk.validateNumber)(properties.pendingWindowInDays));
      errors.collect(cdk.propertyValidator("primaryKeyArn", cdk.requiredValidator)(properties.primaryKeyArn));
      errors.collect(cdk.propertyValidator("primaryKeyArn", cdk.validateString)(properties.primaryKeyArn));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnReplicaKeyProps"');
    }
    function cfnReplicaKeyPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnReplicaKeyPropsValidator(properties).assertSuccess();
      return {
        KeyPolicy: cdk.objectToCloudFormation(properties.keyPolicy),
        PrimaryKeyArn: cdk.stringToCloudFormation(properties.primaryKeyArn),
        Description: cdk.stringToCloudFormation(properties.description),
        Enabled: cdk.booleanToCloudFormation(properties.enabled),
        PendingWindowInDays: cdk.numberToCloudFormation(properties.pendingWindowInDays),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnReplicaKeyPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("keyPolicy", "KeyPolicy", cfn_parse.FromCloudFormation.getAny(properties.KeyPolicy));
      ret.addPropertyResult("primaryKeyArn", "PrimaryKeyArn", cfn_parse.FromCloudFormation.getString(properties.PrimaryKeyArn));
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("enabled", "Enabled", properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : void 0);
      ret.addPropertyResult("pendingWindowInDays", "PendingWindowInDays", properties.PendingWindowInDays != null ? cfn_parse.FromCloudFormation.getNumber(properties.PendingWindowInDays) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnReplicaKey = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnReplicaKey.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "keyPolicy", this);
        cdk.requireProperty(props, "primaryKeyArn", this);
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.attrKeyId = cdk.Token.asString(this.getAtt("KeyId"));
        this.keyPolicy = props.keyPolicy;
        this.primaryKeyArn = props.primaryKeyArn;
        this.description = props.description;
        this.enabled = props.enabled;
        this.pendingWindowInDays = props.pendingWindowInDays;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::KMS::ReplicaKey", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnReplicaKeyPropsFromCloudFormation(resourceProperties);
        const ret = new CfnReplicaKey(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnReplicaKey.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          keyPolicy: this.keyPolicy,
          primaryKeyArn: this.primaryKeyArn,
          description: this.description,
          enabled: this.enabled,
          pendingWindowInDays: this.pendingWindowInDays,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnReplicaKeyPropsToCloudFormation(props);
      }
    };
    exports2.CfnReplicaKey = CfnReplicaKey;
    _c = JSII_RTTI_SYMBOL_1;
    CfnReplicaKey[_c] = { fqn: "@aws-cdk/aws-kms.CfnReplicaKey", version: "1.132.0" };
    CfnReplicaKey.CFN_RESOURCE_TYPE_NAME = "AWS::KMS::ReplicaKey";
  }
});

// asset-input/node_modules/@aws-cdk/aws-kms/lib/alias.js
var require_alias = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-kms/lib/alias.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Alias = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var iam = require_lib9();
    var core_1 = require_lib8();
    var kms_generated_1 = require_kms_generated();
    var REQUIRED_ALIAS_PREFIX = "alias/";
    var DISALLOWED_PREFIX = REQUIRED_ALIAS_PREFIX + "aws/";
    var AliasBase = class extends core_1.Resource {
      get keyArn() {
        return core_1.Stack.of(this).formatArn({
          service: "kms",
          resource: this.aliasName
        });
      }
      get keyId() {
        return this.aliasName;
      }
      addAlias(alias) {
        return this.aliasTargetKey.addAlias(alias);
      }
      addToResourcePolicy(statement, allowNoOp) {
        return this.aliasTargetKey.addToResourcePolicy(statement, allowNoOp);
      }
      grant(grantee, ...actions) {
        return this.aliasTargetKey.grant(grantee, ...actions);
      }
      grantDecrypt(grantee) {
        return this.aliasTargetKey.grantDecrypt(grantee);
      }
      grantEncrypt(grantee) {
        return this.aliasTargetKey.grantEncrypt(grantee);
      }
      grantEncryptDecrypt(grantee) {
        return this.aliasTargetKey.grantEncryptDecrypt(grantee);
      }
    };
    var Alias = class extends AliasBase {
      constructor(scope, id, props) {
        let aliasName = props.aliasName;
        if (!core_1.Token.isUnresolved(aliasName)) {
          if (!aliasName.startsWith(REQUIRED_ALIAS_PREFIX)) {
            aliasName = REQUIRED_ALIAS_PREFIX + aliasName;
          }
          if (aliasName === REQUIRED_ALIAS_PREFIX) {
            throw new Error(`Alias must include a value after "${REQUIRED_ALIAS_PREFIX}": ${aliasName}`);
          }
          if (aliasName.toLocaleLowerCase().startsWith(DISALLOWED_PREFIX)) {
            throw new Error(`Alias cannot start with ${DISALLOWED_PREFIX}: ${aliasName}`);
          }
          if (!aliasName.match(/^[a-zA-Z0-9:/_-]{1,256}$/)) {
            throw new Error("Alias name must be between 1 and 256 characters in a-zA-Z0-9:/_-");
          }
        }
        super(scope, id, {
          physicalName: aliasName
        });
        this.aliasTargetKey = props.targetKey;
        const resource = new kms_generated_1.CfnAlias(this, "Resource", {
          aliasName: this.physicalName,
          targetKeyId: this.aliasTargetKey.keyArn
        });
        this.aliasName = this.getResourceNameAttribute(resource.aliasName);
        if (props.removalPolicy) {
          resource.applyRemovalPolicy(props.removalPolicy);
        }
      }
      static fromAliasAttributes(scope, id, attrs) {
        class _Alias2 extends AliasBase {
          get aliasName() {
            return attrs.aliasName;
          }
          get aliasTargetKey() {
            return attrs.aliasTargetKey;
          }
        }
        return new _Alias2(scope, id);
      }
      static fromAliasName(scope, id, aliasName) {
        class Import extends core_1.Resource {
          constructor() {
            super(...arguments);
            this.keyArn = core_1.Stack.of(this).formatArn({ service: "kms", resource: aliasName });
            this.keyId = aliasName;
            this.aliasName = aliasName;
          }
          get aliasTargetKey() {
            throw new Error("Cannot access aliasTargetKey on an Alias imported by Alias.fromAliasName().");
          }
          addAlias(_alias) {
            throw new Error("Cannot call addAlias on an Alias imported by Alias.fromAliasName().");
          }
          addToResourcePolicy(_statement, _allowNoOp) {
            return { statementAdded: false };
          }
          grant(grantee, ..._actions) {
            return iam.Grant.drop(grantee, "");
          }
          grantDecrypt(grantee) {
            return iam.Grant.drop(grantee, "");
          }
          grantEncrypt(grantee) {
            return iam.Grant.drop(grantee, "");
          }
          grantEncryptDecrypt(grantee) {
            return iam.Grant.drop(grantee, "");
          }
        }
        return new Import(scope, id);
      }
      generatePhysicalName() {
        return REQUIRED_ALIAS_PREFIX + super.generatePhysicalName();
      }
    };
    exports2.Alias = Alias;
    _a = JSII_RTTI_SYMBOL_1;
    Alias[_a] = { fqn: "@aws-cdk/aws-kms.Alias", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-kms/lib/private/perms.js
var require_perms = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-kms/lib/private/perms.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DECRYPT_ACTIONS = exports2.ENCRYPT_ACTIONS = exports2.ADMIN_ACTIONS = void 0;
    exports2.ADMIN_ACTIONS = [
      "kms:Create*",
      "kms:Describe*",
      "kms:Enable*",
      "kms:List*",
      "kms:Put*",
      "kms:Update*",
      "kms:Revoke*",
      "kms:Disable*",
      "kms:Get*",
      "kms:Delete*",
      "kms:TagResource",
      "kms:UntagResource",
      "kms:ScheduleKeyDeletion",
      "kms:CancelKeyDeletion"
    ];
    exports2.ENCRYPT_ACTIONS = [
      "kms:Encrypt",
      "kms:ReEncrypt*",
      "kms:GenerateDataKey*"
    ];
    exports2.DECRYPT_ACTIONS = [
      "kms:Decrypt"
    ];
  }
});

// asset-input/node_modules/@aws-cdk/aws-kms/lib/key.js
var require_key2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-kms/lib/key.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Key = exports2.KeyUsage = exports2.KeySpec = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var iam = require_lib9();
    var cxschema = require_lib3();
    var core_1 = require_lib8();
    var cxapi = require_lib5();
    var constructs_1 = require_lib4();
    var alias_1 = require_alias();
    var kms_generated_1 = require_kms_generated();
    var perms = require_perms();
    var KeyBase = class extends core_1.Resource {
      constructor() {
        super(...arguments);
        this.aliases = [];
      }
      addAlias(aliasName) {
        const aliasId = this.aliases.length > 0 ? `Alias${aliasName}` : "Alias";
        const alias = new alias_1.Alias(this, aliasId, { aliasName, targetKey: this });
        this.aliases.push(alias);
        return alias;
      }
      addToResourcePolicy(statement, allowNoOp = true) {
        const stack = core_1.Stack.of(this);
        if (!this.policy) {
          if (allowNoOp) {
            return { statementAdded: false };
          }
          throw new Error(`Unable to add statement to IAM resource policy for KMS key: ${JSON.stringify(stack.resolve(this.keyArn))}`);
        }
        this.policy.addStatements(statement);
        return { statementAdded: true, policyDependable: this.policy };
      }
      validate() {
        var _b;
        const errors = super.validate();
        errors.push(...((_b = this.policy) === null || _b === void 0 ? void 0 : _b.validateForResourcePolicy()) || []);
        return errors;
      }
      grant(grantee, ...actions) {
        const granteeStackDependsOnKeyStack = this.granteeStackDependsOnKeyStack(grantee);
        const principal = granteeStackDependsOnKeyStack ? new iam.AccountPrincipal(granteeStackDependsOnKeyStack) : grantee.grantPrincipal;
        const crossAccountAccess = this.isGranteeFromAnotherAccount(grantee);
        const crossRegionAccess = this.isGranteeFromAnotherRegion(grantee);
        const crossEnvironment = crossAccountAccess || crossRegionAccess;
        const grantOptions = {
          grantee,
          actions,
          resource: this,
          resourceArns: [this.keyArn],
          resourceSelfArns: crossEnvironment ? void 0 : ["*"]
        };
        if (this.trustAccountIdentities && !crossEnvironment) {
          return iam.Grant.addToPrincipalOrResource(grantOptions);
        } else {
          return iam.Grant.addToPrincipalAndResource(__spreadProps(__spreadValues({}, grantOptions), {
            resourceArns: crossEnvironment ? ["*"] : [this.keyArn],
            resourcePolicyPrincipal: principal
          }));
        }
      }
      grantDecrypt(grantee) {
        return this.grant(grantee, ...perms.DECRYPT_ACTIONS);
      }
      grantEncrypt(grantee) {
        return this.grant(grantee, ...perms.ENCRYPT_ACTIONS);
      }
      grantEncryptDecrypt(grantee) {
        return this.grant(grantee, ...[...perms.DECRYPT_ACTIONS, ...perms.ENCRYPT_ACTIONS]);
      }
      granteeStackDependsOnKeyStack(grantee) {
        const grantPrincipal = grantee.grantPrincipal;
        if (!isConstruct(grantPrincipal)) {
          return void 0;
        }
        if (!this.principalIsANewlyCreatedResource(grantPrincipal)) {
          return void 0;
        }
        const keyStack = core_1.Stack.of(this);
        const granteeStack = core_1.Stack.of(grantPrincipal);
        if (keyStack === granteeStack) {
          return void 0;
        }
        return granteeStack.dependencies.includes(keyStack) ? granteeStack.account : void 0;
      }
      principalIsANewlyCreatedResource(principal) {
        return principal instanceof iam.Role || principal instanceof iam.User || principal instanceof iam.Group;
      }
      isGranteeFromAnotherRegion(grantee) {
        if (!isConstruct(grantee)) {
          return false;
        }
        const bucketStack = core_1.Stack.of(this);
        const identityStack = core_1.Stack.of(grantee);
        return bucketStack.region !== identityStack.region;
      }
      isGranteeFromAnotherAccount(grantee) {
        if (!isConstruct(grantee)) {
          return false;
        }
        const bucketStack = core_1.Stack.of(this);
        const identityStack = core_1.Stack.of(grantee);
        return bucketStack.account !== identityStack.account;
      }
    };
    var KeySpec;
    (function(KeySpec2) {
      KeySpec2["SYMMETRIC_DEFAULT"] = "SYMMETRIC_DEFAULT";
      KeySpec2["RSA_2048"] = "RSA_2048";
      KeySpec2["RSA_3072"] = "RSA_3072";
      KeySpec2["RSA_4096"] = "RSA_4096";
      KeySpec2["ECC_NIST_P256"] = "ECC_NIST_P256";
      KeySpec2["ECC_NIST_P384"] = "ECC_NIST_P384";
      KeySpec2["ECC_NIST_P521"] = "ECC_NIST_P521";
      KeySpec2["ECC_SECG_P256K1"] = "ECC_SECG_P256K1";
    })(KeySpec = exports2.KeySpec || (exports2.KeySpec = {}));
    var KeyUsage;
    (function(KeyUsage2) {
      KeyUsage2["ENCRYPT_DECRYPT"] = "ENCRYPT_DECRYPT";
      KeyUsage2["SIGN_VERIFY"] = "SIGN_VERIFY";
    })(KeyUsage = exports2.KeyUsage || (exports2.KeyUsage = {}));
    var Key = class extends KeyBase {
      constructor(scope, id, props = {}) {
        var _b, _c, _d, _e, _f;
        super(scope, id);
        const denyLists = {
          [KeyUsage.ENCRYPT_DECRYPT]: [
            KeySpec.ECC_NIST_P256,
            KeySpec.ECC_NIST_P384,
            KeySpec.ECC_NIST_P521,
            KeySpec.ECC_SECG_P256K1
          ],
          [KeyUsage.SIGN_VERIFY]: [
            KeySpec.SYMMETRIC_DEFAULT
          ]
        };
        const keySpec = (_b = props.keySpec) !== null && _b !== void 0 ? _b : KeySpec.SYMMETRIC_DEFAULT;
        const keyUsage = (_c = props.keyUsage) !== null && _c !== void 0 ? _c : KeyUsage.ENCRYPT_DECRYPT;
        if (denyLists[keyUsage].includes(keySpec)) {
          throw new Error(`key spec '${keySpec}' is not valid with usage '${keyUsage}'`);
        }
        if (keySpec !== KeySpec.SYMMETRIC_DEFAULT && props.enableKeyRotation) {
          throw new Error("key rotation cannot be enabled on asymmetric keys");
        }
        const defaultKeyPoliciesFeatureEnabled = core_1.FeatureFlags.of(this).isEnabled(cxapi.KMS_DEFAULT_KEY_POLICIES);
        this.policy = (_d = props.policy) !== null && _d !== void 0 ? _d : new iam.PolicyDocument();
        if (defaultKeyPoliciesFeatureEnabled) {
          if (props.trustAccountIdentities === false) {
            throw new Error("`trustAccountIdentities` cannot be false if the @aws-cdk/aws-kms:defaultKeyPolicies feature flag is set");
          }
          this.trustAccountIdentities = true;
          if (!props.policy) {
            this.addDefaultAdminPolicy();
          }
        } else {
          this.trustAccountIdentities = (_e = props.trustAccountIdentities) !== null && _e !== void 0 ? _e : false;
          if (this.trustAccountIdentities) {
            this.addDefaultAdminPolicy();
          } else {
            this.addLegacyAdminPolicy();
          }
        }
        let pendingWindowInDays;
        if (props.pendingWindow) {
          pendingWindowInDays = props.pendingWindow.toDays();
          if (pendingWindowInDays < 7 || pendingWindowInDays > 30) {
            throw new Error(`'pendingWindow' value must between 7 and 30 days. Received: ${pendingWindowInDays}`);
          }
        }
        const resource = new kms_generated_1.CfnKey(this, "Resource", {
          description: props.description,
          enableKeyRotation: props.enableKeyRotation,
          enabled: props.enabled,
          keySpec: props.keySpec,
          keyUsage: props.keyUsage,
          keyPolicy: this.policy,
          pendingWindowInDays
        });
        this.keyArn = resource.attrArn;
        this.keyId = resource.ref;
        resource.applyRemovalPolicy(props.removalPolicy);
        ((_f = props.admins) !== null && _f !== void 0 ? _f : []).forEach((p) => this.grantAdmin(p));
        if (props.alias !== void 0) {
          this.addAlias(props.alias);
        }
      }
      static fromKeyArn(scope, id, keyArn) {
        class Import extends KeyBase {
          constructor(keyId) {
            super(scope, id);
            this.keyArn = keyArn;
            this.policy = void 0;
            this.trustAccountIdentities = true;
            this.keyId = keyId;
          }
        }
        const keyResourceName = core_1.Stack.of(scope).parseArn(keyArn).resourceName;
        if (!keyResourceName) {
          throw new Error(`KMS key ARN must be in the format 'arn:aws:kms:<region>:<account>:key/<keyId>', got: '${keyArn}'`);
        }
        return new Import(keyResourceName);
      }
      static fromCfnKey(cfnKey) {
        const id = "@FromCfnKey";
        const existing = cfnKey.node.tryFindChild(id);
        if (existing) {
          return existing;
        }
        let keyPolicy;
        try {
          keyPolicy = iam.PolicyDocument.fromJson(cfnKey.keyPolicy);
        } catch (e) {
          throw new Error("Could not parse the PolicyDocument of the passed AWS::KMS::Key resource because it contains CloudFormation functions. This makes it impossible to create a mutable IKey from that Policy. You have to use fromKeyArn instead, passing it the ARN attribute property of the low-level CfnKey");
        }
        cfnKey.keyPolicy = core_1.Lazy.any({ produce: () => keyPolicy.toJSON() });
        return new class extends KeyBase {
          constructor() {
            super(...arguments);
            this.keyArn = cfnKey.attrArn;
            this.keyId = cfnKey.ref;
            this.policy = keyPolicy;
            this.trustAccountIdentities = false;
          }
        }(cfnKey, id);
      }
      static fromLookup(scope, id, options) {
        class Import extends KeyBase {
          constructor(keyId, keyArn) {
            super(scope, id);
            this.policy = void 0;
            this.trustAccountIdentities = true;
            this.keyId = keyId;
            this.keyArn = keyArn;
          }
        }
        if (core_1.Token.isUnresolved(options.aliasName)) {
          throw new Error("All arguments to Key.fromLookup() must be concrete (no Tokens)");
        }
        const attributes = core_1.ContextProvider.getValue(scope, {
          provider: cxschema.ContextProvider.KEY_PROVIDER,
          props: {
            aliasName: options.aliasName
          },
          dummyValue: {
            keyId: "1234abcd-12ab-34cd-56ef-1234567890ab"
          }
        }).value;
        return new Import(attributes.keyId, core_1.Arn.format({ resource: "key", service: "kms", resourceName: attributes.keyId }, core_1.Stack.of(scope)));
      }
      grantAdmin(grantee) {
        return this.grant(grantee, ...perms.ADMIN_ACTIONS);
      }
      addDefaultAdminPolicy() {
        this.addToResourcePolicy(new iam.PolicyStatement({
          resources: ["*"],
          actions: ["kms:*"],
          principals: [new iam.AccountRootPrincipal()]
        }));
      }
      addLegacyAdminPolicy() {
        const actions = [
          "kms:Create*",
          "kms:Describe*",
          "kms:Enable*",
          "kms:List*",
          "kms:Put*",
          "kms:Update*",
          "kms:Revoke*",
          "kms:Disable*",
          "kms:Get*",
          "kms:Delete*",
          "kms:ScheduleKeyDeletion",
          "kms:CancelKeyDeletion",
          "kms:GenerateDataKey",
          "kms:TagResource",
          "kms:UntagResource"
        ];
        this.addToResourcePolicy(new iam.PolicyStatement({
          resources: ["*"],
          actions,
          principals: [new iam.AccountRootPrincipal()]
        }));
      }
    };
    exports2.Key = Key;
    _a = JSII_RTTI_SYMBOL_1;
    Key[_a] = { fqn: "@aws-cdk/aws-kms.Key", version: "1.132.0" };
    function isConstruct(x) {
      const sym = Symbol.for("constructs.Construct.node");
      return typeof x === "object" && x && (x instanceof constructs_1.Construct || !!x.node || !!x[sym]);
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-kms/lib/key-lookup.js
var require_key_lookup = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-kms/lib/key-lookup.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/@aws-cdk/aws-kms/lib/via-service-principal.js
var require_via_service_principal = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-kms/lib/via-service-principal.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ViaServicePrincipal = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var iam = require_lib9();
    var ViaServicePrincipal = class extends iam.PrincipalBase {
      constructor(serviceName, basePrincipal) {
        super();
        this.serviceName = serviceName;
        this.basePrincipal = basePrincipal ? basePrincipal : new iam.AnyPrincipal();
      }
      get policyFragment() {
        const base = this.basePrincipal.policyFragment;
        const conditions = Object.assign({}, base.conditions);
        if (conditions.StringEquals) {
          conditions.StringEquals = Object.assign({ "kms:ViaService": this.serviceName }, conditions.StringEquals);
        } else {
          conditions.StringEquals = { "kms:ViaService": this.serviceName };
        }
        return { principalJson: base.principalJson, conditions };
      }
    };
    exports2.ViaServicePrincipal = ViaServicePrincipal;
    _a = JSII_RTTI_SYMBOL_1;
    ViaServicePrincipal[_a] = { fqn: "@aws-cdk/aws-kms.ViaServicePrincipal", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-kms/lib/index.js
var require_lib14 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-kms/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_key2(), exports2);
    __exportStar(require_key_lookup(), exports2);
    __exportStar(require_alias(), exports2);
    __exportStar(require_via_service_principal(), exports2);
    __exportStar(require_kms_generated(), exports2);
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/volume.js
var require_volume = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/volume.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Volume = exports2.EbsDeviceVolumeType = exports2.BlockDeviceVolume = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var crypto = require("crypto");
    var aws_iam_1 = require_lib9();
    var aws_kms_1 = require_lib14();
    var core_1 = require_lib8();
    var ec2_generated_1 = require_ec2_generated();
    var BlockDeviceVolume = class {
      constructor(ebsDevice, virtualName) {
        this.ebsDevice = ebsDevice;
        this.virtualName = virtualName;
      }
      static ebs(volumeSize, options = {}) {
        return new this(__spreadProps(__spreadValues({}, options), { volumeSize }));
      }
      static ebsFromSnapshot(snapshotId, options = {}) {
        return new this(__spreadProps(__spreadValues({}, options), { snapshotId }));
      }
      static ephemeral(volumeIndex) {
        if (volumeIndex < 0) {
          throw new Error(`volumeIndex must be a number starting from 0, got "${volumeIndex}"`);
        }
        return new this(void 0, `ephemeral${volumeIndex}`);
      }
    };
    exports2.BlockDeviceVolume = BlockDeviceVolume;
    _a = JSII_RTTI_SYMBOL_1;
    BlockDeviceVolume[_a] = { fqn: "@aws-cdk/aws-ec2.BlockDeviceVolume", version: "1.132.0" };
    var EbsDeviceVolumeType;
    (function(EbsDeviceVolumeType2) {
      EbsDeviceVolumeType2["STANDARD"] = "standard";
      EbsDeviceVolumeType2["IO1"] = "io1";
      EbsDeviceVolumeType2["IO2"] = "io2";
      EbsDeviceVolumeType2["GP2"] = "gp2";
      EbsDeviceVolumeType2["GP3"] = "gp3";
      EbsDeviceVolumeType2["ST1"] = "st1";
      EbsDeviceVolumeType2["SC1"] = "sc1";
      EbsDeviceVolumeType2["GENERAL_PURPOSE_SSD"] = "gp2";
      EbsDeviceVolumeType2["GENERAL_PURPOSE_SSD_GP3"] = "gp3";
      EbsDeviceVolumeType2["PROVISIONED_IOPS_SSD"] = "io1";
      EbsDeviceVolumeType2["PROVISIONED_IOPS_SSD_IO2"] = "io2";
      EbsDeviceVolumeType2["THROUGHPUT_OPTIMIZED_HDD"] = "st1";
      EbsDeviceVolumeType2["COLD_HDD"] = "sc1";
      EbsDeviceVolumeType2["MAGNETIC"] = "standard";
    })(EbsDeviceVolumeType = exports2.EbsDeviceVolumeType || (exports2.EbsDeviceVolumeType = {}));
    var VolumeBase = class extends core_1.Resource {
      grantAttachVolume(grantee, instances) {
        const result = aws_iam_1.Grant.addToPrincipal({
          grantee,
          actions: ["ec2:AttachVolume"],
          resourceArns: this.collectGrantResourceArns(instances)
        });
        if (this.encryptionKey) {
          const kmsGrant = this.encryptionKey.grant(grantee, "kms:CreateGrant");
          kmsGrant.principalStatement.addConditions({
            Bool: { "kms:GrantIsForAWSResource": true },
            StringEquals: {
              "kms:ViaService": `ec2.${core_1.Stack.of(this).region}.amazonaws.com`,
              "kms:GrantConstraintType": "EncryptionContextSubset"
            }
          });
        }
        return result;
      }
      grantAttachVolumeByResourceTag(grantee, constructs, tagKeySuffix) {
        const tagValue = this.calculateResourceTagValue([this, ...constructs]);
        const tagKey = `VolumeGrantAttach-${tagKeySuffix !== null && tagKeySuffix !== void 0 ? tagKeySuffix : tagValue.slice(0, 10).toUpperCase()}`;
        const grantCondition = {};
        grantCondition[`ec2:ResourceTag/${tagKey}`] = tagValue;
        const result = this.grantAttachVolume(grantee);
        result.principalStatement.addCondition("ForAnyValue:StringEquals", grantCondition);
        core_1.Tags.of(this).add(tagKey, tagValue);
        constructs.forEach((construct) => core_1.Tags.of(construct).add(tagKey, tagValue));
        return result;
      }
      grantDetachVolume(grantee, instances) {
        const result = aws_iam_1.Grant.addToPrincipal({
          grantee,
          actions: ["ec2:DetachVolume"],
          resourceArns: this.collectGrantResourceArns(instances)
        });
        return result;
      }
      grantDetachVolumeByResourceTag(grantee, constructs, tagKeySuffix) {
        const tagValue = this.calculateResourceTagValue([this, ...constructs]);
        const tagKey = `VolumeGrantDetach-${tagKeySuffix !== null && tagKeySuffix !== void 0 ? tagKeySuffix : tagValue.slice(0, 10).toUpperCase()}`;
        const grantCondition = {};
        grantCondition[`ec2:ResourceTag/${tagKey}`] = tagValue;
        const result = this.grantDetachVolume(grantee);
        result.principalStatement.addCondition("ForAnyValue:StringEquals", grantCondition);
        core_1.Tags.of(this).add(tagKey, tagValue);
        constructs.forEach((construct) => core_1.Tags.of(construct).add(tagKey, tagValue));
        return result;
      }
      collectGrantResourceArns(instances) {
        const stack = core_1.Stack.of(this);
        const resourceArns = [
          `arn:${stack.partition}:ec2:${stack.region}:${stack.account}:volume/${this.volumeId}`
        ];
        const instanceArnPrefix = `arn:${stack.partition}:ec2:${stack.region}:${stack.account}:instance`;
        if (instances) {
          instances.forEach((instance) => resourceArns.push(`${instanceArnPrefix}/${instance === null || instance === void 0 ? void 0 : instance.instanceId}`));
        } else {
          resourceArns.push(`${instanceArnPrefix}/*`);
        }
        return resourceArns;
      }
      calculateResourceTagValue(constructs) {
        const md5 = crypto.createHash("md5");
        constructs.forEach((construct) => md5.update(core_1.Names.uniqueId(construct)));
        return md5.digest("hex");
      }
    };
    var Volume = class extends VolumeBase {
      constructor(scope, id, props) {
        var _c, _d, _e, _f, _g;
        super(scope, id, {
          physicalName: props.volumeName
        });
        this.validateProps(props);
        const resource = new ec2_generated_1.CfnVolume(this, "Resource", {
          availabilityZone: props.availabilityZone,
          autoEnableIo: props.autoEnableIo,
          encrypted: props.encrypted,
          kmsKeyId: (_c = props.encryptionKey) === null || _c === void 0 ? void 0 : _c.keyArn,
          iops: props.iops,
          multiAttachEnabled: (_d = props.enableMultiAttach) !== null && _d !== void 0 ? _d : false,
          size: (_e = props.size) === null || _e === void 0 ? void 0 : _e.toGibibytes({ rounding: core_1.SizeRoundingBehavior.FAIL }),
          snapshotId: props.snapshotId,
          volumeType: (_f = props.volumeType) !== null && _f !== void 0 ? _f : EbsDeviceVolumeType.GENERAL_PURPOSE_SSD
        });
        resource.applyRemovalPolicy(props.removalPolicy);
        if (props.volumeName)
          core_1.Tags.of(resource).add("Name", props.volumeName);
        this.volumeId = resource.ref;
        this.availabilityZone = props.availabilityZone;
        this.encryptionKey = props.encryptionKey;
        if (this.encryptionKey) {
          const principal = new aws_kms_1.ViaServicePrincipal(`ec2.${core_1.Stack.of(this).region}.amazonaws.com`, new aws_iam_1.AccountRootPrincipal()).withConditions({
            StringEquals: {
              "kms:CallerAccount": core_1.Stack.of(this).account
            }
          });
          const grant = this.encryptionKey.grant(principal, "kms:DescribeKey", "kms:GenerateDataKeyWithoutPlainText");
          if (props.snapshotId) {
            (_g = grant.principalStatement) === null || _g === void 0 ? void 0 : _g.addActions("kms:ReEncrypt*");
          }
        }
      }
      static fromVolumeAttributes(scope, id, attrs) {
        class Import extends VolumeBase {
          constructor() {
            super(...arguments);
            this.volumeId = attrs.volumeId;
            this.availabilityZone = attrs.availabilityZone;
            this.encryptionKey = attrs.encryptionKey;
          }
        }
        if (!core_1.Token.isUnresolved(attrs.volumeId) && !/^vol-[0-9a-fA-F]+$/.test(attrs.volumeId)) {
          throw new Error("`volumeId` does not match expected pattern. Expected `vol-<hexadecmial value>` (ex: `vol-05abe246af`) or a Token");
        }
        return new Import(scope, id);
      }
      validateProps(props) {
        var _c, _d, _e;
        if (!(props.size || props.snapshotId)) {
          throw new Error("Must provide at least one of `size` or `snapshotId`");
        }
        if (props.snapshotId && !core_1.Token.isUnresolved(props.snapshotId) && !/^snap-[0-9a-fA-F]+$/.test(props.snapshotId)) {
          throw new Error("`snapshotId` does match expected pattern. Expected `snap-<hexadecmial value>` (ex: `snap-05abe246af`) or Token");
        }
        if (props.encryptionKey && !props.encrypted) {
          throw new Error("`encrypted` must be true when providing an `encryptionKey`.");
        }
        if (props.volumeType && [
          EbsDeviceVolumeType.PROVISIONED_IOPS_SSD,
          EbsDeviceVolumeType.PROVISIONED_IOPS_SSD_IO2
        ].includes(props.volumeType) && !props.iops) {
          throw new Error("`iops` must be specified if the `volumeType` is `PROVISIONED_IOPS_SSD` or `PROVISIONED_IOPS_SSD_IO2`.");
        }
        if (props.iops) {
          const volumeType = (_c = props.volumeType) !== null && _c !== void 0 ? _c : EbsDeviceVolumeType.GENERAL_PURPOSE_SSD;
          if (![
            EbsDeviceVolumeType.PROVISIONED_IOPS_SSD,
            EbsDeviceVolumeType.PROVISIONED_IOPS_SSD_IO2,
            EbsDeviceVolumeType.GENERAL_PURPOSE_SSD_GP3
          ].includes(volumeType)) {
            throw new Error("`iops` may only be specified if the `volumeType` is `PROVISIONED_IOPS_SSD`, `PROVISIONED_IOPS_SSD_IO2` or `GENERAL_PURPOSE_SSD_GP3`.");
          }
          const iopsRanges = {};
          iopsRanges[EbsDeviceVolumeType.GENERAL_PURPOSE_SSD_GP3] = { Min: 3e3, Max: 16e3 };
          iopsRanges[EbsDeviceVolumeType.PROVISIONED_IOPS_SSD] = { Min: 100, Max: 64e3 };
          iopsRanges[EbsDeviceVolumeType.PROVISIONED_IOPS_SSD_IO2] = { Min: 100, Max: 64e3 };
          const { Min, Max } = iopsRanges[volumeType];
          if (props.iops < Min || props.iops > Max) {
            throw new Error(`\`${volumeType}\` volumes iops must be between ${Min} and ${Max}.`);
          }
          const maximumRatios = {};
          maximumRatios[EbsDeviceVolumeType.GENERAL_PURPOSE_SSD_GP3] = 500;
          maximumRatios[EbsDeviceVolumeType.PROVISIONED_IOPS_SSD] = 50;
          maximumRatios[EbsDeviceVolumeType.PROVISIONED_IOPS_SSD_IO2] = 500;
          const maximumRatio = maximumRatios[volumeType];
          if (props.size && props.iops > maximumRatio * props.size.toGibibytes({ rounding: core_1.SizeRoundingBehavior.FAIL })) {
            throw new Error(`\`${volumeType}\` volumes iops has a maximum ratio of ${maximumRatio} IOPS/GiB.`);
          }
        }
        if (props.enableMultiAttach) {
          const volumeType = (_d = props.volumeType) !== null && _d !== void 0 ? _d : EbsDeviceVolumeType.GENERAL_PURPOSE_SSD;
          if (![
            EbsDeviceVolumeType.PROVISIONED_IOPS_SSD,
            EbsDeviceVolumeType.PROVISIONED_IOPS_SSD_IO2
          ].includes(volumeType)) {
            throw new Error("multi-attach is supported exclusively on `PROVISIONED_IOPS_SSD` and `PROVISIONED_IOPS_SSD_IO2` volumes.");
          }
        }
        if (props.size) {
          const size = props.size.toGibibytes({ rounding: core_1.SizeRoundingBehavior.FAIL });
          const sizeRanges = {};
          sizeRanges[EbsDeviceVolumeType.GENERAL_PURPOSE_SSD] = { Min: 1, Max: 16384 };
          sizeRanges[EbsDeviceVolumeType.GENERAL_PURPOSE_SSD_GP3] = { Min: 1, Max: 16384 };
          sizeRanges[EbsDeviceVolumeType.PROVISIONED_IOPS_SSD] = { Min: 4, Max: 16384 };
          sizeRanges[EbsDeviceVolumeType.PROVISIONED_IOPS_SSD_IO2] = { Min: 4, Max: 16384 };
          sizeRanges[EbsDeviceVolumeType.THROUGHPUT_OPTIMIZED_HDD] = { Min: 125, Max: 16384 };
          sizeRanges[EbsDeviceVolumeType.COLD_HDD] = { Min: 125, Max: 16384 };
          sizeRanges[EbsDeviceVolumeType.MAGNETIC] = { Min: 1, Max: 1024 };
          const volumeType = (_e = props.volumeType) !== null && _e !== void 0 ? _e : EbsDeviceVolumeType.GENERAL_PURPOSE_SSD;
          const { Min, Max } = sizeRanges[volumeType];
          if (size < Min || size > Max) {
            throw new Error(`\`${volumeType}\` volumes must be between ${Min} GiB and ${Max} GiB in size.`);
          }
        }
      }
    };
    exports2.Volume = Volume;
    _b = JSII_RTTI_SYMBOL_1;
    Volume[_b] = { fqn: "@aws-cdk/aws-ec2.Volume", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/private/ebs-util.js
var require_ebs_util = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/private/ebs-util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.launchTemplateBlockDeviceMappings = exports2.instanceBlockDeviceMappings = void 0;
    var core_1 = require_lib8();
    var volume_1 = require_volume();
    function instanceBlockDeviceMappings(construct, blockDevices) {
      return synthesizeBlockDeviceMappings(construct, blockDevices, {});
    }
    exports2.instanceBlockDeviceMappings = instanceBlockDeviceMappings;
    function launchTemplateBlockDeviceMappings(construct, blockDevices) {
      return synthesizeBlockDeviceMappings(construct, blockDevices, "");
    }
    exports2.launchTemplateBlockDeviceMappings = launchTemplateBlockDeviceMappings;
    function synthesizeBlockDeviceMappings(construct, blockDevices, noDeviceValue) {
      return blockDevices.map(({ deviceName, volume, mappingEnabled }) => {
        const { virtualName, ebsDevice: ebs } = volume;
        if (ebs) {
          const { iops, volumeType } = ebs;
          if (!iops) {
            if (volumeType === volume_1.EbsDeviceVolumeType.IO1) {
              throw new Error("iops property is required with volumeType: EbsDeviceVolumeType.IO1");
            }
          } else if (volumeType !== volume_1.EbsDeviceVolumeType.IO1) {
            core_1.Annotations.of(construct).addWarning("iops will be ignored without volumeType: EbsDeviceVolumeType.IO1");
          }
        }
        const noDevice = mappingEnabled === false ? noDeviceValue : void 0;
        return { deviceName, ebs, virtualName, noDevice };
      });
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/port.js
var require_port = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/port.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Port = exports2.Protocol = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var Protocol;
    (function(Protocol2) {
      Protocol2["ALL"] = "-1";
      Protocol2["HOPOPT"] = "0";
      Protocol2["ICMP"] = "icmp";
      Protocol2["IGMP"] = "2";
      Protocol2["GGP"] = "3";
      Protocol2["IPV4"] = "4";
      Protocol2["ST"] = "5";
      Protocol2["TCP"] = "tcp";
      Protocol2["CBT"] = "7";
      Protocol2["EGP"] = "8";
      Protocol2["IGP"] = "9";
      Protocol2["BBN_RCC_MON"] = "10";
      Protocol2["NVP_II"] = "11";
      Protocol2["PUP"] = "12";
      Protocol2["EMCON"] = "14";
      Protocol2["XNET"] = "15";
      Protocol2["CHAOS"] = "16";
      Protocol2["UDP"] = "udp";
      Protocol2["MUX"] = "18";
      Protocol2["DCN_MEAS"] = "19";
      Protocol2["HMP"] = "20";
      Protocol2["PRM"] = "21";
      Protocol2["XNS_IDP"] = "22";
      Protocol2["TRUNK_1"] = "23";
      Protocol2["TRUNK_2"] = "24";
      Protocol2["LEAF_1"] = "25";
      Protocol2["LEAF_2"] = "26";
      Protocol2["RDP"] = "27";
      Protocol2["IRTP"] = "28";
      Protocol2["ISO_TP4"] = "29";
      Protocol2["NETBLT"] = "30";
      Protocol2["MFE_NSP"] = "31";
      Protocol2["MERIT_INP"] = "32";
      Protocol2["DCCP"] = "33";
      Protocol2["THREEPC"] = "34";
      Protocol2["IDPR"] = "35";
      Protocol2["XTP"] = "36";
      Protocol2["DDP"] = "37";
      Protocol2["IDPR_CMTP"] = "38";
      Protocol2["TPPLUSPLUS"] = "39";
      Protocol2["IL"] = "40";
      Protocol2["IPV6"] = "41";
      Protocol2["SDRP"] = "42";
      Protocol2["IPV6_ROUTE"] = "43";
      Protocol2["IPV6_FRAG"] = "44";
      Protocol2["IDRP"] = "45";
      Protocol2["RSVP"] = "46";
      Protocol2["GRE"] = "47";
      Protocol2["DSR"] = "48";
      Protocol2["BNA"] = "49";
      Protocol2["ESP"] = "50";
      Protocol2["AH"] = "51";
      Protocol2["I_NLSP"] = "52";
      Protocol2["SWIPE"] = "53";
      Protocol2["NARP"] = "54";
      Protocol2["MOBILE"] = "55";
      Protocol2["TLSP"] = "56";
      Protocol2["SKIP"] = "57";
      Protocol2["ICMPV6"] = "icmpv6";
      Protocol2["IPV6_NONXT"] = "59";
      Protocol2["IPV6_OPTS"] = "60";
      Protocol2["CFTP"] = "62";
      Protocol2["ANY_LOCAL"] = "63";
      Protocol2["SAT_EXPAK"] = "64";
      Protocol2["KRYPTOLAN"] = "65";
      Protocol2["RVD"] = "66";
      Protocol2["IPPC"] = "67";
      Protocol2["ANY_DFS"] = "68";
      Protocol2["SAT_MON"] = "69";
      Protocol2["VISA"] = "70";
      Protocol2["IPCV"] = "71";
      Protocol2["CPNX"] = "72";
      Protocol2["CPHB"] = "73";
      Protocol2["WSN"] = "74";
      Protocol2["PVP"] = "75";
      Protocol2["BR_SAT_MON"] = "76";
      Protocol2["SUN_ND"] = "77";
      Protocol2["WB_MON"] = "78";
      Protocol2["WB_EXPAK"] = "79";
      Protocol2["ISO_IP"] = "80";
      Protocol2["VMTP"] = "81";
      Protocol2["SECURE_VMTP"] = "82";
      Protocol2["VINES"] = "83";
      Protocol2["TTP"] = "84";
      Protocol2["IPTM"] = "84";
      Protocol2["NSFNET_IGP"] = "85";
      Protocol2["DGP"] = "86";
      Protocol2["TCF"] = "87";
      Protocol2["EIGRP"] = "88";
      Protocol2["OSPFIGP"] = "89";
      Protocol2["SPRITE_RPC"] = "90";
      Protocol2["LARP"] = "91";
      Protocol2["MTP"] = "92";
      Protocol2["AX_25"] = "93";
      Protocol2["IPIP"] = "94";
      Protocol2["MICP"] = "95";
      Protocol2["SCC_SP"] = "96";
      Protocol2["ETHERIP"] = "97";
      Protocol2["ENCAP"] = "98";
      Protocol2["ANY_ENC"] = "99";
      Protocol2["GMTP"] = "100";
      Protocol2["IFMP"] = "101";
      Protocol2["PNNI"] = "102";
      Protocol2["PIM"] = "103";
      Protocol2["ARIS"] = "104";
      Protocol2["SCPS"] = "105";
      Protocol2["QNX"] = "106";
      Protocol2["A_N"] = "107";
      Protocol2["IPCOMP"] = "108";
      Protocol2["SNP"] = "109";
      Protocol2["COMPAQ_PEER"] = "110";
      Protocol2["IPX_IN_IP"] = "111";
      Protocol2["VRRP"] = "112";
      Protocol2["PGM"] = "113";
      Protocol2["ANY_0_HOP"] = "114";
      Protocol2["L2_T_P"] = "115";
      Protocol2["DDX"] = "116";
      Protocol2["IATP"] = "117";
      Protocol2["STP"] = "118";
      Protocol2["SRP"] = "119";
      Protocol2["UTI"] = "120";
      Protocol2["SMP"] = "121";
      Protocol2["SM"] = "122";
      Protocol2["PTP"] = "123";
      Protocol2["ISIS_IPV4"] = "124";
      Protocol2["FIRE"] = "125";
      Protocol2["CRTP"] = "126";
      Protocol2["CRUDP"] = "127";
      Protocol2["SSCOPMCE"] = "128";
      Protocol2["IPLT"] = "129";
      Protocol2["SPS"] = "130";
      Protocol2["PIPE"] = "131";
      Protocol2["SCTP"] = "132";
      Protocol2["FC"] = "133";
      Protocol2["RSVP_E2E_IGNORE"] = "134";
      Protocol2["MOBILITY_HEADER"] = "135";
      Protocol2["UDPLITE"] = "136";
      Protocol2["MPLS_IN_IP"] = "137";
      Protocol2["MANET"] = "138";
      Protocol2["HIP"] = "139";
      Protocol2["SHIM6"] = "140";
      Protocol2["WESP"] = "141";
      Protocol2["ROHC"] = "142";
      Protocol2["ETHERNET"] = "143";
      Protocol2["EXPERIMENT_1"] = "253";
      Protocol2["EXPERIMENT_2"] = "254";
      Protocol2["RESERVED"] = "255";
    })(Protocol = exports2.Protocol || (exports2.Protocol = {}));
    var Port = class {
      constructor(props) {
        this.props = props;
        this.canInlineRule = !core_1.Token.isUnresolved(props.fromPort) && !core_1.Token.isUnresolved(props.toPort);
      }
      static tcp(port) {
        return new Port({
          protocol: Protocol.TCP,
          fromPort: port,
          toPort: port,
          stringRepresentation: renderPort(port)
        });
      }
      static tcpRange(startPort, endPort) {
        return new Port({
          protocol: Protocol.TCP,
          fromPort: startPort,
          toPort: endPort,
          stringRepresentation: `${renderPort(startPort)}-${renderPort(endPort)}`
        });
      }
      static allTcp() {
        return new Port({
          protocol: Protocol.TCP,
          fromPort: 0,
          toPort: 65535,
          stringRepresentation: "ALL PORTS"
        });
      }
      static udp(port) {
        return new Port({
          protocol: Protocol.UDP,
          fromPort: port,
          toPort: port,
          stringRepresentation: `UDP ${renderPort(port)}`
        });
      }
      static udpRange(startPort, endPort) {
        return new Port({
          protocol: Protocol.UDP,
          fromPort: startPort,
          toPort: endPort,
          stringRepresentation: `UDP ${renderPort(startPort)}-${renderPort(endPort)}`
        });
      }
      static allUdp() {
        return new Port({
          protocol: Protocol.UDP,
          fromPort: 0,
          toPort: 65535,
          stringRepresentation: "UDP ALL PORTS"
        });
      }
      static icmpTypeAndCode(type, code) {
        return new Port({
          protocol: Protocol.ICMP,
          fromPort: type,
          toPort: code,
          stringRepresentation: `ICMP Type ${type} Code ${code}`
        });
      }
      static icmpType(type) {
        return new Port({
          protocol: Protocol.ICMP,
          fromPort: type,
          toPort: -1,
          stringRepresentation: `ICMP Type ${type}`
        });
      }
      static icmpPing() {
        return Port.icmpType(8);
      }
      static allIcmp() {
        return new Port({
          protocol: Protocol.ICMP,
          fromPort: -1,
          toPort: -1,
          stringRepresentation: "ALL ICMP"
        });
      }
      static allTraffic() {
        return new Port({
          protocol: Protocol.ALL,
          stringRepresentation: "ALL TRAFFIC"
        });
      }
      static esp() {
        return new Port({
          protocol: Protocol.ESP,
          fromPort: 50,
          toPort: 50,
          stringRepresentation: "ESP 50"
        });
      }
      static ah() {
        return new Port({
          protocol: Protocol.AH,
          fromPort: 51,
          toPort: 51,
          stringRepresentation: "AH 51"
        });
      }
      toRuleJson() {
        return {
          ipProtocol: this.props.protocol,
          fromPort: this.props.fromPort,
          toPort: this.props.toPort
        };
      }
      toString() {
        return this.props.stringRepresentation;
      }
    };
    exports2.Port = Port;
    _a = JSII_RTTI_SYMBOL_1;
    Port[_a] = { fqn: "@aws-cdk/aws-ec2.Port", version: "1.132.0" };
    function renderPort(port) {
      return core_1.Token.isUnresolved(port) ? "{IndirectPort}" : port.toString();
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/security-group.js
var require_security_group2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/security-group.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SecurityGroup = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cxschema = require_lib3();
    var core_1 = require_lib8();
    var connections_1 = require_connections();
    var ec2_generated_1 = require_ec2_generated();
    var peer_1 = require_peer();
    var port_1 = require_port();
    var SECURITY_GROUP_SYMBOL = Symbol.for("@aws-cdk/iam.SecurityGroup");
    var SECURITY_GROUP_DISABLE_INLINE_RULES_CONTEXT_KEY = "@aws-cdk/aws-ec2.securityGroupDisableInlineRules";
    var SecurityGroupBase = class extends core_1.Resource {
      constructor(scope, id, props) {
        super(scope, id, props);
        this.canInlineRule = false;
        this.connections = new connections_1.Connections({ securityGroups: [this] });
        this.peerAsTokenCount = 0;
        Object.defineProperty(this, SECURITY_GROUP_SYMBOL, { value: true });
      }
      static isSecurityGroup(x) {
        return SECURITY_GROUP_SYMBOL in x;
      }
      get uniqueId() {
        return core_1.Names.nodeUniqueId(this.node);
      }
      addIngressRule(peer, connection, description, remoteRule) {
        if (description === void 0) {
          description = `from ${peer.uniqueId}:${connection}`;
        }
        const [scope, id] = this.determineRuleScope(peer, connection, "from", remoteRule);
        if (scope.node.tryFindChild(id) === void 0) {
          new ec2_generated_1.CfnSecurityGroupIngress(scope, id, __spreadProps(__spreadValues(__spreadValues({
            groupId: this.securityGroupId
          }, peer.toIngressRuleConfig()), connection.toRuleJson()), {
            description
          }));
        }
      }
      addEgressRule(peer, connection, description, remoteRule) {
        if (description === void 0) {
          description = `to ${peer.uniqueId}:${connection}`;
        }
        const [scope, id] = this.determineRuleScope(peer, connection, "to", remoteRule);
        if (scope.node.tryFindChild(id) === void 0) {
          new ec2_generated_1.CfnSecurityGroupEgress(scope, id, __spreadProps(__spreadValues(__spreadValues({
            groupId: this.securityGroupId
          }, peer.toEgressRuleConfig()), connection.toRuleJson()), {
            description
          }));
        }
      }
      toIngressRuleConfig() {
        return { sourceSecurityGroupId: this.securityGroupId };
      }
      toEgressRuleConfig() {
        return { destinationSecurityGroupId: this.securityGroupId };
      }
      determineRuleScope(peer, connection, fromTo, remoteRule) {
        if (remoteRule && SecurityGroupBase.isSecurityGroup(peer) && differentStacks(this, peer)) {
          const reversedFromTo = fromTo === "from" ? "to" : "from";
          return [peer, `${this.uniqueId}:${connection} ${reversedFromTo}`];
        } else {
          return [this, `${fromTo} ${this.renderPeer(peer)}:${connection}`.replace("/", "_")];
        }
      }
      renderPeer(peer) {
        if (core_1.Token.isUnresolved(peer.uniqueId)) {
          return this.peerAsTokenCount++ ? `'{IndirectPeer${this.peerAsTokenCount}}'` : "{IndirectPeer}";
        } else {
          return peer.uniqueId;
        }
      }
    };
    function differentStacks(group1, group2) {
      return core_1.Stack.of(group1) !== core_1.Stack.of(group2);
    }
    var SecurityGroup = class extends SecurityGroupBase {
      constructor(scope, id, props) {
        super(scope, id, {
          physicalName: props.securityGroupName
        });
        this.directIngressRules = [];
        this.directEgressRules = [];
        const groupDescription = props.description || this.node.path;
        this.allowAllOutbound = props.allowAllOutbound !== false;
        this.disableInlineRules = props.disableInlineRules !== void 0 ? !!props.disableInlineRules : !!this.node.tryGetContext(SECURITY_GROUP_DISABLE_INLINE_RULES_CONTEXT_KEY);
        this.securityGroup = new ec2_generated_1.CfnSecurityGroup(this, "Resource", {
          groupName: this.physicalName,
          groupDescription,
          securityGroupIngress: core_1.Lazy.any({ produce: () => this.directIngressRules }, { omitEmptyArray: true }),
          securityGroupEgress: core_1.Lazy.any({ produce: () => this.directEgressRules }, { omitEmptyArray: true }),
          vpcId: props.vpc.vpcId
        });
        this.securityGroupId = this.securityGroup.attrGroupId;
        this.securityGroupVpcId = this.securityGroup.attrVpcId;
        this.securityGroupName = this.securityGroup.ref;
        this.addDefaultEgressRule();
      }
      static fromLookup(scope, id, securityGroupId) {
        if (core_1.Token.isUnresolved(securityGroupId)) {
          throw new Error("All arguments to look up a security group must be concrete (no Tokens)");
        }
        const attributes = core_1.ContextProvider.getValue(scope, {
          provider: cxschema.ContextProvider.SECURITY_GROUP_PROVIDER,
          props: { securityGroupId },
          dummyValue: {
            securityGroupId: "sg-12345",
            allowAllOutbound: true
          }
        }).value;
        return SecurityGroup.fromSecurityGroupId(scope, id, attributes.securityGroupId, {
          allowAllOutbound: attributes.allowAllOutbound,
          mutable: true
        });
      }
      static fromSecurityGroupId(scope, id, securityGroupId, options = {}) {
        class MutableImport extends SecurityGroupBase {
          constructor() {
            var _b;
            super(...arguments);
            this.securityGroupId = securityGroupId;
            this.allowAllOutbound = (_b = options.allowAllOutbound) !== null && _b !== void 0 ? _b : true;
          }
          addEgressRule(peer, connection, description, remoteRule) {
            if (options.allowAllOutbound === false) {
              super.addEgressRule(peer, connection, description, remoteRule);
            }
          }
        }
        class ImmutableImport extends SecurityGroupBase {
          constructor() {
            var _b;
            super(...arguments);
            this.securityGroupId = securityGroupId;
            this.allowAllOutbound = (_b = options.allowAllOutbound) !== null && _b !== void 0 ? _b : true;
          }
          addEgressRule(_peer, _connection, _description, _remoteRule) {
          }
          addIngressRule(_peer, _connection, _description, _remoteRule) {
          }
        }
        return options.mutable !== false ? new MutableImport(scope, id) : new ImmutableImport(scope, id);
      }
      addIngressRule(peer, connection, description, remoteRule) {
        if (!peer.canInlineRule || !connection.canInlineRule || this.disableInlineRules) {
          super.addIngressRule(peer, connection, description, remoteRule);
          return;
        }
        if (description === void 0) {
          description = `from ${peer.uniqueId}:${connection}`;
        }
        this.addDirectIngressRule(__spreadProps(__spreadValues(__spreadValues({}, peer.toIngressRuleConfig()), connection.toRuleJson()), {
          description
        }));
      }
      addEgressRule(peer, connection, description, remoteRule) {
        if (this.allowAllOutbound) {
          if (!remoteRule) {
            core_1.Annotations.of(this).addWarning("Ignoring Egress rule since 'allowAllOutbound' is set to true; To add customize rules, set allowAllOutbound=false on the SecurityGroup");
          }
          return;
        } else {
          this.removeNoTrafficRule();
        }
        if (!peer.canInlineRule || !connection.canInlineRule || this.disableInlineRules) {
          super.addEgressRule(peer, connection, description, remoteRule);
          return;
        }
        if (description === void 0) {
          description = `from ${peer.uniqueId}:${connection}`;
        }
        const rule = __spreadProps(__spreadValues(__spreadValues({}, peer.toEgressRuleConfig()), connection.toRuleJson()), {
          description
        });
        if (isAllTrafficRule(rule)) {
          throw new Error('Cannot add an "all traffic" egress rule in this way; set allowAllOutbound=true on the SecurityGroup instead.');
        }
        this.addDirectEgressRule(rule);
      }
      addDirectIngressRule(rule) {
        if (!this.hasIngressRule(rule)) {
          this.directIngressRules.push(rule);
        }
      }
      hasIngressRule(rule) {
        return this.directIngressRules.findIndex((r) => ingressRulesEqual(r, rule)) > -1;
      }
      addDirectEgressRule(rule) {
        if (!this.hasEgressRule(rule)) {
          this.directEgressRules.push(rule);
        }
      }
      hasEgressRule(rule) {
        return this.directEgressRules.findIndex((r) => egressRulesEqual(r, rule)) > -1;
      }
      addDefaultEgressRule() {
        if (this.disableInlineRules) {
          const peer = this.allowAllOutbound ? ALL_TRAFFIC_PEER : NO_TRAFFIC_PEER;
          const port = this.allowAllOutbound ? ALL_TRAFFIC_PORT : NO_TRAFFIC_PORT;
          const description = this.allowAllOutbound ? ALLOW_ALL_RULE.description : MATCH_NO_TRAFFIC.description;
          super.addEgressRule(peer, port, description, false);
        } else {
          const rule = this.allowAllOutbound ? ALLOW_ALL_RULE : MATCH_NO_TRAFFIC;
          this.directEgressRules.push(rule);
        }
      }
      removeNoTrafficRule() {
        if (this.disableInlineRules) {
          const [scope, id] = this.determineRuleScope(NO_TRAFFIC_PEER, NO_TRAFFIC_PORT, "to", false);
          scope.node.tryRemoveChild(id);
        } else {
          const i = this.directEgressRules.findIndex((r) => egressRulesEqual(r, MATCH_NO_TRAFFIC));
          if (i > -1) {
            this.directEgressRules.splice(i, 1);
          }
        }
      }
    };
    exports2.SecurityGroup = SecurityGroup;
    _a = JSII_RTTI_SYMBOL_1;
    SecurityGroup[_a] = { fqn: "@aws-cdk/aws-ec2.SecurityGroup", version: "1.132.0" };
    var MATCH_NO_TRAFFIC = {
      cidrIp: "255.255.255.255/32",
      description: "Disallow all traffic",
      ipProtocol: "icmp",
      fromPort: 252,
      toPort: 86
    };
    var NO_TRAFFIC_PEER = peer_1.Peer.ipv4(MATCH_NO_TRAFFIC.cidrIp);
    var NO_TRAFFIC_PORT = port_1.Port.icmpTypeAndCode(MATCH_NO_TRAFFIC.fromPort, MATCH_NO_TRAFFIC.toPort);
    var ALLOW_ALL_RULE = {
      cidrIp: "0.0.0.0/0",
      description: "Allow all outbound traffic by default",
      ipProtocol: "-1"
    };
    var ALL_TRAFFIC_PEER = peer_1.Peer.anyIpv4();
    var ALL_TRAFFIC_PORT = port_1.Port.allTraffic();
    function ingressRulesEqual(a, b) {
      return a.cidrIp === b.cidrIp && a.cidrIpv6 === b.cidrIpv6 && a.fromPort === b.fromPort && a.toPort === b.toPort && a.ipProtocol === b.ipProtocol && a.sourceSecurityGroupId === b.sourceSecurityGroupId && a.sourceSecurityGroupName === b.sourceSecurityGroupName && a.sourceSecurityGroupOwnerId === b.sourceSecurityGroupOwnerId;
    }
    function egressRulesEqual(a, b) {
      return a.cidrIp === b.cidrIp && a.cidrIpv6 === b.cidrIpv6 && a.fromPort === b.fromPort && a.toPort === b.toPort && a.ipProtocol === b.ipProtocol && a.destinationPrefixListId === b.destinationPrefixListId && a.destinationSecurityGroupId === b.destinationSecurityGroupId;
    }
    function isAllTrafficRule(rule) {
      return rule.cidrIp === "0.0.0.0/0" && rule.ipProtocol === "-1";
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-logs/lib/logs.generated.js
var require_logs_generated = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-logs/lib/logs.generated.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    var _d;
    var _e;
    var _f;
    var _g;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnSubscriptionFilter = exports2.CfnResourcePolicy = exports2.CfnQueryDefinition = exports2.CfnMetricFilter = exports2.CfnLogStream = exports2.CfnLogGroup = exports2.CfnDestination = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var cfn_parse = require_cfn_parse();
    function CfnDestinationPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("destinationName", cdk.requiredValidator)(properties.destinationName));
      errors.collect(cdk.propertyValidator("destinationName", cdk.validateString)(properties.destinationName));
      errors.collect(cdk.propertyValidator("destinationPolicy", cdk.requiredValidator)(properties.destinationPolicy));
      errors.collect(cdk.propertyValidator("destinationPolicy", cdk.validateString)(properties.destinationPolicy));
      errors.collect(cdk.propertyValidator("roleArn", cdk.requiredValidator)(properties.roleArn));
      errors.collect(cdk.propertyValidator("roleArn", cdk.validateString)(properties.roleArn));
      errors.collect(cdk.propertyValidator("targetArn", cdk.requiredValidator)(properties.targetArn));
      errors.collect(cdk.propertyValidator("targetArn", cdk.validateString)(properties.targetArn));
      return errors.wrap('supplied properties not correct for "CfnDestinationProps"');
    }
    function cfnDestinationPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnDestinationPropsValidator(properties).assertSuccess();
      return {
        DestinationName: cdk.stringToCloudFormation(properties.destinationName),
        DestinationPolicy: cdk.stringToCloudFormation(properties.destinationPolicy),
        RoleArn: cdk.stringToCloudFormation(properties.roleArn),
        TargetArn: cdk.stringToCloudFormation(properties.targetArn)
      };
    }
    function CfnDestinationPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("destinationName", "DestinationName", cfn_parse.FromCloudFormation.getString(properties.DestinationName));
      ret.addPropertyResult("destinationPolicy", "DestinationPolicy", cfn_parse.FromCloudFormation.getString(properties.DestinationPolicy));
      ret.addPropertyResult("roleArn", "RoleArn", cfn_parse.FromCloudFormation.getString(properties.RoleArn));
      ret.addPropertyResult("targetArn", "TargetArn", cfn_parse.FromCloudFormation.getString(properties.TargetArn));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnDestination = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnDestination.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "destinationName", this);
        cdk.requireProperty(props, "destinationPolicy", this);
        cdk.requireProperty(props, "roleArn", this);
        cdk.requireProperty(props, "targetArn", this);
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.destinationName = props.destinationName;
        this.destinationPolicy = props.destinationPolicy;
        this.roleArn = props.roleArn;
        this.targetArn = props.targetArn;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnDestinationPropsFromCloudFormation(resourceProperties);
        const ret = new CfnDestination(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnDestination.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          destinationName: this.destinationName,
          destinationPolicy: this.destinationPolicy,
          roleArn: this.roleArn,
          targetArn: this.targetArn
        };
      }
      renderProperties(props) {
        return cfnDestinationPropsToCloudFormation(props);
      }
    };
    exports2.CfnDestination = CfnDestination;
    _a = JSII_RTTI_SYMBOL_1;
    CfnDestination[_a] = { fqn: "@aws-cdk/aws-logs.CfnDestination", version: "1.132.0" };
    CfnDestination.CFN_RESOURCE_TYPE_NAME = "AWS::Logs::Destination";
    function CfnLogGroupPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("kmsKeyId", cdk.validateString)(properties.kmsKeyId));
      errors.collect(cdk.propertyValidator("logGroupName", cdk.validateString)(properties.logGroupName));
      errors.collect(cdk.propertyValidator("retentionInDays", cdk.validateNumber)(properties.retentionInDays));
      return errors.wrap('supplied properties not correct for "CfnLogGroupProps"');
    }
    function cfnLogGroupPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLogGroupPropsValidator(properties).assertSuccess();
      return {
        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),
        LogGroupName: cdk.stringToCloudFormation(properties.logGroupName),
        RetentionInDays: cdk.numberToCloudFormation(properties.retentionInDays)
      };
    }
    function CfnLogGroupPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("kmsKeyId", "KmsKeyId", properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : void 0);
      ret.addPropertyResult("logGroupName", "LogGroupName", properties.LogGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.LogGroupName) : void 0);
      ret.addPropertyResult("retentionInDays", "RetentionInDays", properties.RetentionInDays != null ? cfn_parse.FromCloudFormation.getNumber(properties.RetentionInDays) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnLogGroup = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnLogGroup.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.kmsKeyId = props.kmsKeyId;
        this.logGroupName = props.logGroupName;
        this.retentionInDays = props.retentionInDays;
        if (this.node.scope && cdk.Resource.isResource(this.node.scope)) {
          this.node.addValidation({ validate: () => this.cfnOptions.deletionPolicy === void 0 ? ["'AWS::Logs::LogGroup' is a stateful resource type, and you must specify a Removal Policy for it. Call 'resource.applyRemovalPolicy()'."] : [] });
        }
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnLogGroupPropsFromCloudFormation(resourceProperties);
        const ret = new CfnLogGroup(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnLogGroup.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          kmsKeyId: this.kmsKeyId,
          logGroupName: this.logGroupName,
          retentionInDays: this.retentionInDays
        };
      }
      renderProperties(props) {
        return cfnLogGroupPropsToCloudFormation(props);
      }
    };
    exports2.CfnLogGroup = CfnLogGroup;
    _b = JSII_RTTI_SYMBOL_1;
    CfnLogGroup[_b] = { fqn: "@aws-cdk/aws-logs.CfnLogGroup", version: "1.132.0" };
    CfnLogGroup.CFN_RESOURCE_TYPE_NAME = "AWS::Logs::LogGroup";
    function CfnLogStreamPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("logGroupName", cdk.requiredValidator)(properties.logGroupName));
      errors.collect(cdk.propertyValidator("logGroupName", cdk.validateString)(properties.logGroupName));
      errors.collect(cdk.propertyValidator("logStreamName", cdk.validateString)(properties.logStreamName));
      return errors.wrap('supplied properties not correct for "CfnLogStreamProps"');
    }
    function cfnLogStreamPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnLogStreamPropsValidator(properties).assertSuccess();
      return {
        LogGroupName: cdk.stringToCloudFormation(properties.logGroupName),
        LogStreamName: cdk.stringToCloudFormation(properties.logStreamName)
      };
    }
    function CfnLogStreamPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("logGroupName", "LogGroupName", cfn_parse.FromCloudFormation.getString(properties.LogGroupName));
      ret.addPropertyResult("logStreamName", "LogStreamName", properties.LogStreamName != null ? cfn_parse.FromCloudFormation.getString(properties.LogStreamName) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnLogStream = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnLogStream.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "logGroupName", this);
        this.logGroupName = props.logGroupName;
        this.logStreamName = props.logStreamName;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnLogStreamPropsFromCloudFormation(resourceProperties);
        const ret = new CfnLogStream(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnLogStream.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          logGroupName: this.logGroupName,
          logStreamName: this.logStreamName
        };
      }
      renderProperties(props) {
        return cfnLogStreamPropsToCloudFormation(props);
      }
    };
    exports2.CfnLogStream = CfnLogStream;
    _c = JSII_RTTI_SYMBOL_1;
    CfnLogStream[_c] = { fqn: "@aws-cdk/aws-logs.CfnLogStream", version: "1.132.0" };
    CfnLogStream.CFN_RESOURCE_TYPE_NAME = "AWS::Logs::LogStream";
    function CfnMetricFilterPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("filterPattern", cdk.requiredValidator)(properties.filterPattern));
      errors.collect(cdk.propertyValidator("filterPattern", cdk.validateString)(properties.filterPattern));
      errors.collect(cdk.propertyValidator("logGroupName", cdk.requiredValidator)(properties.logGroupName));
      errors.collect(cdk.propertyValidator("logGroupName", cdk.validateString)(properties.logGroupName));
      errors.collect(cdk.propertyValidator("metricTransformations", cdk.requiredValidator)(properties.metricTransformations));
      errors.collect(cdk.propertyValidator("metricTransformations", cdk.listValidator(CfnMetricFilter_MetricTransformationPropertyValidator))(properties.metricTransformations));
      return errors.wrap('supplied properties not correct for "CfnMetricFilterProps"');
    }
    function cfnMetricFilterPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnMetricFilterPropsValidator(properties).assertSuccess();
      return {
        FilterPattern: cdk.stringToCloudFormation(properties.filterPattern),
        LogGroupName: cdk.stringToCloudFormation(properties.logGroupName),
        MetricTransformations: cdk.listMapper(cfnMetricFilterMetricTransformationPropertyToCloudFormation)(properties.metricTransformations)
      };
    }
    function CfnMetricFilterPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("filterPattern", "FilterPattern", cfn_parse.FromCloudFormation.getString(properties.FilterPattern));
      ret.addPropertyResult("logGroupName", "LogGroupName", cfn_parse.FromCloudFormation.getString(properties.LogGroupName));
      ret.addPropertyResult("metricTransformations", "MetricTransformations", cfn_parse.FromCloudFormation.getArray(CfnMetricFilterMetricTransformationPropertyFromCloudFormation)(properties.MetricTransformations));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnMetricFilter = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnMetricFilter.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "filterPattern", this);
        cdk.requireProperty(props, "logGroupName", this);
        cdk.requireProperty(props, "metricTransformations", this);
        this.filterPattern = props.filterPattern;
        this.logGroupName = props.logGroupName;
        this.metricTransformations = props.metricTransformations;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnMetricFilterPropsFromCloudFormation(resourceProperties);
        const ret = new CfnMetricFilter(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnMetricFilter.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          filterPattern: this.filterPattern,
          logGroupName: this.logGroupName,
          metricTransformations: this.metricTransformations
        };
      }
      renderProperties(props) {
        return cfnMetricFilterPropsToCloudFormation(props);
      }
    };
    exports2.CfnMetricFilter = CfnMetricFilter;
    _d = JSII_RTTI_SYMBOL_1;
    CfnMetricFilter[_d] = { fqn: "@aws-cdk/aws-logs.CfnMetricFilter", version: "1.132.0" };
    CfnMetricFilter.CFN_RESOURCE_TYPE_NAME = "AWS::Logs::MetricFilter";
    function CfnMetricFilter_MetricTransformationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("defaultValue", cdk.validateNumber)(properties.defaultValue));
      errors.collect(cdk.propertyValidator("metricName", cdk.requiredValidator)(properties.metricName));
      errors.collect(cdk.propertyValidator("metricName", cdk.validateString)(properties.metricName));
      errors.collect(cdk.propertyValidator("metricNamespace", cdk.requiredValidator)(properties.metricNamespace));
      errors.collect(cdk.propertyValidator("metricNamespace", cdk.validateString)(properties.metricNamespace));
      errors.collect(cdk.propertyValidator("metricValue", cdk.requiredValidator)(properties.metricValue));
      errors.collect(cdk.propertyValidator("metricValue", cdk.validateString)(properties.metricValue));
      return errors.wrap('supplied properties not correct for "MetricTransformationProperty"');
    }
    function cfnMetricFilterMetricTransformationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnMetricFilter_MetricTransformationPropertyValidator(properties).assertSuccess();
      return {
        DefaultValue: cdk.numberToCloudFormation(properties.defaultValue),
        MetricName: cdk.stringToCloudFormation(properties.metricName),
        MetricNamespace: cdk.stringToCloudFormation(properties.metricNamespace),
        MetricValue: cdk.stringToCloudFormation(properties.metricValue)
      };
    }
    function CfnMetricFilterMetricTransformationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("defaultValue", "DefaultValue", properties.DefaultValue != null ? cfn_parse.FromCloudFormation.getNumber(properties.DefaultValue) : void 0);
      ret.addPropertyResult("metricName", "MetricName", cfn_parse.FromCloudFormation.getString(properties.MetricName));
      ret.addPropertyResult("metricNamespace", "MetricNamespace", cfn_parse.FromCloudFormation.getString(properties.MetricNamespace));
      ret.addPropertyResult("metricValue", "MetricValue", cfn_parse.FromCloudFormation.getString(properties.MetricValue));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnQueryDefinitionPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("logGroupNames", cdk.listValidator(cdk.validateString))(properties.logGroupNames));
      errors.collect(cdk.propertyValidator("name", cdk.requiredValidator)(properties.name));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("queryString", cdk.requiredValidator)(properties.queryString));
      errors.collect(cdk.propertyValidator("queryString", cdk.validateString)(properties.queryString));
      return errors.wrap('supplied properties not correct for "CfnQueryDefinitionProps"');
    }
    function cfnQueryDefinitionPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnQueryDefinitionPropsValidator(properties).assertSuccess();
      return {
        Name: cdk.stringToCloudFormation(properties.name),
        QueryString: cdk.stringToCloudFormation(properties.queryString),
        LogGroupNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.logGroupNames)
      };
    }
    function CfnQueryDefinitionPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("name", "Name", cfn_parse.FromCloudFormation.getString(properties.Name));
      ret.addPropertyResult("queryString", "QueryString", cfn_parse.FromCloudFormation.getString(properties.QueryString));
      ret.addPropertyResult("logGroupNames", "LogGroupNames", properties.LogGroupNames != null ? cfn_parse.FromCloudFormation.getStringArray(properties.LogGroupNames) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnQueryDefinition = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnQueryDefinition.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "name", this);
        cdk.requireProperty(props, "queryString", this);
        this.attrQueryDefinitionId = cdk.Token.asString(this.getAtt("QueryDefinitionId"));
        this.name = props.name;
        this.queryString = props.queryString;
        this.logGroupNames = props.logGroupNames;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnQueryDefinitionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnQueryDefinition(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnQueryDefinition.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          name: this.name,
          queryString: this.queryString,
          logGroupNames: this.logGroupNames
        };
      }
      renderProperties(props) {
        return cfnQueryDefinitionPropsToCloudFormation(props);
      }
    };
    exports2.CfnQueryDefinition = CfnQueryDefinition;
    _e = JSII_RTTI_SYMBOL_1;
    CfnQueryDefinition[_e] = { fqn: "@aws-cdk/aws-logs.CfnQueryDefinition", version: "1.132.0" };
    CfnQueryDefinition.CFN_RESOURCE_TYPE_NAME = "AWS::Logs::QueryDefinition";
    function CfnResourcePolicyPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("policyDocument", cdk.requiredValidator)(properties.policyDocument));
      errors.collect(cdk.propertyValidator("policyDocument", cdk.validateString)(properties.policyDocument));
      errors.collect(cdk.propertyValidator("policyName", cdk.requiredValidator)(properties.policyName));
      errors.collect(cdk.propertyValidator("policyName", cdk.validateString)(properties.policyName));
      return errors.wrap('supplied properties not correct for "CfnResourcePolicyProps"');
    }
    function cfnResourcePolicyPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnResourcePolicyPropsValidator(properties).assertSuccess();
      return {
        PolicyDocument: cdk.stringToCloudFormation(properties.policyDocument),
        PolicyName: cdk.stringToCloudFormation(properties.policyName)
      };
    }
    function CfnResourcePolicyPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("policyDocument", "PolicyDocument", cfn_parse.FromCloudFormation.getString(properties.PolicyDocument));
      ret.addPropertyResult("policyName", "PolicyName", cfn_parse.FromCloudFormation.getString(properties.PolicyName));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnResourcePolicy = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnResourcePolicy.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "policyDocument", this);
        cdk.requireProperty(props, "policyName", this);
        this.policyDocument = props.policyDocument;
        this.policyName = props.policyName;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnResourcePolicyPropsFromCloudFormation(resourceProperties);
        const ret = new CfnResourcePolicy(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnResourcePolicy.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          policyDocument: this.policyDocument,
          policyName: this.policyName
        };
      }
      renderProperties(props) {
        return cfnResourcePolicyPropsToCloudFormation(props);
      }
    };
    exports2.CfnResourcePolicy = CfnResourcePolicy;
    _f = JSII_RTTI_SYMBOL_1;
    CfnResourcePolicy[_f] = { fqn: "@aws-cdk/aws-logs.CfnResourcePolicy", version: "1.132.0" };
    CfnResourcePolicy.CFN_RESOURCE_TYPE_NAME = "AWS::Logs::ResourcePolicy";
    function CfnSubscriptionFilterPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("destinationArn", cdk.requiredValidator)(properties.destinationArn));
      errors.collect(cdk.propertyValidator("destinationArn", cdk.validateString)(properties.destinationArn));
      errors.collect(cdk.propertyValidator("filterPattern", cdk.requiredValidator)(properties.filterPattern));
      errors.collect(cdk.propertyValidator("filterPattern", cdk.validateString)(properties.filterPattern));
      errors.collect(cdk.propertyValidator("logGroupName", cdk.requiredValidator)(properties.logGroupName));
      errors.collect(cdk.propertyValidator("logGroupName", cdk.validateString)(properties.logGroupName));
      errors.collect(cdk.propertyValidator("roleArn", cdk.validateString)(properties.roleArn));
      return errors.wrap('supplied properties not correct for "CfnSubscriptionFilterProps"');
    }
    function cfnSubscriptionFilterPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnSubscriptionFilterPropsValidator(properties).assertSuccess();
      return {
        DestinationArn: cdk.stringToCloudFormation(properties.destinationArn),
        FilterPattern: cdk.stringToCloudFormation(properties.filterPattern),
        LogGroupName: cdk.stringToCloudFormation(properties.logGroupName),
        RoleArn: cdk.stringToCloudFormation(properties.roleArn)
      };
    }
    function CfnSubscriptionFilterPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("destinationArn", "DestinationArn", cfn_parse.FromCloudFormation.getString(properties.DestinationArn));
      ret.addPropertyResult("filterPattern", "FilterPattern", cfn_parse.FromCloudFormation.getString(properties.FilterPattern));
      ret.addPropertyResult("logGroupName", "LogGroupName", cfn_parse.FromCloudFormation.getString(properties.LogGroupName));
      ret.addPropertyResult("roleArn", "RoleArn", properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnSubscriptionFilter = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnSubscriptionFilter.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "destinationArn", this);
        cdk.requireProperty(props, "filterPattern", this);
        cdk.requireProperty(props, "logGroupName", this);
        this.destinationArn = props.destinationArn;
        this.filterPattern = props.filterPattern;
        this.logGroupName = props.logGroupName;
        this.roleArn = props.roleArn;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnSubscriptionFilterPropsFromCloudFormation(resourceProperties);
        const ret = new CfnSubscriptionFilter(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnSubscriptionFilter.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          destinationArn: this.destinationArn,
          filterPattern: this.filterPattern,
          logGroupName: this.logGroupName,
          roleArn: this.roleArn
        };
      }
      renderProperties(props) {
        return cfnSubscriptionFilterPropsToCloudFormation(props);
      }
    };
    exports2.CfnSubscriptionFilter = CfnSubscriptionFilter;
    _g = JSII_RTTI_SYMBOL_1;
    CfnSubscriptionFilter[_g] = { fqn: "@aws-cdk/aws-logs.CfnSubscriptionFilter", version: "1.132.0" };
    CfnSubscriptionFilter.CFN_RESOURCE_TYPE_NAME = "AWS::Logs::SubscriptionFilter";
  }
});

// asset-input/node_modules/@aws-cdk/aws-logs/lib/cross-account-destination.js
var require_cross_account_destination = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-logs/lib/cross-account-destination.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CrossAccountDestination = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var iam = require_lib9();
    var cdk = require_lib8();
    var logs_generated_1 = require_logs_generated();
    var CrossAccountDestination = class extends cdk.Resource {
      constructor(scope, id, props) {
        super(scope, id, {
          physicalName: props.destinationName || cdk.Lazy.string({ produce: () => this.generateUniqueName() })
        });
        this.policyDocument = new iam.PolicyDocument();
        this.resource = new logs_generated_1.CfnDestination(this, "Resource", {
          destinationName: this.physicalName,
          destinationPolicy: this.lazyStringifiedPolicyDocument(),
          roleArn: props.role.roleArn,
          targetArn: props.targetArn
        });
        this.destinationArn = this.getResourceArnAttribute(this.resource.attrArn, {
          service: "logs",
          resource: "destination",
          resourceName: this.physicalName,
          sep: ":"
        });
        this.destinationName = this.getResourceNameAttribute(this.resource.ref);
      }
      addToPolicy(statement) {
        this.policyDocument.addStatements(statement);
      }
      bind(_scope, _sourceLogGroup) {
        return { arn: this.destinationArn };
      }
      generateUniqueName() {
        return cdk.Stack.of(this).stackName + "-" + this.resource.logicalId;
      }
      lazyStringifiedPolicyDocument() {
        return cdk.Lazy.string({
          produce: () => this.policyDocument.isEmpty ? "" : cdk.Stack.of(this).toJsonString(this.policyDocument)
        });
      }
    };
    exports2.CrossAccountDestination = CrossAccountDestination;
    _a = JSII_RTTI_SYMBOL_1;
    CrossAccountDestination[_a] = { fqn: "@aws-cdk/aws-logs.CrossAccountDestination", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-logs/lib/log-stream.js
var require_log_stream = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-logs/lib/log-stream.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LogStream = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var logs_generated_1 = require_logs_generated();
    var LogStream = class extends core_1.Resource {
      constructor(scope, id, props) {
        super(scope, id, {
          physicalName: props.logStreamName
        });
        const resource = new logs_generated_1.CfnLogStream(this, "Resource", {
          logGroupName: props.logGroup.logGroupName,
          logStreamName: this.physicalName
        });
        resource.applyRemovalPolicy(props.removalPolicy);
        this.logStreamName = this.getResourceNameAttribute(resource.ref);
      }
      static fromLogStreamName(scope, id, logStreamName) {
        class Import extends core_1.Resource {
          constructor() {
            super(...arguments);
            this.logStreamName = logStreamName;
          }
        }
        return new Import(scope, id);
      }
    };
    exports2.LogStream = LogStream;
    _a = JSII_RTTI_SYMBOL_1;
    LogStream[_a] = { fqn: "@aws-cdk/aws-logs.LogStream", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-logs/lib/metric-filter.js
var require_metric_filter = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-logs/lib/metric-filter.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MetricFilter = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var aws_cloudwatch_1 = require_lib10();
    var core_1 = require_lib8();
    var logs_generated_1 = require_logs_generated();
    var MetricFilter = class extends core_1.Resource {
      constructor(scope, id, props) {
        var _b;
        super(scope, id);
        this.metricName = props.metricName;
        this.metricNamespace = props.metricNamespace;
        new logs_generated_1.CfnMetricFilter(this, "Resource", {
          logGroupName: props.logGroup.logGroupName,
          filterPattern: props.filterPattern.logPatternString,
          metricTransformations: [{
            metricNamespace: props.metricNamespace,
            metricName: props.metricName,
            metricValue: (_b = props.metricValue) !== null && _b !== void 0 ? _b : "1",
            defaultValue: props.defaultValue
          }]
        });
      }
      metric(props) {
        return new aws_cloudwatch_1.Metric(__spreadValues({
          metricName: this.metricName,
          namespace: this.metricNamespace,
          statistic: "avg"
        }, props)).attachTo(this);
      }
    };
    exports2.MetricFilter = MetricFilter;
    _a = JSII_RTTI_SYMBOL_1;
    MetricFilter[_a] = { fqn: "@aws-cdk/aws-logs.MetricFilter", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-logs/lib/pattern.js
var require_pattern = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-logs/lib/pattern.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SpaceDelimitedTextPattern = exports2.FilterPattern = exports2.JsonPattern = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var JsonPattern = class {
      constructor(jsonPatternString) {
        this.jsonPatternString = jsonPatternString;
      }
      get logPatternString() {
        return "{ " + this.jsonPatternString + " }";
      }
    };
    exports2.JsonPattern = JsonPattern;
    _a = JSII_RTTI_SYMBOL_1;
    JsonPattern[_a] = { fqn: "@aws-cdk/aws-logs.JsonPattern", version: "1.132.0" };
    var FilterPattern = class {
      static literal(logPatternString) {
        return new LiteralLogPattern(logPatternString);
      }
      static allEvents() {
        return new LiteralLogPattern("");
      }
      static allTerms(...terms) {
        return new TextLogPattern([terms]);
      }
      static anyTerm(...terms) {
        return new TextLogPattern(terms.map((t) => [t]));
      }
      static anyTermGroup(...termGroups) {
        return new TextLogPattern(termGroups);
      }
      static stringValue(jsonField, comparison, value) {
        return new JSONStringPattern(jsonField, comparison, value);
      }
      static numberValue(jsonField, comparison, value) {
        return new JSONNumberPattern(jsonField, comparison, value);
      }
      static isNull(jsonField) {
        return new JSONPostfixPattern(jsonField, "IS NULL");
      }
      static notExists(jsonField) {
        return new JSONPostfixPattern(jsonField, "NOT EXISTS");
      }
      static exists(jsonField) {
        return new JSONStringPattern(jsonField, "=", "*");
      }
      static booleanValue(jsonField, value) {
        return new JSONPostfixPattern(jsonField, value ? "IS TRUE" : "IS FALSE");
      }
      static all(...patterns) {
        if (patterns.length === 0) {
          throw new Error("Must supply at least one pattern, or use allEvents() to match all events.");
        }
        if (patterns.length === 1) {
          return patterns[0];
        }
        return new JSONAggregatePattern("&&", patterns);
      }
      static any(...patterns) {
        if (patterns.length === 0) {
          throw new Error("Must supply at least one pattern");
        }
        if (patterns.length === 1) {
          return patterns[0];
        }
        return new JSONAggregatePattern("||", patterns);
      }
      static spaceDelimited(...columns) {
        return SpaceDelimitedTextPattern.construct(columns);
      }
    };
    exports2.FilterPattern = FilterPattern;
    _b = JSII_RTTI_SYMBOL_1;
    FilterPattern[_b] = { fqn: "@aws-cdk/aws-logs.FilterPattern", version: "1.132.0" };
    var LiteralLogPattern = class {
      constructor(logPatternString) {
        this.logPatternString = logPatternString;
      }
    };
    var TextLogPattern = class {
      constructor(clauses) {
        const quotedClauses = clauses.map((terms) => terms.map(quoteTerm).join(" "));
        if (quotedClauses.length === 1) {
          this.logPatternString = quotedClauses[0];
        } else {
          this.logPatternString = quotedClauses.map((alt) => "?" + alt).join(" ");
        }
      }
    };
    var JSONStringPattern = class extends JsonPattern {
      constructor(jsonField, comparison, value) {
        comparison = validateStringOperator(comparison);
        super(`${jsonField} ${comparison} ${quoteTerm(value)}`);
      }
    };
    var JSONNumberPattern = class extends JsonPattern {
      constructor(jsonField, comparison, value) {
        comparison = validateNumericalOperator(comparison);
        super(`${jsonField} ${comparison} ${value}`);
      }
    };
    var JSONPostfixPattern = class extends JsonPattern {
      constructor(jsonField, postfix) {
        super(`${jsonField} ${postfix}`);
      }
    };
    var JSONAggregatePattern = class extends JsonPattern {
      constructor(operator, patterns) {
        if (operator !== "&&" && operator !== "||") {
          throw new Error("Operator must be one of && or ||");
        }
        const clauses = patterns.map((p) => "(" + p.jsonPatternString + ")");
        super(clauses.join(` ${operator} `));
      }
    };
    var COL_ELLIPSIS = "...";
    var SpaceDelimitedTextPattern = class {
      constructor(columns, restrictions) {
        this.columns = columns;
        this.restrictions = restrictions;
      }
      static construct(columns) {
        for (const column of columns) {
          if (!validColumnName(column)) {
            throw new Error(`Invalid column name: ${column}`);
          }
        }
        if (sum(columns.map((c) => c === COL_ELLIPSIS ? 1 : 0)) > 1) {
          throw new Error("Can use at most one '...' column");
        }
        return new SpaceDelimitedTextPattern(columns, {});
      }
      whereString(columnName, comparison, value) {
        if (columnName === COL_ELLIPSIS) {
          throw new Error("Can't use '...' in a restriction");
        }
        if (this.columns.indexOf(columnName) === -1) {
          throw new Error(`Column in restrictions that is not in columns: ${columnName}`);
        }
        comparison = validateStringOperator(comparison);
        return new SpaceDelimitedTextPattern(this.columns, this.addRestriction(columnName, {
          comparison,
          stringValue: value
        }));
      }
      whereNumber(columnName, comparison, value) {
        if (columnName === COL_ELLIPSIS) {
          throw new Error("Can't use '...' in a restriction");
        }
        if (this.columns.indexOf(columnName) === -1) {
          throw new Error(`Column in restrictions that is not in columns: ${columnName}`);
        }
        comparison = validateNumericalOperator(comparison);
        return new SpaceDelimitedTextPattern(this.columns, this.addRestriction(columnName, {
          comparison,
          numberValue: value
        }));
      }
      get logPatternString() {
        return "[" + this.columns.map(this.columnExpression.bind(this)).join(", ") + "]";
      }
      columnExpression(column) {
        const restrictions = this.restrictions[column];
        if (!restrictions) {
          return column;
        }
        return restrictions.map((r) => renderRestriction(column, r)).join(" && ");
      }
      addRestriction(columnName, restriction) {
        const ret = {};
        for (const key of Object.keys(this.restrictions)) {
          ret[key] = this.restrictions[key].slice();
        }
        if (!(columnName in ret)) {
          ret[columnName] = [];
        }
        ret[columnName].push(restriction);
        return ret;
      }
    };
    exports2.SpaceDelimitedTextPattern = SpaceDelimitedTextPattern;
    _c = JSII_RTTI_SYMBOL_1;
    SpaceDelimitedTextPattern[_c] = { fqn: "@aws-cdk/aws-logs.SpaceDelimitedTextPattern", version: "1.132.0" };
    function quoteTerm(term) {
      return '"' + term.replace(/\\/g, "\\\\").replace(/"/g, '\\"') + '"';
    }
    function validColumnName(column) {
      return column === COL_ELLIPSIS || /^[a-zA-Z0-9_-]+$/.exec(column);
    }
    function validateStringOperator(operator) {
      if (operator === "==") {
        operator = "=";
      }
      if (operator !== "=" && operator !== "!=") {
        throw new Error(`Invalid comparison operator ('${operator}'), must be either '=' or '!='`);
      }
      return operator;
    }
    var VALID_OPERATORS = ["=", "!=", "<", "<=", ">", ">="];
    function validateNumericalOperator(operator) {
      if (operator === "==") {
        operator = "=";
      }
      if (VALID_OPERATORS.indexOf(operator) === -1) {
        throw new Error(`Invalid comparison operator ('${operator}'), must be one of ${VALID_OPERATORS.join(", ")}`);
      }
      return operator;
    }
    function renderRestriction(column, restriction) {
      if (restriction.numberValue !== void 0) {
        return `${column} ${restriction.comparison} ${restriction.numberValue}`;
      } else if (restriction.stringValue) {
        return `${column} ${restriction.comparison} ${quoteTerm(restriction.stringValue)}`;
      } else {
        throw new Error("Invalid restriction");
      }
    }
    function sum(xs) {
      return xs.reduce((a, c) => a + c, 0);
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-logs/lib/policy.js
var require_policy2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-logs/lib/policy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ResourcePolicy = void 0;
    var aws_iam_1 = require_lib9();
    var core_1 = require_lib8();
    var logs_generated_1 = require_logs_generated();
    var ResourcePolicy = class extends core_1.Resource {
      constructor(scope, id, props) {
        super(scope, id);
        this.document = new aws_iam_1.PolicyDocument();
        new logs_generated_1.CfnResourcePolicy(this, "Resource", {
          policyName: core_1.Lazy.string({
            produce: () => {
              var _a;
              return (_a = props === null || props === void 0 ? void 0 : props.policyName) !== null && _a !== void 0 ? _a : core_1.Names.uniqueId(this);
            }
          }),
          policyDocument: core_1.Lazy.string({
            produce: () => JSON.stringify(this.document)
          })
        });
        if (props === null || props === void 0 ? void 0 : props.policyStatements) {
          this.document.addStatements(...props.policyStatements);
        }
      }
    };
    exports2.ResourcePolicy = ResourcePolicy;
  }
});

// asset-input/node_modules/@aws-cdk/aws-logs/lib/subscription-filter.js
var require_subscription_filter = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-logs/lib/subscription-filter.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SubscriptionFilter = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var logs_generated_1 = require_logs_generated();
    var SubscriptionFilter = class extends core_1.Resource {
      constructor(scope, id, props) {
        super(scope, id);
        const destProps = props.destination.bind(this, props.logGroup);
        new logs_generated_1.CfnSubscriptionFilter(this, "Resource", {
          logGroupName: props.logGroup.logGroupName,
          destinationArn: destProps.arn,
          roleArn: destProps.role && destProps.role.roleArn,
          filterPattern: props.filterPattern.logPatternString
        });
      }
    };
    exports2.SubscriptionFilter = SubscriptionFilter;
    _a = JSII_RTTI_SYMBOL_1;
    SubscriptionFilter[_a] = { fqn: "@aws-cdk/aws-logs.SubscriptionFilter", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-logs/lib/log-group.js
var require_log_group = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-logs/lib/log-group.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LogGroup = exports2.RetentionDays = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cloudwatch = require_lib10();
    var iam = require_lib9();
    var core_1 = require_lib8();
    var log_stream_1 = require_log_stream();
    var logs_generated_1 = require_logs_generated();
    var metric_filter_1 = require_metric_filter();
    var pattern_1 = require_pattern();
    var policy_1 = require_policy2();
    var subscription_filter_1 = require_subscription_filter();
    var LogGroupBase = class extends core_1.Resource {
      addStream(id, props = {}) {
        return new log_stream_1.LogStream(this, id, __spreadValues({
          logGroup: this
        }, props));
      }
      addSubscriptionFilter(id, props) {
        return new subscription_filter_1.SubscriptionFilter(this, id, __spreadValues({
          logGroup: this
        }, props));
      }
      addMetricFilter(id, props) {
        return new metric_filter_1.MetricFilter(this, id, __spreadValues({
          logGroup: this
        }, props));
      }
      extractMetric(jsonField, metricNamespace, metricName) {
        new metric_filter_1.MetricFilter(this, `${metricNamespace}_${metricName}`, {
          logGroup: this,
          metricNamespace,
          metricName,
          filterPattern: pattern_1.FilterPattern.exists(jsonField),
          metricValue: jsonField
        });
        return new cloudwatch.Metric({ metricName, namespace: metricNamespace }).attachTo(this);
      }
      grantWrite(grantee) {
        return this.grant(grantee, "logs:CreateLogStream", "logs:PutLogEvents");
      }
      grant(grantee, ...actions) {
        return iam.Grant.addToPrincipalOrResource({
          grantee,
          actions,
          resourceArns: [this.logGroupArn],
          resource: this
        });
      }
      logGroupPhysicalName() {
        return this.physicalName;
      }
      addToResourcePolicy(statement) {
        if (!this.policy) {
          this.policy = new policy_1.ResourcePolicy(this, "Policy");
        }
        this.policy.document.addStatements(statement);
        return { statementAdded: true, policyDependable: this.policy };
      }
    };
    var RetentionDays;
    (function(RetentionDays2) {
      RetentionDays2[RetentionDays2["ONE_DAY"] = 1] = "ONE_DAY";
      RetentionDays2[RetentionDays2["THREE_DAYS"] = 3] = "THREE_DAYS";
      RetentionDays2[RetentionDays2["FIVE_DAYS"] = 5] = "FIVE_DAYS";
      RetentionDays2[RetentionDays2["ONE_WEEK"] = 7] = "ONE_WEEK";
      RetentionDays2[RetentionDays2["TWO_WEEKS"] = 14] = "TWO_WEEKS";
      RetentionDays2[RetentionDays2["ONE_MONTH"] = 30] = "ONE_MONTH";
      RetentionDays2[RetentionDays2["TWO_MONTHS"] = 60] = "TWO_MONTHS";
      RetentionDays2[RetentionDays2["THREE_MONTHS"] = 90] = "THREE_MONTHS";
      RetentionDays2[RetentionDays2["FOUR_MONTHS"] = 120] = "FOUR_MONTHS";
      RetentionDays2[RetentionDays2["FIVE_MONTHS"] = 150] = "FIVE_MONTHS";
      RetentionDays2[RetentionDays2["SIX_MONTHS"] = 180] = "SIX_MONTHS";
      RetentionDays2[RetentionDays2["ONE_YEAR"] = 365] = "ONE_YEAR";
      RetentionDays2[RetentionDays2["THIRTEEN_MONTHS"] = 400] = "THIRTEEN_MONTHS";
      RetentionDays2[RetentionDays2["EIGHTEEN_MONTHS"] = 545] = "EIGHTEEN_MONTHS";
      RetentionDays2[RetentionDays2["TWO_YEARS"] = 731] = "TWO_YEARS";
      RetentionDays2[RetentionDays2["FIVE_YEARS"] = 1827] = "FIVE_YEARS";
      RetentionDays2[RetentionDays2["TEN_YEARS"] = 3653] = "TEN_YEARS";
      RetentionDays2[RetentionDays2["INFINITE"] = 9999] = "INFINITE";
    })(RetentionDays = exports2.RetentionDays || (exports2.RetentionDays = {}));
    var LogGroup = class extends LogGroupBase {
      constructor(scope, id, props = {}) {
        var _b;
        super(scope, id, {
          physicalName: props.logGroupName
        });
        let retentionInDays = props.retention;
        if (retentionInDays === void 0) {
          retentionInDays = RetentionDays.TWO_YEARS;
        }
        if (retentionInDays === Infinity || retentionInDays === RetentionDays.INFINITE) {
          retentionInDays = void 0;
        }
        if (retentionInDays !== void 0 && !core_1.Token.isUnresolved(retentionInDays) && retentionInDays <= 0) {
          throw new Error(`retentionInDays must be positive, got ${retentionInDays}`);
        }
        const resource = new logs_generated_1.CfnLogGroup(this, "Resource", {
          kmsKeyId: (_b = props.encryptionKey) === null || _b === void 0 ? void 0 : _b.keyArn,
          logGroupName: this.physicalName,
          retentionInDays
        });
        resource.applyRemovalPolicy(props.removalPolicy);
        this.logGroupArn = this.getResourceArnAttribute(resource.attrArn, {
          service: "logs",
          resource: "log-group",
          resourceName: this.physicalName,
          sep: ":"
        });
        this.logGroupName = this.getResourceNameAttribute(resource.ref);
      }
      static fromLogGroupArn(scope, id, logGroupArn) {
        const baseLogGroupArn = logGroupArn.replace(/:\*$/, "");
        class Import extends LogGroupBase {
          constructor() {
            super(...arguments);
            this.logGroupArn = `${baseLogGroupArn}:*`;
            this.logGroupName = core_1.Stack.of(scope).parseArn(baseLogGroupArn, ":").resourceName;
          }
        }
        return new Import(scope, id);
      }
      static fromLogGroupName(scope, id, logGroupName) {
        const baseLogGroupName = logGroupName.replace(/:\*$/, "");
        class Import extends LogGroupBase {
          constructor() {
            super(...arguments);
            this.logGroupName = baseLogGroupName;
            this.logGroupArn = core_1.Stack.of(scope).formatArn({
              service: "logs",
              resource: "log-group",
              sep: ":",
              resourceName: baseLogGroupName + ":*"
            });
          }
        }
        return new Import(scope, id);
      }
    };
    exports2.LogGroup = LogGroup;
    _a = JSII_RTTI_SYMBOL_1;
    LogGroup[_a] = { fqn: "@aws-cdk/aws-logs.LogGroup", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-events/lib/input.js
var require_input = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-events/lib/input.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EventField = exports2.RuleTargetInput = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var RuleTargetInput = class {
      constructor() {
      }
      static fromText(text) {
        return new FieldAwareEventInput(text, InputType.Text);
      }
      static fromMultilineText(text) {
        return new FieldAwareEventInput(text, InputType.Multiline);
      }
      static fromObject(obj) {
        return new FieldAwareEventInput(obj, InputType.Object);
      }
      static fromEventPath(path) {
        return new LiteralEventInput({ inputPath: path });
      }
    };
    exports2.RuleTargetInput = RuleTargetInput;
    _a = JSII_RTTI_SYMBOL_1;
    RuleTargetInput[_a] = { fqn: "@aws-cdk/aws-events.RuleTargetInput", version: "1.132.0" };
    var LiteralEventInput = class extends RuleTargetInput {
      constructor(props) {
        super();
        this.props = props;
      }
      bind(_rule) {
        return this.props;
      }
    };
    var FieldAwareEventInput = class extends RuleTargetInput {
      constructor(input, inputType) {
        super();
        this.input = input;
        this.inputType = inputType;
      }
      bind(rule) {
        let fieldCounter = 0;
        const pathToKey = new Map();
        const inputPathsMap = {};
        function keyForField(f) {
          const existing = pathToKey.get(f.path);
          if (existing !== void 0) {
            return existing;
          }
          fieldCounter += 1;
          const key = f.displayHint || `f${fieldCounter}`;
          pathToKey.set(f.path, key);
          return key;
        }
        class EventFieldReplacer extends core_1.DefaultTokenResolver {
          constructor() {
            super(new core_1.StringConcat());
          }
          resolveToken(t, _context) {
            if (!isEventField(t)) {
              return core_1.Token.asString(t);
            }
            const key = keyForField(t);
            if (inputPathsMap[key] && inputPathsMap[key] !== t.path) {
              throw new Error(`Single key '${key}' is used for two different JSON paths: '${t.path}' and '${inputPathsMap[key]}'`);
            }
            inputPathsMap[key] = t.path;
            return `<${key}>`;
          }
        }
        const stack = core_1.Stack.of(rule);
        let resolved;
        if (this.inputType === InputType.Multiline) {
          resolved = core_1.Tokenization.resolve(this.input, {
            scope: rule,
            resolver: new EventFieldReplacer()
          });
          resolved = resolved.split("\n").map(stack.toJsonString).join("\n");
        } else {
          resolved = stack.toJsonString(core_1.Tokenization.resolve(this.input, {
            scope: rule,
            resolver: new EventFieldReplacer()
          }));
        }
        const keys = Object.keys(inputPathsMap);
        if (keys.length === 0) {
          return { input: resolved };
        }
        return {
          inputTemplate: this.unquoteKeyPlaceholders(resolved, keys),
          inputPathsMap
        };
      }
      unquoteKeyPlaceholders(sub, keys) {
        if (this.inputType !== InputType.Object) {
          return sub;
        }
        return core_1.Lazy.uncachedString({ produce: (ctx) => core_1.Token.asString(deepUnquote(ctx.resolve(sub))) });
        function deepUnquote(resolved) {
          if (Array.isArray(resolved)) {
            return resolved.map(deepUnquote);
          } else if (typeof resolved === "object" && resolved !== null) {
            for (const [key, value] of Object.entries(resolved)) {
              resolved[key] = deepUnquote(value);
            }
            return resolved;
          } else if (typeof resolved === "string") {
            return keys.reduce((r, key) => r.replace(new RegExp(`(?<!\\\\)"<${key}>"`, "g"), `<${key}>`), resolved);
          }
          return resolved;
        }
      }
    };
    var EventField = class {
      constructor(path) {
        this.path = path;
        this.displayHint = this.path.replace(/^[^a-zA-Z0-9_-]+/, "").replace(/[^a-zA-Z0-9_-]/g, "-");
        Object.defineProperty(this, EVENT_FIELD_SYMBOL, { value: true });
        this.creationStack = core_1.captureStackTrace();
      }
      static get eventId() {
        return this.fromPath("$.id");
      }
      static get detailType() {
        return this.fromPath("$.detail-type");
      }
      static get source() {
        return this.fromPath("$.source");
      }
      static get account() {
        return this.fromPath("$.account");
      }
      static get time() {
        return this.fromPath("$.time");
      }
      static get region() {
        return this.fromPath("$.region");
      }
      static fromPath(path) {
        return new EventField(path).toString();
      }
      resolve(_ctx) {
        return this.path;
      }
      toString() {
        return core_1.Token.asString(this, { displayHint: this.displayHint });
      }
      toJSON() {
        return `<path:${this.path}>`;
      }
    };
    exports2.EventField = EventField;
    _b = JSII_RTTI_SYMBOL_1;
    EventField[_b] = { fqn: "@aws-cdk/aws-events.EventField", version: "1.132.0" };
    var InputType;
    (function(InputType2) {
      InputType2[InputType2["Object"] = 0] = "Object";
      InputType2[InputType2["Text"] = 1] = "Text";
      InputType2[InputType2["Multiline"] = 2] = "Multiline";
    })(InputType || (InputType = {}));
    function isEventField(x) {
      return EVENT_FIELD_SYMBOL in x;
    }
    var EVENT_FIELD_SYMBOL = Symbol.for("@aws-cdk/aws-events.EventField");
  }
});

// asset-input/node_modules/@aws-cdk/aws-events/lib/events.generated.js
var require_events_generated = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-events/lib/events.generated.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    var _d;
    var _e;
    var _f;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnRule = exports2.CfnEventBusPolicy = exports2.CfnEventBus = exports2.CfnConnection = exports2.CfnArchive = exports2.CfnApiDestination = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var cfn_parse = require_cfn_parse();
    function CfnApiDestinationPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("connectionArn", cdk.requiredValidator)(properties.connectionArn));
      errors.collect(cdk.propertyValidator("connectionArn", cdk.validateString)(properties.connectionArn));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("httpMethod", cdk.requiredValidator)(properties.httpMethod));
      errors.collect(cdk.propertyValidator("httpMethod", cdk.validateString)(properties.httpMethod));
      errors.collect(cdk.propertyValidator("invocationEndpoint", cdk.requiredValidator)(properties.invocationEndpoint));
      errors.collect(cdk.propertyValidator("invocationEndpoint", cdk.validateString)(properties.invocationEndpoint));
      errors.collect(cdk.propertyValidator("invocationRateLimitPerSecond", cdk.validateNumber)(properties.invocationRateLimitPerSecond));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      return errors.wrap('supplied properties not correct for "CfnApiDestinationProps"');
    }
    function cfnApiDestinationPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnApiDestinationPropsValidator(properties).assertSuccess();
      return {
        ConnectionArn: cdk.stringToCloudFormation(properties.connectionArn),
        HttpMethod: cdk.stringToCloudFormation(properties.httpMethod),
        InvocationEndpoint: cdk.stringToCloudFormation(properties.invocationEndpoint),
        Description: cdk.stringToCloudFormation(properties.description),
        InvocationRateLimitPerSecond: cdk.numberToCloudFormation(properties.invocationRateLimitPerSecond),
        Name: cdk.stringToCloudFormation(properties.name)
      };
    }
    function CfnApiDestinationPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("connectionArn", "ConnectionArn", cfn_parse.FromCloudFormation.getString(properties.ConnectionArn));
      ret.addPropertyResult("httpMethod", "HttpMethod", cfn_parse.FromCloudFormation.getString(properties.HttpMethod));
      ret.addPropertyResult("invocationEndpoint", "InvocationEndpoint", cfn_parse.FromCloudFormation.getString(properties.InvocationEndpoint));
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("invocationRateLimitPerSecond", "InvocationRateLimitPerSecond", properties.InvocationRateLimitPerSecond != null ? cfn_parse.FromCloudFormation.getNumber(properties.InvocationRateLimitPerSecond) : void 0);
      ret.addPropertyResult("name", "Name", properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnApiDestination = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnApiDestination.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "connectionArn", this);
        cdk.requireProperty(props, "httpMethod", this);
        cdk.requireProperty(props, "invocationEndpoint", this);
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.connectionArn = props.connectionArn;
        this.httpMethod = props.httpMethod;
        this.invocationEndpoint = props.invocationEndpoint;
        this.description = props.description;
        this.invocationRateLimitPerSecond = props.invocationRateLimitPerSecond;
        this.name = props.name;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnApiDestinationPropsFromCloudFormation(resourceProperties);
        const ret = new CfnApiDestination(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnApiDestination.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          connectionArn: this.connectionArn,
          httpMethod: this.httpMethod,
          invocationEndpoint: this.invocationEndpoint,
          description: this.description,
          invocationRateLimitPerSecond: this.invocationRateLimitPerSecond,
          name: this.name
        };
      }
      renderProperties(props) {
        return cfnApiDestinationPropsToCloudFormation(props);
      }
    };
    exports2.CfnApiDestination = CfnApiDestination;
    _a = JSII_RTTI_SYMBOL_1;
    CfnApiDestination[_a] = { fqn: "@aws-cdk/aws-events.CfnApiDestination", version: "1.132.0" };
    CfnApiDestination.CFN_RESOURCE_TYPE_NAME = "AWS::Events::ApiDestination";
    function CfnArchivePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("archiveName", cdk.validateString)(properties.archiveName));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("eventPattern", cdk.validateObject)(properties.eventPattern));
      errors.collect(cdk.propertyValidator("retentionDays", cdk.validateNumber)(properties.retentionDays));
      errors.collect(cdk.propertyValidator("sourceArn", cdk.requiredValidator)(properties.sourceArn));
      errors.collect(cdk.propertyValidator("sourceArn", cdk.validateString)(properties.sourceArn));
      return errors.wrap('supplied properties not correct for "CfnArchiveProps"');
    }
    function cfnArchivePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnArchivePropsValidator(properties).assertSuccess();
      return {
        SourceArn: cdk.stringToCloudFormation(properties.sourceArn),
        ArchiveName: cdk.stringToCloudFormation(properties.archiveName),
        Description: cdk.stringToCloudFormation(properties.description),
        EventPattern: cdk.objectToCloudFormation(properties.eventPattern),
        RetentionDays: cdk.numberToCloudFormation(properties.retentionDays)
      };
    }
    function CfnArchivePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("sourceArn", "SourceArn", cfn_parse.FromCloudFormation.getString(properties.SourceArn));
      ret.addPropertyResult("archiveName", "ArchiveName", properties.ArchiveName != null ? cfn_parse.FromCloudFormation.getString(properties.ArchiveName) : void 0);
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("eventPattern", "EventPattern", properties.EventPattern != null ? cfn_parse.FromCloudFormation.getAny(properties.EventPattern) : void 0);
      ret.addPropertyResult("retentionDays", "RetentionDays", properties.RetentionDays != null ? cfn_parse.FromCloudFormation.getNumber(properties.RetentionDays) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnArchive = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnArchive.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "sourceArn", this);
        this.attrArchiveName = cdk.Token.asString(this.getAtt("ArchiveName"));
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.sourceArn = props.sourceArn;
        this.archiveName = props.archiveName;
        this.description = props.description;
        this.eventPattern = props.eventPattern;
        this.retentionDays = props.retentionDays;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnArchivePropsFromCloudFormation(resourceProperties);
        const ret = new CfnArchive(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnArchive.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          sourceArn: this.sourceArn,
          archiveName: this.archiveName,
          description: this.description,
          eventPattern: this.eventPattern,
          retentionDays: this.retentionDays
        };
      }
      renderProperties(props) {
        return cfnArchivePropsToCloudFormation(props);
      }
    };
    exports2.CfnArchive = CfnArchive;
    _b = JSII_RTTI_SYMBOL_1;
    CfnArchive[_b] = { fqn: "@aws-cdk/aws-events.CfnArchive", version: "1.132.0" };
    CfnArchive.CFN_RESOURCE_TYPE_NAME = "AWS::Events::Archive";
    function CfnConnectionPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("authParameters", cdk.requiredValidator)(properties.authParameters));
      errors.collect(cdk.propertyValidator("authParameters", cdk.validateObject)(properties.authParameters));
      errors.collect(cdk.propertyValidator("authorizationType", cdk.requiredValidator)(properties.authorizationType));
      errors.collect(cdk.propertyValidator("authorizationType", cdk.validateString)(properties.authorizationType));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      return errors.wrap('supplied properties not correct for "CfnConnectionProps"');
    }
    function cfnConnectionPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnConnectionPropsValidator(properties).assertSuccess();
      return {
        AuthorizationType: cdk.stringToCloudFormation(properties.authorizationType),
        AuthParameters: cdk.objectToCloudFormation(properties.authParameters),
        Description: cdk.stringToCloudFormation(properties.description),
        Name: cdk.stringToCloudFormation(properties.name)
      };
    }
    function CfnConnectionPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("authorizationType", "AuthorizationType", cfn_parse.FromCloudFormation.getString(properties.AuthorizationType));
      ret.addPropertyResult("authParameters", "AuthParameters", cfn_parse.FromCloudFormation.getAny(properties.AuthParameters));
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("name", "Name", properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnConnection = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnConnection.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "authParameters", this);
        cdk.requireProperty(props, "authorizationType", this);
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.attrSecretArn = cdk.Token.asString(this.getAtt("SecretArn"));
        this.authorizationType = props.authorizationType;
        this.authParameters = props.authParameters;
        this.description = props.description;
        this.name = props.name;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnConnectionPropsFromCloudFormation(resourceProperties);
        const ret = new CfnConnection(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnConnection.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          authorizationType: this.authorizationType,
          authParameters: this.authParameters,
          description: this.description,
          name: this.name
        };
      }
      renderProperties(props) {
        return cfnConnectionPropsToCloudFormation(props);
      }
    };
    exports2.CfnConnection = CfnConnection;
    _c = JSII_RTTI_SYMBOL_1;
    CfnConnection[_c] = { fqn: "@aws-cdk/aws-events.CfnConnection", version: "1.132.0" };
    CfnConnection.CFN_RESOURCE_TYPE_NAME = "AWS::Events::Connection";
    function CfnEventBusPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("eventSourceName", cdk.validateString)(properties.eventSourceName));
      errors.collect(cdk.propertyValidator("name", cdk.requiredValidator)(properties.name));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      return errors.wrap('supplied properties not correct for "CfnEventBusProps"');
    }
    function cfnEventBusPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEventBusPropsValidator(properties).assertSuccess();
      return {
        Name: cdk.stringToCloudFormation(properties.name),
        EventSourceName: cdk.stringToCloudFormation(properties.eventSourceName)
      };
    }
    function CfnEventBusPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("name", "Name", cfn_parse.FromCloudFormation.getString(properties.Name));
      ret.addPropertyResult("eventSourceName", "EventSourceName", properties.EventSourceName != null ? cfn_parse.FromCloudFormation.getString(properties.EventSourceName) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnEventBus = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnEventBus.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "name", this);
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.attrName = cdk.Token.asString(this.getAtt("Name"));
        this.attrPolicy = cdk.Token.asString(this.getAtt("Policy"));
        this.name = props.name;
        this.eventSourceName = props.eventSourceName;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnEventBusPropsFromCloudFormation(resourceProperties);
        const ret = new CfnEventBus(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnEventBus.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          name: this.name,
          eventSourceName: this.eventSourceName
        };
      }
      renderProperties(props) {
        return cfnEventBusPropsToCloudFormation(props);
      }
    };
    exports2.CfnEventBus = CfnEventBus;
    _d = JSII_RTTI_SYMBOL_1;
    CfnEventBus[_d] = { fqn: "@aws-cdk/aws-events.CfnEventBus", version: "1.132.0" };
    CfnEventBus.CFN_RESOURCE_TYPE_NAME = "AWS::Events::EventBus";
    function CfnEventBusPolicyPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("action", cdk.validateString)(properties.action));
      errors.collect(cdk.propertyValidator("condition", CfnEventBusPolicy_ConditionPropertyValidator)(properties.condition));
      errors.collect(cdk.propertyValidator("eventBusName", cdk.validateString)(properties.eventBusName));
      errors.collect(cdk.propertyValidator("principal", cdk.validateString)(properties.principal));
      errors.collect(cdk.propertyValidator("statement", cdk.validateObject)(properties.statement));
      errors.collect(cdk.propertyValidator("statementId", cdk.requiredValidator)(properties.statementId));
      errors.collect(cdk.propertyValidator("statementId", cdk.validateString)(properties.statementId));
      return errors.wrap('supplied properties not correct for "CfnEventBusPolicyProps"');
    }
    function cfnEventBusPolicyPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEventBusPolicyPropsValidator(properties).assertSuccess();
      return {
        StatementId: cdk.stringToCloudFormation(properties.statementId),
        Action: cdk.stringToCloudFormation(properties.action),
        Condition: cfnEventBusPolicyConditionPropertyToCloudFormation(properties.condition),
        EventBusName: cdk.stringToCloudFormation(properties.eventBusName),
        Principal: cdk.stringToCloudFormation(properties.principal),
        Statement: cdk.objectToCloudFormation(properties.statement)
      };
    }
    function CfnEventBusPolicyPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("statementId", "StatementId", cfn_parse.FromCloudFormation.getString(properties.StatementId));
      ret.addPropertyResult("action", "Action", properties.Action != null ? cfn_parse.FromCloudFormation.getString(properties.Action) : void 0);
      ret.addPropertyResult("condition", "Condition", properties.Condition != null ? CfnEventBusPolicyConditionPropertyFromCloudFormation(properties.Condition) : void 0);
      ret.addPropertyResult("eventBusName", "EventBusName", properties.EventBusName != null ? cfn_parse.FromCloudFormation.getString(properties.EventBusName) : void 0);
      ret.addPropertyResult("principal", "Principal", properties.Principal != null ? cfn_parse.FromCloudFormation.getString(properties.Principal) : void 0);
      ret.addPropertyResult("statement", "Statement", properties.Statement != null ? cfn_parse.FromCloudFormation.getAny(properties.Statement) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnEventBusPolicy = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnEventBusPolicy.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "statementId", this);
        this.statementId = props.statementId;
        this.action = props.action;
        this.condition = props.condition;
        this.eventBusName = props.eventBusName;
        this.principal = props.principal;
        this.statement = props.statement;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnEventBusPolicyPropsFromCloudFormation(resourceProperties);
        const ret = new CfnEventBusPolicy(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnEventBusPolicy.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          statementId: this.statementId,
          action: this.action,
          condition: this.condition,
          eventBusName: this.eventBusName,
          principal: this.principal,
          statement: this.statement
        };
      }
      renderProperties(props) {
        return cfnEventBusPolicyPropsToCloudFormation(props);
      }
    };
    exports2.CfnEventBusPolicy = CfnEventBusPolicy;
    _e = JSII_RTTI_SYMBOL_1;
    CfnEventBusPolicy[_e] = { fqn: "@aws-cdk/aws-events.CfnEventBusPolicy", version: "1.132.0" };
    CfnEventBusPolicy.CFN_RESOURCE_TYPE_NAME = "AWS::Events::EventBusPolicy";
    function CfnEventBusPolicy_ConditionPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("key", cdk.validateString)(properties.key));
      errors.collect(cdk.propertyValidator("type", cdk.validateString)(properties.type));
      errors.collect(cdk.propertyValidator("value", cdk.validateString)(properties.value));
      return errors.wrap('supplied properties not correct for "ConditionProperty"');
    }
    function cfnEventBusPolicyConditionPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnEventBusPolicy_ConditionPropertyValidator(properties).assertSuccess();
      return {
        Key: cdk.stringToCloudFormation(properties.key),
        Type: cdk.stringToCloudFormation(properties.type),
        Value: cdk.stringToCloudFormation(properties.value)
      };
    }
    function CfnEventBusPolicyConditionPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("key", "Key", properties.Key != null ? cfn_parse.FromCloudFormation.getString(properties.Key) : void 0);
      ret.addPropertyResult("type", "Type", properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : void 0);
      ret.addPropertyResult("value", "Value", properties.Value != null ? cfn_parse.FromCloudFormation.getString(properties.Value) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnRulePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("eventBusName", cdk.validateString)(properties.eventBusName));
      errors.collect(cdk.propertyValidator("eventPattern", cdk.validateObject)(properties.eventPattern));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("roleArn", cdk.validateString)(properties.roleArn));
      errors.collect(cdk.propertyValidator("scheduleExpression", cdk.validateString)(properties.scheduleExpression));
      errors.collect(cdk.propertyValidator("state", cdk.validateString)(properties.state));
      errors.collect(cdk.propertyValidator("targets", cdk.listValidator(CfnRule_TargetPropertyValidator))(properties.targets));
      return errors.wrap('supplied properties not correct for "CfnRuleProps"');
    }
    function cfnRulePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRulePropsValidator(properties).assertSuccess();
      return {
        Description: cdk.stringToCloudFormation(properties.description),
        EventBusName: cdk.stringToCloudFormation(properties.eventBusName),
        EventPattern: cdk.objectToCloudFormation(properties.eventPattern),
        Name: cdk.stringToCloudFormation(properties.name),
        RoleArn: cdk.stringToCloudFormation(properties.roleArn),
        ScheduleExpression: cdk.stringToCloudFormation(properties.scheduleExpression),
        State: cdk.stringToCloudFormation(properties.state),
        Targets: cdk.listMapper(cfnRuleTargetPropertyToCloudFormation)(properties.targets)
      };
    }
    function CfnRulePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("eventBusName", "EventBusName", properties.EventBusName != null ? cfn_parse.FromCloudFormation.getString(properties.EventBusName) : void 0);
      ret.addPropertyResult("eventPattern", "EventPattern", properties.EventPattern != null ? cfn_parse.FromCloudFormation.getAny(properties.EventPattern) : void 0);
      ret.addPropertyResult("name", "Name", properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : void 0);
      ret.addPropertyResult("roleArn", "RoleArn", properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : void 0);
      ret.addPropertyResult("scheduleExpression", "ScheduleExpression", properties.ScheduleExpression != null ? cfn_parse.FromCloudFormation.getString(properties.ScheduleExpression) : void 0);
      ret.addPropertyResult("state", "State", properties.State != null ? cfn_parse.FromCloudFormation.getString(properties.State) : void 0);
      ret.addPropertyResult("targets", "Targets", properties.Targets != null ? cfn_parse.FromCloudFormation.getArray(CfnRuleTargetPropertyFromCloudFormation)(properties.Targets) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnRule = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnRule.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.description = props.description;
        this.eventBusName = props.eventBusName;
        this.eventPattern = props.eventPattern;
        this.name = props.name;
        this.roleArn = props.roleArn;
        this.scheduleExpression = props.scheduleExpression;
        this.state = props.state;
        this.targets = props.targets;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnRulePropsFromCloudFormation(resourceProperties);
        const ret = new CfnRule(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnRule.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          description: this.description,
          eventBusName: this.eventBusName,
          eventPattern: this.eventPattern,
          name: this.name,
          roleArn: this.roleArn,
          scheduleExpression: this.scheduleExpression,
          state: this.state,
          targets: this.targets
        };
      }
      renderProperties(props) {
        return cfnRulePropsToCloudFormation(props);
      }
    };
    exports2.CfnRule = CfnRule;
    _f = JSII_RTTI_SYMBOL_1;
    CfnRule[_f] = { fqn: "@aws-cdk/aws-events.CfnRule", version: "1.132.0" };
    CfnRule.CFN_RESOURCE_TYPE_NAME = "AWS::Events::Rule";
    function CfnRule_AwsVpcConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("assignPublicIp", cdk.validateString)(properties.assignPublicIp));
      errors.collect(cdk.propertyValidator("securityGroups", cdk.listValidator(cdk.validateString))(properties.securityGroups));
      errors.collect(cdk.propertyValidator("subnets", cdk.requiredValidator)(properties.subnets));
      errors.collect(cdk.propertyValidator("subnets", cdk.listValidator(cdk.validateString))(properties.subnets));
      return errors.wrap('supplied properties not correct for "AwsVpcConfigurationProperty"');
    }
    function cfnRuleAwsVpcConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRule_AwsVpcConfigurationPropertyValidator(properties).assertSuccess();
      return {
        AssignPublicIp: cdk.stringToCloudFormation(properties.assignPublicIp),
        SecurityGroups: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroups),
        Subnets: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnets)
      };
    }
    function CfnRuleAwsVpcConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("assignPublicIp", "AssignPublicIp", properties.AssignPublicIp != null ? cfn_parse.FromCloudFormation.getString(properties.AssignPublicIp) : void 0);
      ret.addPropertyResult("securityGroups", "SecurityGroups", properties.SecurityGroups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroups) : void 0);
      ret.addPropertyResult("subnets", "Subnets", cfn_parse.FromCloudFormation.getStringArray(properties.Subnets));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnRule_BatchArrayPropertiesPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("size", cdk.validateNumber)(properties.size));
      return errors.wrap('supplied properties not correct for "BatchArrayPropertiesProperty"');
    }
    function cfnRuleBatchArrayPropertiesPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRule_BatchArrayPropertiesPropertyValidator(properties).assertSuccess();
      return {
        Size: cdk.numberToCloudFormation(properties.size)
      };
    }
    function CfnRuleBatchArrayPropertiesPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("size", "Size", properties.Size != null ? cfn_parse.FromCloudFormation.getNumber(properties.Size) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnRule_BatchParametersPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("arrayProperties", CfnRule_BatchArrayPropertiesPropertyValidator)(properties.arrayProperties));
      errors.collect(cdk.propertyValidator("jobDefinition", cdk.requiredValidator)(properties.jobDefinition));
      errors.collect(cdk.propertyValidator("jobDefinition", cdk.validateString)(properties.jobDefinition));
      errors.collect(cdk.propertyValidator("jobName", cdk.requiredValidator)(properties.jobName));
      errors.collect(cdk.propertyValidator("jobName", cdk.validateString)(properties.jobName));
      errors.collect(cdk.propertyValidator("retryStrategy", CfnRule_BatchRetryStrategyPropertyValidator)(properties.retryStrategy));
      return errors.wrap('supplied properties not correct for "BatchParametersProperty"');
    }
    function cfnRuleBatchParametersPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRule_BatchParametersPropertyValidator(properties).assertSuccess();
      return {
        ArrayProperties: cfnRuleBatchArrayPropertiesPropertyToCloudFormation(properties.arrayProperties),
        JobDefinition: cdk.stringToCloudFormation(properties.jobDefinition),
        JobName: cdk.stringToCloudFormation(properties.jobName),
        RetryStrategy: cfnRuleBatchRetryStrategyPropertyToCloudFormation(properties.retryStrategy)
      };
    }
    function CfnRuleBatchParametersPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("arrayProperties", "ArrayProperties", properties.ArrayProperties != null ? CfnRuleBatchArrayPropertiesPropertyFromCloudFormation(properties.ArrayProperties) : void 0);
      ret.addPropertyResult("jobDefinition", "JobDefinition", cfn_parse.FromCloudFormation.getString(properties.JobDefinition));
      ret.addPropertyResult("jobName", "JobName", cfn_parse.FromCloudFormation.getString(properties.JobName));
      ret.addPropertyResult("retryStrategy", "RetryStrategy", properties.RetryStrategy != null ? CfnRuleBatchRetryStrategyPropertyFromCloudFormation(properties.RetryStrategy) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnRule_BatchRetryStrategyPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("attempts", cdk.validateNumber)(properties.attempts));
      return errors.wrap('supplied properties not correct for "BatchRetryStrategyProperty"');
    }
    function cfnRuleBatchRetryStrategyPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRule_BatchRetryStrategyPropertyValidator(properties).assertSuccess();
      return {
        Attempts: cdk.numberToCloudFormation(properties.attempts)
      };
    }
    function CfnRuleBatchRetryStrategyPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("attempts", "Attempts", properties.Attempts != null ? cfn_parse.FromCloudFormation.getNumber(properties.Attempts) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnRule_CapacityProviderStrategyItemPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("base", cdk.validateNumber)(properties.base));
      errors.collect(cdk.propertyValidator("capacityProvider", cdk.requiredValidator)(properties.capacityProvider));
      errors.collect(cdk.propertyValidator("capacityProvider", cdk.validateString)(properties.capacityProvider));
      errors.collect(cdk.propertyValidator("weight", cdk.validateNumber)(properties.weight));
      return errors.wrap('supplied properties not correct for "CapacityProviderStrategyItemProperty"');
    }
    function cfnRuleCapacityProviderStrategyItemPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRule_CapacityProviderStrategyItemPropertyValidator(properties).assertSuccess();
      return {
        Base: cdk.numberToCloudFormation(properties.base),
        CapacityProvider: cdk.stringToCloudFormation(properties.capacityProvider),
        Weight: cdk.numberToCloudFormation(properties.weight)
      };
    }
    function CfnRuleCapacityProviderStrategyItemPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("base", "Base", properties.Base != null ? cfn_parse.FromCloudFormation.getNumber(properties.Base) : void 0);
      ret.addPropertyResult("capacityProvider", "CapacityProvider", cfn_parse.FromCloudFormation.getString(properties.CapacityProvider));
      ret.addPropertyResult("weight", "Weight", properties.Weight != null ? cfn_parse.FromCloudFormation.getNumber(properties.Weight) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnRule_DeadLetterConfigPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("arn", cdk.validateString)(properties.arn));
      return errors.wrap('supplied properties not correct for "DeadLetterConfigProperty"');
    }
    function cfnRuleDeadLetterConfigPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRule_DeadLetterConfigPropertyValidator(properties).assertSuccess();
      return {
        Arn: cdk.stringToCloudFormation(properties.arn)
      };
    }
    function CfnRuleDeadLetterConfigPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("arn", "Arn", properties.Arn != null ? cfn_parse.FromCloudFormation.getString(properties.Arn) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnRule_EcsParametersPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("capacityProviderStrategy", cdk.listValidator(CfnRule_CapacityProviderStrategyItemPropertyValidator))(properties.capacityProviderStrategy));
      errors.collect(cdk.propertyValidator("enableEcsManagedTags", cdk.validateBoolean)(properties.enableEcsManagedTags));
      errors.collect(cdk.propertyValidator("enableExecuteCommand", cdk.validateBoolean)(properties.enableExecuteCommand));
      errors.collect(cdk.propertyValidator("group", cdk.validateString)(properties.group));
      errors.collect(cdk.propertyValidator("launchType", cdk.validateString)(properties.launchType));
      errors.collect(cdk.propertyValidator("networkConfiguration", CfnRule_NetworkConfigurationPropertyValidator)(properties.networkConfiguration));
      errors.collect(cdk.propertyValidator("placementConstraints", cdk.listValidator(CfnRule_PlacementConstraintPropertyValidator))(properties.placementConstraints));
      errors.collect(cdk.propertyValidator("placementStrategies", cdk.listValidator(CfnRule_PlacementStrategyPropertyValidator))(properties.placementStrategies));
      errors.collect(cdk.propertyValidator("platformVersion", cdk.validateString)(properties.platformVersion));
      errors.collect(cdk.propertyValidator("propagateTags", cdk.validateString)(properties.propagateTags));
      errors.collect(cdk.propertyValidator("referenceId", cdk.validateString)(properties.referenceId));
      errors.collect(cdk.propertyValidator("tagList", cdk.listValidator(cdk.validateCfnTag))(properties.tagList));
      errors.collect(cdk.propertyValidator("taskCount", cdk.validateNumber)(properties.taskCount));
      errors.collect(cdk.propertyValidator("taskDefinitionArn", cdk.requiredValidator)(properties.taskDefinitionArn));
      errors.collect(cdk.propertyValidator("taskDefinitionArn", cdk.validateString)(properties.taskDefinitionArn));
      return errors.wrap('supplied properties not correct for "EcsParametersProperty"');
    }
    function cfnRuleEcsParametersPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRule_EcsParametersPropertyValidator(properties).assertSuccess();
      return {
        CapacityProviderStrategy: cdk.listMapper(cfnRuleCapacityProviderStrategyItemPropertyToCloudFormation)(properties.capacityProviderStrategy),
        EnableECSManagedTags: cdk.booleanToCloudFormation(properties.enableEcsManagedTags),
        EnableExecuteCommand: cdk.booleanToCloudFormation(properties.enableExecuteCommand),
        Group: cdk.stringToCloudFormation(properties.group),
        LaunchType: cdk.stringToCloudFormation(properties.launchType),
        NetworkConfiguration: cfnRuleNetworkConfigurationPropertyToCloudFormation(properties.networkConfiguration),
        PlacementConstraints: cdk.listMapper(cfnRulePlacementConstraintPropertyToCloudFormation)(properties.placementConstraints),
        PlacementStrategies: cdk.listMapper(cfnRulePlacementStrategyPropertyToCloudFormation)(properties.placementStrategies),
        PlatformVersion: cdk.stringToCloudFormation(properties.platformVersion),
        PropagateTags: cdk.stringToCloudFormation(properties.propagateTags),
        ReferenceId: cdk.stringToCloudFormation(properties.referenceId),
        TagList: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tagList),
        TaskCount: cdk.numberToCloudFormation(properties.taskCount),
        TaskDefinitionArn: cdk.stringToCloudFormation(properties.taskDefinitionArn)
      };
    }
    function CfnRuleEcsParametersPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("capacityProviderStrategy", "CapacityProviderStrategy", properties.CapacityProviderStrategy != null ? cfn_parse.FromCloudFormation.getArray(CfnRuleCapacityProviderStrategyItemPropertyFromCloudFormation)(properties.CapacityProviderStrategy) : void 0);
      ret.addPropertyResult("enableEcsManagedTags", "EnableECSManagedTags", properties.EnableECSManagedTags != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableECSManagedTags) : void 0);
      ret.addPropertyResult("enableExecuteCommand", "EnableExecuteCommand", properties.EnableExecuteCommand != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableExecuteCommand) : void 0);
      ret.addPropertyResult("group", "Group", properties.Group != null ? cfn_parse.FromCloudFormation.getString(properties.Group) : void 0);
      ret.addPropertyResult("launchType", "LaunchType", properties.LaunchType != null ? cfn_parse.FromCloudFormation.getString(properties.LaunchType) : void 0);
      ret.addPropertyResult("networkConfiguration", "NetworkConfiguration", properties.NetworkConfiguration != null ? CfnRuleNetworkConfigurationPropertyFromCloudFormation(properties.NetworkConfiguration) : void 0);
      ret.addPropertyResult("placementConstraints", "PlacementConstraints", properties.PlacementConstraints != null ? cfn_parse.FromCloudFormation.getArray(CfnRulePlacementConstraintPropertyFromCloudFormation)(properties.PlacementConstraints) : void 0);
      ret.addPropertyResult("placementStrategies", "PlacementStrategies", properties.PlacementStrategies != null ? cfn_parse.FromCloudFormation.getArray(CfnRulePlacementStrategyPropertyFromCloudFormation)(properties.PlacementStrategies) : void 0);
      ret.addPropertyResult("platformVersion", "PlatformVersion", properties.PlatformVersion != null ? cfn_parse.FromCloudFormation.getString(properties.PlatformVersion) : void 0);
      ret.addPropertyResult("propagateTags", "PropagateTags", properties.PropagateTags != null ? cfn_parse.FromCloudFormation.getString(properties.PropagateTags) : void 0);
      ret.addPropertyResult("referenceId", "ReferenceId", properties.ReferenceId != null ? cfn_parse.FromCloudFormation.getString(properties.ReferenceId) : void 0);
      ret.addPropertyResult("tagList", "TagList", properties.TagList != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.TagList) : void 0);
      ret.addPropertyResult("taskCount", "TaskCount", properties.TaskCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.TaskCount) : void 0);
      ret.addPropertyResult("taskDefinitionArn", "TaskDefinitionArn", cfn_parse.FromCloudFormation.getString(properties.TaskDefinitionArn));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnRule_HttpParametersPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("headerParameters", cdk.hashValidator(cdk.validateString))(properties.headerParameters));
      errors.collect(cdk.propertyValidator("pathParameterValues", cdk.listValidator(cdk.validateString))(properties.pathParameterValues));
      errors.collect(cdk.propertyValidator("queryStringParameters", cdk.hashValidator(cdk.validateString))(properties.queryStringParameters));
      return errors.wrap('supplied properties not correct for "HttpParametersProperty"');
    }
    function cfnRuleHttpParametersPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRule_HttpParametersPropertyValidator(properties).assertSuccess();
      return {
        HeaderParameters: cdk.hashMapper(cdk.stringToCloudFormation)(properties.headerParameters),
        PathParameterValues: cdk.listMapper(cdk.stringToCloudFormation)(properties.pathParameterValues),
        QueryStringParameters: cdk.hashMapper(cdk.stringToCloudFormation)(properties.queryStringParameters)
      };
    }
    function CfnRuleHttpParametersPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("headerParameters", "HeaderParameters", properties.HeaderParameters != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.HeaderParameters) : void 0);
      ret.addPropertyResult("pathParameterValues", "PathParameterValues", properties.PathParameterValues != null ? cfn_parse.FromCloudFormation.getStringArray(properties.PathParameterValues) : void 0);
      ret.addPropertyResult("queryStringParameters", "QueryStringParameters", properties.QueryStringParameters != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.QueryStringParameters) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnRule_InputTransformerPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("inputPathsMap", cdk.hashValidator(cdk.validateString))(properties.inputPathsMap));
      errors.collect(cdk.propertyValidator("inputTemplate", cdk.requiredValidator)(properties.inputTemplate));
      errors.collect(cdk.propertyValidator("inputTemplate", cdk.validateString)(properties.inputTemplate));
      return errors.wrap('supplied properties not correct for "InputTransformerProperty"');
    }
    function cfnRuleInputTransformerPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRule_InputTransformerPropertyValidator(properties).assertSuccess();
      return {
        InputPathsMap: cdk.hashMapper(cdk.stringToCloudFormation)(properties.inputPathsMap),
        InputTemplate: cdk.stringToCloudFormation(properties.inputTemplate)
      };
    }
    function CfnRuleInputTransformerPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("inputPathsMap", "InputPathsMap", properties.InputPathsMap != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.InputPathsMap) : void 0);
      ret.addPropertyResult("inputTemplate", "InputTemplate", cfn_parse.FromCloudFormation.getString(properties.InputTemplate));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnRule_KinesisParametersPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("partitionKeyPath", cdk.requiredValidator)(properties.partitionKeyPath));
      errors.collect(cdk.propertyValidator("partitionKeyPath", cdk.validateString)(properties.partitionKeyPath));
      return errors.wrap('supplied properties not correct for "KinesisParametersProperty"');
    }
    function cfnRuleKinesisParametersPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRule_KinesisParametersPropertyValidator(properties).assertSuccess();
      return {
        PartitionKeyPath: cdk.stringToCloudFormation(properties.partitionKeyPath)
      };
    }
    function CfnRuleKinesisParametersPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("partitionKeyPath", "PartitionKeyPath", cfn_parse.FromCloudFormation.getString(properties.PartitionKeyPath));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnRule_NetworkConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("awsVpcConfiguration", CfnRule_AwsVpcConfigurationPropertyValidator)(properties.awsVpcConfiguration));
      return errors.wrap('supplied properties not correct for "NetworkConfigurationProperty"');
    }
    function cfnRuleNetworkConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRule_NetworkConfigurationPropertyValidator(properties).assertSuccess();
      return {
        AwsVpcConfiguration: cfnRuleAwsVpcConfigurationPropertyToCloudFormation(properties.awsVpcConfiguration)
      };
    }
    function CfnRuleNetworkConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("awsVpcConfiguration", "AwsVpcConfiguration", properties.AwsVpcConfiguration != null ? CfnRuleAwsVpcConfigurationPropertyFromCloudFormation(properties.AwsVpcConfiguration) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnRule_PlacementConstraintPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("expression", cdk.validateString)(properties.expression));
      errors.collect(cdk.propertyValidator("type", cdk.validateString)(properties.type));
      return errors.wrap('supplied properties not correct for "PlacementConstraintProperty"');
    }
    function cfnRulePlacementConstraintPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRule_PlacementConstraintPropertyValidator(properties).assertSuccess();
      return {
        Expression: cdk.stringToCloudFormation(properties.expression),
        Type: cdk.stringToCloudFormation(properties.type)
      };
    }
    function CfnRulePlacementConstraintPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("expression", "Expression", properties.Expression != null ? cfn_parse.FromCloudFormation.getString(properties.Expression) : void 0);
      ret.addPropertyResult("type", "Type", properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnRule_PlacementStrategyPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("field", cdk.validateString)(properties.field));
      errors.collect(cdk.propertyValidator("type", cdk.validateString)(properties.type));
      return errors.wrap('supplied properties not correct for "PlacementStrategyProperty"');
    }
    function cfnRulePlacementStrategyPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRule_PlacementStrategyPropertyValidator(properties).assertSuccess();
      return {
        Field: cdk.stringToCloudFormation(properties.field),
        Type: cdk.stringToCloudFormation(properties.type)
      };
    }
    function CfnRulePlacementStrategyPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("field", "Field", properties.Field != null ? cfn_parse.FromCloudFormation.getString(properties.Field) : void 0);
      ret.addPropertyResult("type", "Type", properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnRule_RedshiftDataParametersPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("database", cdk.requiredValidator)(properties.database));
      errors.collect(cdk.propertyValidator("database", cdk.validateString)(properties.database));
      errors.collect(cdk.propertyValidator("dbUser", cdk.validateString)(properties.dbUser));
      errors.collect(cdk.propertyValidator("secretManagerArn", cdk.validateString)(properties.secretManagerArn));
      errors.collect(cdk.propertyValidator("sql", cdk.requiredValidator)(properties.sql));
      errors.collect(cdk.propertyValidator("sql", cdk.validateString)(properties.sql));
      errors.collect(cdk.propertyValidator("statementName", cdk.validateString)(properties.statementName));
      errors.collect(cdk.propertyValidator("withEvent", cdk.validateBoolean)(properties.withEvent));
      return errors.wrap('supplied properties not correct for "RedshiftDataParametersProperty"');
    }
    function cfnRuleRedshiftDataParametersPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRule_RedshiftDataParametersPropertyValidator(properties).assertSuccess();
      return {
        Database: cdk.stringToCloudFormation(properties.database),
        DbUser: cdk.stringToCloudFormation(properties.dbUser),
        SecretManagerArn: cdk.stringToCloudFormation(properties.secretManagerArn),
        Sql: cdk.stringToCloudFormation(properties.sql),
        StatementName: cdk.stringToCloudFormation(properties.statementName),
        WithEvent: cdk.booleanToCloudFormation(properties.withEvent)
      };
    }
    function CfnRuleRedshiftDataParametersPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("database", "Database", cfn_parse.FromCloudFormation.getString(properties.Database));
      ret.addPropertyResult("dbUser", "DbUser", properties.DbUser != null ? cfn_parse.FromCloudFormation.getString(properties.DbUser) : void 0);
      ret.addPropertyResult("secretManagerArn", "SecretManagerArn", properties.SecretManagerArn != null ? cfn_parse.FromCloudFormation.getString(properties.SecretManagerArn) : void 0);
      ret.addPropertyResult("sql", "Sql", cfn_parse.FromCloudFormation.getString(properties.Sql));
      ret.addPropertyResult("statementName", "StatementName", properties.StatementName != null ? cfn_parse.FromCloudFormation.getString(properties.StatementName) : void 0);
      ret.addPropertyResult("withEvent", "WithEvent", properties.WithEvent != null ? cfn_parse.FromCloudFormation.getBoolean(properties.WithEvent) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnRule_RetryPolicyPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("maximumEventAgeInSeconds", cdk.validateNumber)(properties.maximumEventAgeInSeconds));
      errors.collect(cdk.propertyValidator("maximumRetryAttempts", cdk.validateNumber)(properties.maximumRetryAttempts));
      return errors.wrap('supplied properties not correct for "RetryPolicyProperty"');
    }
    function cfnRuleRetryPolicyPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRule_RetryPolicyPropertyValidator(properties).assertSuccess();
      return {
        MaximumEventAgeInSeconds: cdk.numberToCloudFormation(properties.maximumEventAgeInSeconds),
        MaximumRetryAttempts: cdk.numberToCloudFormation(properties.maximumRetryAttempts)
      };
    }
    function CfnRuleRetryPolicyPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("maximumEventAgeInSeconds", "MaximumEventAgeInSeconds", properties.MaximumEventAgeInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaximumEventAgeInSeconds) : void 0);
      ret.addPropertyResult("maximumRetryAttempts", "MaximumRetryAttempts", properties.MaximumRetryAttempts != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaximumRetryAttempts) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnRule_RunCommandParametersPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("runCommandTargets", cdk.requiredValidator)(properties.runCommandTargets));
      errors.collect(cdk.propertyValidator("runCommandTargets", cdk.listValidator(CfnRule_RunCommandTargetPropertyValidator))(properties.runCommandTargets));
      return errors.wrap('supplied properties not correct for "RunCommandParametersProperty"');
    }
    function cfnRuleRunCommandParametersPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRule_RunCommandParametersPropertyValidator(properties).assertSuccess();
      return {
        RunCommandTargets: cdk.listMapper(cfnRuleRunCommandTargetPropertyToCloudFormation)(properties.runCommandTargets)
      };
    }
    function CfnRuleRunCommandParametersPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("runCommandTargets", "RunCommandTargets", cfn_parse.FromCloudFormation.getArray(CfnRuleRunCommandTargetPropertyFromCloudFormation)(properties.RunCommandTargets));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnRule_RunCommandTargetPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("key", cdk.requiredValidator)(properties.key));
      errors.collect(cdk.propertyValidator("key", cdk.validateString)(properties.key));
      errors.collect(cdk.propertyValidator("values", cdk.requiredValidator)(properties.values));
      errors.collect(cdk.propertyValidator("values", cdk.listValidator(cdk.validateString))(properties.values));
      return errors.wrap('supplied properties not correct for "RunCommandTargetProperty"');
    }
    function cfnRuleRunCommandTargetPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRule_RunCommandTargetPropertyValidator(properties).assertSuccess();
      return {
        Key: cdk.stringToCloudFormation(properties.key),
        Values: cdk.listMapper(cdk.stringToCloudFormation)(properties.values)
      };
    }
    function CfnRuleRunCommandTargetPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("key", "Key", cfn_parse.FromCloudFormation.getString(properties.Key));
      ret.addPropertyResult("values", "Values", cfn_parse.FromCloudFormation.getStringArray(properties.Values));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnRule_SqsParametersPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("messageGroupId", cdk.requiredValidator)(properties.messageGroupId));
      errors.collect(cdk.propertyValidator("messageGroupId", cdk.validateString)(properties.messageGroupId));
      return errors.wrap('supplied properties not correct for "SqsParametersProperty"');
    }
    function cfnRuleSqsParametersPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRule_SqsParametersPropertyValidator(properties).assertSuccess();
      return {
        MessageGroupId: cdk.stringToCloudFormation(properties.messageGroupId)
      };
    }
    function CfnRuleSqsParametersPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("messageGroupId", "MessageGroupId", cfn_parse.FromCloudFormation.getString(properties.MessageGroupId));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnRule_TargetPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("arn", cdk.requiredValidator)(properties.arn));
      errors.collect(cdk.propertyValidator("arn", cdk.validateString)(properties.arn));
      errors.collect(cdk.propertyValidator("batchParameters", CfnRule_BatchParametersPropertyValidator)(properties.batchParameters));
      errors.collect(cdk.propertyValidator("deadLetterConfig", CfnRule_DeadLetterConfigPropertyValidator)(properties.deadLetterConfig));
      errors.collect(cdk.propertyValidator("ecsParameters", CfnRule_EcsParametersPropertyValidator)(properties.ecsParameters));
      errors.collect(cdk.propertyValidator("httpParameters", CfnRule_HttpParametersPropertyValidator)(properties.httpParameters));
      errors.collect(cdk.propertyValidator("id", cdk.requiredValidator)(properties.id));
      errors.collect(cdk.propertyValidator("id", cdk.validateString)(properties.id));
      errors.collect(cdk.propertyValidator("input", cdk.validateString)(properties.input));
      errors.collect(cdk.propertyValidator("inputPath", cdk.validateString)(properties.inputPath));
      errors.collect(cdk.propertyValidator("inputTransformer", CfnRule_InputTransformerPropertyValidator)(properties.inputTransformer));
      errors.collect(cdk.propertyValidator("kinesisParameters", CfnRule_KinesisParametersPropertyValidator)(properties.kinesisParameters));
      errors.collect(cdk.propertyValidator("redshiftDataParameters", CfnRule_RedshiftDataParametersPropertyValidator)(properties.redshiftDataParameters));
      errors.collect(cdk.propertyValidator("retryPolicy", CfnRule_RetryPolicyPropertyValidator)(properties.retryPolicy));
      errors.collect(cdk.propertyValidator("roleArn", cdk.validateString)(properties.roleArn));
      errors.collect(cdk.propertyValidator("runCommandParameters", CfnRule_RunCommandParametersPropertyValidator)(properties.runCommandParameters));
      errors.collect(cdk.propertyValidator("sqsParameters", CfnRule_SqsParametersPropertyValidator)(properties.sqsParameters));
      return errors.wrap('supplied properties not correct for "TargetProperty"');
    }
    function cfnRuleTargetPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRule_TargetPropertyValidator(properties).assertSuccess();
      return {
        Arn: cdk.stringToCloudFormation(properties.arn),
        BatchParameters: cfnRuleBatchParametersPropertyToCloudFormation(properties.batchParameters),
        DeadLetterConfig: cfnRuleDeadLetterConfigPropertyToCloudFormation(properties.deadLetterConfig),
        EcsParameters: cfnRuleEcsParametersPropertyToCloudFormation(properties.ecsParameters),
        HttpParameters: cfnRuleHttpParametersPropertyToCloudFormation(properties.httpParameters),
        Id: cdk.stringToCloudFormation(properties.id),
        Input: cdk.stringToCloudFormation(properties.input),
        InputPath: cdk.stringToCloudFormation(properties.inputPath),
        InputTransformer: cfnRuleInputTransformerPropertyToCloudFormation(properties.inputTransformer),
        KinesisParameters: cfnRuleKinesisParametersPropertyToCloudFormation(properties.kinesisParameters),
        RedshiftDataParameters: cfnRuleRedshiftDataParametersPropertyToCloudFormation(properties.redshiftDataParameters),
        RetryPolicy: cfnRuleRetryPolicyPropertyToCloudFormation(properties.retryPolicy),
        RoleArn: cdk.stringToCloudFormation(properties.roleArn),
        RunCommandParameters: cfnRuleRunCommandParametersPropertyToCloudFormation(properties.runCommandParameters),
        SqsParameters: cfnRuleSqsParametersPropertyToCloudFormation(properties.sqsParameters)
      };
    }
    function CfnRuleTargetPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("arn", "Arn", cfn_parse.FromCloudFormation.getString(properties.Arn));
      ret.addPropertyResult("batchParameters", "BatchParameters", properties.BatchParameters != null ? CfnRuleBatchParametersPropertyFromCloudFormation(properties.BatchParameters) : void 0);
      ret.addPropertyResult("deadLetterConfig", "DeadLetterConfig", properties.DeadLetterConfig != null ? CfnRuleDeadLetterConfigPropertyFromCloudFormation(properties.DeadLetterConfig) : void 0);
      ret.addPropertyResult("ecsParameters", "EcsParameters", properties.EcsParameters != null ? CfnRuleEcsParametersPropertyFromCloudFormation(properties.EcsParameters) : void 0);
      ret.addPropertyResult("httpParameters", "HttpParameters", properties.HttpParameters != null ? CfnRuleHttpParametersPropertyFromCloudFormation(properties.HttpParameters) : void 0);
      ret.addPropertyResult("id", "Id", cfn_parse.FromCloudFormation.getString(properties.Id));
      ret.addPropertyResult("input", "Input", properties.Input != null ? cfn_parse.FromCloudFormation.getString(properties.Input) : void 0);
      ret.addPropertyResult("inputPath", "InputPath", properties.InputPath != null ? cfn_parse.FromCloudFormation.getString(properties.InputPath) : void 0);
      ret.addPropertyResult("inputTransformer", "InputTransformer", properties.InputTransformer != null ? CfnRuleInputTransformerPropertyFromCloudFormation(properties.InputTransformer) : void 0);
      ret.addPropertyResult("kinesisParameters", "KinesisParameters", properties.KinesisParameters != null ? CfnRuleKinesisParametersPropertyFromCloudFormation(properties.KinesisParameters) : void 0);
      ret.addPropertyResult("redshiftDataParameters", "RedshiftDataParameters", properties.RedshiftDataParameters != null ? CfnRuleRedshiftDataParametersPropertyFromCloudFormation(properties.RedshiftDataParameters) : void 0);
      ret.addPropertyResult("retryPolicy", "RetryPolicy", properties.RetryPolicy != null ? CfnRuleRetryPolicyPropertyFromCloudFormation(properties.RetryPolicy) : void 0);
      ret.addPropertyResult("roleArn", "RoleArn", properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : void 0);
      ret.addPropertyResult("runCommandParameters", "RunCommandParameters", properties.RunCommandParameters != null ? CfnRuleRunCommandParametersPropertyFromCloudFormation(properties.RunCommandParameters) : void 0);
      ret.addPropertyResult("sqsParameters", "SqsParameters", properties.SqsParameters != null ? CfnRuleSqsParametersPropertyFromCloudFormation(properties.SqsParameters) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-events/lib/schedule.js
var require_schedule2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-events/lib/schedule.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Schedule = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var Schedule = class {
      constructor() {
      }
      static expression(expression) {
        return new LiteralSchedule(expression);
      }
      static rate(duration) {
        if (duration.isUnresolved()) {
          const validDurationUnit = ["minute", "minutes", "hour", "hours", "day", "days"];
          if (validDurationUnit.indexOf(duration.unitLabel()) === -1) {
            throw new Error("Allowed units for scheduling are: 'minute', 'minutes', 'hour', 'hours', 'day', 'days'");
          }
          return new LiteralSchedule(`rate(${duration.formatTokenToNumber()})`);
        }
        if (duration.toSeconds() === 0) {
          throw new Error("Duration cannot be 0");
        }
        let rate = maybeRate(duration.toDays({ integral: false }), "day");
        if (rate === void 0) {
          rate = maybeRate(duration.toHours({ integral: false }), "hour");
        }
        if (rate === void 0) {
          rate = makeRate(duration.toMinutes({ integral: true }), "minute");
        }
        return new LiteralSchedule(rate);
      }
      static cron(options) {
        if (options.weekDay !== void 0 && options.day !== void 0) {
          throw new Error("Cannot supply both 'day' and 'weekDay', use at most one");
        }
        const minute = fallback(options.minute, "*");
        const hour = fallback(options.hour, "*");
        const month = fallback(options.month, "*");
        const year = fallback(options.year, "*");
        const day = fallback(options.day, options.weekDay !== void 0 ? "?" : "*");
        const weekDay = fallback(options.weekDay, "?");
        return new LiteralSchedule(`cron(${minute} ${hour} ${day} ${month} ${weekDay} ${year})`);
      }
    };
    exports2.Schedule = Schedule;
    _a = JSII_RTTI_SYMBOL_1;
    Schedule[_a] = { fqn: "@aws-cdk/aws-events.Schedule", version: "1.132.0" };
    var LiteralSchedule = class extends Schedule {
      constructor(expressionString) {
        super();
        this.expressionString = expressionString;
      }
    };
    function fallback(x, def) {
      return x !== null && x !== void 0 ? x : def;
    }
    function maybeRate(interval, singular) {
      if (interval === 0 || !Number.isInteger(interval)) {
        return void 0;
      }
      return makeRate(interval, singular);
    }
    function makeRate(interval, singular) {
      return interval === 1 ? `rate(1 ${singular})` : `rate(${interval} ${singular}s)`;
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-events/lib/util.js
var require_util5 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-events/lib/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.renderEventPattern = exports2.sameEnvDimension = exports2.mergeEventPattern = void 0;
    var core_1 = require_lib8();
    function mergeEventPattern(dest, src) {
      dest = dest || {};
      mergeObject(dest, src);
      return dest;
      function mergeObject(destObj, srcObj) {
        if (typeof srcObj !== "object") {
          throw new Error(`Invalid event pattern '${JSON.stringify(srcObj)}', expecting an object or an array`);
        }
        for (const field of Object.keys(srcObj)) {
          const srcValue = srcObj[field];
          const destValue = destObj[field];
          if (srcValue === void 0) {
            continue;
          }
          if (typeof srcValue !== "object") {
            throw new Error(`Invalid event pattern field { ${field}: ${JSON.stringify(srcValue)} }. All fields must be arrays`);
          }
          if (destObj[field] === void 0) {
            destObj[field] = srcValue;
            continue;
          }
          if (Array.isArray(srcValue) !== Array.isArray(destValue)) {
            throw new Error(`Invalid event pattern field ${field}. Type mismatch between existing pattern ${JSON.stringify(destValue)} and added pattern ${JSON.stringify(srcValue)}`);
          }
          if (Array.isArray(srcValue)) {
            const result = [...destValue, ...srcValue];
            const resultJson = result.map((i) => JSON.stringify(i));
            destObj[field] = result.filter((value, index) => resultJson.indexOf(JSON.stringify(value)) === index);
            continue;
          }
          mergeObject(destObj[field], srcValue);
        }
      }
    }
    exports2.mergeEventPattern = mergeEventPattern;
    function sameEnvDimension(dim1, dim2) {
      return [core_1.TokenComparison.SAME, core_1.TokenComparison.BOTH_UNRESOLVED].includes(core_1.Token.compareStrings(dim1, dim2));
    }
    exports2.sameEnvDimension = sameEnvDimension;
    function renderEventPattern(eventPattern) {
      if (Object.keys(eventPattern).length === 0) {
        return void 0;
      }
      const out = {};
      for (let key of Object.keys(eventPattern)) {
        const value = eventPattern[key];
        if (key === "detailType") {
          key = "detail-type";
        }
        out[key] = value;
      }
      return out;
    }
    exports2.renderEventPattern = renderEventPattern;
  }
});

// asset-input/node_modules/@aws-cdk/aws-events/lib/rule.js
var require_rule = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-events/lib/rule.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Rule = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var aws_iam_1 = require_lib9();
    var core_1 = require_lib8();
    var constructs_1 = require_lib4();
    var events_generated_1 = require_events_generated();
    var schedule_1 = require_schedule2();
    var util_1 = require_util5();
    var Rule = class extends core_1.Resource {
      constructor(scope, id, props = {}) {
        super(scope, id, {
          physicalName: props.ruleName
        });
        this.targets = new Array();
        this.eventPattern = {};
        this._xEnvTargetsAdded = new Set();
        if (props.eventBus && props.schedule) {
          throw new Error("Cannot associate rule with 'eventBus' when using 'schedule'");
        }
        this.description = props.description;
        this.scheduleExpression = props.schedule && props.schedule.expressionString;
        const resource = new events_generated_1.CfnRule(this, "Resource", {
          name: this.physicalName,
          description: this.description,
          state: props.enabled == null ? "ENABLED" : props.enabled ? "ENABLED" : "DISABLED",
          scheduleExpression: this.scheduleExpression,
          eventPattern: core_1.Lazy.any({ produce: () => this._renderEventPattern() }),
          targets: core_1.Lazy.any({ produce: () => this.renderTargets() }),
          eventBusName: props.eventBus && props.eventBus.eventBusName
        });
        this.ruleArn = this.getResourceArnAttribute(resource.attrArn, {
          service: "events",
          resource: "rule",
          resourceName: this.physicalName
        });
        this.ruleName = this.getResourceNameAttribute(resource.ref);
        this.addEventPattern(props.eventPattern);
        for (const target of props.targets || []) {
          this.addTarget(target);
        }
      }
      static fromEventRuleArn(scope, id, eventRuleArn) {
        const parts = core_1.Stack.of(scope).parseArn(eventRuleArn);
        class Import extends core_1.Resource {
          constructor() {
            super(...arguments);
            this.ruleArn = eventRuleArn;
            this.ruleName = parts.resourceName || "";
          }
        }
        return new Import(scope, id);
      }
      addTarget(target) {
        var _b, _c, _d;
        if (!target) {
          return;
        }
        const autoGeneratedId = `Target${this.targets.length}`;
        const targetProps = target.bind(this, autoGeneratedId);
        const inputProps = targetProps.input && targetProps.input.bind(this);
        const roleArn = (_b = targetProps.role) === null || _b === void 0 ? void 0 : _b.roleArn;
        const id = targetProps.id || autoGeneratedId;
        if (targetProps.targetResource) {
          const targetStack = core_1.Stack.of(targetProps.targetResource);
          const targetAccount = ((_c = targetProps.targetResource.env) === null || _c === void 0 ? void 0 : _c.account) || targetStack.account;
          const targetRegion = ((_d = targetProps.targetResource.env) === null || _d === void 0 ? void 0 : _d.region) || targetStack.region;
          const sourceStack = core_1.Stack.of(this);
          const sourceAccount = sourceStack.account;
          const sourceRegion = sourceStack.region;
          if (!util_1.sameEnvDimension(sourceAccount, targetAccount) || !util_1.sameEnvDimension(sourceRegion, targetRegion)) {
            if (!targetAccount || core_1.Token.isUnresolved(targetAccount)) {
              throw new Error("You need to provide a concrete account for the target stack when using cross-account or cross-region events");
            }
            if (!targetRegion || core_1.Token.isUnresolved(targetRegion)) {
              throw new Error("You need to provide a concrete region for the target stack when using cross-account or cross-region events");
            }
            if (core_1.Token.isUnresolved(sourceAccount)) {
              throw new Error("You need to provide a concrete account for the source stack when using cross-account or cross-region events");
            }
            const sourceApp = this.node.root;
            if (!sourceApp || !core_1.App.isApp(sourceApp)) {
              throw new Error("Event stack which uses cross-account or cross-region targets must be part of a CDK app");
            }
            const targetApp = constructs_1.Node.of(targetProps.targetResource).root;
            if (!targetApp || !core_1.App.isApp(targetApp)) {
              throw new Error("Target stack which uses cross-account or cross-region event targets must be part of a CDK app");
            }
            if (sourceApp !== targetApp) {
              throw new Error("Event stack and target stack must belong to the same CDK app");
            }
            this.ensureXEnvTargetEventBus(targetStack, targetAccount, targetRegion, id);
            const mirrorRuleScope = this.obtainMirrorRuleScope(targetStack, targetAccount, targetRegion);
            new MirrorRule(mirrorRuleScope, `${core_1.Names.uniqueId(this)}-${id}`, {
              targets: [target],
              eventPattern: this.eventPattern,
              schedule: this.scheduleExpression ? schedule_1.Schedule.expression(this.scheduleExpression) : void 0,
              description: this.description
            }, this);
            return;
          }
        }
        this.targets.push({
          id,
          arn: targetProps.arn,
          roleArn,
          ecsParameters: targetProps.ecsParameters,
          kinesisParameters: targetProps.kinesisParameters,
          runCommandParameters: targetProps.runCommandParameters,
          batchParameters: targetProps.batchParameters,
          deadLetterConfig: targetProps.deadLetterConfig,
          retryPolicy: targetProps.retryPolicy,
          sqsParameters: targetProps.sqsParameters,
          httpParameters: targetProps.httpParameters,
          input: inputProps && inputProps.input,
          inputPath: inputProps && inputProps.inputPath,
          inputTransformer: (inputProps === null || inputProps === void 0 ? void 0 : inputProps.inputTemplate) !== void 0 ? {
            inputTemplate: inputProps.inputTemplate,
            inputPathsMap: inputProps.inputPathsMap
          } : void 0
        });
      }
      addEventPattern(eventPattern) {
        if (!eventPattern) {
          return;
        }
        util_1.mergeEventPattern(this.eventPattern, eventPattern);
      }
      _renderEventPattern() {
        return util_1.renderEventPattern(this.eventPattern);
      }
      validate() {
        if (Object.keys(this.eventPattern).length === 0 && !this.scheduleExpression) {
          return ["Either 'eventPattern' or 'schedule' must be defined"];
        }
        return [];
      }
      renderTargets() {
        if (this.targets.length === 0) {
          return void 0;
        }
        return this.targets;
      }
      ensureXEnvTargetEventBus(targetStack, targetAccount, targetRegion, id) {
        const key = `${targetAccount}:${targetRegion}`;
        if (this._xEnvTargetsAdded.has(key)) {
          return;
        }
        this._xEnvTargetsAdded.add(key);
        const eventBusArn = targetStack.formatArn({
          service: "events",
          resource: "event-bus",
          resourceName: "default",
          region: targetRegion,
          account: targetAccount
        });
        const roleArn = !util_1.sameEnvDimension(targetRegion, core_1.Stack.of(this).region) ? this.crossRegionPutEventsRole(eventBusArn).roleArn : void 0;
        this.targets.push({
          id,
          arn: eventBusArn,
          roleArn
        });
        const sourceApp = this.node.root;
        const sourceAccount = core_1.Stack.of(this).account;
        if (!util_1.sameEnvDimension(sourceAccount, targetAccount)) {
          const stackId = `EventBusPolicy-${sourceAccount}-${targetRegion}-${targetAccount}`;
          let eventBusPolicyStack = sourceApp.node.tryFindChild(stackId);
          if (!eventBusPolicyStack) {
            eventBusPolicyStack = new core_1.Stack(sourceApp, stackId, {
              env: {
                account: targetAccount,
                region: targetRegion
              },
              stackName: `${targetStack.stackName}-EventBusPolicy-support-${targetRegion}-${sourceAccount}`
            });
            new events_generated_1.CfnEventBusPolicy(eventBusPolicyStack, "GivePermToOtherAccount", {
              action: "events:PutEvents",
              statementId: `Allow-account-${sourceAccount}`,
              principal: sourceAccount
            });
          }
          core_1.Stack.of(this).addDependency(eventBusPolicyStack);
        }
      }
      obtainMirrorRuleScope(targetStack, targetAccount, targetRegion) {
        if (util_1.sameEnvDimension(targetStack.account, targetAccount) && util_1.sameEnvDimension(targetStack.region, targetRegion)) {
          return targetStack;
        }
        throw new Error("Cannot create a cross-account or cross-region rule for an imported resource (create a stack with the right environment for the imported resource)");
      }
      crossRegionPutEventsRole(eventBusArn) {
        const id = "EventsRole";
        let role = this.node.tryFindChild(id);
        if (!role) {
          role = new aws_iam_1.Role(this, id, {
            roleName: core_1.PhysicalName.GENERATE_IF_NEEDED,
            assumedBy: new aws_iam_1.ServicePrincipal("events.amazonaws.com")
          });
        }
        role.addToPrincipalPolicy(new aws_iam_1.PolicyStatement({
          actions: ["events:PutEvents"],
          resources: [eventBusArn]
        }));
        return role;
      }
    };
    exports2.Rule = Rule;
    _a = JSII_RTTI_SYMBOL_1;
    Rule[_a] = { fqn: "@aws-cdk/aws-events.Rule", version: "1.132.0" };
    var MirrorRule = class extends Rule {
      constructor(scope, id, props, source) {
        super(scope, id, props);
        this.source = source;
      }
      _renderEventPattern() {
        return this.source._renderEventPattern();
      }
      validate() {
        return [];
      }
    };
  }
});

// asset-input/node_modules/@aws-cdk/aws-events/lib/rule-ref.js
var require_rule_ref = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-events/lib/rule-ref.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/@aws-cdk/aws-events/lib/target.js
var require_target = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-events/lib/target.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/@aws-cdk/aws-events/lib/archive.js
var require_archive = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-events/lib/archive.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Archive = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var events_generated_1 = require_events_generated();
    var util_1 = require_util5();
    var Archive = class extends core_1.Resource {
      constructor(scope, id, props) {
        var _b;
        super(scope, id, { physicalName: props.archiveName });
        let archive = new events_generated_1.CfnArchive(this, "Archive", {
          sourceArn: props.sourceEventBus.eventBusArn,
          description: props.description,
          eventPattern: util_1.renderEventPattern(props.eventPattern),
          retentionDays: ((_b = props.retention) === null || _b === void 0 ? void 0 : _b.toDays({ integral: true })) || 0,
          archiveName: this.physicalName
        });
        this.archiveArn = archive.attrArn;
        this.archiveName = archive.attrArchiveName;
      }
    };
    exports2.Archive = Archive;
    _a = JSII_RTTI_SYMBOL_1;
    Archive[_a] = { fqn: "@aws-cdk/aws-events.Archive", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-events/lib/event-bus.js
var require_event_bus = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-events/lib/event-bus.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EventBus = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var iam = require_lib9();
    var core_1 = require_lib8();
    var archive_1 = require_archive();
    var events_generated_1 = require_events_generated();
    var EventBusBase = class extends core_1.Resource {
      archive(id, props) {
        return new archive_1.Archive(this, id, {
          sourceEventBus: this,
          description: props.description || `Event Archive for ${this.eventBusName} Event Bus`,
          eventPattern: props.eventPattern,
          retention: props.retention,
          archiveName: props.archiveName
        });
      }
      grantPutEventsTo(grantee) {
        return iam.Grant.addToPrincipal({
          grantee,
          actions: ["events:PutEvents"],
          resourceArns: [this.eventBusArn]
        });
      }
    };
    var EventBus = class extends EventBusBase {
      constructor(scope, id, props) {
        const { eventBusName, eventSourceName } = EventBus.eventBusProps(core_1.Lazy.string({ produce: () => core_1.Names.uniqueId(this) }), props);
        super(scope, id, { physicalName: eventBusName });
        const eventBus = new events_generated_1.CfnEventBus(this, "Resource", {
          name: this.physicalName,
          eventSourceName
        });
        this.eventBusArn = this.getResourceArnAttribute(eventBus.attrArn, {
          service: "events",
          resource: "event-bus",
          resourceName: eventBus.name
        });
        this.eventBusName = this.getResourceNameAttribute(eventBus.ref);
        this.eventBusPolicy = eventBus.attrPolicy;
        this.eventSourceName = eventBus.eventSourceName;
      }
      static fromEventBusArn(scope, id, eventBusArn) {
        const parts = core_1.Stack.of(scope).parseArn(eventBusArn);
        return new ImportedEventBus(scope, id, {
          eventBusArn,
          eventBusName: parts.resourceName || "",
          eventBusPolicy: ""
        });
      }
      static fromEventBusName(scope, id, eventBusName) {
        const eventBusArn = core_1.Stack.of(scope).formatArn({
          resource: "event-bus",
          service: "events",
          resourceName: eventBusName
        });
        return EventBus.fromEventBusAttributes(scope, id, {
          eventBusName,
          eventBusArn,
          eventBusPolicy: ""
        });
      }
      static fromEventBusAttributes(scope, id, attrs) {
        return new ImportedEventBus(scope, id, attrs);
      }
      static grantPutEvents(grantee) {
        return iam.Grant.addToPrincipal({
          grantee,
          actions: ["events:PutEvents"],
          resourceArns: ["*"]
        });
      }
      static grantAllPutEvents(grantee) {
        return iam.Grant.addToPrincipal({
          grantee,
          actions: ["events:PutEvents"],
          resourceArns: ["*"]
        });
      }
      static eventBusProps(defaultEventBusName, props) {
        if (props) {
          const { eventBusName, eventSourceName } = props;
          const eventBusNameRegex = /^[\/\.\-_A-Za-z0-9]{1,256}$/;
          if (eventBusName !== void 0 && eventSourceName !== void 0) {
            throw new Error("'eventBusName' and 'eventSourceName' cannot both be provided");
          } else if (eventBusName !== void 0 && !core_1.Token.isUnresolved(eventBusName)) {
            if (eventBusName === "default") {
              throw new Error("'eventBusName' must not be 'default'");
            } else if (eventBusName.indexOf("/") > -1) {
              throw new Error("'eventBusName' must not contain '/'");
            } else if (!eventBusNameRegex.test(eventBusName)) {
              throw new Error(`'eventBusName' must satisfy: ${eventBusNameRegex}`);
            }
            return { eventBusName };
          } else if (eventSourceName !== void 0) {
            const eventSourceNameRegex = /^aws\.partner(\/[\.\-_A-Za-z0-9]+){2,}$/;
            if (!eventSourceNameRegex.test(eventSourceName)) {
              throw new Error(`'eventSourceName' must satisfy: ${eventSourceNameRegex}`);
            } else if (!eventBusNameRegex.test(eventSourceName)) {
              throw new Error(`'eventSourceName' must satisfy: ${eventBusNameRegex}`);
            }
            return { eventBusName: eventSourceName, eventSourceName };
          } else {
            return { eventBusName: props.eventBusName };
          }
        }
        return { eventBusName: defaultEventBusName };
      }
    };
    exports2.EventBus = EventBus;
    _a = JSII_RTTI_SYMBOL_1;
    EventBus[_a] = { fqn: "@aws-cdk/aws-events.EventBus", version: "1.132.0" };
    var ImportedEventBus = class extends EventBusBase {
      constructor(scope, id, attrs) {
        const arnParts = core_1.Stack.of(scope).parseArn(attrs.eventBusArn);
        super(scope, id, {
          account: arnParts.account,
          region: arnParts.region
        });
        this.eventBusArn = attrs.eventBusArn;
        this.eventBusName = attrs.eventBusName;
        this.eventBusPolicy = attrs.eventBusPolicy;
        this.eventSourceName = attrs.eventSourceName;
      }
    };
  }
});

// asset-input/node_modules/@aws-cdk/aws-events/lib/event-pattern.js
var require_event_pattern = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-events/lib/event-pattern.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/@aws-cdk/aws-events/lib/on-event-options.js
var require_on_event_options = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-events/lib/on-event-options.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/@aws-cdk/aws-events/lib/index.js
var require_lib15 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-events/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_input(), exports2);
    __exportStar(require_rule(), exports2);
    __exportStar(require_rule_ref(), exports2);
    __exportStar(require_target(), exports2);
    __exportStar(require_event_bus(), exports2);
    __exportStar(require_event_pattern(), exports2);
    __exportStar(require_schedule2(), exports2);
    __exportStar(require_on_event_options(), exports2);
    __exportStar(require_archive(), exports2);
    __exportStar(require_events_generated(), exports2);
  }
});

// asset-input/node_modules/@aws-cdk/aws-s3/lib/s3.generated.js
var require_s3_generated = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-s3/lib/s3.generated.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    var _d;
    var _e;
    var _f;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnStorageLens = exports2.CfnMultiRegionAccessPointPolicy = exports2.CfnMultiRegionAccessPoint = exports2.CfnBucketPolicy = exports2.CfnBucket = exports2.CfnAccessPoint = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var cfn_parse = require_cfn_parse();
    function CfnAccessPointPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("bucket", cdk.requiredValidator)(properties.bucket));
      errors.collect(cdk.propertyValidator("bucket", cdk.validateString)(properties.bucket));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("policy", cdk.validateObject)(properties.policy));
      errors.collect(cdk.propertyValidator("policyStatus", cdk.validateObject)(properties.policyStatus));
      errors.collect(cdk.propertyValidator("publicAccessBlockConfiguration", CfnAccessPoint_PublicAccessBlockConfigurationPropertyValidator)(properties.publicAccessBlockConfiguration));
      errors.collect(cdk.propertyValidator("vpcConfiguration", CfnAccessPoint_VpcConfigurationPropertyValidator)(properties.vpcConfiguration));
      return errors.wrap('supplied properties not correct for "CfnAccessPointProps"');
    }
    function cfnAccessPointPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnAccessPointPropsValidator(properties).assertSuccess();
      return {
        Bucket: cdk.stringToCloudFormation(properties.bucket),
        Name: cdk.stringToCloudFormation(properties.name),
        Policy: cdk.objectToCloudFormation(properties.policy),
        PolicyStatus: cdk.objectToCloudFormation(properties.policyStatus),
        PublicAccessBlockConfiguration: cfnAccessPointPublicAccessBlockConfigurationPropertyToCloudFormation(properties.publicAccessBlockConfiguration),
        VpcConfiguration: cfnAccessPointVpcConfigurationPropertyToCloudFormation(properties.vpcConfiguration)
      };
    }
    function CfnAccessPointPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("bucket", "Bucket", cfn_parse.FromCloudFormation.getString(properties.Bucket));
      ret.addPropertyResult("name", "Name", properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : void 0);
      ret.addPropertyResult("policy", "Policy", properties.Policy != null ? cfn_parse.FromCloudFormation.getAny(properties.Policy) : void 0);
      ret.addPropertyResult("policyStatus", "PolicyStatus", properties.PolicyStatus != null ? cfn_parse.FromCloudFormation.getAny(properties.PolicyStatus) : void 0);
      ret.addPropertyResult("publicAccessBlockConfiguration", "PublicAccessBlockConfiguration", properties.PublicAccessBlockConfiguration != null ? CfnAccessPointPublicAccessBlockConfigurationPropertyFromCloudFormation(properties.PublicAccessBlockConfiguration) : void 0);
      ret.addPropertyResult("vpcConfiguration", "VpcConfiguration", properties.VpcConfiguration != null ? CfnAccessPointVpcConfigurationPropertyFromCloudFormation(properties.VpcConfiguration) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnAccessPoint = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnAccessPoint.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "bucket", this);
        this.attrAlias = cdk.Token.asString(this.getAtt("Alias"));
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.attrName = cdk.Token.asString(this.getAtt("Name"));
        this.attrNetworkOrigin = cdk.Token.asString(this.getAtt("NetworkOrigin"));
        this.bucket = props.bucket;
        this.name = props.name;
        this.policy = props.policy;
        this.policyStatus = props.policyStatus;
        this.publicAccessBlockConfiguration = props.publicAccessBlockConfiguration;
        this.vpcConfiguration = props.vpcConfiguration;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnAccessPointPropsFromCloudFormation(resourceProperties);
        const ret = new CfnAccessPoint(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnAccessPoint.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          bucket: this.bucket,
          name: this.name,
          policy: this.policy,
          policyStatus: this.policyStatus,
          publicAccessBlockConfiguration: this.publicAccessBlockConfiguration,
          vpcConfiguration: this.vpcConfiguration
        };
      }
      renderProperties(props) {
        return cfnAccessPointPropsToCloudFormation(props);
      }
    };
    exports2.CfnAccessPoint = CfnAccessPoint;
    _a = JSII_RTTI_SYMBOL_1;
    CfnAccessPoint[_a] = { fqn: "@aws-cdk/aws-s3.CfnAccessPoint", version: "1.132.0" };
    CfnAccessPoint.CFN_RESOURCE_TYPE_NAME = "AWS::S3::AccessPoint";
    function CfnAccessPoint_PublicAccessBlockConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("blockPublicAcls", cdk.validateBoolean)(properties.blockPublicAcls));
      errors.collect(cdk.propertyValidator("blockPublicPolicy", cdk.validateBoolean)(properties.blockPublicPolicy));
      errors.collect(cdk.propertyValidator("ignorePublicAcls", cdk.validateBoolean)(properties.ignorePublicAcls));
      errors.collect(cdk.propertyValidator("restrictPublicBuckets", cdk.validateBoolean)(properties.restrictPublicBuckets));
      return errors.wrap('supplied properties not correct for "PublicAccessBlockConfigurationProperty"');
    }
    function cfnAccessPointPublicAccessBlockConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnAccessPoint_PublicAccessBlockConfigurationPropertyValidator(properties).assertSuccess();
      return {
        BlockPublicAcls: cdk.booleanToCloudFormation(properties.blockPublicAcls),
        BlockPublicPolicy: cdk.booleanToCloudFormation(properties.blockPublicPolicy),
        IgnorePublicAcls: cdk.booleanToCloudFormation(properties.ignorePublicAcls),
        RestrictPublicBuckets: cdk.booleanToCloudFormation(properties.restrictPublicBuckets)
      };
    }
    function CfnAccessPointPublicAccessBlockConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("blockPublicAcls", "BlockPublicAcls", properties.BlockPublicAcls != null ? cfn_parse.FromCloudFormation.getBoolean(properties.BlockPublicAcls) : void 0);
      ret.addPropertyResult("blockPublicPolicy", "BlockPublicPolicy", properties.BlockPublicPolicy != null ? cfn_parse.FromCloudFormation.getBoolean(properties.BlockPublicPolicy) : void 0);
      ret.addPropertyResult("ignorePublicAcls", "IgnorePublicAcls", properties.IgnorePublicAcls != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IgnorePublicAcls) : void 0);
      ret.addPropertyResult("restrictPublicBuckets", "RestrictPublicBuckets", properties.RestrictPublicBuckets != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RestrictPublicBuckets) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnAccessPoint_VpcConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("vpcId", cdk.validateString)(properties.vpcId));
      return errors.wrap('supplied properties not correct for "VpcConfigurationProperty"');
    }
    function cfnAccessPointVpcConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnAccessPoint_VpcConfigurationPropertyValidator(properties).assertSuccess();
      return {
        VpcId: cdk.stringToCloudFormation(properties.vpcId)
      };
    }
    function CfnAccessPointVpcConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("vpcId", "VpcId", properties.VpcId != null ? cfn_parse.FromCloudFormation.getString(properties.VpcId) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucketPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("accelerateConfiguration", CfnBucket_AccelerateConfigurationPropertyValidator)(properties.accelerateConfiguration));
      errors.collect(cdk.propertyValidator("accessControl", cdk.validateString)(properties.accessControl));
      errors.collect(cdk.propertyValidator("analyticsConfigurations", cdk.listValidator(CfnBucket_AnalyticsConfigurationPropertyValidator))(properties.analyticsConfigurations));
      errors.collect(cdk.propertyValidator("bucketEncryption", CfnBucket_BucketEncryptionPropertyValidator)(properties.bucketEncryption));
      errors.collect(cdk.propertyValidator("bucketName", cdk.validateString)(properties.bucketName));
      errors.collect(cdk.propertyValidator("corsConfiguration", CfnBucket_CorsConfigurationPropertyValidator)(properties.corsConfiguration));
      errors.collect(cdk.propertyValidator("intelligentTieringConfigurations", cdk.listValidator(CfnBucket_IntelligentTieringConfigurationPropertyValidator))(properties.intelligentTieringConfigurations));
      errors.collect(cdk.propertyValidator("inventoryConfigurations", cdk.listValidator(CfnBucket_InventoryConfigurationPropertyValidator))(properties.inventoryConfigurations));
      errors.collect(cdk.propertyValidator("lifecycleConfiguration", CfnBucket_LifecycleConfigurationPropertyValidator)(properties.lifecycleConfiguration));
      errors.collect(cdk.propertyValidator("loggingConfiguration", CfnBucket_LoggingConfigurationPropertyValidator)(properties.loggingConfiguration));
      errors.collect(cdk.propertyValidator("metricsConfigurations", cdk.listValidator(CfnBucket_MetricsConfigurationPropertyValidator))(properties.metricsConfigurations));
      errors.collect(cdk.propertyValidator("notificationConfiguration", CfnBucket_NotificationConfigurationPropertyValidator)(properties.notificationConfiguration));
      errors.collect(cdk.propertyValidator("objectLockConfiguration", CfnBucket_ObjectLockConfigurationPropertyValidator)(properties.objectLockConfiguration));
      errors.collect(cdk.propertyValidator("objectLockEnabled", cdk.validateBoolean)(properties.objectLockEnabled));
      errors.collect(cdk.propertyValidator("ownershipControls", CfnBucket_OwnershipControlsPropertyValidator)(properties.ownershipControls));
      errors.collect(cdk.propertyValidator("publicAccessBlockConfiguration", CfnBucket_PublicAccessBlockConfigurationPropertyValidator)(properties.publicAccessBlockConfiguration));
      errors.collect(cdk.propertyValidator("replicationConfiguration", CfnBucket_ReplicationConfigurationPropertyValidator)(properties.replicationConfiguration));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("versioningConfiguration", CfnBucket_VersioningConfigurationPropertyValidator)(properties.versioningConfiguration));
      errors.collect(cdk.propertyValidator("websiteConfiguration", CfnBucket_WebsiteConfigurationPropertyValidator)(properties.websiteConfiguration));
      return errors.wrap('supplied properties not correct for "CfnBucketProps"');
    }
    function cfnBucketPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucketPropsValidator(properties).assertSuccess();
      return {
        AccelerateConfiguration: cfnBucketAccelerateConfigurationPropertyToCloudFormation(properties.accelerateConfiguration),
        AccessControl: cdk.stringToCloudFormation(properties.accessControl),
        AnalyticsConfigurations: cdk.listMapper(cfnBucketAnalyticsConfigurationPropertyToCloudFormation)(properties.analyticsConfigurations),
        BucketEncryption: cfnBucketBucketEncryptionPropertyToCloudFormation(properties.bucketEncryption),
        BucketName: cdk.stringToCloudFormation(properties.bucketName),
        CorsConfiguration: cfnBucketCorsConfigurationPropertyToCloudFormation(properties.corsConfiguration),
        IntelligentTieringConfigurations: cdk.listMapper(cfnBucketIntelligentTieringConfigurationPropertyToCloudFormation)(properties.intelligentTieringConfigurations),
        InventoryConfigurations: cdk.listMapper(cfnBucketInventoryConfigurationPropertyToCloudFormation)(properties.inventoryConfigurations),
        LifecycleConfiguration: cfnBucketLifecycleConfigurationPropertyToCloudFormation(properties.lifecycleConfiguration),
        LoggingConfiguration: cfnBucketLoggingConfigurationPropertyToCloudFormation(properties.loggingConfiguration),
        MetricsConfigurations: cdk.listMapper(cfnBucketMetricsConfigurationPropertyToCloudFormation)(properties.metricsConfigurations),
        NotificationConfiguration: cfnBucketNotificationConfigurationPropertyToCloudFormation(properties.notificationConfiguration),
        ObjectLockConfiguration: cfnBucketObjectLockConfigurationPropertyToCloudFormation(properties.objectLockConfiguration),
        ObjectLockEnabled: cdk.booleanToCloudFormation(properties.objectLockEnabled),
        OwnershipControls: cfnBucketOwnershipControlsPropertyToCloudFormation(properties.ownershipControls),
        PublicAccessBlockConfiguration: cfnBucketPublicAccessBlockConfigurationPropertyToCloudFormation(properties.publicAccessBlockConfiguration),
        ReplicationConfiguration: cfnBucketReplicationConfigurationPropertyToCloudFormation(properties.replicationConfiguration),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
        VersioningConfiguration: cfnBucketVersioningConfigurationPropertyToCloudFormation(properties.versioningConfiguration),
        WebsiteConfiguration: cfnBucketWebsiteConfigurationPropertyToCloudFormation(properties.websiteConfiguration)
      };
    }
    function CfnBucketPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("accelerateConfiguration", "AccelerateConfiguration", properties.AccelerateConfiguration != null ? CfnBucketAccelerateConfigurationPropertyFromCloudFormation(properties.AccelerateConfiguration) : void 0);
      ret.addPropertyResult("accessControl", "AccessControl", properties.AccessControl != null ? cfn_parse.FromCloudFormation.getString(properties.AccessControl) : void 0);
      ret.addPropertyResult("analyticsConfigurations", "AnalyticsConfigurations", properties.AnalyticsConfigurations != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketAnalyticsConfigurationPropertyFromCloudFormation)(properties.AnalyticsConfigurations) : void 0);
      ret.addPropertyResult("bucketEncryption", "BucketEncryption", properties.BucketEncryption != null ? CfnBucketBucketEncryptionPropertyFromCloudFormation(properties.BucketEncryption) : void 0);
      ret.addPropertyResult("bucketName", "BucketName", properties.BucketName != null ? cfn_parse.FromCloudFormation.getString(properties.BucketName) : void 0);
      ret.addPropertyResult("corsConfiguration", "CorsConfiguration", properties.CorsConfiguration != null ? CfnBucketCorsConfigurationPropertyFromCloudFormation(properties.CorsConfiguration) : void 0);
      ret.addPropertyResult("intelligentTieringConfigurations", "IntelligentTieringConfigurations", properties.IntelligentTieringConfigurations != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketIntelligentTieringConfigurationPropertyFromCloudFormation)(properties.IntelligentTieringConfigurations) : void 0);
      ret.addPropertyResult("inventoryConfigurations", "InventoryConfigurations", properties.InventoryConfigurations != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketInventoryConfigurationPropertyFromCloudFormation)(properties.InventoryConfigurations) : void 0);
      ret.addPropertyResult("lifecycleConfiguration", "LifecycleConfiguration", properties.LifecycleConfiguration != null ? CfnBucketLifecycleConfigurationPropertyFromCloudFormation(properties.LifecycleConfiguration) : void 0);
      ret.addPropertyResult("loggingConfiguration", "LoggingConfiguration", properties.LoggingConfiguration != null ? CfnBucketLoggingConfigurationPropertyFromCloudFormation(properties.LoggingConfiguration) : void 0);
      ret.addPropertyResult("metricsConfigurations", "MetricsConfigurations", properties.MetricsConfigurations != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketMetricsConfigurationPropertyFromCloudFormation)(properties.MetricsConfigurations) : void 0);
      ret.addPropertyResult("notificationConfiguration", "NotificationConfiguration", properties.NotificationConfiguration != null ? CfnBucketNotificationConfigurationPropertyFromCloudFormation(properties.NotificationConfiguration) : void 0);
      ret.addPropertyResult("objectLockConfiguration", "ObjectLockConfiguration", properties.ObjectLockConfiguration != null ? CfnBucketObjectLockConfigurationPropertyFromCloudFormation(properties.ObjectLockConfiguration) : void 0);
      ret.addPropertyResult("objectLockEnabled", "ObjectLockEnabled", properties.ObjectLockEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ObjectLockEnabled) : void 0);
      ret.addPropertyResult("ownershipControls", "OwnershipControls", properties.OwnershipControls != null ? CfnBucketOwnershipControlsPropertyFromCloudFormation(properties.OwnershipControls) : void 0);
      ret.addPropertyResult("publicAccessBlockConfiguration", "PublicAccessBlockConfiguration", properties.PublicAccessBlockConfiguration != null ? CfnBucketPublicAccessBlockConfigurationPropertyFromCloudFormation(properties.PublicAccessBlockConfiguration) : void 0);
      ret.addPropertyResult("replicationConfiguration", "ReplicationConfiguration", properties.ReplicationConfiguration != null ? CfnBucketReplicationConfigurationPropertyFromCloudFormation(properties.ReplicationConfiguration) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addPropertyResult("versioningConfiguration", "VersioningConfiguration", properties.VersioningConfiguration != null ? CfnBucketVersioningConfigurationPropertyFromCloudFormation(properties.VersioningConfiguration) : void 0);
      ret.addPropertyResult("websiteConfiguration", "WebsiteConfiguration", properties.WebsiteConfiguration != null ? CfnBucketWebsiteConfigurationPropertyFromCloudFormation(properties.WebsiteConfiguration) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnBucket = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnBucket.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.attrDomainName = cdk.Token.asString(this.getAtt("DomainName"));
        this.attrDualStackDomainName = cdk.Token.asString(this.getAtt("DualStackDomainName"));
        this.attrRegionalDomainName = cdk.Token.asString(this.getAtt("RegionalDomainName"));
        this.attrWebsiteUrl = cdk.Token.asString(this.getAtt("WebsiteURL"));
        this.accelerateConfiguration = props.accelerateConfiguration;
        this.accessControl = props.accessControl;
        this.analyticsConfigurations = props.analyticsConfigurations;
        this.bucketEncryption = props.bucketEncryption;
        this.bucketName = props.bucketName;
        this.corsConfiguration = props.corsConfiguration;
        this.intelligentTieringConfigurations = props.intelligentTieringConfigurations;
        this.inventoryConfigurations = props.inventoryConfigurations;
        this.lifecycleConfiguration = props.lifecycleConfiguration;
        this.loggingConfiguration = props.loggingConfiguration;
        this.metricsConfigurations = props.metricsConfigurations;
        this.notificationConfiguration = props.notificationConfiguration;
        this.objectLockConfiguration = props.objectLockConfiguration;
        this.objectLockEnabled = props.objectLockEnabled;
        this.ownershipControls = props.ownershipControls;
        this.publicAccessBlockConfiguration = props.publicAccessBlockConfiguration;
        this.replicationConfiguration = props.replicationConfiguration;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::S3::Bucket", props.tags, { tagPropertyName: "tags" });
        this.versioningConfiguration = props.versioningConfiguration;
        this.websiteConfiguration = props.websiteConfiguration;
        if (this.node.scope && cdk.Resource.isResource(this.node.scope)) {
          this.node.addValidation({ validate: () => this.cfnOptions.deletionPolicy === void 0 ? ["'AWS::S3::Bucket' is a stateful resource type, and you must specify a Removal Policy for it. Call 'resource.applyRemovalPolicy()'."] : [] });
        }
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnBucketPropsFromCloudFormation(resourceProperties);
        const ret = new CfnBucket(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnBucket.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          accelerateConfiguration: this.accelerateConfiguration,
          accessControl: this.accessControl,
          analyticsConfigurations: this.analyticsConfigurations,
          bucketEncryption: this.bucketEncryption,
          bucketName: this.bucketName,
          corsConfiguration: this.corsConfiguration,
          intelligentTieringConfigurations: this.intelligentTieringConfigurations,
          inventoryConfigurations: this.inventoryConfigurations,
          lifecycleConfiguration: this.lifecycleConfiguration,
          loggingConfiguration: this.loggingConfiguration,
          metricsConfigurations: this.metricsConfigurations,
          notificationConfiguration: this.notificationConfiguration,
          objectLockConfiguration: this.objectLockConfiguration,
          objectLockEnabled: this.objectLockEnabled,
          ownershipControls: this.ownershipControls,
          publicAccessBlockConfiguration: this.publicAccessBlockConfiguration,
          replicationConfiguration: this.replicationConfiguration,
          tags: this.tags.renderTags(),
          versioningConfiguration: this.versioningConfiguration,
          websiteConfiguration: this.websiteConfiguration
        };
      }
      renderProperties(props) {
        return cfnBucketPropsToCloudFormation(props);
      }
    };
    exports2.CfnBucket = CfnBucket;
    _b = JSII_RTTI_SYMBOL_1;
    CfnBucket[_b] = { fqn: "@aws-cdk/aws-s3.CfnBucket", version: "1.132.0" };
    CfnBucket.CFN_RESOURCE_TYPE_NAME = "AWS::S3::Bucket";
    function CfnBucket_AbortIncompleteMultipartUploadPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("daysAfterInitiation", cdk.requiredValidator)(properties.daysAfterInitiation));
      errors.collect(cdk.propertyValidator("daysAfterInitiation", cdk.validateNumber)(properties.daysAfterInitiation));
      return errors.wrap('supplied properties not correct for "AbortIncompleteMultipartUploadProperty"');
    }
    function cfnBucketAbortIncompleteMultipartUploadPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_AbortIncompleteMultipartUploadPropertyValidator(properties).assertSuccess();
      return {
        DaysAfterInitiation: cdk.numberToCloudFormation(properties.daysAfterInitiation)
      };
    }
    function CfnBucketAbortIncompleteMultipartUploadPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("daysAfterInitiation", "DaysAfterInitiation", cfn_parse.FromCloudFormation.getNumber(properties.DaysAfterInitiation));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_AccelerateConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("accelerationStatus", cdk.requiredValidator)(properties.accelerationStatus));
      errors.collect(cdk.propertyValidator("accelerationStatus", cdk.validateString)(properties.accelerationStatus));
      return errors.wrap('supplied properties not correct for "AccelerateConfigurationProperty"');
    }
    function cfnBucketAccelerateConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_AccelerateConfigurationPropertyValidator(properties).assertSuccess();
      return {
        AccelerationStatus: cdk.stringToCloudFormation(properties.accelerationStatus)
      };
    }
    function CfnBucketAccelerateConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("accelerationStatus", "AccelerationStatus", cfn_parse.FromCloudFormation.getString(properties.AccelerationStatus));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_AccessControlTranslationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("owner", cdk.requiredValidator)(properties.owner));
      errors.collect(cdk.propertyValidator("owner", cdk.validateString)(properties.owner));
      return errors.wrap('supplied properties not correct for "AccessControlTranslationProperty"');
    }
    function cfnBucketAccessControlTranslationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_AccessControlTranslationPropertyValidator(properties).assertSuccess();
      return {
        Owner: cdk.stringToCloudFormation(properties.owner)
      };
    }
    function CfnBucketAccessControlTranslationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("owner", "Owner", cfn_parse.FromCloudFormation.getString(properties.Owner));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_AnalyticsConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("id", cdk.requiredValidator)(properties.id));
      errors.collect(cdk.propertyValidator("id", cdk.validateString)(properties.id));
      errors.collect(cdk.propertyValidator("prefix", cdk.validateString)(properties.prefix));
      errors.collect(cdk.propertyValidator("storageClassAnalysis", cdk.requiredValidator)(properties.storageClassAnalysis));
      errors.collect(cdk.propertyValidator("storageClassAnalysis", CfnBucket_StorageClassAnalysisPropertyValidator)(properties.storageClassAnalysis));
      errors.collect(cdk.propertyValidator("tagFilters", cdk.listValidator(CfnBucket_TagFilterPropertyValidator))(properties.tagFilters));
      return errors.wrap('supplied properties not correct for "AnalyticsConfigurationProperty"');
    }
    function cfnBucketAnalyticsConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_AnalyticsConfigurationPropertyValidator(properties).assertSuccess();
      return {
        Id: cdk.stringToCloudFormation(properties.id),
        Prefix: cdk.stringToCloudFormation(properties.prefix),
        StorageClassAnalysis: cfnBucketStorageClassAnalysisPropertyToCloudFormation(properties.storageClassAnalysis),
        TagFilters: cdk.listMapper(cfnBucketTagFilterPropertyToCloudFormation)(properties.tagFilters)
      };
    }
    function CfnBucketAnalyticsConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("id", "Id", cfn_parse.FromCloudFormation.getString(properties.Id));
      ret.addPropertyResult("prefix", "Prefix", properties.Prefix != null ? cfn_parse.FromCloudFormation.getString(properties.Prefix) : void 0);
      ret.addPropertyResult("storageClassAnalysis", "StorageClassAnalysis", CfnBucketStorageClassAnalysisPropertyFromCloudFormation(properties.StorageClassAnalysis));
      ret.addPropertyResult("tagFilters", "TagFilters", properties.TagFilters != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketTagFilterPropertyFromCloudFormation)(properties.TagFilters) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_BucketEncryptionPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("serverSideEncryptionConfiguration", cdk.requiredValidator)(properties.serverSideEncryptionConfiguration));
      errors.collect(cdk.propertyValidator("serverSideEncryptionConfiguration", cdk.listValidator(CfnBucket_ServerSideEncryptionRulePropertyValidator))(properties.serverSideEncryptionConfiguration));
      return errors.wrap('supplied properties not correct for "BucketEncryptionProperty"');
    }
    function cfnBucketBucketEncryptionPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_BucketEncryptionPropertyValidator(properties).assertSuccess();
      return {
        ServerSideEncryptionConfiguration: cdk.listMapper(cfnBucketServerSideEncryptionRulePropertyToCloudFormation)(properties.serverSideEncryptionConfiguration)
      };
    }
    function CfnBucketBucketEncryptionPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("serverSideEncryptionConfiguration", "ServerSideEncryptionConfiguration", cfn_parse.FromCloudFormation.getArray(CfnBucketServerSideEncryptionRulePropertyFromCloudFormation)(properties.ServerSideEncryptionConfiguration));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_CorsConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("corsRules", cdk.requiredValidator)(properties.corsRules));
      errors.collect(cdk.propertyValidator("corsRules", cdk.listValidator(CfnBucket_CorsRulePropertyValidator))(properties.corsRules));
      return errors.wrap('supplied properties not correct for "CorsConfigurationProperty"');
    }
    function cfnBucketCorsConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_CorsConfigurationPropertyValidator(properties).assertSuccess();
      return {
        CorsRules: cdk.listMapper(cfnBucketCorsRulePropertyToCloudFormation)(properties.corsRules)
      };
    }
    function CfnBucketCorsConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("corsRules", "CorsRules", cfn_parse.FromCloudFormation.getArray(CfnBucketCorsRulePropertyFromCloudFormation)(properties.CorsRules));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_CorsRulePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("allowedHeaders", cdk.listValidator(cdk.validateString))(properties.allowedHeaders));
      errors.collect(cdk.propertyValidator("allowedMethods", cdk.requiredValidator)(properties.allowedMethods));
      errors.collect(cdk.propertyValidator("allowedMethods", cdk.listValidator(cdk.validateString))(properties.allowedMethods));
      errors.collect(cdk.propertyValidator("allowedOrigins", cdk.requiredValidator)(properties.allowedOrigins));
      errors.collect(cdk.propertyValidator("allowedOrigins", cdk.listValidator(cdk.validateString))(properties.allowedOrigins));
      errors.collect(cdk.propertyValidator("exposedHeaders", cdk.listValidator(cdk.validateString))(properties.exposedHeaders));
      errors.collect(cdk.propertyValidator("id", cdk.validateString)(properties.id));
      errors.collect(cdk.propertyValidator("maxAge", cdk.validateNumber)(properties.maxAge));
      return errors.wrap('supplied properties not correct for "CorsRuleProperty"');
    }
    function cfnBucketCorsRulePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_CorsRulePropertyValidator(properties).assertSuccess();
      return {
        AllowedHeaders: cdk.listMapper(cdk.stringToCloudFormation)(properties.allowedHeaders),
        AllowedMethods: cdk.listMapper(cdk.stringToCloudFormation)(properties.allowedMethods),
        AllowedOrigins: cdk.listMapper(cdk.stringToCloudFormation)(properties.allowedOrigins),
        ExposedHeaders: cdk.listMapper(cdk.stringToCloudFormation)(properties.exposedHeaders),
        Id: cdk.stringToCloudFormation(properties.id),
        MaxAge: cdk.numberToCloudFormation(properties.maxAge)
      };
    }
    function CfnBucketCorsRulePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("allowedHeaders", "AllowedHeaders", properties.AllowedHeaders != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AllowedHeaders) : void 0);
      ret.addPropertyResult("allowedMethods", "AllowedMethods", cfn_parse.FromCloudFormation.getStringArray(properties.AllowedMethods));
      ret.addPropertyResult("allowedOrigins", "AllowedOrigins", cfn_parse.FromCloudFormation.getStringArray(properties.AllowedOrigins));
      ret.addPropertyResult("exposedHeaders", "ExposedHeaders", properties.ExposedHeaders != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ExposedHeaders) : void 0);
      ret.addPropertyResult("id", "Id", properties.Id != null ? cfn_parse.FromCloudFormation.getString(properties.Id) : void 0);
      ret.addPropertyResult("maxAge", "MaxAge", properties.MaxAge != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxAge) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_DataExportPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("destination", cdk.requiredValidator)(properties.destination));
      errors.collect(cdk.propertyValidator("destination", CfnBucket_DestinationPropertyValidator)(properties.destination));
      errors.collect(cdk.propertyValidator("outputSchemaVersion", cdk.requiredValidator)(properties.outputSchemaVersion));
      errors.collect(cdk.propertyValidator("outputSchemaVersion", cdk.validateString)(properties.outputSchemaVersion));
      return errors.wrap('supplied properties not correct for "DataExportProperty"');
    }
    function cfnBucketDataExportPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_DataExportPropertyValidator(properties).assertSuccess();
      return {
        Destination: cfnBucketDestinationPropertyToCloudFormation(properties.destination),
        OutputSchemaVersion: cdk.stringToCloudFormation(properties.outputSchemaVersion)
      };
    }
    function CfnBucketDataExportPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("destination", "Destination", CfnBucketDestinationPropertyFromCloudFormation(properties.Destination));
      ret.addPropertyResult("outputSchemaVersion", "OutputSchemaVersion", cfn_parse.FromCloudFormation.getString(properties.OutputSchemaVersion));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_DefaultRetentionPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("days", cdk.validateNumber)(properties.days));
      errors.collect(cdk.propertyValidator("mode", cdk.validateString)(properties.mode));
      errors.collect(cdk.propertyValidator("years", cdk.validateNumber)(properties.years));
      return errors.wrap('supplied properties not correct for "DefaultRetentionProperty"');
    }
    function cfnBucketDefaultRetentionPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_DefaultRetentionPropertyValidator(properties).assertSuccess();
      return {
        Days: cdk.numberToCloudFormation(properties.days),
        Mode: cdk.stringToCloudFormation(properties.mode),
        Years: cdk.numberToCloudFormation(properties.years)
      };
    }
    function CfnBucketDefaultRetentionPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("days", "Days", properties.Days != null ? cfn_parse.FromCloudFormation.getNumber(properties.Days) : void 0);
      ret.addPropertyResult("mode", "Mode", properties.Mode != null ? cfn_parse.FromCloudFormation.getString(properties.Mode) : void 0);
      ret.addPropertyResult("years", "Years", properties.Years != null ? cfn_parse.FromCloudFormation.getNumber(properties.Years) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_DeleteMarkerReplicationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("status", cdk.validateString)(properties.status));
      return errors.wrap('supplied properties not correct for "DeleteMarkerReplicationProperty"');
    }
    function cfnBucketDeleteMarkerReplicationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_DeleteMarkerReplicationPropertyValidator(properties).assertSuccess();
      return {
        Status: cdk.stringToCloudFormation(properties.status)
      };
    }
    function CfnBucketDeleteMarkerReplicationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("status", "Status", properties.Status != null ? cfn_parse.FromCloudFormation.getString(properties.Status) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_DestinationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("bucketAccountId", cdk.validateString)(properties.bucketAccountId));
      errors.collect(cdk.propertyValidator("bucketArn", cdk.requiredValidator)(properties.bucketArn));
      errors.collect(cdk.propertyValidator("bucketArn", cdk.validateString)(properties.bucketArn));
      errors.collect(cdk.propertyValidator("format", cdk.requiredValidator)(properties.format));
      errors.collect(cdk.propertyValidator("format", cdk.validateString)(properties.format));
      errors.collect(cdk.propertyValidator("prefix", cdk.validateString)(properties.prefix));
      return errors.wrap('supplied properties not correct for "DestinationProperty"');
    }
    function cfnBucketDestinationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_DestinationPropertyValidator(properties).assertSuccess();
      return {
        BucketAccountId: cdk.stringToCloudFormation(properties.bucketAccountId),
        BucketArn: cdk.stringToCloudFormation(properties.bucketArn),
        Format: cdk.stringToCloudFormation(properties.format),
        Prefix: cdk.stringToCloudFormation(properties.prefix)
      };
    }
    function CfnBucketDestinationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("bucketAccountId", "BucketAccountId", properties.BucketAccountId != null ? cfn_parse.FromCloudFormation.getString(properties.BucketAccountId) : void 0);
      ret.addPropertyResult("bucketArn", "BucketArn", cfn_parse.FromCloudFormation.getString(properties.BucketArn));
      ret.addPropertyResult("format", "Format", cfn_parse.FromCloudFormation.getString(properties.Format));
      ret.addPropertyResult("prefix", "Prefix", properties.Prefix != null ? cfn_parse.FromCloudFormation.getString(properties.Prefix) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_EncryptionConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("replicaKmsKeyId", cdk.requiredValidator)(properties.replicaKmsKeyId));
      errors.collect(cdk.propertyValidator("replicaKmsKeyId", cdk.validateString)(properties.replicaKmsKeyId));
      return errors.wrap('supplied properties not correct for "EncryptionConfigurationProperty"');
    }
    function cfnBucketEncryptionConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_EncryptionConfigurationPropertyValidator(properties).assertSuccess();
      return {
        ReplicaKmsKeyID: cdk.stringToCloudFormation(properties.replicaKmsKeyId)
      };
    }
    function CfnBucketEncryptionConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("replicaKmsKeyId", "ReplicaKmsKeyID", cfn_parse.FromCloudFormation.getString(properties.ReplicaKmsKeyID));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_FilterRulePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("name", cdk.requiredValidator)(properties.name));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("value", cdk.requiredValidator)(properties.value));
      errors.collect(cdk.propertyValidator("value", cdk.validateString)(properties.value));
      return errors.wrap('supplied properties not correct for "FilterRuleProperty"');
    }
    function cfnBucketFilterRulePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_FilterRulePropertyValidator(properties).assertSuccess();
      return {
        Name: cdk.stringToCloudFormation(properties.name),
        Value: cdk.stringToCloudFormation(properties.value)
      };
    }
    function CfnBucketFilterRulePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("name", "Name", cfn_parse.FromCloudFormation.getString(properties.Name));
      ret.addPropertyResult("value", "Value", cfn_parse.FromCloudFormation.getString(properties.Value));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_IntelligentTieringConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("id", cdk.requiredValidator)(properties.id));
      errors.collect(cdk.propertyValidator("id", cdk.validateString)(properties.id));
      errors.collect(cdk.propertyValidator("prefix", cdk.validateString)(properties.prefix));
      errors.collect(cdk.propertyValidator("status", cdk.requiredValidator)(properties.status));
      errors.collect(cdk.propertyValidator("status", cdk.validateString)(properties.status));
      errors.collect(cdk.propertyValidator("tagFilters", cdk.listValidator(CfnBucket_TagFilterPropertyValidator))(properties.tagFilters));
      errors.collect(cdk.propertyValidator("tierings", cdk.requiredValidator)(properties.tierings));
      errors.collect(cdk.propertyValidator("tierings", cdk.listValidator(CfnBucket_TieringPropertyValidator))(properties.tierings));
      return errors.wrap('supplied properties not correct for "IntelligentTieringConfigurationProperty"');
    }
    function cfnBucketIntelligentTieringConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_IntelligentTieringConfigurationPropertyValidator(properties).assertSuccess();
      return {
        Id: cdk.stringToCloudFormation(properties.id),
        Prefix: cdk.stringToCloudFormation(properties.prefix),
        Status: cdk.stringToCloudFormation(properties.status),
        TagFilters: cdk.listMapper(cfnBucketTagFilterPropertyToCloudFormation)(properties.tagFilters),
        Tierings: cdk.listMapper(cfnBucketTieringPropertyToCloudFormation)(properties.tierings)
      };
    }
    function CfnBucketIntelligentTieringConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("id", "Id", cfn_parse.FromCloudFormation.getString(properties.Id));
      ret.addPropertyResult("prefix", "Prefix", properties.Prefix != null ? cfn_parse.FromCloudFormation.getString(properties.Prefix) : void 0);
      ret.addPropertyResult("status", "Status", cfn_parse.FromCloudFormation.getString(properties.Status));
      ret.addPropertyResult("tagFilters", "TagFilters", properties.TagFilters != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketTagFilterPropertyFromCloudFormation)(properties.TagFilters) : void 0);
      ret.addPropertyResult("tierings", "Tierings", cfn_parse.FromCloudFormation.getArray(CfnBucketTieringPropertyFromCloudFormation)(properties.Tierings));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_InventoryConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("destination", cdk.requiredValidator)(properties.destination));
      errors.collect(cdk.propertyValidator("destination", CfnBucket_DestinationPropertyValidator)(properties.destination));
      errors.collect(cdk.propertyValidator("enabled", cdk.requiredValidator)(properties.enabled));
      errors.collect(cdk.propertyValidator("enabled", cdk.validateBoolean)(properties.enabled));
      errors.collect(cdk.propertyValidator("id", cdk.requiredValidator)(properties.id));
      errors.collect(cdk.propertyValidator("id", cdk.validateString)(properties.id));
      errors.collect(cdk.propertyValidator("includedObjectVersions", cdk.requiredValidator)(properties.includedObjectVersions));
      errors.collect(cdk.propertyValidator("includedObjectVersions", cdk.validateString)(properties.includedObjectVersions));
      errors.collect(cdk.propertyValidator("optionalFields", cdk.listValidator(cdk.validateString))(properties.optionalFields));
      errors.collect(cdk.propertyValidator("prefix", cdk.validateString)(properties.prefix));
      errors.collect(cdk.propertyValidator("scheduleFrequency", cdk.requiredValidator)(properties.scheduleFrequency));
      errors.collect(cdk.propertyValidator("scheduleFrequency", cdk.validateString)(properties.scheduleFrequency));
      return errors.wrap('supplied properties not correct for "InventoryConfigurationProperty"');
    }
    function cfnBucketInventoryConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_InventoryConfigurationPropertyValidator(properties).assertSuccess();
      return {
        Destination: cfnBucketDestinationPropertyToCloudFormation(properties.destination),
        Enabled: cdk.booleanToCloudFormation(properties.enabled),
        Id: cdk.stringToCloudFormation(properties.id),
        IncludedObjectVersions: cdk.stringToCloudFormation(properties.includedObjectVersions),
        OptionalFields: cdk.listMapper(cdk.stringToCloudFormation)(properties.optionalFields),
        Prefix: cdk.stringToCloudFormation(properties.prefix),
        ScheduleFrequency: cdk.stringToCloudFormation(properties.scheduleFrequency)
      };
    }
    function CfnBucketInventoryConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("destination", "Destination", CfnBucketDestinationPropertyFromCloudFormation(properties.Destination));
      ret.addPropertyResult("enabled", "Enabled", cfn_parse.FromCloudFormation.getBoolean(properties.Enabled));
      ret.addPropertyResult("id", "Id", cfn_parse.FromCloudFormation.getString(properties.Id));
      ret.addPropertyResult("includedObjectVersions", "IncludedObjectVersions", cfn_parse.FromCloudFormation.getString(properties.IncludedObjectVersions));
      ret.addPropertyResult("optionalFields", "OptionalFields", properties.OptionalFields != null ? cfn_parse.FromCloudFormation.getStringArray(properties.OptionalFields) : void 0);
      ret.addPropertyResult("prefix", "Prefix", properties.Prefix != null ? cfn_parse.FromCloudFormation.getString(properties.Prefix) : void 0);
      ret.addPropertyResult("scheduleFrequency", "ScheduleFrequency", cfn_parse.FromCloudFormation.getString(properties.ScheduleFrequency));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_LambdaConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("event", cdk.requiredValidator)(properties.event));
      errors.collect(cdk.propertyValidator("event", cdk.validateString)(properties.event));
      errors.collect(cdk.propertyValidator("filter", CfnBucket_NotificationFilterPropertyValidator)(properties.filter));
      errors.collect(cdk.propertyValidator("function", cdk.requiredValidator)(properties.function));
      errors.collect(cdk.propertyValidator("function", cdk.validateString)(properties.function));
      return errors.wrap('supplied properties not correct for "LambdaConfigurationProperty"');
    }
    function cfnBucketLambdaConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_LambdaConfigurationPropertyValidator(properties).assertSuccess();
      return {
        Event: cdk.stringToCloudFormation(properties.event),
        Filter: cfnBucketNotificationFilterPropertyToCloudFormation(properties.filter),
        Function: cdk.stringToCloudFormation(properties.function)
      };
    }
    function CfnBucketLambdaConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("event", "Event", cfn_parse.FromCloudFormation.getString(properties.Event));
      ret.addPropertyResult("filter", "Filter", properties.Filter != null ? CfnBucketNotificationFilterPropertyFromCloudFormation(properties.Filter) : void 0);
      ret.addPropertyResult("function", "Function", cfn_parse.FromCloudFormation.getString(properties.Function));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_LifecycleConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("rules", cdk.requiredValidator)(properties.rules));
      errors.collect(cdk.propertyValidator("rules", cdk.listValidator(CfnBucket_RulePropertyValidator))(properties.rules));
      return errors.wrap('supplied properties not correct for "LifecycleConfigurationProperty"');
    }
    function cfnBucketLifecycleConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_LifecycleConfigurationPropertyValidator(properties).assertSuccess();
      return {
        Rules: cdk.listMapper(cfnBucketRulePropertyToCloudFormation)(properties.rules)
      };
    }
    function CfnBucketLifecycleConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("rules", "Rules", cfn_parse.FromCloudFormation.getArray(CfnBucketRulePropertyFromCloudFormation)(properties.Rules));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_LoggingConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("destinationBucketName", cdk.validateString)(properties.destinationBucketName));
      errors.collect(cdk.propertyValidator("logFilePrefix", cdk.validateString)(properties.logFilePrefix));
      return errors.wrap('supplied properties not correct for "LoggingConfigurationProperty"');
    }
    function cfnBucketLoggingConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_LoggingConfigurationPropertyValidator(properties).assertSuccess();
      return {
        DestinationBucketName: cdk.stringToCloudFormation(properties.destinationBucketName),
        LogFilePrefix: cdk.stringToCloudFormation(properties.logFilePrefix)
      };
    }
    function CfnBucketLoggingConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("destinationBucketName", "DestinationBucketName", properties.DestinationBucketName != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationBucketName) : void 0);
      ret.addPropertyResult("logFilePrefix", "LogFilePrefix", properties.LogFilePrefix != null ? cfn_parse.FromCloudFormation.getString(properties.LogFilePrefix) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_MetricsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("eventThreshold", CfnBucket_ReplicationTimeValuePropertyValidator)(properties.eventThreshold));
      errors.collect(cdk.propertyValidator("status", cdk.requiredValidator)(properties.status));
      errors.collect(cdk.propertyValidator("status", cdk.validateString)(properties.status));
      return errors.wrap('supplied properties not correct for "MetricsProperty"');
    }
    function cfnBucketMetricsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_MetricsPropertyValidator(properties).assertSuccess();
      return {
        EventThreshold: cfnBucketReplicationTimeValuePropertyToCloudFormation(properties.eventThreshold),
        Status: cdk.stringToCloudFormation(properties.status)
      };
    }
    function CfnBucketMetricsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("eventThreshold", "EventThreshold", properties.EventThreshold != null ? CfnBucketReplicationTimeValuePropertyFromCloudFormation(properties.EventThreshold) : void 0);
      ret.addPropertyResult("status", "Status", cfn_parse.FromCloudFormation.getString(properties.Status));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_MetricsConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("accessPointArn", cdk.validateString)(properties.accessPointArn));
      errors.collect(cdk.propertyValidator("id", cdk.requiredValidator)(properties.id));
      errors.collect(cdk.propertyValidator("id", cdk.validateString)(properties.id));
      errors.collect(cdk.propertyValidator("prefix", cdk.validateString)(properties.prefix));
      errors.collect(cdk.propertyValidator("tagFilters", cdk.listValidator(CfnBucket_TagFilterPropertyValidator))(properties.tagFilters));
      return errors.wrap('supplied properties not correct for "MetricsConfigurationProperty"');
    }
    function cfnBucketMetricsConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_MetricsConfigurationPropertyValidator(properties).assertSuccess();
      return {
        AccessPointArn: cdk.stringToCloudFormation(properties.accessPointArn),
        Id: cdk.stringToCloudFormation(properties.id),
        Prefix: cdk.stringToCloudFormation(properties.prefix),
        TagFilters: cdk.listMapper(cfnBucketTagFilterPropertyToCloudFormation)(properties.tagFilters)
      };
    }
    function CfnBucketMetricsConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("accessPointArn", "AccessPointArn", properties.AccessPointArn != null ? cfn_parse.FromCloudFormation.getString(properties.AccessPointArn) : void 0);
      ret.addPropertyResult("id", "Id", cfn_parse.FromCloudFormation.getString(properties.Id));
      ret.addPropertyResult("prefix", "Prefix", properties.Prefix != null ? cfn_parse.FromCloudFormation.getString(properties.Prefix) : void 0);
      ret.addPropertyResult("tagFilters", "TagFilters", properties.TagFilters != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketTagFilterPropertyFromCloudFormation)(properties.TagFilters) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_NoncurrentVersionTransitionPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("storageClass", cdk.requiredValidator)(properties.storageClass));
      errors.collect(cdk.propertyValidator("storageClass", cdk.validateString)(properties.storageClass));
      errors.collect(cdk.propertyValidator("transitionInDays", cdk.requiredValidator)(properties.transitionInDays));
      errors.collect(cdk.propertyValidator("transitionInDays", cdk.validateNumber)(properties.transitionInDays));
      return errors.wrap('supplied properties not correct for "NoncurrentVersionTransitionProperty"');
    }
    function cfnBucketNoncurrentVersionTransitionPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_NoncurrentVersionTransitionPropertyValidator(properties).assertSuccess();
      return {
        StorageClass: cdk.stringToCloudFormation(properties.storageClass),
        TransitionInDays: cdk.numberToCloudFormation(properties.transitionInDays)
      };
    }
    function CfnBucketNoncurrentVersionTransitionPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("storageClass", "StorageClass", cfn_parse.FromCloudFormation.getString(properties.StorageClass));
      ret.addPropertyResult("transitionInDays", "TransitionInDays", cfn_parse.FromCloudFormation.getNumber(properties.TransitionInDays));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_NotificationConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("lambdaConfigurations", cdk.listValidator(CfnBucket_LambdaConfigurationPropertyValidator))(properties.lambdaConfigurations));
      errors.collect(cdk.propertyValidator("queueConfigurations", cdk.listValidator(CfnBucket_QueueConfigurationPropertyValidator))(properties.queueConfigurations));
      errors.collect(cdk.propertyValidator("topicConfigurations", cdk.listValidator(CfnBucket_TopicConfigurationPropertyValidator))(properties.topicConfigurations));
      return errors.wrap('supplied properties not correct for "NotificationConfigurationProperty"');
    }
    function cfnBucketNotificationConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_NotificationConfigurationPropertyValidator(properties).assertSuccess();
      return {
        LambdaConfigurations: cdk.listMapper(cfnBucketLambdaConfigurationPropertyToCloudFormation)(properties.lambdaConfigurations),
        QueueConfigurations: cdk.listMapper(cfnBucketQueueConfigurationPropertyToCloudFormation)(properties.queueConfigurations),
        TopicConfigurations: cdk.listMapper(cfnBucketTopicConfigurationPropertyToCloudFormation)(properties.topicConfigurations)
      };
    }
    function CfnBucketNotificationConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("lambdaConfigurations", "LambdaConfigurations", properties.LambdaConfigurations != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketLambdaConfigurationPropertyFromCloudFormation)(properties.LambdaConfigurations) : void 0);
      ret.addPropertyResult("queueConfigurations", "QueueConfigurations", properties.QueueConfigurations != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketQueueConfigurationPropertyFromCloudFormation)(properties.QueueConfigurations) : void 0);
      ret.addPropertyResult("topicConfigurations", "TopicConfigurations", properties.TopicConfigurations != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketTopicConfigurationPropertyFromCloudFormation)(properties.TopicConfigurations) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_NotificationFilterPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("s3Key", cdk.requiredValidator)(properties.s3Key));
      errors.collect(cdk.propertyValidator("s3Key", CfnBucket_S3KeyFilterPropertyValidator)(properties.s3Key));
      return errors.wrap('supplied properties not correct for "NotificationFilterProperty"');
    }
    function cfnBucketNotificationFilterPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_NotificationFilterPropertyValidator(properties).assertSuccess();
      return {
        S3Key: cfnBucketS3KeyFilterPropertyToCloudFormation(properties.s3Key)
      };
    }
    function CfnBucketNotificationFilterPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("s3Key", "S3Key", CfnBucketS3KeyFilterPropertyFromCloudFormation(properties.S3Key));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_ObjectLockConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("objectLockEnabled", cdk.validateString)(properties.objectLockEnabled));
      errors.collect(cdk.propertyValidator("rule", CfnBucket_ObjectLockRulePropertyValidator)(properties.rule));
      return errors.wrap('supplied properties not correct for "ObjectLockConfigurationProperty"');
    }
    function cfnBucketObjectLockConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_ObjectLockConfigurationPropertyValidator(properties).assertSuccess();
      return {
        ObjectLockEnabled: cdk.stringToCloudFormation(properties.objectLockEnabled),
        Rule: cfnBucketObjectLockRulePropertyToCloudFormation(properties.rule)
      };
    }
    function CfnBucketObjectLockConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("objectLockEnabled", "ObjectLockEnabled", properties.ObjectLockEnabled != null ? cfn_parse.FromCloudFormation.getString(properties.ObjectLockEnabled) : void 0);
      ret.addPropertyResult("rule", "Rule", properties.Rule != null ? CfnBucketObjectLockRulePropertyFromCloudFormation(properties.Rule) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_ObjectLockRulePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("defaultRetention", CfnBucket_DefaultRetentionPropertyValidator)(properties.defaultRetention));
      return errors.wrap('supplied properties not correct for "ObjectLockRuleProperty"');
    }
    function cfnBucketObjectLockRulePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_ObjectLockRulePropertyValidator(properties).assertSuccess();
      return {
        DefaultRetention: cfnBucketDefaultRetentionPropertyToCloudFormation(properties.defaultRetention)
      };
    }
    function CfnBucketObjectLockRulePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("defaultRetention", "DefaultRetention", properties.DefaultRetention != null ? CfnBucketDefaultRetentionPropertyFromCloudFormation(properties.DefaultRetention) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_OwnershipControlsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("rules", cdk.requiredValidator)(properties.rules));
      errors.collect(cdk.propertyValidator("rules", cdk.listValidator(CfnBucket_OwnershipControlsRulePropertyValidator))(properties.rules));
      return errors.wrap('supplied properties not correct for "OwnershipControlsProperty"');
    }
    function cfnBucketOwnershipControlsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_OwnershipControlsPropertyValidator(properties).assertSuccess();
      return {
        Rules: cdk.listMapper(cfnBucketOwnershipControlsRulePropertyToCloudFormation)(properties.rules)
      };
    }
    function CfnBucketOwnershipControlsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("rules", "Rules", cfn_parse.FromCloudFormation.getArray(CfnBucketOwnershipControlsRulePropertyFromCloudFormation)(properties.Rules));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_OwnershipControlsRulePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("objectOwnership", cdk.validateString)(properties.objectOwnership));
      return errors.wrap('supplied properties not correct for "OwnershipControlsRuleProperty"');
    }
    function cfnBucketOwnershipControlsRulePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_OwnershipControlsRulePropertyValidator(properties).assertSuccess();
      return {
        ObjectOwnership: cdk.stringToCloudFormation(properties.objectOwnership)
      };
    }
    function CfnBucketOwnershipControlsRulePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("objectOwnership", "ObjectOwnership", properties.ObjectOwnership != null ? cfn_parse.FromCloudFormation.getString(properties.ObjectOwnership) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_PublicAccessBlockConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("blockPublicAcls", cdk.validateBoolean)(properties.blockPublicAcls));
      errors.collect(cdk.propertyValidator("blockPublicPolicy", cdk.validateBoolean)(properties.blockPublicPolicy));
      errors.collect(cdk.propertyValidator("ignorePublicAcls", cdk.validateBoolean)(properties.ignorePublicAcls));
      errors.collect(cdk.propertyValidator("restrictPublicBuckets", cdk.validateBoolean)(properties.restrictPublicBuckets));
      return errors.wrap('supplied properties not correct for "PublicAccessBlockConfigurationProperty"');
    }
    function cfnBucketPublicAccessBlockConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_PublicAccessBlockConfigurationPropertyValidator(properties).assertSuccess();
      return {
        BlockPublicAcls: cdk.booleanToCloudFormation(properties.blockPublicAcls),
        BlockPublicPolicy: cdk.booleanToCloudFormation(properties.blockPublicPolicy),
        IgnorePublicAcls: cdk.booleanToCloudFormation(properties.ignorePublicAcls),
        RestrictPublicBuckets: cdk.booleanToCloudFormation(properties.restrictPublicBuckets)
      };
    }
    function CfnBucketPublicAccessBlockConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("blockPublicAcls", "BlockPublicAcls", properties.BlockPublicAcls != null ? cfn_parse.FromCloudFormation.getBoolean(properties.BlockPublicAcls) : void 0);
      ret.addPropertyResult("blockPublicPolicy", "BlockPublicPolicy", properties.BlockPublicPolicy != null ? cfn_parse.FromCloudFormation.getBoolean(properties.BlockPublicPolicy) : void 0);
      ret.addPropertyResult("ignorePublicAcls", "IgnorePublicAcls", properties.IgnorePublicAcls != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IgnorePublicAcls) : void 0);
      ret.addPropertyResult("restrictPublicBuckets", "RestrictPublicBuckets", properties.RestrictPublicBuckets != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RestrictPublicBuckets) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_QueueConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("event", cdk.requiredValidator)(properties.event));
      errors.collect(cdk.propertyValidator("event", cdk.validateString)(properties.event));
      errors.collect(cdk.propertyValidator("filter", CfnBucket_NotificationFilterPropertyValidator)(properties.filter));
      errors.collect(cdk.propertyValidator("queue", cdk.requiredValidator)(properties.queue));
      errors.collect(cdk.propertyValidator("queue", cdk.validateString)(properties.queue));
      return errors.wrap('supplied properties not correct for "QueueConfigurationProperty"');
    }
    function cfnBucketQueueConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_QueueConfigurationPropertyValidator(properties).assertSuccess();
      return {
        Event: cdk.stringToCloudFormation(properties.event),
        Filter: cfnBucketNotificationFilterPropertyToCloudFormation(properties.filter),
        Queue: cdk.stringToCloudFormation(properties.queue)
      };
    }
    function CfnBucketQueueConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("event", "Event", cfn_parse.FromCloudFormation.getString(properties.Event));
      ret.addPropertyResult("filter", "Filter", properties.Filter != null ? CfnBucketNotificationFilterPropertyFromCloudFormation(properties.Filter) : void 0);
      ret.addPropertyResult("queue", "Queue", cfn_parse.FromCloudFormation.getString(properties.Queue));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_RedirectAllRequestsToPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("hostName", cdk.requiredValidator)(properties.hostName));
      errors.collect(cdk.propertyValidator("hostName", cdk.validateString)(properties.hostName));
      errors.collect(cdk.propertyValidator("protocol", cdk.validateString)(properties.protocol));
      return errors.wrap('supplied properties not correct for "RedirectAllRequestsToProperty"');
    }
    function cfnBucketRedirectAllRequestsToPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_RedirectAllRequestsToPropertyValidator(properties).assertSuccess();
      return {
        HostName: cdk.stringToCloudFormation(properties.hostName),
        Protocol: cdk.stringToCloudFormation(properties.protocol)
      };
    }
    function CfnBucketRedirectAllRequestsToPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("hostName", "HostName", cfn_parse.FromCloudFormation.getString(properties.HostName));
      ret.addPropertyResult("protocol", "Protocol", properties.Protocol != null ? cfn_parse.FromCloudFormation.getString(properties.Protocol) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_RedirectRulePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("hostName", cdk.validateString)(properties.hostName));
      errors.collect(cdk.propertyValidator("httpRedirectCode", cdk.validateString)(properties.httpRedirectCode));
      errors.collect(cdk.propertyValidator("protocol", cdk.validateString)(properties.protocol));
      errors.collect(cdk.propertyValidator("replaceKeyPrefixWith", cdk.validateString)(properties.replaceKeyPrefixWith));
      errors.collect(cdk.propertyValidator("replaceKeyWith", cdk.validateString)(properties.replaceKeyWith));
      return errors.wrap('supplied properties not correct for "RedirectRuleProperty"');
    }
    function cfnBucketRedirectRulePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_RedirectRulePropertyValidator(properties).assertSuccess();
      return {
        HostName: cdk.stringToCloudFormation(properties.hostName),
        HttpRedirectCode: cdk.stringToCloudFormation(properties.httpRedirectCode),
        Protocol: cdk.stringToCloudFormation(properties.protocol),
        ReplaceKeyPrefixWith: cdk.stringToCloudFormation(properties.replaceKeyPrefixWith),
        ReplaceKeyWith: cdk.stringToCloudFormation(properties.replaceKeyWith)
      };
    }
    function CfnBucketRedirectRulePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("hostName", "HostName", properties.HostName != null ? cfn_parse.FromCloudFormation.getString(properties.HostName) : void 0);
      ret.addPropertyResult("httpRedirectCode", "HttpRedirectCode", properties.HttpRedirectCode != null ? cfn_parse.FromCloudFormation.getString(properties.HttpRedirectCode) : void 0);
      ret.addPropertyResult("protocol", "Protocol", properties.Protocol != null ? cfn_parse.FromCloudFormation.getString(properties.Protocol) : void 0);
      ret.addPropertyResult("replaceKeyPrefixWith", "ReplaceKeyPrefixWith", properties.ReplaceKeyPrefixWith != null ? cfn_parse.FromCloudFormation.getString(properties.ReplaceKeyPrefixWith) : void 0);
      ret.addPropertyResult("replaceKeyWith", "ReplaceKeyWith", properties.ReplaceKeyWith != null ? cfn_parse.FromCloudFormation.getString(properties.ReplaceKeyWith) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_ReplicaModificationsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("status", cdk.requiredValidator)(properties.status));
      errors.collect(cdk.propertyValidator("status", cdk.validateString)(properties.status));
      return errors.wrap('supplied properties not correct for "ReplicaModificationsProperty"');
    }
    function cfnBucketReplicaModificationsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_ReplicaModificationsPropertyValidator(properties).assertSuccess();
      return {
        Status: cdk.stringToCloudFormation(properties.status)
      };
    }
    function CfnBucketReplicaModificationsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("status", "Status", cfn_parse.FromCloudFormation.getString(properties.Status));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_ReplicationConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("role", cdk.requiredValidator)(properties.role));
      errors.collect(cdk.propertyValidator("role", cdk.validateString)(properties.role));
      errors.collect(cdk.propertyValidator("rules", cdk.requiredValidator)(properties.rules));
      errors.collect(cdk.propertyValidator("rules", cdk.listValidator(CfnBucket_ReplicationRulePropertyValidator))(properties.rules));
      return errors.wrap('supplied properties not correct for "ReplicationConfigurationProperty"');
    }
    function cfnBucketReplicationConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_ReplicationConfigurationPropertyValidator(properties).assertSuccess();
      return {
        Role: cdk.stringToCloudFormation(properties.role),
        Rules: cdk.listMapper(cfnBucketReplicationRulePropertyToCloudFormation)(properties.rules)
      };
    }
    function CfnBucketReplicationConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("role", "Role", cfn_parse.FromCloudFormation.getString(properties.Role));
      ret.addPropertyResult("rules", "Rules", cfn_parse.FromCloudFormation.getArray(CfnBucketReplicationRulePropertyFromCloudFormation)(properties.Rules));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_ReplicationDestinationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("accessControlTranslation", CfnBucket_AccessControlTranslationPropertyValidator)(properties.accessControlTranslation));
      errors.collect(cdk.propertyValidator("account", cdk.validateString)(properties.account));
      errors.collect(cdk.propertyValidator("bucket", cdk.requiredValidator)(properties.bucket));
      errors.collect(cdk.propertyValidator("bucket", cdk.validateString)(properties.bucket));
      errors.collect(cdk.propertyValidator("encryptionConfiguration", CfnBucket_EncryptionConfigurationPropertyValidator)(properties.encryptionConfiguration));
      errors.collect(cdk.propertyValidator("metrics", CfnBucket_MetricsPropertyValidator)(properties.metrics));
      errors.collect(cdk.propertyValidator("replicationTime", CfnBucket_ReplicationTimePropertyValidator)(properties.replicationTime));
      errors.collect(cdk.propertyValidator("storageClass", cdk.validateString)(properties.storageClass));
      return errors.wrap('supplied properties not correct for "ReplicationDestinationProperty"');
    }
    function cfnBucketReplicationDestinationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_ReplicationDestinationPropertyValidator(properties).assertSuccess();
      return {
        AccessControlTranslation: cfnBucketAccessControlTranslationPropertyToCloudFormation(properties.accessControlTranslation),
        Account: cdk.stringToCloudFormation(properties.account),
        Bucket: cdk.stringToCloudFormation(properties.bucket),
        EncryptionConfiguration: cfnBucketEncryptionConfigurationPropertyToCloudFormation(properties.encryptionConfiguration),
        Metrics: cfnBucketMetricsPropertyToCloudFormation(properties.metrics),
        ReplicationTime: cfnBucketReplicationTimePropertyToCloudFormation(properties.replicationTime),
        StorageClass: cdk.stringToCloudFormation(properties.storageClass)
      };
    }
    function CfnBucketReplicationDestinationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("accessControlTranslation", "AccessControlTranslation", properties.AccessControlTranslation != null ? CfnBucketAccessControlTranslationPropertyFromCloudFormation(properties.AccessControlTranslation) : void 0);
      ret.addPropertyResult("account", "Account", properties.Account != null ? cfn_parse.FromCloudFormation.getString(properties.Account) : void 0);
      ret.addPropertyResult("bucket", "Bucket", cfn_parse.FromCloudFormation.getString(properties.Bucket));
      ret.addPropertyResult("encryptionConfiguration", "EncryptionConfiguration", properties.EncryptionConfiguration != null ? CfnBucketEncryptionConfigurationPropertyFromCloudFormation(properties.EncryptionConfiguration) : void 0);
      ret.addPropertyResult("metrics", "Metrics", properties.Metrics != null ? CfnBucketMetricsPropertyFromCloudFormation(properties.Metrics) : void 0);
      ret.addPropertyResult("replicationTime", "ReplicationTime", properties.ReplicationTime != null ? CfnBucketReplicationTimePropertyFromCloudFormation(properties.ReplicationTime) : void 0);
      ret.addPropertyResult("storageClass", "StorageClass", properties.StorageClass != null ? cfn_parse.FromCloudFormation.getString(properties.StorageClass) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_ReplicationRulePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("deleteMarkerReplication", CfnBucket_DeleteMarkerReplicationPropertyValidator)(properties.deleteMarkerReplication));
      errors.collect(cdk.propertyValidator("destination", cdk.requiredValidator)(properties.destination));
      errors.collect(cdk.propertyValidator("destination", CfnBucket_ReplicationDestinationPropertyValidator)(properties.destination));
      errors.collect(cdk.propertyValidator("filter", CfnBucket_ReplicationRuleFilterPropertyValidator)(properties.filter));
      errors.collect(cdk.propertyValidator("id", cdk.validateString)(properties.id));
      errors.collect(cdk.propertyValidator("prefix", cdk.validateString)(properties.prefix));
      errors.collect(cdk.propertyValidator("priority", cdk.validateNumber)(properties.priority));
      errors.collect(cdk.propertyValidator("sourceSelectionCriteria", CfnBucket_SourceSelectionCriteriaPropertyValidator)(properties.sourceSelectionCriteria));
      errors.collect(cdk.propertyValidator("status", cdk.requiredValidator)(properties.status));
      errors.collect(cdk.propertyValidator("status", cdk.validateString)(properties.status));
      return errors.wrap('supplied properties not correct for "ReplicationRuleProperty"');
    }
    function cfnBucketReplicationRulePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_ReplicationRulePropertyValidator(properties).assertSuccess();
      return {
        DeleteMarkerReplication: cfnBucketDeleteMarkerReplicationPropertyToCloudFormation(properties.deleteMarkerReplication),
        Destination: cfnBucketReplicationDestinationPropertyToCloudFormation(properties.destination),
        Filter: cfnBucketReplicationRuleFilterPropertyToCloudFormation(properties.filter),
        Id: cdk.stringToCloudFormation(properties.id),
        Prefix: cdk.stringToCloudFormation(properties.prefix),
        Priority: cdk.numberToCloudFormation(properties.priority),
        SourceSelectionCriteria: cfnBucketSourceSelectionCriteriaPropertyToCloudFormation(properties.sourceSelectionCriteria),
        Status: cdk.stringToCloudFormation(properties.status)
      };
    }
    function CfnBucketReplicationRulePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("deleteMarkerReplication", "DeleteMarkerReplication", properties.DeleteMarkerReplication != null ? CfnBucketDeleteMarkerReplicationPropertyFromCloudFormation(properties.DeleteMarkerReplication) : void 0);
      ret.addPropertyResult("destination", "Destination", CfnBucketReplicationDestinationPropertyFromCloudFormation(properties.Destination));
      ret.addPropertyResult("filter", "Filter", properties.Filter != null ? CfnBucketReplicationRuleFilterPropertyFromCloudFormation(properties.Filter) : void 0);
      ret.addPropertyResult("id", "Id", properties.Id != null ? cfn_parse.FromCloudFormation.getString(properties.Id) : void 0);
      ret.addPropertyResult("prefix", "Prefix", properties.Prefix != null ? cfn_parse.FromCloudFormation.getString(properties.Prefix) : void 0);
      ret.addPropertyResult("priority", "Priority", properties.Priority != null ? cfn_parse.FromCloudFormation.getNumber(properties.Priority) : void 0);
      ret.addPropertyResult("sourceSelectionCriteria", "SourceSelectionCriteria", properties.SourceSelectionCriteria != null ? CfnBucketSourceSelectionCriteriaPropertyFromCloudFormation(properties.SourceSelectionCriteria) : void 0);
      ret.addPropertyResult("status", "Status", cfn_parse.FromCloudFormation.getString(properties.Status));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_ReplicationRuleAndOperatorPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("prefix", cdk.validateString)(properties.prefix));
      errors.collect(cdk.propertyValidator("tagFilters", cdk.listValidator(CfnBucket_TagFilterPropertyValidator))(properties.tagFilters));
      return errors.wrap('supplied properties not correct for "ReplicationRuleAndOperatorProperty"');
    }
    function cfnBucketReplicationRuleAndOperatorPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_ReplicationRuleAndOperatorPropertyValidator(properties).assertSuccess();
      return {
        Prefix: cdk.stringToCloudFormation(properties.prefix),
        TagFilters: cdk.listMapper(cfnBucketTagFilterPropertyToCloudFormation)(properties.tagFilters)
      };
    }
    function CfnBucketReplicationRuleAndOperatorPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("prefix", "Prefix", properties.Prefix != null ? cfn_parse.FromCloudFormation.getString(properties.Prefix) : void 0);
      ret.addPropertyResult("tagFilters", "TagFilters", properties.TagFilters != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketTagFilterPropertyFromCloudFormation)(properties.TagFilters) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_ReplicationRuleFilterPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("and", CfnBucket_ReplicationRuleAndOperatorPropertyValidator)(properties.and));
      errors.collect(cdk.propertyValidator("prefix", cdk.validateString)(properties.prefix));
      errors.collect(cdk.propertyValidator("tagFilter", CfnBucket_TagFilterPropertyValidator)(properties.tagFilter));
      return errors.wrap('supplied properties not correct for "ReplicationRuleFilterProperty"');
    }
    function cfnBucketReplicationRuleFilterPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_ReplicationRuleFilterPropertyValidator(properties).assertSuccess();
      return {
        And: cfnBucketReplicationRuleAndOperatorPropertyToCloudFormation(properties.and),
        Prefix: cdk.stringToCloudFormation(properties.prefix),
        TagFilter: cfnBucketTagFilterPropertyToCloudFormation(properties.tagFilter)
      };
    }
    function CfnBucketReplicationRuleFilterPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("and", "And", properties.And != null ? CfnBucketReplicationRuleAndOperatorPropertyFromCloudFormation(properties.And) : void 0);
      ret.addPropertyResult("prefix", "Prefix", properties.Prefix != null ? cfn_parse.FromCloudFormation.getString(properties.Prefix) : void 0);
      ret.addPropertyResult("tagFilter", "TagFilter", properties.TagFilter != null ? CfnBucketTagFilterPropertyFromCloudFormation(properties.TagFilter) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_ReplicationTimePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("status", cdk.requiredValidator)(properties.status));
      errors.collect(cdk.propertyValidator("status", cdk.validateString)(properties.status));
      errors.collect(cdk.propertyValidator("time", cdk.requiredValidator)(properties.time));
      errors.collect(cdk.propertyValidator("time", CfnBucket_ReplicationTimeValuePropertyValidator)(properties.time));
      return errors.wrap('supplied properties not correct for "ReplicationTimeProperty"');
    }
    function cfnBucketReplicationTimePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_ReplicationTimePropertyValidator(properties).assertSuccess();
      return {
        Status: cdk.stringToCloudFormation(properties.status),
        Time: cfnBucketReplicationTimeValuePropertyToCloudFormation(properties.time)
      };
    }
    function CfnBucketReplicationTimePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("status", "Status", cfn_parse.FromCloudFormation.getString(properties.Status));
      ret.addPropertyResult("time", "Time", CfnBucketReplicationTimeValuePropertyFromCloudFormation(properties.Time));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_ReplicationTimeValuePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("minutes", cdk.requiredValidator)(properties.minutes));
      errors.collect(cdk.propertyValidator("minutes", cdk.validateNumber)(properties.minutes));
      return errors.wrap('supplied properties not correct for "ReplicationTimeValueProperty"');
    }
    function cfnBucketReplicationTimeValuePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_ReplicationTimeValuePropertyValidator(properties).assertSuccess();
      return {
        Minutes: cdk.numberToCloudFormation(properties.minutes)
      };
    }
    function CfnBucketReplicationTimeValuePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("minutes", "Minutes", cfn_parse.FromCloudFormation.getNumber(properties.Minutes));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_RoutingRulePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("redirectRule", cdk.requiredValidator)(properties.redirectRule));
      errors.collect(cdk.propertyValidator("redirectRule", CfnBucket_RedirectRulePropertyValidator)(properties.redirectRule));
      errors.collect(cdk.propertyValidator("routingRuleCondition", CfnBucket_RoutingRuleConditionPropertyValidator)(properties.routingRuleCondition));
      return errors.wrap('supplied properties not correct for "RoutingRuleProperty"');
    }
    function cfnBucketRoutingRulePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_RoutingRulePropertyValidator(properties).assertSuccess();
      return {
        RedirectRule: cfnBucketRedirectRulePropertyToCloudFormation(properties.redirectRule),
        RoutingRuleCondition: cfnBucketRoutingRuleConditionPropertyToCloudFormation(properties.routingRuleCondition)
      };
    }
    function CfnBucketRoutingRulePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("redirectRule", "RedirectRule", CfnBucketRedirectRulePropertyFromCloudFormation(properties.RedirectRule));
      ret.addPropertyResult("routingRuleCondition", "RoutingRuleCondition", properties.RoutingRuleCondition != null ? CfnBucketRoutingRuleConditionPropertyFromCloudFormation(properties.RoutingRuleCondition) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_RoutingRuleConditionPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("httpErrorCodeReturnedEquals", cdk.validateString)(properties.httpErrorCodeReturnedEquals));
      errors.collect(cdk.propertyValidator("keyPrefixEquals", cdk.validateString)(properties.keyPrefixEquals));
      return errors.wrap('supplied properties not correct for "RoutingRuleConditionProperty"');
    }
    function cfnBucketRoutingRuleConditionPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_RoutingRuleConditionPropertyValidator(properties).assertSuccess();
      return {
        HttpErrorCodeReturnedEquals: cdk.stringToCloudFormation(properties.httpErrorCodeReturnedEquals),
        KeyPrefixEquals: cdk.stringToCloudFormation(properties.keyPrefixEquals)
      };
    }
    function CfnBucketRoutingRuleConditionPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("httpErrorCodeReturnedEquals", "HttpErrorCodeReturnedEquals", properties.HttpErrorCodeReturnedEquals != null ? cfn_parse.FromCloudFormation.getString(properties.HttpErrorCodeReturnedEquals) : void 0);
      ret.addPropertyResult("keyPrefixEquals", "KeyPrefixEquals", properties.KeyPrefixEquals != null ? cfn_parse.FromCloudFormation.getString(properties.KeyPrefixEquals) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_RulePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("abortIncompleteMultipartUpload", CfnBucket_AbortIncompleteMultipartUploadPropertyValidator)(properties.abortIncompleteMultipartUpload));
      errors.collect(cdk.propertyValidator("expirationDate", cdk.validateDate)(properties.expirationDate));
      errors.collect(cdk.propertyValidator("expirationInDays", cdk.validateNumber)(properties.expirationInDays));
      errors.collect(cdk.propertyValidator("expiredObjectDeleteMarker", cdk.validateBoolean)(properties.expiredObjectDeleteMarker));
      errors.collect(cdk.propertyValidator("id", cdk.validateString)(properties.id));
      errors.collect(cdk.propertyValidator("noncurrentVersionExpirationInDays", cdk.validateNumber)(properties.noncurrentVersionExpirationInDays));
      errors.collect(cdk.propertyValidator("noncurrentVersionTransition", CfnBucket_NoncurrentVersionTransitionPropertyValidator)(properties.noncurrentVersionTransition));
      errors.collect(cdk.propertyValidator("noncurrentVersionTransitions", cdk.listValidator(CfnBucket_NoncurrentVersionTransitionPropertyValidator))(properties.noncurrentVersionTransitions));
      errors.collect(cdk.propertyValidator("prefix", cdk.validateString)(properties.prefix));
      errors.collect(cdk.propertyValidator("status", cdk.requiredValidator)(properties.status));
      errors.collect(cdk.propertyValidator("status", cdk.validateString)(properties.status));
      errors.collect(cdk.propertyValidator("tagFilters", cdk.listValidator(CfnBucket_TagFilterPropertyValidator))(properties.tagFilters));
      errors.collect(cdk.propertyValidator("transition", CfnBucket_TransitionPropertyValidator)(properties.transition));
      errors.collect(cdk.propertyValidator("transitions", cdk.listValidator(CfnBucket_TransitionPropertyValidator))(properties.transitions));
      return errors.wrap('supplied properties not correct for "RuleProperty"');
    }
    function cfnBucketRulePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_RulePropertyValidator(properties).assertSuccess();
      return {
        AbortIncompleteMultipartUpload: cfnBucketAbortIncompleteMultipartUploadPropertyToCloudFormation(properties.abortIncompleteMultipartUpload),
        ExpirationDate: cdk.dateToCloudFormation(properties.expirationDate),
        ExpirationInDays: cdk.numberToCloudFormation(properties.expirationInDays),
        ExpiredObjectDeleteMarker: cdk.booleanToCloudFormation(properties.expiredObjectDeleteMarker),
        Id: cdk.stringToCloudFormation(properties.id),
        NoncurrentVersionExpirationInDays: cdk.numberToCloudFormation(properties.noncurrentVersionExpirationInDays),
        NoncurrentVersionTransition: cfnBucketNoncurrentVersionTransitionPropertyToCloudFormation(properties.noncurrentVersionTransition),
        NoncurrentVersionTransitions: cdk.listMapper(cfnBucketNoncurrentVersionTransitionPropertyToCloudFormation)(properties.noncurrentVersionTransitions),
        Prefix: cdk.stringToCloudFormation(properties.prefix),
        Status: cdk.stringToCloudFormation(properties.status),
        TagFilters: cdk.listMapper(cfnBucketTagFilterPropertyToCloudFormation)(properties.tagFilters),
        Transition: cfnBucketTransitionPropertyToCloudFormation(properties.transition),
        Transitions: cdk.listMapper(cfnBucketTransitionPropertyToCloudFormation)(properties.transitions)
      };
    }
    function CfnBucketRulePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("abortIncompleteMultipartUpload", "AbortIncompleteMultipartUpload", properties.AbortIncompleteMultipartUpload != null ? CfnBucketAbortIncompleteMultipartUploadPropertyFromCloudFormation(properties.AbortIncompleteMultipartUpload) : void 0);
      ret.addPropertyResult("expirationDate", "ExpirationDate", properties.ExpirationDate != null ? cfn_parse.FromCloudFormation.getDate(properties.ExpirationDate) : void 0);
      ret.addPropertyResult("expirationInDays", "ExpirationInDays", properties.ExpirationInDays != null ? cfn_parse.FromCloudFormation.getNumber(properties.ExpirationInDays) : void 0);
      ret.addPropertyResult("expiredObjectDeleteMarker", "ExpiredObjectDeleteMarker", properties.ExpiredObjectDeleteMarker != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ExpiredObjectDeleteMarker) : void 0);
      ret.addPropertyResult("id", "Id", properties.Id != null ? cfn_parse.FromCloudFormation.getString(properties.Id) : void 0);
      ret.addPropertyResult("noncurrentVersionExpirationInDays", "NoncurrentVersionExpirationInDays", properties.NoncurrentVersionExpirationInDays != null ? cfn_parse.FromCloudFormation.getNumber(properties.NoncurrentVersionExpirationInDays) : void 0);
      ret.addPropertyResult("noncurrentVersionTransition", "NoncurrentVersionTransition", properties.NoncurrentVersionTransition != null ? CfnBucketNoncurrentVersionTransitionPropertyFromCloudFormation(properties.NoncurrentVersionTransition) : void 0);
      ret.addPropertyResult("noncurrentVersionTransitions", "NoncurrentVersionTransitions", properties.NoncurrentVersionTransitions != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketNoncurrentVersionTransitionPropertyFromCloudFormation)(properties.NoncurrentVersionTransitions) : void 0);
      ret.addPropertyResult("prefix", "Prefix", properties.Prefix != null ? cfn_parse.FromCloudFormation.getString(properties.Prefix) : void 0);
      ret.addPropertyResult("status", "Status", cfn_parse.FromCloudFormation.getString(properties.Status));
      ret.addPropertyResult("tagFilters", "TagFilters", properties.TagFilters != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketTagFilterPropertyFromCloudFormation)(properties.TagFilters) : void 0);
      ret.addPropertyResult("transition", "Transition", properties.Transition != null ? CfnBucketTransitionPropertyFromCloudFormation(properties.Transition) : void 0);
      ret.addPropertyResult("transitions", "Transitions", properties.Transitions != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketTransitionPropertyFromCloudFormation)(properties.Transitions) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_S3KeyFilterPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("rules", cdk.requiredValidator)(properties.rules));
      errors.collect(cdk.propertyValidator("rules", cdk.listValidator(CfnBucket_FilterRulePropertyValidator))(properties.rules));
      return errors.wrap('supplied properties not correct for "S3KeyFilterProperty"');
    }
    function cfnBucketS3KeyFilterPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_S3KeyFilterPropertyValidator(properties).assertSuccess();
      return {
        Rules: cdk.listMapper(cfnBucketFilterRulePropertyToCloudFormation)(properties.rules)
      };
    }
    function CfnBucketS3KeyFilterPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("rules", "Rules", cfn_parse.FromCloudFormation.getArray(CfnBucketFilterRulePropertyFromCloudFormation)(properties.Rules));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_ServerSideEncryptionByDefaultPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("kmsMasterKeyId", cdk.validateString)(properties.kmsMasterKeyId));
      errors.collect(cdk.propertyValidator("sseAlgorithm", cdk.requiredValidator)(properties.sseAlgorithm));
      errors.collect(cdk.propertyValidator("sseAlgorithm", cdk.validateString)(properties.sseAlgorithm));
      return errors.wrap('supplied properties not correct for "ServerSideEncryptionByDefaultProperty"');
    }
    function cfnBucketServerSideEncryptionByDefaultPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_ServerSideEncryptionByDefaultPropertyValidator(properties).assertSuccess();
      return {
        KMSMasterKeyID: cdk.stringToCloudFormation(properties.kmsMasterKeyId),
        SSEAlgorithm: cdk.stringToCloudFormation(properties.sseAlgorithm)
      };
    }
    function CfnBucketServerSideEncryptionByDefaultPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("kmsMasterKeyId", "KMSMasterKeyID", properties.KMSMasterKeyID != null ? cfn_parse.FromCloudFormation.getString(properties.KMSMasterKeyID) : void 0);
      ret.addPropertyResult("sseAlgorithm", "SSEAlgorithm", cfn_parse.FromCloudFormation.getString(properties.SSEAlgorithm));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_ServerSideEncryptionRulePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("bucketKeyEnabled", cdk.validateBoolean)(properties.bucketKeyEnabled));
      errors.collect(cdk.propertyValidator("serverSideEncryptionByDefault", CfnBucket_ServerSideEncryptionByDefaultPropertyValidator)(properties.serverSideEncryptionByDefault));
      return errors.wrap('supplied properties not correct for "ServerSideEncryptionRuleProperty"');
    }
    function cfnBucketServerSideEncryptionRulePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_ServerSideEncryptionRulePropertyValidator(properties).assertSuccess();
      return {
        BucketKeyEnabled: cdk.booleanToCloudFormation(properties.bucketKeyEnabled),
        ServerSideEncryptionByDefault: cfnBucketServerSideEncryptionByDefaultPropertyToCloudFormation(properties.serverSideEncryptionByDefault)
      };
    }
    function CfnBucketServerSideEncryptionRulePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("bucketKeyEnabled", "BucketKeyEnabled", properties.BucketKeyEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.BucketKeyEnabled) : void 0);
      ret.addPropertyResult("serverSideEncryptionByDefault", "ServerSideEncryptionByDefault", properties.ServerSideEncryptionByDefault != null ? CfnBucketServerSideEncryptionByDefaultPropertyFromCloudFormation(properties.ServerSideEncryptionByDefault) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_SourceSelectionCriteriaPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("replicaModifications", CfnBucket_ReplicaModificationsPropertyValidator)(properties.replicaModifications));
      errors.collect(cdk.propertyValidator("sseKmsEncryptedObjects", CfnBucket_SseKmsEncryptedObjectsPropertyValidator)(properties.sseKmsEncryptedObjects));
      return errors.wrap('supplied properties not correct for "SourceSelectionCriteriaProperty"');
    }
    function cfnBucketSourceSelectionCriteriaPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_SourceSelectionCriteriaPropertyValidator(properties).assertSuccess();
      return {
        ReplicaModifications: cfnBucketReplicaModificationsPropertyToCloudFormation(properties.replicaModifications),
        SseKmsEncryptedObjects: cfnBucketSseKmsEncryptedObjectsPropertyToCloudFormation(properties.sseKmsEncryptedObjects)
      };
    }
    function CfnBucketSourceSelectionCriteriaPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("replicaModifications", "ReplicaModifications", properties.ReplicaModifications != null ? CfnBucketReplicaModificationsPropertyFromCloudFormation(properties.ReplicaModifications) : void 0);
      ret.addPropertyResult("sseKmsEncryptedObjects", "SseKmsEncryptedObjects", properties.SseKmsEncryptedObjects != null ? CfnBucketSseKmsEncryptedObjectsPropertyFromCloudFormation(properties.SseKmsEncryptedObjects) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_SseKmsEncryptedObjectsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("status", cdk.requiredValidator)(properties.status));
      errors.collect(cdk.propertyValidator("status", cdk.validateString)(properties.status));
      return errors.wrap('supplied properties not correct for "SseKmsEncryptedObjectsProperty"');
    }
    function cfnBucketSseKmsEncryptedObjectsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_SseKmsEncryptedObjectsPropertyValidator(properties).assertSuccess();
      return {
        Status: cdk.stringToCloudFormation(properties.status)
      };
    }
    function CfnBucketSseKmsEncryptedObjectsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("status", "Status", cfn_parse.FromCloudFormation.getString(properties.Status));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_StorageClassAnalysisPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("dataExport", CfnBucket_DataExportPropertyValidator)(properties.dataExport));
      return errors.wrap('supplied properties not correct for "StorageClassAnalysisProperty"');
    }
    function cfnBucketStorageClassAnalysisPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_StorageClassAnalysisPropertyValidator(properties).assertSuccess();
      return {
        DataExport: cfnBucketDataExportPropertyToCloudFormation(properties.dataExport)
      };
    }
    function CfnBucketStorageClassAnalysisPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("dataExport", "DataExport", properties.DataExport != null ? CfnBucketDataExportPropertyFromCloudFormation(properties.DataExport) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_TagFilterPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("key", cdk.requiredValidator)(properties.key));
      errors.collect(cdk.propertyValidator("key", cdk.validateString)(properties.key));
      errors.collect(cdk.propertyValidator("value", cdk.requiredValidator)(properties.value));
      errors.collect(cdk.propertyValidator("value", cdk.validateString)(properties.value));
      return errors.wrap('supplied properties not correct for "TagFilterProperty"');
    }
    function cfnBucketTagFilterPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_TagFilterPropertyValidator(properties).assertSuccess();
      return {
        Key: cdk.stringToCloudFormation(properties.key),
        Value: cdk.stringToCloudFormation(properties.value)
      };
    }
    function CfnBucketTagFilterPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("key", "Key", cfn_parse.FromCloudFormation.getString(properties.Key));
      ret.addPropertyResult("value", "Value", cfn_parse.FromCloudFormation.getString(properties.Value));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_TieringPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("accessTier", cdk.requiredValidator)(properties.accessTier));
      errors.collect(cdk.propertyValidator("accessTier", cdk.validateString)(properties.accessTier));
      errors.collect(cdk.propertyValidator("days", cdk.requiredValidator)(properties.days));
      errors.collect(cdk.propertyValidator("days", cdk.validateNumber)(properties.days));
      return errors.wrap('supplied properties not correct for "TieringProperty"');
    }
    function cfnBucketTieringPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_TieringPropertyValidator(properties).assertSuccess();
      return {
        AccessTier: cdk.stringToCloudFormation(properties.accessTier),
        Days: cdk.numberToCloudFormation(properties.days)
      };
    }
    function CfnBucketTieringPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("accessTier", "AccessTier", cfn_parse.FromCloudFormation.getString(properties.AccessTier));
      ret.addPropertyResult("days", "Days", cfn_parse.FromCloudFormation.getNumber(properties.Days));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_TopicConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("event", cdk.requiredValidator)(properties.event));
      errors.collect(cdk.propertyValidator("event", cdk.validateString)(properties.event));
      errors.collect(cdk.propertyValidator("filter", CfnBucket_NotificationFilterPropertyValidator)(properties.filter));
      errors.collect(cdk.propertyValidator("topic", cdk.requiredValidator)(properties.topic));
      errors.collect(cdk.propertyValidator("topic", cdk.validateString)(properties.topic));
      return errors.wrap('supplied properties not correct for "TopicConfigurationProperty"');
    }
    function cfnBucketTopicConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_TopicConfigurationPropertyValidator(properties).assertSuccess();
      return {
        Event: cdk.stringToCloudFormation(properties.event),
        Filter: cfnBucketNotificationFilterPropertyToCloudFormation(properties.filter),
        Topic: cdk.stringToCloudFormation(properties.topic)
      };
    }
    function CfnBucketTopicConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("event", "Event", cfn_parse.FromCloudFormation.getString(properties.Event));
      ret.addPropertyResult("filter", "Filter", properties.Filter != null ? CfnBucketNotificationFilterPropertyFromCloudFormation(properties.Filter) : void 0);
      ret.addPropertyResult("topic", "Topic", cfn_parse.FromCloudFormation.getString(properties.Topic));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_TransitionPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("storageClass", cdk.requiredValidator)(properties.storageClass));
      errors.collect(cdk.propertyValidator("storageClass", cdk.validateString)(properties.storageClass));
      errors.collect(cdk.propertyValidator("transitionDate", cdk.validateDate)(properties.transitionDate));
      errors.collect(cdk.propertyValidator("transitionInDays", cdk.validateNumber)(properties.transitionInDays));
      return errors.wrap('supplied properties not correct for "TransitionProperty"');
    }
    function cfnBucketTransitionPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_TransitionPropertyValidator(properties).assertSuccess();
      return {
        StorageClass: cdk.stringToCloudFormation(properties.storageClass),
        TransitionDate: cdk.dateToCloudFormation(properties.transitionDate),
        TransitionInDays: cdk.numberToCloudFormation(properties.transitionInDays)
      };
    }
    function CfnBucketTransitionPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("storageClass", "StorageClass", cfn_parse.FromCloudFormation.getString(properties.StorageClass));
      ret.addPropertyResult("transitionDate", "TransitionDate", properties.TransitionDate != null ? cfn_parse.FromCloudFormation.getDate(properties.TransitionDate) : void 0);
      ret.addPropertyResult("transitionInDays", "TransitionInDays", properties.TransitionInDays != null ? cfn_parse.FromCloudFormation.getNumber(properties.TransitionInDays) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_VersioningConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("status", cdk.requiredValidator)(properties.status));
      errors.collect(cdk.propertyValidator("status", cdk.validateString)(properties.status));
      return errors.wrap('supplied properties not correct for "VersioningConfigurationProperty"');
    }
    function cfnBucketVersioningConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_VersioningConfigurationPropertyValidator(properties).assertSuccess();
      return {
        Status: cdk.stringToCloudFormation(properties.status)
      };
    }
    function CfnBucketVersioningConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("status", "Status", cfn_parse.FromCloudFormation.getString(properties.Status));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucket_WebsiteConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("errorDocument", cdk.validateString)(properties.errorDocument));
      errors.collect(cdk.propertyValidator("indexDocument", cdk.validateString)(properties.indexDocument));
      errors.collect(cdk.propertyValidator("redirectAllRequestsTo", CfnBucket_RedirectAllRequestsToPropertyValidator)(properties.redirectAllRequestsTo));
      errors.collect(cdk.propertyValidator("routingRules", cdk.listValidator(CfnBucket_RoutingRulePropertyValidator))(properties.routingRules));
      return errors.wrap('supplied properties not correct for "WebsiteConfigurationProperty"');
    }
    function cfnBucketWebsiteConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucket_WebsiteConfigurationPropertyValidator(properties).assertSuccess();
      return {
        ErrorDocument: cdk.stringToCloudFormation(properties.errorDocument),
        IndexDocument: cdk.stringToCloudFormation(properties.indexDocument),
        RedirectAllRequestsTo: cfnBucketRedirectAllRequestsToPropertyToCloudFormation(properties.redirectAllRequestsTo),
        RoutingRules: cdk.listMapper(cfnBucketRoutingRulePropertyToCloudFormation)(properties.routingRules)
      };
    }
    function CfnBucketWebsiteConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("errorDocument", "ErrorDocument", properties.ErrorDocument != null ? cfn_parse.FromCloudFormation.getString(properties.ErrorDocument) : void 0);
      ret.addPropertyResult("indexDocument", "IndexDocument", properties.IndexDocument != null ? cfn_parse.FromCloudFormation.getString(properties.IndexDocument) : void 0);
      ret.addPropertyResult("redirectAllRequestsTo", "RedirectAllRequestsTo", properties.RedirectAllRequestsTo != null ? CfnBucketRedirectAllRequestsToPropertyFromCloudFormation(properties.RedirectAllRequestsTo) : void 0);
      ret.addPropertyResult("routingRules", "RoutingRules", properties.RoutingRules != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketRoutingRulePropertyFromCloudFormation)(properties.RoutingRules) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnBucketPolicyPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("bucket", cdk.requiredValidator)(properties.bucket));
      errors.collect(cdk.propertyValidator("bucket", cdk.validateString)(properties.bucket));
      errors.collect(cdk.propertyValidator("policyDocument", cdk.requiredValidator)(properties.policyDocument));
      errors.collect(cdk.propertyValidator("policyDocument", cdk.validateObject)(properties.policyDocument));
      return errors.wrap('supplied properties not correct for "CfnBucketPolicyProps"');
    }
    function cfnBucketPolicyPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnBucketPolicyPropsValidator(properties).assertSuccess();
      return {
        Bucket: cdk.stringToCloudFormation(properties.bucket),
        PolicyDocument: cdk.objectToCloudFormation(properties.policyDocument)
      };
    }
    function CfnBucketPolicyPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("bucket", "Bucket", cfn_parse.FromCloudFormation.getString(properties.Bucket));
      ret.addPropertyResult("policyDocument", "PolicyDocument", cfn_parse.FromCloudFormation.getAny(properties.PolicyDocument));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnBucketPolicy = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnBucketPolicy.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "bucket", this);
        cdk.requireProperty(props, "policyDocument", this);
        this.bucket = props.bucket;
        this.policyDocument = props.policyDocument;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnBucketPolicyPropsFromCloudFormation(resourceProperties);
        const ret = new CfnBucketPolicy(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnBucketPolicy.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          bucket: this.bucket,
          policyDocument: this.policyDocument
        };
      }
      renderProperties(props) {
        return cfnBucketPolicyPropsToCloudFormation(props);
      }
    };
    exports2.CfnBucketPolicy = CfnBucketPolicy;
    _c = JSII_RTTI_SYMBOL_1;
    CfnBucketPolicy[_c] = { fqn: "@aws-cdk/aws-s3.CfnBucketPolicy", version: "1.132.0" };
    CfnBucketPolicy.CFN_RESOURCE_TYPE_NAME = "AWS::S3::BucketPolicy";
    function CfnMultiRegionAccessPointPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("publicAccessBlockConfiguration", CfnMultiRegionAccessPoint_PublicAccessBlockConfigurationPropertyValidator)(properties.publicAccessBlockConfiguration));
      errors.collect(cdk.propertyValidator("regions", cdk.requiredValidator)(properties.regions));
      errors.collect(cdk.propertyValidator("regions", cdk.listValidator(CfnMultiRegionAccessPoint_RegionPropertyValidator))(properties.regions));
      return errors.wrap('supplied properties not correct for "CfnMultiRegionAccessPointProps"');
    }
    function cfnMultiRegionAccessPointPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnMultiRegionAccessPointPropsValidator(properties).assertSuccess();
      return {
        Regions: cdk.listMapper(cfnMultiRegionAccessPointRegionPropertyToCloudFormation)(properties.regions),
        Name: cdk.stringToCloudFormation(properties.name),
        PublicAccessBlockConfiguration: cfnMultiRegionAccessPointPublicAccessBlockConfigurationPropertyToCloudFormation(properties.publicAccessBlockConfiguration)
      };
    }
    function CfnMultiRegionAccessPointPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("regions", "Regions", cfn_parse.FromCloudFormation.getArray(CfnMultiRegionAccessPointRegionPropertyFromCloudFormation)(properties.Regions));
      ret.addPropertyResult("name", "Name", properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : void 0);
      ret.addPropertyResult("publicAccessBlockConfiguration", "PublicAccessBlockConfiguration", properties.PublicAccessBlockConfiguration != null ? CfnMultiRegionAccessPointPublicAccessBlockConfigurationPropertyFromCloudFormation(properties.PublicAccessBlockConfiguration) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnMultiRegionAccessPoint = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnMultiRegionAccessPoint.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "regions", this);
        this.attrAlias = cdk.Token.asString(this.getAtt("Alias"));
        this.attrCreatedAt = cdk.Token.asString(this.getAtt("CreatedAt"));
        this.regions = props.regions;
        this.name = props.name;
        this.publicAccessBlockConfiguration = props.publicAccessBlockConfiguration;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnMultiRegionAccessPointPropsFromCloudFormation(resourceProperties);
        const ret = new CfnMultiRegionAccessPoint(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnMultiRegionAccessPoint.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          regions: this.regions,
          name: this.name,
          publicAccessBlockConfiguration: this.publicAccessBlockConfiguration
        };
      }
      renderProperties(props) {
        return cfnMultiRegionAccessPointPropsToCloudFormation(props);
      }
    };
    exports2.CfnMultiRegionAccessPoint = CfnMultiRegionAccessPoint;
    _d = JSII_RTTI_SYMBOL_1;
    CfnMultiRegionAccessPoint[_d] = { fqn: "@aws-cdk/aws-s3.CfnMultiRegionAccessPoint", version: "1.132.0" };
    CfnMultiRegionAccessPoint.CFN_RESOURCE_TYPE_NAME = "AWS::S3::MultiRegionAccessPoint";
    function CfnMultiRegionAccessPoint_PublicAccessBlockConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("blockPublicAcls", cdk.validateBoolean)(properties.blockPublicAcls));
      errors.collect(cdk.propertyValidator("blockPublicPolicy", cdk.validateBoolean)(properties.blockPublicPolicy));
      errors.collect(cdk.propertyValidator("ignorePublicAcls", cdk.validateBoolean)(properties.ignorePublicAcls));
      errors.collect(cdk.propertyValidator("restrictPublicBuckets", cdk.validateBoolean)(properties.restrictPublicBuckets));
      return errors.wrap('supplied properties not correct for "PublicAccessBlockConfigurationProperty"');
    }
    function cfnMultiRegionAccessPointPublicAccessBlockConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnMultiRegionAccessPoint_PublicAccessBlockConfigurationPropertyValidator(properties).assertSuccess();
      return {
        BlockPublicAcls: cdk.booleanToCloudFormation(properties.blockPublicAcls),
        BlockPublicPolicy: cdk.booleanToCloudFormation(properties.blockPublicPolicy),
        IgnorePublicAcls: cdk.booleanToCloudFormation(properties.ignorePublicAcls),
        RestrictPublicBuckets: cdk.booleanToCloudFormation(properties.restrictPublicBuckets)
      };
    }
    function CfnMultiRegionAccessPointPublicAccessBlockConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("blockPublicAcls", "BlockPublicAcls", properties.BlockPublicAcls != null ? cfn_parse.FromCloudFormation.getBoolean(properties.BlockPublicAcls) : void 0);
      ret.addPropertyResult("blockPublicPolicy", "BlockPublicPolicy", properties.BlockPublicPolicy != null ? cfn_parse.FromCloudFormation.getBoolean(properties.BlockPublicPolicy) : void 0);
      ret.addPropertyResult("ignorePublicAcls", "IgnorePublicAcls", properties.IgnorePublicAcls != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IgnorePublicAcls) : void 0);
      ret.addPropertyResult("restrictPublicBuckets", "RestrictPublicBuckets", properties.RestrictPublicBuckets != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RestrictPublicBuckets) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnMultiRegionAccessPoint_RegionPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("bucket", cdk.requiredValidator)(properties.bucket));
      errors.collect(cdk.propertyValidator("bucket", cdk.validateString)(properties.bucket));
      return errors.wrap('supplied properties not correct for "RegionProperty"');
    }
    function cfnMultiRegionAccessPointRegionPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnMultiRegionAccessPoint_RegionPropertyValidator(properties).assertSuccess();
      return {
        Bucket: cdk.stringToCloudFormation(properties.bucket)
      };
    }
    function CfnMultiRegionAccessPointRegionPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("bucket", "Bucket", cfn_parse.FromCloudFormation.getString(properties.Bucket));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnMultiRegionAccessPointPolicyPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("mrapName", cdk.requiredValidator)(properties.mrapName));
      errors.collect(cdk.propertyValidator("mrapName", cdk.validateString)(properties.mrapName));
      errors.collect(cdk.propertyValidator("policy", cdk.requiredValidator)(properties.policy));
      errors.collect(cdk.propertyValidator("policy", cdk.validateObject)(properties.policy));
      return errors.wrap('supplied properties not correct for "CfnMultiRegionAccessPointPolicyProps"');
    }
    function cfnMultiRegionAccessPointPolicyPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnMultiRegionAccessPointPolicyPropsValidator(properties).assertSuccess();
      return {
        MrapName: cdk.stringToCloudFormation(properties.mrapName),
        Policy: cdk.objectToCloudFormation(properties.policy)
      };
    }
    function CfnMultiRegionAccessPointPolicyPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("mrapName", "MrapName", cfn_parse.FromCloudFormation.getString(properties.MrapName));
      ret.addPropertyResult("policy", "Policy", cfn_parse.FromCloudFormation.getAny(properties.Policy));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnMultiRegionAccessPointPolicy = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnMultiRegionAccessPointPolicy.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "mrapName", this);
        cdk.requireProperty(props, "policy", this);
        this.mrapName = props.mrapName;
        this.policy = props.policy;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnMultiRegionAccessPointPolicyPropsFromCloudFormation(resourceProperties);
        const ret = new CfnMultiRegionAccessPointPolicy(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnMultiRegionAccessPointPolicy.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          mrapName: this.mrapName,
          policy: this.policy
        };
      }
      renderProperties(props) {
        return cfnMultiRegionAccessPointPolicyPropsToCloudFormation(props);
      }
    };
    exports2.CfnMultiRegionAccessPointPolicy = CfnMultiRegionAccessPointPolicy;
    _e = JSII_RTTI_SYMBOL_1;
    CfnMultiRegionAccessPointPolicy[_e] = { fqn: "@aws-cdk/aws-s3.CfnMultiRegionAccessPointPolicy", version: "1.132.0" };
    CfnMultiRegionAccessPointPolicy.CFN_RESOURCE_TYPE_NAME = "AWS::S3::MultiRegionAccessPointPolicy";
    function CfnStorageLensPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("storageLensConfiguration", cdk.requiredValidator)(properties.storageLensConfiguration));
      errors.collect(cdk.propertyValidator("storageLensConfiguration", CfnStorageLens_StorageLensConfigurationPropertyValidator)(properties.storageLensConfiguration));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnStorageLensProps"');
    }
    function cfnStorageLensPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnStorageLensPropsValidator(properties).assertSuccess();
      return {
        StorageLensConfiguration: cfnStorageLensStorageLensConfigurationPropertyToCloudFormation(properties.storageLensConfiguration),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnStorageLensPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("storageLensConfiguration", "StorageLensConfiguration", CfnStorageLensStorageLensConfigurationPropertyFromCloudFormation(properties.StorageLensConfiguration));
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnStorageLens = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnStorageLens.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "storageLensConfiguration", this);
        this.attrStorageLensConfigurationStorageLensArn = cdk.Token.asString(this.getAtt("StorageLensConfiguration.StorageLensArn"));
        this.storageLensConfiguration = props.storageLensConfiguration;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::S3::StorageLens", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnStorageLensPropsFromCloudFormation(resourceProperties);
        const ret = new CfnStorageLens(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnStorageLens.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          storageLensConfiguration: this.storageLensConfiguration,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnStorageLensPropsToCloudFormation(props);
      }
    };
    exports2.CfnStorageLens = CfnStorageLens;
    _f = JSII_RTTI_SYMBOL_1;
    CfnStorageLens[_f] = { fqn: "@aws-cdk/aws-s3.CfnStorageLens", version: "1.132.0" };
    CfnStorageLens.CFN_RESOURCE_TYPE_NAME = "AWS::S3::StorageLens";
    function CfnStorageLens_AccountLevelPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("activityMetrics", CfnStorageLens_ActivityMetricsPropertyValidator)(properties.activityMetrics));
      errors.collect(cdk.propertyValidator("bucketLevel", cdk.requiredValidator)(properties.bucketLevel));
      errors.collect(cdk.propertyValidator("bucketLevel", CfnStorageLens_BucketLevelPropertyValidator)(properties.bucketLevel));
      return errors.wrap('supplied properties not correct for "AccountLevelProperty"');
    }
    function cfnStorageLensAccountLevelPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnStorageLens_AccountLevelPropertyValidator(properties).assertSuccess();
      return {
        ActivityMetrics: cfnStorageLensActivityMetricsPropertyToCloudFormation(properties.activityMetrics),
        BucketLevel: cfnStorageLensBucketLevelPropertyToCloudFormation(properties.bucketLevel)
      };
    }
    function CfnStorageLensAccountLevelPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("activityMetrics", "ActivityMetrics", properties.ActivityMetrics != null ? CfnStorageLensActivityMetricsPropertyFromCloudFormation(properties.ActivityMetrics) : void 0);
      ret.addPropertyResult("bucketLevel", "BucketLevel", CfnStorageLensBucketLevelPropertyFromCloudFormation(properties.BucketLevel));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnStorageLens_ActivityMetricsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("isEnabled", cdk.validateBoolean)(properties.isEnabled));
      return errors.wrap('supplied properties not correct for "ActivityMetricsProperty"');
    }
    function cfnStorageLensActivityMetricsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnStorageLens_ActivityMetricsPropertyValidator(properties).assertSuccess();
      return {
        IsEnabled: cdk.booleanToCloudFormation(properties.isEnabled)
      };
    }
    function CfnStorageLensActivityMetricsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("isEnabled", "IsEnabled", properties.IsEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IsEnabled) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnStorageLens_AwsOrgPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("arn", cdk.requiredValidator)(properties.arn));
      errors.collect(cdk.propertyValidator("arn", cdk.validateString)(properties.arn));
      return errors.wrap('supplied properties not correct for "AwsOrgProperty"');
    }
    function cfnStorageLensAwsOrgPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnStorageLens_AwsOrgPropertyValidator(properties).assertSuccess();
      return {
        Arn: cdk.stringToCloudFormation(properties.arn)
      };
    }
    function CfnStorageLensAwsOrgPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("arn", "Arn", cfn_parse.FromCloudFormation.getString(properties.Arn));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnStorageLens_BucketLevelPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("activityMetrics", CfnStorageLens_ActivityMetricsPropertyValidator)(properties.activityMetrics));
      errors.collect(cdk.propertyValidator("prefixLevel", CfnStorageLens_PrefixLevelPropertyValidator)(properties.prefixLevel));
      return errors.wrap('supplied properties not correct for "BucketLevelProperty"');
    }
    function cfnStorageLensBucketLevelPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnStorageLens_BucketLevelPropertyValidator(properties).assertSuccess();
      return {
        ActivityMetrics: cfnStorageLensActivityMetricsPropertyToCloudFormation(properties.activityMetrics),
        PrefixLevel: cfnStorageLensPrefixLevelPropertyToCloudFormation(properties.prefixLevel)
      };
    }
    function CfnStorageLensBucketLevelPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("activityMetrics", "ActivityMetrics", properties.ActivityMetrics != null ? CfnStorageLensActivityMetricsPropertyFromCloudFormation(properties.ActivityMetrics) : void 0);
      ret.addPropertyResult("prefixLevel", "PrefixLevel", properties.PrefixLevel != null ? CfnStorageLensPrefixLevelPropertyFromCloudFormation(properties.PrefixLevel) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnStorageLens_BucketsAndRegionsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("buckets", cdk.listValidator(cdk.validateString))(properties.buckets));
      errors.collect(cdk.propertyValidator("regions", cdk.listValidator(cdk.validateString))(properties.regions));
      return errors.wrap('supplied properties not correct for "BucketsAndRegionsProperty"');
    }
    function cfnStorageLensBucketsAndRegionsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnStorageLens_BucketsAndRegionsPropertyValidator(properties).assertSuccess();
      return {
        Buckets: cdk.listMapper(cdk.stringToCloudFormation)(properties.buckets),
        Regions: cdk.listMapper(cdk.stringToCloudFormation)(properties.regions)
      };
    }
    function CfnStorageLensBucketsAndRegionsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("buckets", "Buckets", properties.Buckets != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Buckets) : void 0);
      ret.addPropertyResult("regions", "Regions", properties.Regions != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Regions) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnStorageLens_DataExportPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("s3BucketDestination", cdk.requiredValidator)(properties.s3BucketDestination));
      errors.collect(cdk.propertyValidator("s3BucketDestination", CfnStorageLens_S3BucketDestinationPropertyValidator)(properties.s3BucketDestination));
      return errors.wrap('supplied properties not correct for "DataExportProperty"');
    }
    function cfnStorageLensDataExportPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnStorageLens_DataExportPropertyValidator(properties).assertSuccess();
      return {
        S3BucketDestination: cfnStorageLensS3BucketDestinationPropertyToCloudFormation(properties.s3BucketDestination)
      };
    }
    function CfnStorageLensDataExportPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("s3BucketDestination", "S3BucketDestination", CfnStorageLensS3BucketDestinationPropertyFromCloudFormation(properties.S3BucketDestination));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnStorageLens_EncryptionPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      return errors.wrap('supplied properties not correct for "EncryptionProperty"');
    }
    function cfnStorageLensEncryptionPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnStorageLens_EncryptionPropertyValidator(properties).assertSuccess();
      return {};
    }
    function CfnStorageLensEncryptionPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnStorageLens_PrefixLevelPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("storageMetrics", cdk.requiredValidator)(properties.storageMetrics));
      errors.collect(cdk.propertyValidator("storageMetrics", CfnStorageLens_PrefixLevelStorageMetricsPropertyValidator)(properties.storageMetrics));
      return errors.wrap('supplied properties not correct for "PrefixLevelProperty"');
    }
    function cfnStorageLensPrefixLevelPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnStorageLens_PrefixLevelPropertyValidator(properties).assertSuccess();
      return {
        StorageMetrics: cfnStorageLensPrefixLevelStorageMetricsPropertyToCloudFormation(properties.storageMetrics)
      };
    }
    function CfnStorageLensPrefixLevelPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("storageMetrics", "StorageMetrics", CfnStorageLensPrefixLevelStorageMetricsPropertyFromCloudFormation(properties.StorageMetrics));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnStorageLens_PrefixLevelStorageMetricsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("isEnabled", cdk.validateBoolean)(properties.isEnabled));
      errors.collect(cdk.propertyValidator("selectionCriteria", CfnStorageLens_SelectionCriteriaPropertyValidator)(properties.selectionCriteria));
      return errors.wrap('supplied properties not correct for "PrefixLevelStorageMetricsProperty"');
    }
    function cfnStorageLensPrefixLevelStorageMetricsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnStorageLens_PrefixLevelStorageMetricsPropertyValidator(properties).assertSuccess();
      return {
        IsEnabled: cdk.booleanToCloudFormation(properties.isEnabled),
        SelectionCriteria: cfnStorageLensSelectionCriteriaPropertyToCloudFormation(properties.selectionCriteria)
      };
    }
    function CfnStorageLensPrefixLevelStorageMetricsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("isEnabled", "IsEnabled", properties.IsEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IsEnabled) : void 0);
      ret.addPropertyResult("selectionCriteria", "SelectionCriteria", properties.SelectionCriteria != null ? CfnStorageLensSelectionCriteriaPropertyFromCloudFormation(properties.SelectionCriteria) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnStorageLens_S3BucketDestinationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("accountId", cdk.requiredValidator)(properties.accountId));
      errors.collect(cdk.propertyValidator("accountId", cdk.validateString)(properties.accountId));
      errors.collect(cdk.propertyValidator("arn", cdk.requiredValidator)(properties.arn));
      errors.collect(cdk.propertyValidator("arn", cdk.validateString)(properties.arn));
      errors.collect(cdk.propertyValidator("encryption", CfnStorageLens_EncryptionPropertyValidator)(properties.encryption));
      errors.collect(cdk.propertyValidator("format", cdk.requiredValidator)(properties.format));
      errors.collect(cdk.propertyValidator("format", cdk.validateString)(properties.format));
      errors.collect(cdk.propertyValidator("outputSchemaVersion", cdk.requiredValidator)(properties.outputSchemaVersion));
      errors.collect(cdk.propertyValidator("outputSchemaVersion", cdk.validateString)(properties.outputSchemaVersion));
      errors.collect(cdk.propertyValidator("prefix", cdk.validateString)(properties.prefix));
      return errors.wrap('supplied properties not correct for "S3BucketDestinationProperty"');
    }
    function cfnStorageLensS3BucketDestinationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnStorageLens_S3BucketDestinationPropertyValidator(properties).assertSuccess();
      return {
        AccountId: cdk.stringToCloudFormation(properties.accountId),
        Arn: cdk.stringToCloudFormation(properties.arn),
        Encryption: cfnStorageLensEncryptionPropertyToCloudFormation(properties.encryption),
        Format: cdk.stringToCloudFormation(properties.format),
        OutputSchemaVersion: cdk.stringToCloudFormation(properties.outputSchemaVersion),
        Prefix: cdk.stringToCloudFormation(properties.prefix)
      };
    }
    function CfnStorageLensS3BucketDestinationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("accountId", "AccountId", cfn_parse.FromCloudFormation.getString(properties.AccountId));
      ret.addPropertyResult("arn", "Arn", cfn_parse.FromCloudFormation.getString(properties.Arn));
      ret.addPropertyResult("encryption", "Encryption", properties.Encryption != null ? CfnStorageLensEncryptionPropertyFromCloudFormation(properties.Encryption) : void 0);
      ret.addPropertyResult("format", "Format", cfn_parse.FromCloudFormation.getString(properties.Format));
      ret.addPropertyResult("outputSchemaVersion", "OutputSchemaVersion", cfn_parse.FromCloudFormation.getString(properties.OutputSchemaVersion));
      ret.addPropertyResult("prefix", "Prefix", properties.Prefix != null ? cfn_parse.FromCloudFormation.getString(properties.Prefix) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnStorageLens_SelectionCriteriaPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("delimiter", cdk.validateString)(properties.delimiter));
      errors.collect(cdk.propertyValidator("maxDepth", cdk.validateNumber)(properties.maxDepth));
      errors.collect(cdk.propertyValidator("minStorageBytesPercentage", cdk.validateNumber)(properties.minStorageBytesPercentage));
      return errors.wrap('supplied properties not correct for "SelectionCriteriaProperty"');
    }
    function cfnStorageLensSelectionCriteriaPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnStorageLens_SelectionCriteriaPropertyValidator(properties).assertSuccess();
      return {
        Delimiter: cdk.stringToCloudFormation(properties.delimiter),
        MaxDepth: cdk.numberToCloudFormation(properties.maxDepth),
        MinStorageBytesPercentage: cdk.numberToCloudFormation(properties.minStorageBytesPercentage)
      };
    }
    function CfnStorageLensSelectionCriteriaPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("delimiter", "Delimiter", properties.Delimiter != null ? cfn_parse.FromCloudFormation.getString(properties.Delimiter) : void 0);
      ret.addPropertyResult("maxDepth", "MaxDepth", properties.MaxDepth != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxDepth) : void 0);
      ret.addPropertyResult("minStorageBytesPercentage", "MinStorageBytesPercentage", properties.MinStorageBytesPercentage != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinStorageBytesPercentage) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnStorageLens_StorageLensConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("accountLevel", cdk.requiredValidator)(properties.accountLevel));
      errors.collect(cdk.propertyValidator("accountLevel", CfnStorageLens_AccountLevelPropertyValidator)(properties.accountLevel));
      errors.collect(cdk.propertyValidator("awsOrg", CfnStorageLens_AwsOrgPropertyValidator)(properties.awsOrg));
      errors.collect(cdk.propertyValidator("dataExport", CfnStorageLens_DataExportPropertyValidator)(properties.dataExport));
      errors.collect(cdk.propertyValidator("exclude", CfnStorageLens_BucketsAndRegionsPropertyValidator)(properties.exclude));
      errors.collect(cdk.propertyValidator("id", cdk.requiredValidator)(properties.id));
      errors.collect(cdk.propertyValidator("id", cdk.validateString)(properties.id));
      errors.collect(cdk.propertyValidator("include", CfnStorageLens_BucketsAndRegionsPropertyValidator)(properties.include));
      errors.collect(cdk.propertyValidator("isEnabled", cdk.requiredValidator)(properties.isEnabled));
      errors.collect(cdk.propertyValidator("isEnabled", cdk.validateBoolean)(properties.isEnabled));
      errors.collect(cdk.propertyValidator("storageLensArn", cdk.validateString)(properties.storageLensArn));
      return errors.wrap('supplied properties not correct for "StorageLensConfigurationProperty"');
    }
    function cfnStorageLensStorageLensConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnStorageLens_StorageLensConfigurationPropertyValidator(properties).assertSuccess();
      return {
        AccountLevel: cfnStorageLensAccountLevelPropertyToCloudFormation(properties.accountLevel),
        AwsOrg: cfnStorageLensAwsOrgPropertyToCloudFormation(properties.awsOrg),
        DataExport: cfnStorageLensDataExportPropertyToCloudFormation(properties.dataExport),
        Exclude: cfnStorageLensBucketsAndRegionsPropertyToCloudFormation(properties.exclude),
        Id: cdk.stringToCloudFormation(properties.id),
        Include: cfnStorageLensBucketsAndRegionsPropertyToCloudFormation(properties.include),
        IsEnabled: cdk.booleanToCloudFormation(properties.isEnabled),
        StorageLensArn: cdk.stringToCloudFormation(properties.storageLensArn)
      };
    }
    function CfnStorageLensStorageLensConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("accountLevel", "AccountLevel", CfnStorageLensAccountLevelPropertyFromCloudFormation(properties.AccountLevel));
      ret.addPropertyResult("awsOrg", "AwsOrg", properties.AwsOrg != null ? CfnStorageLensAwsOrgPropertyFromCloudFormation(properties.AwsOrg) : void 0);
      ret.addPropertyResult("dataExport", "DataExport", properties.DataExport != null ? CfnStorageLensDataExportPropertyFromCloudFormation(properties.DataExport) : void 0);
      ret.addPropertyResult("exclude", "Exclude", properties.Exclude != null ? CfnStorageLensBucketsAndRegionsPropertyFromCloudFormation(properties.Exclude) : void 0);
      ret.addPropertyResult("id", "Id", cfn_parse.FromCloudFormation.getString(properties.Id));
      ret.addPropertyResult("include", "Include", properties.Include != null ? CfnStorageLensBucketsAndRegionsPropertyFromCloudFormation(properties.Include) : void 0);
      ret.addPropertyResult("isEnabled", "IsEnabled", cfn_parse.FromCloudFormation.getBoolean(properties.IsEnabled));
      ret.addPropertyResult("storageLensArn", "StorageLensArn", properties.StorageLensArn != null ? cfn_parse.FromCloudFormation.getString(properties.StorageLensArn) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-s3/lib/bucket-policy.js
var require_bucket_policy = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-s3/lib/bucket-policy.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BucketPolicy = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var aws_iam_1 = require_lib9();
    var core_1 = require_lib8();
    var s3_generated_1 = require_s3_generated();
    var BucketPolicy = class extends core_1.Resource {
      constructor(scope, id, props) {
        super(scope, id);
        this.document = new aws_iam_1.PolicyDocument();
        if (!props.bucket.bucketName) {
          throw new Error("Bucket doesn't have a bucketName defined");
        }
        this.resource = new s3_generated_1.CfnBucketPolicy(this, "Resource", {
          bucket: props.bucket.bucketName,
          policyDocument: this.document
        });
        if (props.removalPolicy) {
          this.resource.applyRemovalPolicy(props.removalPolicy);
        }
      }
      applyRemovalPolicy(removalPolicy) {
        this.resource.applyRemovalPolicy(removalPolicy);
      }
    };
    exports2.BucketPolicy = BucketPolicy;
    _a = JSII_RTTI_SYMBOL_1;
    BucketPolicy[_a] = { fqn: "@aws-cdk/aws-s3.BucketPolicy", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-s3/lib/destination.js
var require_destination2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-s3/lib/destination.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BucketNotificationDestinationType = void 0;
    var BucketNotificationDestinationType;
    (function(BucketNotificationDestinationType2) {
      BucketNotificationDestinationType2[BucketNotificationDestinationType2["LAMBDA"] = 0] = "LAMBDA";
      BucketNotificationDestinationType2[BucketNotificationDestinationType2["QUEUE"] = 1] = "QUEUE";
      BucketNotificationDestinationType2[BucketNotificationDestinationType2["TOPIC"] = 2] = "TOPIC";
    })(BucketNotificationDestinationType = exports2.BucketNotificationDestinationType || (exports2.BucketNotificationDestinationType = {}));
  }
});

// asset-input/node_modules/@aws-cdk/aws-s3/lib/notifications-resource/notifications-resource-handler.js
var require_notifications_resource_handler = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-s3/lib/notifications-resource/notifications-resource-handler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NotificationsResourceHandler = void 0;
    var fs = require("fs");
    var path = require("path");
    var iam = require_lib9();
    var cdk = require_lib8();
    var core_1 = require_lib8();
    var NotificationsResourceHandler = class extends core_1.Construct {
      constructor(scope, id) {
        super(scope, id);
        this.role = new iam.Role(this, "Role", {
          assumedBy: new iam.ServicePrincipal("lambda.amazonaws.com"),
          managedPolicies: [
            iam.ManagedPolicy.fromAwsManagedPolicyName("service-role/AWSLambdaBasicExecutionRole")
          ]
        });
        this.role.addToPolicy(new iam.PolicyStatement({
          actions: ["s3:PutBucketNotification"],
          resources: ["*"]
        }));
        const resourceType = "AWS::Lambda::Function";
        class InLineLambda extends cdk.CfnResource {
          constructor() {
            super(...arguments);
            this.tags = new cdk.TagManager(cdk.TagType.STANDARD, resourceType);
          }
          renderProperties(properties) {
            properties.Tags = cdk.listMapper(cdk.cfnTagToCloudFormation)(this.tags.renderTags());
            delete properties.tags;
            return properties;
          }
        }
        const resource = new InLineLambda(this, "Resource", {
          type: resourceType,
          properties: {
            Description: 'AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)',
            Code: { ZipFile: fs.readFileSync(path.join(__dirname, "lambda/index.py"), "utf8") },
            Handler: "index.handler",
            Role: this.role.roleArn,
            Runtime: "python3.7",
            Timeout: 300
          }
        });
        resource.node.addDependency(this.role);
        this.functionArn = resource.getAtt("Arn").toString();
      }
      static singleton(context) {
        const root = cdk.Stack.of(context);
        const logicalId = "BucketNotificationsHandler050a0587b7544547bf325f094a3db834";
        let lambda = root.node.tryFindChild(logicalId);
        if (!lambda) {
          lambda = new NotificationsResourceHandler(root, logicalId);
        }
        return lambda;
      }
    };
    exports2.NotificationsResourceHandler = NotificationsResourceHandler;
  }
});

// asset-input/node_modules/@aws-cdk/aws-s3/lib/notifications-resource/notifications-resource.js
var require_notifications_resource = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-s3/lib/notifications-resource/notifications-resource.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BucketNotifications = void 0;
    var iam = require_lib9();
    var cdk = require_lib8();
    var bucket_1 = require_bucket();
    var destination_1 = require_destination2();
    var notifications_resource_handler_1 = require_notifications_resource_handler();
    var core_1 = require_lib8();
    var BucketNotifications = class extends core_1.Construct {
      constructor(scope, id, props) {
        super(scope, id);
        this.lambdaNotifications = new Array();
        this.queueNotifications = new Array();
        this.topicNotifications = new Array();
        this.bucket = props.bucket;
      }
      addNotification(event, target, ...filters) {
        const resource = this.createResourceOnce();
        const targetProps = target.bind(this, this.bucket);
        const commonConfig = {
          Events: [event],
          Filter: renderFilters(filters)
        };
        if (targetProps.dependencies) {
          resource.node.addDependency(...targetProps.dependencies);
        }
        switch (targetProps.type) {
          case destination_1.BucketNotificationDestinationType.LAMBDA:
            this.lambdaNotifications.push(__spreadProps(__spreadValues({}, commonConfig), { LambdaFunctionArn: targetProps.arn }));
            break;
          case destination_1.BucketNotificationDestinationType.QUEUE:
            this.queueNotifications.push(__spreadProps(__spreadValues({}, commonConfig), { QueueArn: targetProps.arn }));
            break;
          case destination_1.BucketNotificationDestinationType.TOPIC:
            this.topicNotifications.push(__spreadProps(__spreadValues({}, commonConfig), { TopicArn: targetProps.arn }));
            break;
          default:
            throw new Error("Unsupported notification target type:" + destination_1.BucketNotificationDestinationType[targetProps.type]);
        }
      }
      renderNotificationConfiguration() {
        return {
          LambdaFunctionConfigurations: this.lambdaNotifications.length > 0 ? this.lambdaNotifications : void 0,
          QueueConfigurations: this.queueNotifications.length > 0 ? this.queueNotifications : void 0,
          TopicConfigurations: this.topicNotifications.length > 0 ? this.topicNotifications : void 0
        };
      }
      createResourceOnce() {
        if (!this.resource) {
          const handler = notifications_resource_handler_1.NotificationsResourceHandler.singleton(this);
          const managed = this.bucket instanceof bucket_1.Bucket;
          if (!managed) {
            handler.role.addToPolicy(new iam.PolicyStatement({
              actions: ["s3:GetBucketNotification"],
              resources: ["*"]
            }));
          }
          this.resource = new cdk.CfnResource(this, "Resource", {
            type: "Custom::S3BucketNotifications",
            properties: {
              ServiceToken: handler.functionArn,
              BucketName: this.bucket.bucketName,
              NotificationConfiguration: cdk.Lazy.any({ produce: () => this.renderNotificationConfiguration() }),
              Managed: managed
            }
          });
        }
        return this.resource;
      }
    };
    exports2.BucketNotifications = BucketNotifications;
    function renderFilters(filters) {
      if (!filters || filters.length === 0) {
        return void 0;
      }
      const renderedRules = new Array();
      let hasPrefix = false;
      let hasSuffix = false;
      for (const rule of filters) {
        if (!rule.suffix && !rule.prefix) {
          throw new Error("NotificationKeyFilter must specify `prefix` and/or `suffix`");
        }
        if (rule.suffix) {
          if (hasSuffix) {
            throw new Error("Cannot specify more than one suffix rule in a filter.");
          }
          renderedRules.push({ Name: "suffix", Value: rule.suffix });
          hasSuffix = true;
        }
        if (rule.prefix) {
          if (hasPrefix) {
            throw new Error("Cannot specify more than one prefix rule in a filter.");
          }
          renderedRules.push({ Name: "prefix", Value: rule.prefix });
          hasPrefix = true;
        }
      }
      return {
        Key: {
          FilterRules: renderedRules
        }
      };
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-s3/lib/notifications-resource/index.js
var require_notifications_resource2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-s3/lib/notifications-resource/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_notifications_resource(), exports2);
  }
});

// asset-input/node_modules/@aws-cdk/aws-s3/lib/perms.js
var require_perms2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-s3/lib/perms.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.KEY_WRITE_ACTIONS = exports2.KEY_READ_ACTIONS = exports2.BUCKET_DELETE_ACTIONS = exports2.BUCKET_PUT_ACL_ACTIONS = exports2.BUCKET_PUT_ACTIONS = exports2.LEGACY_BUCKET_PUT_ACTIONS = exports2.BUCKET_READ_METADATA_ACTIONS = exports2.BUCKET_READ_ACTIONS = void 0;
    exports2.BUCKET_READ_ACTIONS = [
      "s3:GetObject*",
      "s3:GetBucket*",
      "s3:List*"
    ];
    exports2.BUCKET_READ_METADATA_ACTIONS = [
      "s3:GetBucket*",
      "s3:List*"
    ];
    exports2.LEGACY_BUCKET_PUT_ACTIONS = [
      "s3:PutObject*",
      "s3:Abort*"
    ];
    exports2.BUCKET_PUT_ACTIONS = [
      "s3:PutObject",
      "s3:Abort*"
    ];
    exports2.BUCKET_PUT_ACL_ACTIONS = [
      "s3:PutObjectAcl"
    ];
    exports2.BUCKET_DELETE_ACTIONS = [
      "s3:DeleteObject*"
    ];
    exports2.KEY_READ_ACTIONS = [
      "kms:Decrypt",
      "kms:DescribeKey"
    ];
    exports2.KEY_WRITE_ACTIONS = [
      "kms:Encrypt",
      "kms:ReEncrypt*",
      "kms:GenerateDataKey*",
      "kms:Decrypt"
    ];
  }
});

// asset-input/node_modules/@aws-cdk/aws-s3/lib/util.js
var require_util6 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-s3/lib/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseBucketName = exports2.parseBucketArn = void 0;
    var cdk = require_lib8();
    function parseBucketArn(construct, props) {
      if (props.bucketArn) {
        return props.bucketArn;
      }
      if (props.bucketName) {
        return cdk.Stack.of(construct).formatArn({
          region: "",
          account: "",
          service: "s3",
          resource: props.bucketName
        });
      }
      throw new Error("Cannot determine bucket ARN. At least `bucketArn` or `bucketName` is needed");
    }
    exports2.parseBucketArn = parseBucketArn;
    function parseBucketName(construct, props) {
      if (props.bucketName) {
        return props.bucketName;
      }
      if (props.bucketArn) {
        return cdk.Stack.of(construct).parseArn(props.bucketArn).resource;
      }
      return void 0;
    }
    exports2.parseBucketName = parseBucketName;
  }
});

// asset-input/node_modules/@aws-cdk/aws-s3/lib/bucket.js
var require_bucket = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-s3/lib/bucket.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    var _d;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ReplaceKey = exports2.BucketAccessControl = exports2.EventType = exports2.BucketEncryption = exports2.Bucket = exports2.ObjectOwnership = exports2.InventoryObjectVersion = exports2.InventoryFrequency = exports2.InventoryFormat = exports2.RedirectProtocol = exports2.HttpMethods = exports2.BlockPublicAccess = exports2.BucketBase = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var os_1 = require("os");
    var path = require("path");
    var events = require_lib15();
    var iam = require_lib9();
    var kms = require_lib14();
    var core_1 = require_lib8();
    var cxapi = require_lib5();
    var bucket_policy_1 = require_bucket_policy();
    var notifications_resource_1 = require_notifications_resource2();
    var perms = require_perms2();
    var s3_generated_1 = require_s3_generated();
    var util_1 = require_util6();
    var AUTO_DELETE_OBJECTS_RESOURCE_TYPE = "Custom::S3AutoDeleteObjects";
    var AUTO_DELETE_OBJECTS_TAG = "aws-cdk:auto-delete-objects";
    var BucketBase = class extends core_1.Resource {
      constructor(scope, id, props = {}) {
        super(scope, id, props);
        this.notifications = new notifications_resource_1.BucketNotifications(this, "Notifications", { bucket: this });
      }
      onCloudTrailEvent(id, options = {}) {
        var _e, _f;
        const rule = new events.Rule(this, id, options);
        rule.addTarget(options.target);
        rule.addEventPattern({
          source: ["aws.s3"],
          detailType: ["AWS API Call via CloudTrail"],
          detail: {
            resources: {
              ARN: (_f = (_e = options.paths) === null || _e === void 0 ? void 0 : _e.map((p) => this.arnForObjects(p))) !== null && _f !== void 0 ? _f : [this.bucketArn]
            }
          }
        });
        return rule;
      }
      onCloudTrailPutObject(id, options = {}) {
        const rule = this.onCloudTrailEvent(id, options);
        rule.addEventPattern({
          detail: {
            eventName: ["PutObject"]
          }
        });
        return rule;
      }
      onCloudTrailWriteObject(id, options = {}) {
        const rule = this.onCloudTrailEvent(id, options);
        rule.addEventPattern({
          detail: {
            eventName: [
              "CompleteMultipartUpload",
              "CopyObject",
              "PutObject"
            ],
            requestParameters: {
              bucketName: [this.bucketName],
              key: options.paths
            }
          }
        });
        return rule;
      }
      addToResourcePolicy(permission) {
        if (!this.policy && this.autoCreatePolicy) {
          this.policy = new bucket_policy_1.BucketPolicy(this, "Policy", { bucket: this });
        }
        if (this.policy) {
          this.policy.document.addStatements(permission);
          return { statementAdded: true, policyDependable: this.policy };
        }
        return { statementAdded: false };
      }
      validate() {
        var _e;
        const errors = super.validate();
        errors.push(...((_e = this.policy) === null || _e === void 0 ? void 0 : _e.document.validateForResourcePolicy()) || []);
        return errors;
      }
      urlForObject(key) {
        const stack = core_1.Stack.of(this);
        const prefix = `https://s3.${this.env.region}.${stack.urlSuffix}/`;
        if (typeof key !== "string") {
          return this.urlJoin(prefix, this.bucketName);
        }
        return this.urlJoin(prefix, this.bucketName, key);
      }
      virtualHostedUrlForObject(key, options) {
        var _e;
        const domainName = ((_e = options === null || options === void 0 ? void 0 : options.regional) !== null && _e !== void 0 ? _e : true) ? this.bucketRegionalDomainName : this.bucketDomainName;
        const prefix = `https://${domainName}`;
        if (typeof key !== "string") {
          return prefix;
        }
        return this.urlJoin(prefix, key);
      }
      s3UrlForObject(key) {
        const prefix = "s3://";
        if (typeof key !== "string") {
          return this.urlJoin(prefix, this.bucketName);
        }
        return this.urlJoin(prefix, this.bucketName, key);
      }
      arnForObjects(keyPattern) {
        return `${this.bucketArn}/${keyPattern}`;
      }
      grantRead(identity, objectsKeyPattern = "*") {
        return this.grant(identity, perms.BUCKET_READ_ACTIONS, perms.KEY_READ_ACTIONS, this.bucketArn, this.arnForObjects(objectsKeyPattern));
      }
      grantWrite(identity, objectsKeyPattern = "*") {
        return this.grant(identity, this.writeActions, perms.KEY_WRITE_ACTIONS, this.bucketArn, this.arnForObjects(objectsKeyPattern));
      }
      grantPut(identity, objectsKeyPattern = "*") {
        return this.grant(identity, this.putActions, perms.KEY_WRITE_ACTIONS, this.arnForObjects(objectsKeyPattern));
      }
      grantPutAcl(identity, objectsKeyPattern = "*") {
        return this.grant(identity, perms.BUCKET_PUT_ACL_ACTIONS, [], this.arnForObjects(objectsKeyPattern));
      }
      grantDelete(identity, objectsKeyPattern = "*") {
        return this.grant(identity, perms.BUCKET_DELETE_ACTIONS, [], this.arnForObjects(objectsKeyPattern));
      }
      grantReadWrite(identity, objectsKeyPattern = "*") {
        const bucketActions = perms.BUCKET_READ_ACTIONS.concat(this.writeActions);
        const keyActions = [...new Set([...perms.KEY_READ_ACTIONS, ...perms.KEY_WRITE_ACTIONS])];
        return this.grant(identity, bucketActions, keyActions, this.bucketArn, this.arnForObjects(objectsKeyPattern));
      }
      grantPublicAccess(keyPrefix = "*", ...allowedActions) {
        if (this.disallowPublicAccess) {
          throw new Error("Cannot grant public access when 'blockPublicPolicy' is enabled");
        }
        allowedActions = allowedActions.length > 0 ? allowedActions : ["s3:GetObject"];
        return iam.Grant.addToPrincipalOrResource({
          actions: allowedActions,
          resourceArns: [this.arnForObjects(keyPrefix)],
          grantee: new iam.AnyPrincipal(),
          resource: this
        });
      }
      addEventNotification(event, dest, ...filters) {
        this.notifications.addNotification(event, dest, ...filters);
      }
      addObjectCreatedNotification(dest, ...filters) {
        return this.addEventNotification(EventType.OBJECT_CREATED, dest, ...filters);
      }
      addObjectRemovedNotification(dest, ...filters) {
        return this.addEventNotification(EventType.OBJECT_REMOVED, dest, ...filters);
      }
      get writeActions() {
        return [
          ...perms.BUCKET_DELETE_ACTIONS,
          ...this.putActions
        ];
      }
      get putActions() {
        return core_1.FeatureFlags.of(this).isEnabled(cxapi.S3_GRANT_WRITE_WITHOUT_ACL) ? perms.BUCKET_PUT_ACTIONS : perms.LEGACY_BUCKET_PUT_ACTIONS;
      }
      urlJoin(...components) {
        return components.reduce((result, component) => {
          if (result.endsWith("/")) {
            result = result.slice(0, -1);
          }
          if (component.startsWith("/")) {
            component = component.slice(1);
          }
          return `${result}/${component}`;
        });
      }
      grant(grantee, bucketActions, keyActions, resourceArn, ...otherResourceArns) {
        const resources = [resourceArn, ...otherResourceArns];
        const ret = iam.Grant.addToPrincipalOrResource({
          grantee,
          actions: bucketActions,
          resourceArns: resources,
          resource: this
        });
        if (this.encryptionKey && keyActions && keyActions.length !== 0) {
          this.encryptionKey.grant(grantee, ...keyActions);
        }
        return ret;
      }
    };
    exports2.BucketBase = BucketBase;
    _a = JSII_RTTI_SYMBOL_1;
    BucketBase[_a] = { fqn: "@aws-cdk/aws-s3.BucketBase", version: "1.132.0" };
    var BlockPublicAccess = class {
      constructor(options) {
        this.blockPublicAcls = options.blockPublicAcls;
        this.blockPublicPolicy = options.blockPublicPolicy;
        this.ignorePublicAcls = options.ignorePublicAcls;
        this.restrictPublicBuckets = options.restrictPublicBuckets;
      }
    };
    exports2.BlockPublicAccess = BlockPublicAccess;
    _b = JSII_RTTI_SYMBOL_1;
    BlockPublicAccess[_b] = { fqn: "@aws-cdk/aws-s3.BlockPublicAccess", version: "1.132.0" };
    BlockPublicAccess.BLOCK_ALL = new BlockPublicAccess({
      blockPublicAcls: true,
      blockPublicPolicy: true,
      ignorePublicAcls: true,
      restrictPublicBuckets: true
    });
    BlockPublicAccess.BLOCK_ACLS = new BlockPublicAccess({
      blockPublicAcls: true,
      ignorePublicAcls: true
    });
    var HttpMethods;
    (function(HttpMethods2) {
      HttpMethods2["GET"] = "GET";
      HttpMethods2["PUT"] = "PUT";
      HttpMethods2["HEAD"] = "HEAD";
      HttpMethods2["POST"] = "POST";
      HttpMethods2["DELETE"] = "DELETE";
    })(HttpMethods = exports2.HttpMethods || (exports2.HttpMethods = {}));
    var RedirectProtocol;
    (function(RedirectProtocol2) {
      RedirectProtocol2["HTTP"] = "http";
      RedirectProtocol2["HTTPS"] = "https";
    })(RedirectProtocol = exports2.RedirectProtocol || (exports2.RedirectProtocol = {}));
    var InventoryFormat;
    (function(InventoryFormat2) {
      InventoryFormat2["CSV"] = "CSV";
      InventoryFormat2["PARQUET"] = "Parquet";
      InventoryFormat2["ORC"] = "ORC";
    })(InventoryFormat = exports2.InventoryFormat || (exports2.InventoryFormat = {}));
    var InventoryFrequency;
    (function(InventoryFrequency2) {
      InventoryFrequency2["DAILY"] = "Daily";
      InventoryFrequency2["WEEKLY"] = "Weekly";
    })(InventoryFrequency = exports2.InventoryFrequency || (exports2.InventoryFrequency = {}));
    var InventoryObjectVersion;
    (function(InventoryObjectVersion2) {
      InventoryObjectVersion2["ALL"] = "All";
      InventoryObjectVersion2["CURRENT"] = "Current";
    })(InventoryObjectVersion = exports2.InventoryObjectVersion || (exports2.InventoryObjectVersion = {}));
    var ObjectOwnership;
    (function(ObjectOwnership2) {
      ObjectOwnership2["BUCKET_OWNER_PREFERRED"] = "BucketOwnerPreferred";
      ObjectOwnership2["OBJECT_WRITER"] = "ObjectWriter";
    })(ObjectOwnership = exports2.ObjectOwnership || (exports2.ObjectOwnership = {}));
    var Bucket = class extends BucketBase {
      constructor(scope, id, props = {}) {
        var _e;
        super(scope, id, {
          physicalName: props.bucketName
        });
        this.autoCreatePolicy = true;
        this.lifecycleRules = [];
        this.metrics = [];
        this.cors = [];
        this.inventories = [];
        const { bucketEncryption, encryptionKey } = this.parseEncryption(props);
        Bucket.validateBucketName(this.physicalName);
        const websiteConfiguration = this.renderWebsiteConfiguration(props);
        this.isWebsite = websiteConfiguration !== void 0;
        const resource = new s3_generated_1.CfnBucket(this, "Resource", {
          bucketName: this.physicalName,
          bucketEncryption,
          versioningConfiguration: props.versioned ? { status: "Enabled" } : void 0,
          lifecycleConfiguration: core_1.Lazy.any({ produce: () => this.parseLifecycleConfiguration() }),
          websiteConfiguration,
          publicAccessBlockConfiguration: props.blockPublicAccess,
          metricsConfigurations: core_1.Lazy.any({ produce: () => this.parseMetricConfiguration() }),
          corsConfiguration: core_1.Lazy.any({ produce: () => this.parseCorsConfiguration() }),
          accessControl: core_1.Lazy.string({ produce: () => this.accessControl }),
          loggingConfiguration: this.parseServerAccessLogs(props),
          inventoryConfigurations: core_1.Lazy.any({ produce: () => this.parseInventoryConfiguration() }),
          ownershipControls: this.parseOwnershipControls(props)
        });
        this._resource = resource;
        resource.applyRemovalPolicy(props.removalPolicy);
        this.versioned = props.versioned;
        this.encryptionKey = encryptionKey;
        this.bucketName = this.getResourceNameAttribute(resource.ref);
        this.bucketArn = this.getResourceArnAttribute(resource.attrArn, {
          region: "",
          account: "",
          service: "s3",
          resource: this.physicalName
        });
        this.bucketDomainName = resource.attrDomainName;
        this.bucketWebsiteUrl = resource.attrWebsiteUrl;
        this.bucketWebsiteDomainName = core_1.Fn.select(2, core_1.Fn.split("/", this.bucketWebsiteUrl));
        this.bucketDualStackDomainName = resource.attrDualStackDomainName;
        this.bucketRegionalDomainName = resource.attrRegionalDomainName;
        this.disallowPublicAccess = props.blockPublicAccess && props.blockPublicAccess.blockPublicPolicy;
        this.accessControl = props.accessControl;
        if (props.enforceSSL) {
          this.enforceSSLStatement();
        }
        if (props.serverAccessLogsBucket instanceof Bucket) {
          props.serverAccessLogsBucket.allowLogDelivery();
        }
        for (const inventory of (_e = props.inventories) !== null && _e !== void 0 ? _e : []) {
          this.addInventory(inventory);
        }
        (props.metrics || []).forEach(this.addMetric.bind(this));
        (props.cors || []).forEach(this.addCorsRule.bind(this));
        (props.lifecycleRules || []).forEach(this.addLifecycleRule.bind(this));
        if (props.publicReadAccess) {
          this.grantPublicAccess();
        }
        if (props.autoDeleteObjects) {
          if (props.removalPolicy !== core_1.RemovalPolicy.DESTROY) {
            throw new Error("Cannot use 'autoDeleteObjects' property on a bucket without setting removal policy to 'DESTROY'.");
          }
          this.enableAutoDeleteObjects();
        }
      }
      static fromBucketArn(scope, id, bucketArn) {
        return Bucket.fromBucketAttributes(scope, id, { bucketArn });
      }
      static fromBucketName(scope, id, bucketName) {
        return Bucket.fromBucketAttributes(scope, id, { bucketName });
      }
      static fromBucketAttributes(scope, id, attrs) {
        var _e;
        const stack = core_1.Stack.of(scope);
        const region = (_e = attrs.region) !== null && _e !== void 0 ? _e : stack.region;
        const urlSuffix = stack.urlSuffix;
        const bucketName = util_1.parseBucketName(scope, attrs);
        if (!bucketName) {
          throw new Error("Bucket name is required");
        }
        Bucket.validateBucketName(bucketName);
        const newUrlFormat = attrs.bucketWebsiteNewUrlFormat === void 0 ? false : attrs.bucketWebsiteNewUrlFormat;
        const websiteDomain = newUrlFormat ? `${bucketName}.s3-website.${region}.${urlSuffix}` : `${bucketName}.s3-website-${region}.${urlSuffix}`;
        class Import extends BucketBase {
          constructor() {
            var _e2;
            super(...arguments);
            this.bucketName = bucketName;
            this.bucketArn = util_1.parseBucketArn(scope, attrs);
            this.bucketDomainName = attrs.bucketDomainName || `${bucketName}.s3.${urlSuffix}`;
            this.bucketWebsiteUrl = attrs.bucketWebsiteUrl || `http://${websiteDomain}`;
            this.bucketWebsiteDomainName = attrs.bucketWebsiteUrl ? core_1.Fn.select(2, core_1.Fn.split("/", attrs.bucketWebsiteUrl)) : websiteDomain;
            this.bucketRegionalDomainName = attrs.bucketRegionalDomainName || `${bucketName}.s3.${region}.${urlSuffix}`;
            this.bucketDualStackDomainName = attrs.bucketDualStackDomainName || `${bucketName}.s3.dualstack.${region}.${urlSuffix}`;
            this.bucketWebsiteNewUrlFormat = newUrlFormat;
            this.encryptionKey = attrs.encryptionKey;
            this.isWebsite = (_e2 = attrs.isWebsite) !== null && _e2 !== void 0 ? _e2 : false;
            this.policy = void 0;
            this.autoCreatePolicy = false;
            this.disallowPublicAccess = false;
          }
          export() {
            return attrs;
          }
        }
        return new Import(scope, id, {
          account: attrs.account,
          region: attrs.region
        });
      }
      static validateBucketName(physicalName) {
        const bucketName = physicalName;
        if (!bucketName || core_1.Token.isUnresolved(bucketName)) {
          return;
        }
        const errors = [];
        if (bucketName.length < 3 || bucketName.length > 63) {
          errors.push("Bucket name must be at least 3 and no more than 63 characters");
        }
        const charsetMatch = bucketName.match(/[^a-z0-9.-]/);
        if (charsetMatch) {
          errors.push(`Bucket name must only contain lowercase characters and the symbols, period (.) and dash (-) (offset: ${charsetMatch.index})`);
        }
        if (!/[a-z0-9]/.test(bucketName.charAt(0))) {
          errors.push("Bucket name must start and end with a lowercase character or number (offset: 0)");
        }
        if (!/[a-z0-9]/.test(bucketName.charAt(bucketName.length - 1))) {
          errors.push(`Bucket name must start and end with a lowercase character or number (offset: ${bucketName.length - 1})`);
        }
        const consecSymbolMatch = bucketName.match(/\.-|-\.|\.\./);
        if (consecSymbolMatch) {
          errors.push(`Bucket name must not have dash next to period, or period next to dash, or consecutive periods (offset: ${consecSymbolMatch.index})`);
        }
        if (/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/.test(bucketName)) {
          errors.push("Bucket name must not resemble an IP address");
        }
        if (errors.length > 0) {
          throw new Error(`Invalid S3 bucket name (value: ${bucketName})${os_1.EOL}${errors.join(os_1.EOL)}`);
        }
      }
      addLifecycleRule(rule) {
        if ((rule.noncurrentVersionExpiration !== void 0 || rule.noncurrentVersionTransitions && rule.noncurrentVersionTransitions.length > 0) && !this.versioned) {
          throw new Error("Cannot use 'noncurrent' rules on a nonversioned bucket");
        }
        this.lifecycleRules.push(rule);
      }
      addMetric(metric) {
        this.metrics.push(metric);
      }
      addCorsRule(rule) {
        this.cors.push(rule);
      }
      addInventory(inventory) {
        this.inventories.push(inventory);
      }
      enforceSSLStatement() {
        const statement = new iam.PolicyStatement({
          actions: ["s3:*"],
          conditions: {
            Bool: { "aws:SecureTransport": "false" }
          },
          effect: iam.Effect.DENY,
          resources: [
            this.bucketArn,
            this.arnForObjects("*")
          ],
          principals: [new iam.AnyPrincipal()]
        });
        this.addToResourcePolicy(statement);
      }
      parseEncryption(props) {
        let encryptionType = props.encryption;
        if (encryptionType === void 0) {
          encryptionType = props.encryptionKey ? BucketEncryption.KMS : BucketEncryption.UNENCRYPTED;
        }
        if (encryptionType !== BucketEncryption.KMS && props.encryptionKey) {
          throw new Error(`encryptionKey is specified, so 'encryption' must be set to KMS (value: ${encryptionType})`);
        }
        if (props.bucketKeyEnabled && encryptionType !== BucketEncryption.KMS) {
          throw new Error(`bucketKeyEnabled is specified, so 'encryption' must be set to KMS (value: ${encryptionType})`);
        }
        if (encryptionType === BucketEncryption.UNENCRYPTED) {
          return { bucketEncryption: void 0, encryptionKey: void 0 };
        }
        if (encryptionType === BucketEncryption.KMS) {
          const encryptionKey = props.encryptionKey || new kms.Key(this, "Key", {
            description: `Created by ${this.node.path}`
          });
          const bucketEncryption = {
            serverSideEncryptionConfiguration: [
              {
                bucketKeyEnabled: props.bucketKeyEnabled,
                serverSideEncryptionByDefault: {
                  sseAlgorithm: "aws:kms",
                  kmsMasterKeyId: encryptionKey.keyArn
                }
              }
            ]
          };
          return { encryptionKey, bucketEncryption };
        }
        if (encryptionType === BucketEncryption.S3_MANAGED) {
          const bucketEncryption = {
            serverSideEncryptionConfiguration: [
              { serverSideEncryptionByDefault: { sseAlgorithm: "AES256" } }
            ]
          };
          return { bucketEncryption };
        }
        if (encryptionType === BucketEncryption.KMS_MANAGED) {
          const bucketEncryption = {
            serverSideEncryptionConfiguration: [
              { serverSideEncryptionByDefault: { sseAlgorithm: "aws:kms" } }
            ]
          };
          return { bucketEncryption };
        }
        throw new Error(`Unexpected 'encryptionType': ${encryptionType}`);
      }
      parseLifecycleConfiguration() {
        if (!this.lifecycleRules || this.lifecycleRules.length === 0) {
          return void 0;
        }
        const self = this;
        return { rules: this.lifecycleRules.map(parseLifecycleRule) };
        function parseLifecycleRule(rule) {
          var _e, _f;
          const enabled = (_e = rule.enabled) !== null && _e !== void 0 ? _e : true;
          const x = {
            abortIncompleteMultipartUpload: rule.abortIncompleteMultipartUploadAfter !== void 0 ? { daysAfterInitiation: rule.abortIncompleteMultipartUploadAfter.toDays() } : void 0,
            expirationDate: rule.expirationDate,
            expirationInDays: (_f = rule.expiration) === null || _f === void 0 ? void 0 : _f.toDays(),
            id: rule.id,
            noncurrentVersionExpirationInDays: rule.noncurrentVersionExpiration && rule.noncurrentVersionExpiration.toDays(),
            noncurrentVersionTransitions: mapOrUndefined(rule.noncurrentVersionTransitions, (t) => ({
              storageClass: t.storageClass.value,
              transitionInDays: t.transitionAfter.toDays()
            })),
            prefix: rule.prefix,
            status: enabled ? "Enabled" : "Disabled",
            transitions: mapOrUndefined(rule.transitions, (t) => ({
              storageClass: t.storageClass.value,
              transitionDate: t.transitionDate,
              transitionInDays: t.transitionAfter && t.transitionAfter.toDays()
            })),
            expiredObjectDeleteMarker: rule.expiredObjectDeleteMarker,
            tagFilters: self.parseTagFilters(rule.tagFilters)
          };
          return x;
        }
      }
      parseServerAccessLogs(props) {
        var _e;
        if (!props.serverAccessLogsBucket && !props.serverAccessLogsPrefix) {
          return void 0;
        }
        return {
          destinationBucketName: (_e = props.serverAccessLogsBucket) === null || _e === void 0 ? void 0 : _e.bucketName,
          logFilePrefix: props.serverAccessLogsPrefix
        };
      }
      parseMetricConfiguration() {
        if (!this.metrics || this.metrics.length === 0) {
          return void 0;
        }
        const self = this;
        return this.metrics.map(parseMetric);
        function parseMetric(metric) {
          return {
            id: metric.id,
            prefix: metric.prefix,
            tagFilters: self.parseTagFilters(metric.tagFilters)
          };
        }
      }
      parseCorsConfiguration() {
        if (!this.cors || this.cors.length === 0) {
          return void 0;
        }
        return { corsRules: this.cors.map(parseCors) };
        function parseCors(rule) {
          return {
            id: rule.id,
            maxAge: rule.maxAge,
            allowedHeaders: rule.allowedHeaders,
            allowedMethods: rule.allowedMethods,
            allowedOrigins: rule.allowedOrigins,
            exposedHeaders: rule.exposedHeaders
          };
        }
      }
      parseTagFilters(tagFilters) {
        if (!tagFilters || tagFilters.length === 0) {
          return void 0;
        }
        return Object.keys(tagFilters).map((tag) => ({
          key: tag,
          value: tagFilters[tag]
        }));
      }
      parseOwnershipControls({ objectOwnership }) {
        if (!objectOwnership) {
          return void 0;
        }
        return {
          rules: [{
            objectOwnership
          }]
        };
      }
      renderWebsiteConfiguration(props) {
        if (!props.websiteErrorDocument && !props.websiteIndexDocument && !props.websiteRedirect && !props.websiteRoutingRules) {
          return void 0;
        }
        if (props.websiteErrorDocument && !props.websiteIndexDocument) {
          throw new Error('"websiteIndexDocument" is required if "websiteErrorDocument" is set');
        }
        if (props.websiteRedirect && (props.websiteErrorDocument || props.websiteIndexDocument || props.websiteRoutingRules)) {
          throw new Error('"websiteIndexDocument", "websiteErrorDocument" and, "websiteRoutingRules" cannot be set if "websiteRedirect" is used');
        }
        const routingRules = props.websiteRoutingRules ? props.websiteRoutingRules.map((rule) => {
          if (rule.condition && !rule.condition.httpErrorCodeReturnedEquals && !rule.condition.keyPrefixEquals) {
            throw new Error("The condition property cannot be an empty object");
          }
          return {
            redirectRule: {
              hostName: rule.hostName,
              httpRedirectCode: rule.httpRedirectCode,
              protocol: rule.protocol,
              replaceKeyWith: rule.replaceKey && rule.replaceKey.withKey,
              replaceKeyPrefixWith: rule.replaceKey && rule.replaceKey.prefixWithKey
            },
            routingRuleCondition: rule.condition
          };
        }) : void 0;
        return {
          indexDocument: props.websiteIndexDocument,
          errorDocument: props.websiteErrorDocument,
          redirectAllRequestsTo: props.websiteRedirect,
          routingRules
        };
      }
      allowLogDelivery() {
        if (this.accessControl && this.accessControl !== BucketAccessControl.LOG_DELIVERY_WRITE) {
          throw new Error("Cannot enable log delivery to this bucket because the bucket's ACL has been set and can't be changed");
        }
        this.accessControl = BucketAccessControl.LOG_DELIVERY_WRITE;
      }
      parseInventoryConfiguration() {
        if (!this.inventories || this.inventories.length === 0) {
          return void 0;
        }
        return this.inventories.map((inventory, index) => {
          var _e, _f, _g, _h, _j, _k;
          const format = (_e = inventory.format) !== null && _e !== void 0 ? _e : InventoryFormat.CSV;
          const frequency = (_f = inventory.frequency) !== null && _f !== void 0 ? _f : InventoryFrequency.WEEKLY;
          const id = (_g = inventory.inventoryId) !== null && _g !== void 0 ? _g : `${this.node.id}Inventory${index}`;
          if (inventory.destination.bucket instanceof Bucket) {
            inventory.destination.bucket.addToResourcePolicy(new iam.PolicyStatement({
              effect: iam.Effect.ALLOW,
              actions: ["s3:PutObject"],
              resources: [
                inventory.destination.bucket.bucketArn,
                inventory.destination.bucket.arnForObjects(`${(_h = inventory.destination.prefix) !== null && _h !== void 0 ? _h : ""}*`)
              ],
              principals: [new iam.ServicePrincipal("s3.amazonaws.com")],
              conditions: {
                ArnLike: {
                  "aws:SourceArn": this.bucketArn
                }
              }
            }));
          }
          return {
            id,
            destination: {
              bucketArn: inventory.destination.bucket.bucketArn,
              bucketAccountId: inventory.destination.bucketOwner,
              prefix: inventory.destination.prefix,
              format
            },
            enabled: (_j = inventory.enabled) !== null && _j !== void 0 ? _j : true,
            includedObjectVersions: (_k = inventory.includeObjectVersions) !== null && _k !== void 0 ? _k : InventoryObjectVersion.ALL,
            scheduleFrequency: frequency,
            optionalFields: inventory.optionalFields,
            prefix: inventory.objectsPrefix
          };
        });
      }
      enableAutoDeleteObjects() {
        const provider = core_1.CustomResourceProvider.getOrCreateProvider(this, AUTO_DELETE_OBJECTS_RESOURCE_TYPE, {
          codeDirectory: path.join(__dirname, "auto-delete-objects-handler"),
          runtime: core_1.CustomResourceProviderRuntime.NODEJS_12_X,
          description: `Lambda function for auto-deleting objects in ${this.bucketName} S3 bucket.`
        });
        this.addToResourcePolicy(new iam.PolicyStatement({
          actions: [
            ...perms.BUCKET_READ_METADATA_ACTIONS,
            ...perms.BUCKET_DELETE_ACTIONS
          ],
          resources: [
            this.bucketArn,
            this.arnForObjects("*")
          ],
          principals: [new iam.ArnPrincipal(provider.roleArn)]
        }));
        const customResource = new core_1.CustomResource(this, "AutoDeleteObjectsCustomResource", {
          resourceType: AUTO_DELETE_OBJECTS_RESOURCE_TYPE,
          serviceToken: provider.serviceToken,
          properties: {
            BucketName: this.bucketName
          }
        });
        if (this.policy) {
          customResource.node.addDependency(this.policy);
        }
        core_1.Tags.of(this._resource).add(AUTO_DELETE_OBJECTS_TAG, "true");
      }
    };
    exports2.Bucket = Bucket;
    _c = JSII_RTTI_SYMBOL_1;
    Bucket[_c] = { fqn: "@aws-cdk/aws-s3.Bucket", version: "1.132.0" };
    var BucketEncryption;
    (function(BucketEncryption2) {
      BucketEncryption2["UNENCRYPTED"] = "NONE";
      BucketEncryption2["KMS_MANAGED"] = "MANAGED";
      BucketEncryption2["S3_MANAGED"] = "S3MANAGED";
      BucketEncryption2["KMS"] = "KMS";
    })(BucketEncryption = exports2.BucketEncryption || (exports2.BucketEncryption = {}));
    var EventType;
    (function(EventType2) {
      EventType2["OBJECT_CREATED"] = "s3:ObjectCreated:*";
      EventType2["OBJECT_CREATED_PUT"] = "s3:ObjectCreated:Put";
      EventType2["OBJECT_CREATED_POST"] = "s3:ObjectCreated:Post";
      EventType2["OBJECT_CREATED_COPY"] = "s3:ObjectCreated:Copy";
      EventType2["OBJECT_CREATED_COMPLETE_MULTIPART_UPLOAD"] = "s3:ObjectCreated:CompleteMultipartUpload";
      EventType2["OBJECT_REMOVED"] = "s3:ObjectRemoved:*";
      EventType2["OBJECT_REMOVED_DELETE"] = "s3:ObjectRemoved:Delete";
      EventType2["OBJECT_REMOVED_DELETE_MARKER_CREATED"] = "s3:ObjectRemoved:DeleteMarkerCreated";
      EventType2["OBJECT_RESTORE_POST"] = "s3:ObjectRestore:Post";
      EventType2["OBJECT_RESTORE_COMPLETED"] = "s3:ObjectRestore:Completed";
      EventType2["REDUCED_REDUNDANCY_LOST_OBJECT"] = "s3:ReducedRedundancyLostObject";
      EventType2["REPLICATION_OPERATION_FAILED_REPLICATION"] = "s3:Replication:OperationFailedReplication";
      EventType2["REPLICATION_OPERATION_MISSED_THRESHOLD"] = "s3:Replication:OperationMissedThreshold";
      EventType2["REPLICATION_OPERATION_REPLICATED_AFTER_THRESHOLD"] = "s3:Replication:OperationReplicatedAfterThreshold";
      EventType2["REPLICATION_OPERATION_NOT_TRACKED"] = "s3:Replication:OperationNotTracked";
    })(EventType = exports2.EventType || (exports2.EventType = {}));
    var BucketAccessControl;
    (function(BucketAccessControl2) {
      BucketAccessControl2["PRIVATE"] = "Private";
      BucketAccessControl2["PUBLIC_READ"] = "PublicRead";
      BucketAccessControl2["PUBLIC_READ_WRITE"] = "PublicReadWrite";
      BucketAccessControl2["AUTHENTICATED_READ"] = "AuthenticatedRead";
      BucketAccessControl2["LOG_DELIVERY_WRITE"] = "LogDeliveryWrite";
      BucketAccessControl2["BUCKET_OWNER_READ"] = "BucketOwnerRead";
      BucketAccessControl2["BUCKET_OWNER_FULL_CONTROL"] = "BucketOwnerFullControl";
      BucketAccessControl2["AWS_EXEC_READ"] = "AwsExecRead";
    })(BucketAccessControl = exports2.BucketAccessControl || (exports2.BucketAccessControl = {}));
    var ReplaceKey = class {
      constructor(withKey, prefixWithKey) {
        this.withKey = withKey;
        this.prefixWithKey = prefixWithKey;
      }
      static with(keyReplacement) {
        return new this(keyReplacement);
      }
      static prefixWith(keyReplacement) {
        return new this(void 0, keyReplacement);
      }
    };
    exports2.ReplaceKey = ReplaceKey;
    _d = JSII_RTTI_SYMBOL_1;
    ReplaceKey[_d] = { fqn: "@aws-cdk/aws-s3.ReplaceKey", version: "1.132.0" };
    function mapOrUndefined(list, callback) {
      if (!list || list.length === 0) {
        return void 0;
      }
      return list.map(callback);
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-s3/lib/location.js
var require_location = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-s3/lib/location.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/@aws-cdk/aws-s3/lib/rule.js
var require_rule2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-s3/lib/rule.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StorageClass = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var StorageClass = class {
      constructor(value) {
        this.value = value;
      }
      toString() {
        return this.value;
      }
    };
    exports2.StorageClass = StorageClass;
    _a = JSII_RTTI_SYMBOL_1;
    StorageClass[_a] = { fqn: "@aws-cdk/aws-s3.StorageClass", version: "1.132.0" };
    StorageClass.INFREQUENT_ACCESS = new StorageClass("STANDARD_IA");
    StorageClass.ONE_ZONE_INFREQUENT_ACCESS = new StorageClass("ONEZONE_IA");
    StorageClass.GLACIER = new StorageClass("GLACIER");
    StorageClass.DEEP_ARCHIVE = new StorageClass("DEEP_ARCHIVE");
    StorageClass.INTELLIGENT_TIERING = new StorageClass("INTELLIGENT_TIERING");
  }
});

// asset-input/node_modules/@aws-cdk/aws-s3/lib/index.js
var require_lib16 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-s3/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_bucket(), exports2);
    __exportStar(require_bucket_policy(), exports2);
    __exportStar(require_destination2(), exports2);
    __exportStar(require_location(), exports2);
    __exportStar(require_rule2(), exports2);
    __exportStar(require_s3_generated(), exports2);
  }
});

// asset-input/node_modules/@aws-cdk/assets/lib/api.js
var require_api = __commonJS({
  "asset-input/node_modules/@aws-cdk/assets/lib/api.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/@aws-cdk/assets/lib/fs/follow-mode.js
var require_follow_mode = __commonJS({
  "asset-input/node_modules/@aws-cdk/assets/lib/fs/follow-mode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FollowMode = void 0;
    var FollowMode;
    (function(FollowMode2) {
      FollowMode2["NEVER"] = "never";
      FollowMode2["ALWAYS"] = "always";
      FollowMode2["EXTERNAL"] = "external";
      FollowMode2["BLOCK_EXTERNAL"] = "internal-only";
    })(FollowMode = exports2.FollowMode || (exports2.FollowMode = {}));
  }
});

// asset-input/node_modules/@aws-cdk/assets/lib/fs/options.js
var require_options2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/assets/lib/fs/options.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/@aws-cdk/assets/lib/compat.js
var require_compat = __commonJS({
  "asset-input/node_modules/@aws-cdk/assets/lib/compat.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toSymlinkFollow = void 0;
    var core_1 = require_lib8();
    var follow_mode_1 = require_follow_mode();
    function toSymlinkFollow(follow) {
      if (!follow) {
        return void 0;
      }
      switch (follow) {
        case follow_mode_1.FollowMode.NEVER:
          return core_1.SymlinkFollowMode.NEVER;
        case follow_mode_1.FollowMode.ALWAYS:
          return core_1.SymlinkFollowMode.ALWAYS;
        case follow_mode_1.FollowMode.BLOCK_EXTERNAL:
          return core_1.SymlinkFollowMode.BLOCK_EXTERNAL;
        case follow_mode_1.FollowMode.EXTERNAL:
          return core_1.SymlinkFollowMode.EXTERNAL;
        default:
          throw new Error(`unknown follow mode: ${follow}`);
      }
    }
    exports2.toSymlinkFollow = toSymlinkFollow;
  }
});

// asset-input/node_modules/@aws-cdk/assets/lib/staging.js
var require_staging = __commonJS({
  "asset-input/node_modules/@aws-cdk/assets/lib/staging.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Staging = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var compat_1 = require_compat();
    var Staging = class extends core_1.AssetStaging {
      constructor(scope, id, props) {
        super(scope, id, {
          sourcePath: props.sourcePath,
          exclude: props.exclude,
          ignoreMode: props.ignoreMode,
          extraHash: props.extraHash,
          follow: compat_1.toSymlinkFollow(props.follow)
        });
      }
    };
    exports2.Staging = Staging;
    _a = JSII_RTTI_SYMBOL_1;
    Staging[_a] = { fqn: "@aws-cdk/assets.Staging", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/assets/lib/index.js
var require_lib17 = __commonJS({
  "asset-input/node_modules/@aws-cdk/assets/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_api(), exports2);
    __exportStar(require_follow_mode(), exports2);
    __exportStar(require_options2(), exports2);
    __exportStar(require_staging(), exports2);
  }
});

// asset-input/node_modules/@aws-cdk/aws-s3-assets/lib/compat.js
var require_compat2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-s3-assets/lib/compat.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toSymlinkFollow = void 0;
    var assets_1 = require_lib17();
    var core_1 = require_lib8();
    function toSymlinkFollow(follow) {
      if (!follow) {
        return void 0;
      }
      switch (follow) {
        case assets_1.FollowMode.NEVER:
          return core_1.SymlinkFollowMode.NEVER;
        case assets_1.FollowMode.ALWAYS:
          return core_1.SymlinkFollowMode.ALWAYS;
        case assets_1.FollowMode.BLOCK_EXTERNAL:
          return core_1.SymlinkFollowMode.BLOCK_EXTERNAL;
        case assets_1.FollowMode.EXTERNAL:
          return core_1.SymlinkFollowMode.EXTERNAL;
        default:
          throw new Error(`unknown follow mode: ${follow}`);
      }
    }
    exports2.toSymlinkFollow = toSymlinkFollow;
  }
});

// asset-input/node_modules/@aws-cdk/aws-s3-assets/lib/asset.js
var require_asset = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-s3-assets/lib/asset.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Asset = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var path = require("path");
    var kms = require_lib14();
    var s3 = require_lib16();
    var cdk = require_lib8();
    var cxapi = require_lib5();
    var compat_1 = require_compat2();
    var core_1 = require_lib8();
    var Asset = class extends core_1.Construct {
      constructor(scope, id, props) {
        var _b, _c, _d;
        super(scope, id);
        const staging = new cdk.AssetStaging(this, "Stage", __spreadProps(__spreadValues({}, props), {
          sourcePath: path.resolve(props.path),
          follow: (_b = props.followSymlinks) !== null && _b !== void 0 ? _b : compat_1.toSymlinkFollow(props.follow),
          assetHash: (_c = props.assetHash) !== null && _c !== void 0 ? _c : props.sourceHash
        }));
        this.assetHash = staging.assetHash;
        this.sourceHash = this.assetHash;
        const stack = cdk.Stack.of(this);
        this.assetPath = staging.relativeStagedPath(stack);
        this.isFile = staging.packaging === cdk.FileAssetPackaging.FILE;
        this.isZipArchive = staging.isArchive;
        const location = stack.synthesizer.addFileAsset({
          packaging: staging.packaging,
          sourceHash: this.sourceHash,
          fileName: this.assetPath
        });
        this.s3BucketName = location.bucketName;
        this.s3ObjectKey = location.objectKey;
        this.s3ObjectUrl = location.s3ObjectUrl;
        this.httpUrl = location.httpUrl;
        this.s3Url = location.httpUrl;
        const kmsKey = location.kmsKeyArn ? kms.Key.fromKeyArn(this, "Key", location.kmsKeyArn) : void 0;
        this.bucket = s3.Bucket.fromBucketAttributes(this, "AssetBucket", {
          bucketName: this.s3BucketName,
          encryptionKey: kmsKey
        });
        for (const reader of (_d = props.readers) !== null && _d !== void 0 ? _d : []) {
          this.grantRead(reader);
        }
      }
      addResourceMetadata(resource, resourceProperty) {
        if (!this.node.tryGetContext(cxapi.ASSET_RESOURCE_METADATA_ENABLED_CONTEXT)) {
          return;
        }
        resource.cfnOptions.metadata = resource.cfnOptions.metadata || {};
        resource.cfnOptions.metadata[cxapi.ASSET_RESOURCE_METADATA_PATH_KEY] = this.assetPath;
        resource.cfnOptions.metadata[cxapi.ASSET_RESOURCE_METADATA_PROPERTY_KEY] = resourceProperty;
      }
      grantRead(grantee) {
        this.bucket.grantRead(grantee);
      }
    };
    exports2.Asset = Asset;
    _a = JSII_RTTI_SYMBOL_1;
    Asset[_a] = { fqn: "@aws-cdk/aws-s3-assets.Asset", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-s3-assets/lib/index.js
var require_lib18 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-s3-assets/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_asset(), exports2);
  }
});

// asset-input/node_modules/@aws-cdk/aws-logs/lib/log-retention.js
var require_log_retention = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-logs/lib/log-retention.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LogRetention = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var path = require("path");
    var iam = require_lib9();
    var s3_assets = require_lib18();
    var cdk = require_lib8();
    var log_group_1 = require_log_group();
    var core_1 = require_lib8();
    var LogRetention = class extends core_1.Construct {
      constructor(scope, id, props) {
        var _b;
        super(scope, id);
        const provider = this.ensureSingletonLogRetentionFunction(props);
        const retryOptions = props.logRetentionRetryOptions;
        const resource = new cdk.CfnResource(this, "Resource", {
          type: "Custom::LogRetention",
          properties: {
            ServiceToken: provider.functionArn,
            LogGroupName: props.logGroupName,
            LogGroupRegion: props.logGroupRegion,
            SdkRetry: retryOptions ? {
              maxRetries: retryOptions.maxRetries,
              base: (_b = retryOptions.base) === null || _b === void 0 ? void 0 : _b.toMilliseconds()
            } : void 0,
            RetentionInDays: props.retention === log_group_1.RetentionDays.INFINITE ? void 0 : props.retention
          }
        });
        const logGroupName = resource.getAtt("LogGroupName").toString();
        this.logGroupArn = cdk.Stack.of(this).formatArn({
          region: props.logGroupRegion,
          service: "logs",
          resource: "log-group",
          resourceName: `${logGroupName}:*`,
          sep: ":"
        });
      }
      ensureSingletonLogRetentionFunction(props) {
        const functionLogicalId = "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a";
        const existing = cdk.Stack.of(this).node.tryFindChild(functionLogicalId);
        if (existing) {
          return existing;
        }
        return new LogRetentionFunction(cdk.Stack.of(this), functionLogicalId, props);
      }
    };
    exports2.LogRetention = LogRetention;
    _a = JSII_RTTI_SYMBOL_1;
    LogRetention[_a] = { fqn: "@aws-cdk/aws-logs.LogRetention", version: "1.132.0" };
    var LogRetentionFunction = class extends core_1.Construct {
      constructor(scope, id, props) {
        super(scope, id);
        this.tags = new cdk.TagManager(cdk.TagType.KEY_VALUE, "AWS::Lambda::Function");
        const asset = new s3_assets.Asset(this, "Code", {
          path: path.join(__dirname, "log-retention-provider")
        });
        const role = props.role || new iam.Role(this, "ServiceRole", {
          assumedBy: new iam.ServicePrincipal("lambda.amazonaws.com"),
          managedPolicies: [iam.ManagedPolicy.fromAwsManagedPolicyName("service-role/AWSLambdaBasicExecutionRole")]
        });
        role.addToPrincipalPolicy(new iam.PolicyStatement({
          actions: ["logs:PutRetentionPolicy", "logs:DeleteRetentionPolicy"],
          resources: ["*"]
        }));
        const resource = new cdk.CfnResource(this, "Resource", {
          type: "AWS::Lambda::Function",
          properties: {
            Handler: "index.handler",
            Runtime: "nodejs14.x",
            Code: {
              S3Bucket: asset.s3BucketName,
              S3Key: asset.s3ObjectKey
            },
            Role: role.roleArn,
            Tags: this.tags.renderedTags
          }
        });
        this.functionArn = resource.getAtt("Arn");
        role.node.children.forEach((child) => {
          if (cdk.CfnResource.isCfnResource(child)) {
            resource.addDependsOn(child);
          }
          if (cdk.Construct.isConstruct(child) && child.node.defaultChild && cdk.CfnResource.isCfnResource(child.node.defaultChild)) {
            resource.addDependsOn(child.node.defaultChild);
          }
        });
      }
    };
  }
});

// asset-input/node_modules/@aws-cdk/aws-logs/lib/index.js
var require_lib19 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-logs/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_cross_account_destination(), exports2);
    __exportStar(require_log_group(), exports2);
    __exportStar(require_log_stream(), exports2);
    __exportStar(require_metric_filter(), exports2);
    __exportStar(require_pattern(), exports2);
    __exportStar(require_subscription_filter(), exports2);
    __exportStar(require_log_retention(), exports2);
    __exportStar(require_logs_generated(), exports2);
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/client-vpn-authorization-rule.js
var require_client_vpn_authorization_rule = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/client-vpn-authorization-rule.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ClientVpnAuthorizationRule = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var ec2_generated_1 = require_ec2_generated();
    var ClientVpnAuthorizationRule = class extends core_1.Resource {
      constructor(scope, id, props) {
        if (!props.clientVpnEndoint && !props.clientVpnEndpoint) {
          throw new Error("ClientVpnAuthorizationRule: either clientVpnEndpoint or clientVpnEndoint (deprecated) must be specified");
        }
        if (props.clientVpnEndoint && props.clientVpnEndpoint) {
          throw new Error("ClientVpnAuthorizationRule: either clientVpnEndpoint or clientVpnEndoint (deprecated) must be specified, but not both");
        }
        const clientVpnEndpoint = props.clientVpnEndoint || props.clientVpnEndpoint;
        super(scope, id);
        new ec2_generated_1.CfnClientVpnAuthorizationRule(this, "Resource", {
          clientVpnEndpointId: clientVpnEndpoint.endpointId,
          targetNetworkCidr: props.cidr,
          accessGroupId: props.groupId,
          authorizeAllGroups: !props.groupId,
          description: props.description
        });
      }
    };
    exports2.ClientVpnAuthorizationRule = ClientVpnAuthorizationRule;
    _a = JSII_RTTI_SYMBOL_1;
    ClientVpnAuthorizationRule[_a] = { fqn: "@aws-cdk/aws-ec2.ClientVpnAuthorizationRule", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/client-vpn-route.js
var require_client_vpn_route = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/client-vpn-route.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ClientVpnRoute = exports2.ClientVpnRouteTarget = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var ec2_generated_1 = require_ec2_generated();
    var ClientVpnRouteTarget = class {
      static subnet(subnet) {
        return { subnetId: subnet.subnetId };
      }
      static local() {
        return { subnetId: "local" };
      }
    };
    exports2.ClientVpnRouteTarget = ClientVpnRouteTarget;
    _a = JSII_RTTI_SYMBOL_1;
    ClientVpnRouteTarget[_a] = { fqn: "@aws-cdk/aws-ec2.ClientVpnRouteTarget", version: "1.132.0" };
    var ClientVpnRoute = class extends core_1.Resource {
      constructor(scope, id, props) {
        if (!props.clientVpnEndoint && !props.clientVpnEndpoint) {
          throw new Error("ClientVpnRoute: either clientVpnEndpoint or clientVpnEndoint (deprecated) must be specified");
        }
        if (props.clientVpnEndoint && props.clientVpnEndpoint) {
          throw new Error("ClientVpnRoute: either clientVpnEndpoint or clientVpnEndoint (deprecated) must be specified, but not both");
        }
        const clientVpnEndpoint = props.clientVpnEndoint || props.clientVpnEndpoint;
        super(scope, id);
        const route = new ec2_generated_1.CfnClientVpnRoute(this, "Resource", {
          clientVpnEndpointId: clientVpnEndpoint.endpointId,
          description: props.description,
          destinationCidrBlock: props.cidr,
          targetVpcSubnetId: props.target.subnetId
        });
        route.node.addDependency(clientVpnEndpoint.targetNetworksAssociated);
      }
    };
    exports2.ClientVpnRoute = ClientVpnRoute;
    _b = JSII_RTTI_SYMBOL_1;
    ClientVpnRoute[_b] = { fqn: "@aws-cdk/aws-ec2.ClientVpnRoute", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/network-util.js
var require_network_util = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/network-util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CidrBlock = exports2.NetworkBuilder = exports2.NetworkUtils = exports2.InvalidCidrRangeError = void 0;
    var InvalidCidrRangeError = class extends Error {
      constructor(cidr) {
        super(cidr + " is not a valid VPC CIDR range (must be between /16 and /28)");
        Object.setPrototypeOf(this, InvalidCidrRangeError.prototype);
      }
    };
    exports2.InvalidCidrRangeError = InvalidCidrRangeError;
    var NetworkUtils = class {
      static validIp(ipAddress) {
        const octets = ipAddress.split(".");
        if (octets.length !== 4) {
          return false;
        }
        return octets.map((octet) => parseInt(octet, 10)).filter((octet) => octet >= 0 && octet <= 255).length === 4;
      }
      static ipToNum(ipAddress) {
        if (!this.validIp(ipAddress)) {
          throw new Error(`${ipAddress} is not valid`);
        }
        return ipAddress.split(".").reduce((p, c, i) => p + parseInt(c, 10) * 256 ** (3 - i), 0);
      }
      static numToIp(ipNum) {
        let remaining = ipNum;
        const address = new Array();
        for (let i = 0; i < 4; i++) {
          if (remaining !== 0) {
            address.push(Math.floor(remaining / 256 ** (3 - i)));
            remaining = remaining % 256 ** (3 - i);
          } else {
            address.push(0);
          }
        }
        const ipAddress = address.join(".");
        if (!this.validIp(ipAddress)) {
          throw new Error(`${ipAddress} is not a valid IP Address`);
        }
        return ipAddress;
      }
    };
    exports2.NetworkUtils = NetworkUtils;
    var NetworkBuilder = class {
      constructor(cidr) {
        this.subnetCidrs = [];
        this.networkCidr = new CidrBlock(cidr);
        this.subnetCidrs = [];
        this.nextAvailableIp = this.networkCidr.minAddress();
      }
      addSubnet(mask) {
        return this.addSubnets(mask, 1)[0];
      }
      addSubnets(mask, count = 1) {
        if (mask < 16 || mask > 28) {
          throw new InvalidCidrRangeError(`x.x.x.x/${mask}`);
        }
        const maxIp = this.nextAvailableIp + CidrBlock.calculateNetsize(mask) * count;
        if (this.networkCidr.maxAddress() < maxIp - 1) {
          throw new Error(`${count} of /${mask} exceeds remaining space of ${this.networkCidr.cidr}`);
        }
        const subnets = [];
        for (let i = 0; i < count; i++) {
          const subnet = new CidrBlock(this.nextAvailableIp, mask);
          this.nextAvailableIp = subnet.nextBlock().minAddress();
          this.subnetCidrs.push(subnet);
          subnets.push(subnet);
        }
        return subnets.map((subnet) => subnet.cidr);
      }
      get cidrStrings() {
        return this.subnetCidrs.map((subnet) => subnet.cidr);
      }
      maskForRemainingSubnets(subnetCount) {
        const remaining = this.networkCidr.maxAddress() - this.nextAvailableIp + 1;
        const ipsPerSubnet = Math.floor(remaining / subnetCount);
        return 32 - Math.floor(Math.log2(ipsPerSubnet));
      }
    };
    exports2.NetworkBuilder = NetworkBuilder;
    var CidrBlock = class {
      constructor(ipAddressOrCidr, mask) {
        if (typeof ipAddressOrCidr === "string") {
          this.mask = parseInt(ipAddressOrCidr.split("/")[1], 10);
          this.networkAddress = NetworkUtils.ipToNum(ipAddressOrCidr.split("/")[0]) + CidrBlock.calculateNetsize(this.mask) - 1;
        } else {
          if (typeof mask === "number") {
            this.mask = mask;
          } else {
            this.mask = 16;
          }
          this.networkAddress = ipAddressOrCidr + CidrBlock.calculateNetsize(this.mask) - 1;
          this.networkSize = 2 ** (32 - this.mask);
        }
        this.networkSize = 2 ** (32 - this.mask);
        this.cidr = `${this.minIp()}/${this.mask}`;
      }
      static calculateNetmask(mask) {
        return NetworkUtils.numToIp(2 ** 32 - 2 ** (32 - mask));
      }
      static calculateNetsize(mask) {
        return 2 ** (32 - mask);
      }
      maxIp() {
        return NetworkUtils.numToIp(this.maxAddress());
      }
      minIp() {
        return NetworkUtils.numToIp(this.minAddress());
      }
      minAddress() {
        const div = this.networkAddress % this.networkSize;
        return this.networkAddress - div;
      }
      maxAddress() {
        return this.minAddress() + this.networkSize - 1;
      }
      nextBlock() {
        return new CidrBlock(this.maxAddress() + 1, this.mask);
      }
      containsCidr(other) {
        return this.maxAddress() >= other.maxAddress() && this.minAddress() <= other.minAddress();
      }
    };
    exports2.CidrBlock = CidrBlock;
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/client-vpn-endpoint.js
var require_client_vpn_endpoint = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/client-vpn-endpoint.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ClientVpnEndpoint = exports2.ClientVpnUserBasedAuthentication = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var logs = require_lib19();
    var core_1 = require_lib8();
    var client_vpn_authorization_rule_1 = require_client_vpn_authorization_rule();
    var client_vpn_route_1 = require_client_vpn_route();
    var connections_1 = require_connections();
    var ec2_generated_1 = require_ec2_generated();
    var network_util_1 = require_network_util();
    var security_group_1 = require_security_group2();
    var ClientVpnUserBasedAuthentication = class {
      static activeDirectory(directoryId) {
        return new ActiveDirectoryAuthentication(directoryId);
      }
      static federated(samlProvider, selfServiceSamlProvider) {
        return new FederatedAuthentication(samlProvider, selfServiceSamlProvider);
      }
    };
    exports2.ClientVpnUserBasedAuthentication = ClientVpnUserBasedAuthentication;
    _a = JSII_RTTI_SYMBOL_1;
    ClientVpnUserBasedAuthentication[_a] = { fqn: "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication", version: "1.132.0" };
    var ActiveDirectoryAuthentication = class extends ClientVpnUserBasedAuthentication {
      constructor(directoryId) {
        super();
        this.directoryId = directoryId;
      }
      render() {
        return {
          type: "directory-service-authentication",
          activeDirectory: { directoryId: this.directoryId }
        };
      }
    };
    var FederatedAuthentication = class extends ClientVpnUserBasedAuthentication {
      constructor(samlProvider, selfServiceSamlProvider) {
        super();
        this.samlProvider = samlProvider;
        this.selfServiceSamlProvider = selfServiceSamlProvider;
      }
      render() {
        var _c;
        return {
          type: "federated-authentication",
          federatedAuthentication: {
            samlProviderArn: this.samlProvider.samlProviderArn,
            selfServiceSamlProviderArn: (_c = this.selfServiceSamlProvider) === null || _c === void 0 ? void 0 : _c.samlProviderArn
          }
        };
      }
    };
    var ClientVpnEndpoint = class extends core_1.Resource {
      constructor(scope, id, props) {
        var _c, _d, _e, _f, _g, _h;
        super(scope, id);
        this._targetNetworksAssociated = new core_1.ConcreteDependable();
        if (!core_1.Token.isUnresolved(props.vpc.vpcCidrBlock)) {
          const clientCidr = new network_util_1.CidrBlock(props.cidr);
          const vpcCidr = new network_util_1.CidrBlock(props.vpc.vpcCidrBlock);
          if (vpcCidr.containsCidr(clientCidr)) {
            throw new Error("The client CIDR cannot overlap with the local CIDR of the VPC");
          }
        }
        if (props.dnsServers && props.dnsServers.length > 2) {
          throw new Error("A client VPN endpoint can have up to two DNS servers");
        }
        if (props.logging == false && (props.logGroup || props.logStream)) {
          throw new Error("Cannot specify `logGroup` or `logStream` when logging is disabled");
        }
        if (props.clientConnectionHandler && !core_1.Token.isUnresolved(props.clientConnectionHandler.functionName) && !props.clientConnectionHandler.functionName.startsWith("AWSClientVPN-")) {
          throw new Error("The name of the Lambda function must begin with the `AWSClientVPN-` prefix");
        }
        const logging = (_c = props.logging) !== null && _c !== void 0 ? _c : true;
        const logGroup = logging ? (_d = props.logGroup) !== null && _d !== void 0 ? _d : new logs.LogGroup(this, "LogGroup") : void 0;
        const securityGroups = (_e = props.securityGroups) !== null && _e !== void 0 ? _e : [new security_group_1.SecurityGroup(this, "SecurityGroup", {
          vpc: props.vpc
        })];
        this.connections = new connections_1.Connections({ securityGroups });
        const endpoint = new ec2_generated_1.CfnClientVpnEndpoint(this, "Resource", {
          authenticationOptions: renderAuthenticationOptions(props.clientCertificateArn, props.userBasedAuthentication),
          clientCidrBlock: props.cidr,
          clientConnectOptions: props.clientConnectionHandler ? {
            enabled: true,
            lambdaFunctionArn: props.clientConnectionHandler.functionArn
          } : void 0,
          connectionLogOptions: {
            enabled: logging,
            cloudwatchLogGroup: logGroup === null || logGroup === void 0 ? void 0 : logGroup.logGroupName,
            cloudwatchLogStream: (_f = props.logStream) === null || _f === void 0 ? void 0 : _f.logStreamName
          },
          description: props.description,
          dnsServers: props.dnsServers,
          securityGroupIds: securityGroups.map((s) => s.securityGroupId),
          selfServicePortal: booleanToEnabledDisabled(props.selfServicePortal),
          serverCertificateArn: props.serverCertificateArn,
          splitTunnel: props.splitTunnel,
          transportProtocol: props.transportProtocol,
          vpcId: props.vpc.vpcId,
          vpnPort: props.port
        });
        this.endpointId = endpoint.ref;
        if (props.userBasedAuthentication && ((_g = props.selfServicePortal) !== null && _g !== void 0 ? _g : true)) {
          new core_1.CfnOutput(this, "SelfServicePortalUrl", {
            value: `https://self-service.clientvpn.amazonaws.com/endpoints/${this.endpointId}`
          });
        }
        const subnetIds = props.vpc.selectSubnets(props.vpcSubnets).subnetIds;
        if (core_1.Token.isUnresolved(subnetIds)) {
          throw new Error("Cannot associate subnets when VPC are imported from parameters or exports containing lists of subnet IDs.");
        }
        for (const [idx, subnetId] of Object.entries(subnetIds)) {
          this._targetNetworksAssociated.add(new ec2_generated_1.CfnClientVpnTargetNetworkAssociation(this, `Association${idx}`, {
            clientVpnEndpointId: this.endpointId,
            subnetId
          }));
        }
        this.targetNetworksAssociated = this._targetNetworksAssociated;
        if ((_h = props.authorizeAllUsersToVpcCidr) !== null && _h !== void 0 ? _h : true) {
          this.addAuthorizationRule("AuthorizeAll", {
            cidr: props.vpc.vpcCidrBlock
          });
        }
      }
      static fromEndpointAttributes(scope, id, attrs) {
        class Import extends core_1.Resource {
          constructor() {
            super(...arguments);
            this.endpointId = attrs.endpointId;
            this.connections = new connections_1.Connections({ securityGroups: attrs.securityGroups });
            this.targetNetworksAssociated = new core_1.ConcreteDependable();
          }
        }
        return new Import(scope, id);
      }
      addAuthorizationRule(id, props) {
        return new client_vpn_authorization_rule_1.ClientVpnAuthorizationRule(this, id, __spreadProps(__spreadValues({}, props), {
          clientVpnEndpoint: this
        }));
      }
      addRoute(id, props) {
        return new client_vpn_route_1.ClientVpnRoute(this, id, __spreadProps(__spreadValues({}, props), {
          clientVpnEndpoint: this
        }));
      }
    };
    exports2.ClientVpnEndpoint = ClientVpnEndpoint;
    _b = JSII_RTTI_SYMBOL_1;
    ClientVpnEndpoint[_b] = { fqn: "@aws-cdk/aws-ec2.ClientVpnEndpoint", version: "1.132.0" };
    function renderAuthenticationOptions(clientCertificateArn, userBasedAuthentication) {
      const authenticationOptions = [];
      if (clientCertificateArn) {
        authenticationOptions.push({
          type: "certificate-authentication",
          mutualAuthentication: {
            clientRootCertificateChainArn: clientCertificateArn
          }
        });
      }
      if (userBasedAuthentication) {
        authenticationOptions.push(userBasedAuthentication.render());
      }
      if (authenticationOptions.length === 0) {
        throw new Error("A client VPN endpoint must use at least one authentication option");
      }
      return authenticationOptions;
    }
    function booleanToEnabledDisabled(val) {
      switch (val) {
        case void 0:
          return void 0;
        case true:
          return "enabled";
        case false:
          return "disabled";
      }
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-ssm/lib/ssm.generated.js
var require_ssm_generated = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ssm/lib/ssm.generated.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    var _d;
    var _e;
    var _f;
    var _g;
    var _h;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnResourceDataSync = exports2.CfnPatchBaseline = exports2.CfnParameter = exports2.CfnMaintenanceWindowTask = exports2.CfnMaintenanceWindowTarget = exports2.CfnMaintenanceWindow = exports2.CfnDocument = exports2.CfnAssociation = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var cfn_parse = require_cfn_parse();
    function CfnAssociationPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("applyOnlyAtCronInterval", cdk.validateBoolean)(properties.applyOnlyAtCronInterval));
      errors.collect(cdk.propertyValidator("associationName", cdk.validateString)(properties.associationName));
      errors.collect(cdk.propertyValidator("automationTargetParameterName", cdk.validateString)(properties.automationTargetParameterName));
      errors.collect(cdk.propertyValidator("calendarNames", cdk.listValidator(cdk.validateString))(properties.calendarNames));
      errors.collect(cdk.propertyValidator("complianceSeverity", cdk.validateString)(properties.complianceSeverity));
      errors.collect(cdk.propertyValidator("documentVersion", cdk.validateString)(properties.documentVersion));
      errors.collect(cdk.propertyValidator("instanceId", cdk.validateString)(properties.instanceId));
      errors.collect(cdk.propertyValidator("maxConcurrency", cdk.validateString)(properties.maxConcurrency));
      errors.collect(cdk.propertyValidator("maxErrors", cdk.validateString)(properties.maxErrors));
      errors.collect(cdk.propertyValidator("name", cdk.requiredValidator)(properties.name));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("outputLocation", CfnAssociation_InstanceAssociationOutputLocationPropertyValidator)(properties.outputLocation));
      errors.collect(cdk.propertyValidator("parameters", cdk.hashValidator(cdk.validateObject))(properties.parameters));
      errors.collect(cdk.propertyValidator("scheduleExpression", cdk.validateString)(properties.scheduleExpression));
      errors.collect(cdk.propertyValidator("syncCompliance", cdk.validateString)(properties.syncCompliance));
      errors.collect(cdk.propertyValidator("targets", cdk.listValidator(CfnAssociation_TargetPropertyValidator))(properties.targets));
      errors.collect(cdk.propertyValidator("waitForSuccessTimeoutSeconds", cdk.validateNumber)(properties.waitForSuccessTimeoutSeconds));
      return errors.wrap('supplied properties not correct for "CfnAssociationProps"');
    }
    function cfnAssociationPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnAssociationPropsValidator(properties).assertSuccess();
      return {
        Name: cdk.stringToCloudFormation(properties.name),
        ApplyOnlyAtCronInterval: cdk.booleanToCloudFormation(properties.applyOnlyAtCronInterval),
        AssociationName: cdk.stringToCloudFormation(properties.associationName),
        AutomationTargetParameterName: cdk.stringToCloudFormation(properties.automationTargetParameterName),
        CalendarNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.calendarNames),
        ComplianceSeverity: cdk.stringToCloudFormation(properties.complianceSeverity),
        DocumentVersion: cdk.stringToCloudFormation(properties.documentVersion),
        InstanceId: cdk.stringToCloudFormation(properties.instanceId),
        MaxConcurrency: cdk.stringToCloudFormation(properties.maxConcurrency),
        MaxErrors: cdk.stringToCloudFormation(properties.maxErrors),
        OutputLocation: cfnAssociationInstanceAssociationOutputLocationPropertyToCloudFormation(properties.outputLocation),
        Parameters: cdk.hashMapper(cdk.objectToCloudFormation)(properties.parameters),
        ScheduleExpression: cdk.stringToCloudFormation(properties.scheduleExpression),
        SyncCompliance: cdk.stringToCloudFormation(properties.syncCompliance),
        Targets: cdk.listMapper(cfnAssociationTargetPropertyToCloudFormation)(properties.targets),
        WaitForSuccessTimeoutSeconds: cdk.numberToCloudFormation(properties.waitForSuccessTimeoutSeconds)
      };
    }
    function CfnAssociationPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("name", "Name", cfn_parse.FromCloudFormation.getString(properties.Name));
      ret.addPropertyResult("applyOnlyAtCronInterval", "ApplyOnlyAtCronInterval", properties.ApplyOnlyAtCronInterval != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ApplyOnlyAtCronInterval) : void 0);
      ret.addPropertyResult("associationName", "AssociationName", properties.AssociationName != null ? cfn_parse.FromCloudFormation.getString(properties.AssociationName) : void 0);
      ret.addPropertyResult("automationTargetParameterName", "AutomationTargetParameterName", properties.AutomationTargetParameterName != null ? cfn_parse.FromCloudFormation.getString(properties.AutomationTargetParameterName) : void 0);
      ret.addPropertyResult("calendarNames", "CalendarNames", properties.CalendarNames != null ? cfn_parse.FromCloudFormation.getStringArray(properties.CalendarNames) : void 0);
      ret.addPropertyResult("complianceSeverity", "ComplianceSeverity", properties.ComplianceSeverity != null ? cfn_parse.FromCloudFormation.getString(properties.ComplianceSeverity) : void 0);
      ret.addPropertyResult("documentVersion", "DocumentVersion", properties.DocumentVersion != null ? cfn_parse.FromCloudFormation.getString(properties.DocumentVersion) : void 0);
      ret.addPropertyResult("instanceId", "InstanceId", properties.InstanceId != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceId) : void 0);
      ret.addPropertyResult("maxConcurrency", "MaxConcurrency", properties.MaxConcurrency != null ? cfn_parse.FromCloudFormation.getString(properties.MaxConcurrency) : void 0);
      ret.addPropertyResult("maxErrors", "MaxErrors", properties.MaxErrors != null ? cfn_parse.FromCloudFormation.getString(properties.MaxErrors) : void 0);
      ret.addPropertyResult("outputLocation", "OutputLocation", properties.OutputLocation != null ? CfnAssociationInstanceAssociationOutputLocationPropertyFromCloudFormation(properties.OutputLocation) : void 0);
      ret.addPropertyResult("parameters", "Parameters", properties.Parameters != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getAny)(properties.Parameters) : void 0);
      ret.addPropertyResult("scheduleExpression", "ScheduleExpression", properties.ScheduleExpression != null ? cfn_parse.FromCloudFormation.getString(properties.ScheduleExpression) : void 0);
      ret.addPropertyResult("syncCompliance", "SyncCompliance", properties.SyncCompliance != null ? cfn_parse.FromCloudFormation.getString(properties.SyncCompliance) : void 0);
      ret.addPropertyResult("targets", "Targets", properties.Targets != null ? cfn_parse.FromCloudFormation.getArray(CfnAssociationTargetPropertyFromCloudFormation)(properties.Targets) : void 0);
      ret.addPropertyResult("waitForSuccessTimeoutSeconds", "WaitForSuccessTimeoutSeconds", properties.WaitForSuccessTimeoutSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.WaitForSuccessTimeoutSeconds) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnAssociation = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "name", this);
        this.attrAssociationId = cdk.Token.asString(this.getAtt("AssociationId"));
        this.name = props.name;
        this.applyOnlyAtCronInterval = props.applyOnlyAtCronInterval;
        this.associationName = props.associationName;
        this.automationTargetParameterName = props.automationTargetParameterName;
        this.calendarNames = props.calendarNames;
        this.complianceSeverity = props.complianceSeverity;
        this.documentVersion = props.documentVersion;
        this.instanceId = props.instanceId;
        this.maxConcurrency = props.maxConcurrency;
        this.maxErrors = props.maxErrors;
        this.outputLocation = props.outputLocation;
        this.parameters = props.parameters;
        this.scheduleExpression = props.scheduleExpression;
        this.syncCompliance = props.syncCompliance;
        this.targets = props.targets;
        this.waitForSuccessTimeoutSeconds = props.waitForSuccessTimeoutSeconds;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnAssociationPropsFromCloudFormation(resourceProperties);
        const ret = new CfnAssociation(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnAssociation.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          name: this.name,
          applyOnlyAtCronInterval: this.applyOnlyAtCronInterval,
          associationName: this.associationName,
          automationTargetParameterName: this.automationTargetParameterName,
          calendarNames: this.calendarNames,
          complianceSeverity: this.complianceSeverity,
          documentVersion: this.documentVersion,
          instanceId: this.instanceId,
          maxConcurrency: this.maxConcurrency,
          maxErrors: this.maxErrors,
          outputLocation: this.outputLocation,
          parameters: this.parameters,
          scheduleExpression: this.scheduleExpression,
          syncCompliance: this.syncCompliance,
          targets: this.targets,
          waitForSuccessTimeoutSeconds: this.waitForSuccessTimeoutSeconds
        };
      }
      renderProperties(props) {
        return cfnAssociationPropsToCloudFormation(props);
      }
    };
    exports2.CfnAssociation = CfnAssociation;
    _a = JSII_RTTI_SYMBOL_1;
    CfnAssociation[_a] = { fqn: "@aws-cdk/aws-ssm.CfnAssociation", version: "1.132.0" };
    CfnAssociation.CFN_RESOURCE_TYPE_NAME = "AWS::SSM::Association";
    function CfnAssociation_InstanceAssociationOutputLocationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("s3Location", CfnAssociation_S3OutputLocationPropertyValidator)(properties.s3Location));
      return errors.wrap('supplied properties not correct for "InstanceAssociationOutputLocationProperty"');
    }
    function cfnAssociationInstanceAssociationOutputLocationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnAssociation_InstanceAssociationOutputLocationPropertyValidator(properties).assertSuccess();
      return {
        S3Location: cfnAssociationS3OutputLocationPropertyToCloudFormation(properties.s3Location)
      };
    }
    function CfnAssociationInstanceAssociationOutputLocationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("s3Location", "S3Location", properties.S3Location != null ? CfnAssociationS3OutputLocationPropertyFromCloudFormation(properties.S3Location) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnAssociation_S3OutputLocationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("outputS3BucketName", cdk.validateString)(properties.outputS3BucketName));
      errors.collect(cdk.propertyValidator("outputS3KeyPrefix", cdk.validateString)(properties.outputS3KeyPrefix));
      errors.collect(cdk.propertyValidator("outputS3Region", cdk.validateString)(properties.outputS3Region));
      return errors.wrap('supplied properties not correct for "S3OutputLocationProperty"');
    }
    function cfnAssociationS3OutputLocationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnAssociation_S3OutputLocationPropertyValidator(properties).assertSuccess();
      return {
        OutputS3BucketName: cdk.stringToCloudFormation(properties.outputS3BucketName),
        OutputS3KeyPrefix: cdk.stringToCloudFormation(properties.outputS3KeyPrefix),
        OutputS3Region: cdk.stringToCloudFormation(properties.outputS3Region)
      };
    }
    function CfnAssociationS3OutputLocationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("outputS3BucketName", "OutputS3BucketName", properties.OutputS3BucketName != null ? cfn_parse.FromCloudFormation.getString(properties.OutputS3BucketName) : void 0);
      ret.addPropertyResult("outputS3KeyPrefix", "OutputS3KeyPrefix", properties.OutputS3KeyPrefix != null ? cfn_parse.FromCloudFormation.getString(properties.OutputS3KeyPrefix) : void 0);
      ret.addPropertyResult("outputS3Region", "OutputS3Region", properties.OutputS3Region != null ? cfn_parse.FromCloudFormation.getString(properties.OutputS3Region) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnAssociation_TargetPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("key", cdk.requiredValidator)(properties.key));
      errors.collect(cdk.propertyValidator("key", cdk.validateString)(properties.key));
      errors.collect(cdk.propertyValidator("values", cdk.requiredValidator)(properties.values));
      errors.collect(cdk.propertyValidator("values", cdk.listValidator(cdk.validateString))(properties.values));
      return errors.wrap('supplied properties not correct for "TargetProperty"');
    }
    function cfnAssociationTargetPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnAssociation_TargetPropertyValidator(properties).assertSuccess();
      return {
        Key: cdk.stringToCloudFormation(properties.key),
        Values: cdk.listMapper(cdk.stringToCloudFormation)(properties.values)
      };
    }
    function CfnAssociationTargetPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("key", "Key", cfn_parse.FromCloudFormation.getString(properties.Key));
      ret.addPropertyResult("values", "Values", cfn_parse.FromCloudFormation.getStringArray(properties.Values));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnDocumentPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("attachments", cdk.listValidator(CfnDocument_AttachmentsSourcePropertyValidator))(properties.attachments));
      errors.collect(cdk.propertyValidator("content", cdk.requiredValidator)(properties.content));
      errors.collect(cdk.propertyValidator("content", cdk.validateObject)(properties.content));
      errors.collect(cdk.propertyValidator("documentFormat", cdk.validateString)(properties.documentFormat));
      errors.collect(cdk.propertyValidator("documentType", cdk.validateString)(properties.documentType));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("requires", cdk.listValidator(CfnDocument_DocumentRequiresPropertyValidator))(properties.requires));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("targetType", cdk.validateString)(properties.targetType));
      errors.collect(cdk.propertyValidator("versionName", cdk.validateString)(properties.versionName));
      return errors.wrap('supplied properties not correct for "CfnDocumentProps"');
    }
    function cfnDocumentPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnDocumentPropsValidator(properties).assertSuccess();
      return {
        Content: cdk.objectToCloudFormation(properties.content),
        Attachments: cdk.listMapper(cfnDocumentAttachmentsSourcePropertyToCloudFormation)(properties.attachments),
        DocumentFormat: cdk.stringToCloudFormation(properties.documentFormat),
        DocumentType: cdk.stringToCloudFormation(properties.documentType),
        Name: cdk.stringToCloudFormation(properties.name),
        Requires: cdk.listMapper(cfnDocumentDocumentRequiresPropertyToCloudFormation)(properties.requires),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
        TargetType: cdk.stringToCloudFormation(properties.targetType),
        VersionName: cdk.stringToCloudFormation(properties.versionName)
      };
    }
    function CfnDocumentPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("content", "Content", cfn_parse.FromCloudFormation.getAny(properties.Content));
      ret.addPropertyResult("attachments", "Attachments", properties.Attachments != null ? cfn_parse.FromCloudFormation.getArray(CfnDocumentAttachmentsSourcePropertyFromCloudFormation)(properties.Attachments) : void 0);
      ret.addPropertyResult("documentFormat", "DocumentFormat", properties.DocumentFormat != null ? cfn_parse.FromCloudFormation.getString(properties.DocumentFormat) : void 0);
      ret.addPropertyResult("documentType", "DocumentType", properties.DocumentType != null ? cfn_parse.FromCloudFormation.getString(properties.DocumentType) : void 0);
      ret.addPropertyResult("name", "Name", properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : void 0);
      ret.addPropertyResult("requires", "Requires", properties.Requires != null ? cfn_parse.FromCloudFormation.getArray(CfnDocumentDocumentRequiresPropertyFromCloudFormation)(properties.Requires) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addPropertyResult("targetType", "TargetType", properties.TargetType != null ? cfn_parse.FromCloudFormation.getString(properties.TargetType) : void 0);
      ret.addPropertyResult("versionName", "VersionName", properties.VersionName != null ? cfn_parse.FromCloudFormation.getString(properties.VersionName) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnDocument = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnDocument.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "content", this);
        this.content = props.content;
        this.attachments = props.attachments;
        this.documentFormat = props.documentFormat;
        this.documentType = props.documentType;
        this.name = props.name;
        this.requires = props.requires;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SSM::Document", props.tags, { tagPropertyName: "tags" });
        this.targetType = props.targetType;
        this.versionName = props.versionName;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnDocumentPropsFromCloudFormation(resourceProperties);
        const ret = new CfnDocument(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnDocument.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          content: this.content,
          attachments: this.attachments,
          documentFormat: this.documentFormat,
          documentType: this.documentType,
          name: this.name,
          requires: this.requires,
          tags: this.tags.renderTags(),
          targetType: this.targetType,
          versionName: this.versionName
        };
      }
      renderProperties(props) {
        return cfnDocumentPropsToCloudFormation(props);
      }
    };
    exports2.CfnDocument = CfnDocument;
    _b = JSII_RTTI_SYMBOL_1;
    CfnDocument[_b] = { fqn: "@aws-cdk/aws-ssm.CfnDocument", version: "1.132.0" };
    CfnDocument.CFN_RESOURCE_TYPE_NAME = "AWS::SSM::Document";
    function CfnDocument_AttachmentsSourcePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("key", cdk.validateString)(properties.key));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("values", cdk.listValidator(cdk.validateString))(properties.values));
      return errors.wrap('supplied properties not correct for "AttachmentsSourceProperty"');
    }
    function cfnDocumentAttachmentsSourcePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnDocument_AttachmentsSourcePropertyValidator(properties).assertSuccess();
      return {
        Key: cdk.stringToCloudFormation(properties.key),
        Name: cdk.stringToCloudFormation(properties.name),
        Values: cdk.listMapper(cdk.stringToCloudFormation)(properties.values)
      };
    }
    function CfnDocumentAttachmentsSourcePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("key", "Key", properties.Key != null ? cfn_parse.FromCloudFormation.getString(properties.Key) : void 0);
      ret.addPropertyResult("name", "Name", properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : void 0);
      ret.addPropertyResult("values", "Values", properties.Values != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Values) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnDocument_DocumentRequiresPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("version", cdk.validateString)(properties.version));
      return errors.wrap('supplied properties not correct for "DocumentRequiresProperty"');
    }
    function cfnDocumentDocumentRequiresPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnDocument_DocumentRequiresPropertyValidator(properties).assertSuccess();
      return {
        Name: cdk.stringToCloudFormation(properties.name),
        Version: cdk.stringToCloudFormation(properties.version)
      };
    }
    function CfnDocumentDocumentRequiresPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("name", "Name", properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : void 0);
      ret.addPropertyResult("version", "Version", properties.Version != null ? cfn_parse.FromCloudFormation.getString(properties.Version) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnMaintenanceWindowPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("allowUnassociatedTargets", cdk.requiredValidator)(properties.allowUnassociatedTargets));
      errors.collect(cdk.propertyValidator("allowUnassociatedTargets", cdk.validateBoolean)(properties.allowUnassociatedTargets));
      errors.collect(cdk.propertyValidator("cutoff", cdk.requiredValidator)(properties.cutoff));
      errors.collect(cdk.propertyValidator("cutoff", cdk.validateNumber)(properties.cutoff));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("duration", cdk.requiredValidator)(properties.duration));
      errors.collect(cdk.propertyValidator("duration", cdk.validateNumber)(properties.duration));
      errors.collect(cdk.propertyValidator("endDate", cdk.validateString)(properties.endDate));
      errors.collect(cdk.propertyValidator("name", cdk.requiredValidator)(properties.name));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("schedule", cdk.requiredValidator)(properties.schedule));
      errors.collect(cdk.propertyValidator("schedule", cdk.validateString)(properties.schedule));
      errors.collect(cdk.propertyValidator("scheduleOffset", cdk.validateNumber)(properties.scheduleOffset));
      errors.collect(cdk.propertyValidator("scheduleTimezone", cdk.validateString)(properties.scheduleTimezone));
      errors.collect(cdk.propertyValidator("startDate", cdk.validateString)(properties.startDate));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnMaintenanceWindowProps"');
    }
    function cfnMaintenanceWindowPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnMaintenanceWindowPropsValidator(properties).assertSuccess();
      return {
        AllowUnassociatedTargets: cdk.booleanToCloudFormation(properties.allowUnassociatedTargets),
        Cutoff: cdk.numberToCloudFormation(properties.cutoff),
        Duration: cdk.numberToCloudFormation(properties.duration),
        Name: cdk.stringToCloudFormation(properties.name),
        Schedule: cdk.stringToCloudFormation(properties.schedule),
        Description: cdk.stringToCloudFormation(properties.description),
        EndDate: cdk.stringToCloudFormation(properties.endDate),
        ScheduleOffset: cdk.numberToCloudFormation(properties.scheduleOffset),
        ScheduleTimezone: cdk.stringToCloudFormation(properties.scheduleTimezone),
        StartDate: cdk.stringToCloudFormation(properties.startDate),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnMaintenanceWindowPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("allowUnassociatedTargets", "AllowUnassociatedTargets", cfn_parse.FromCloudFormation.getBoolean(properties.AllowUnassociatedTargets));
      ret.addPropertyResult("cutoff", "Cutoff", cfn_parse.FromCloudFormation.getNumber(properties.Cutoff));
      ret.addPropertyResult("duration", "Duration", cfn_parse.FromCloudFormation.getNumber(properties.Duration));
      ret.addPropertyResult("name", "Name", cfn_parse.FromCloudFormation.getString(properties.Name));
      ret.addPropertyResult("schedule", "Schedule", cfn_parse.FromCloudFormation.getString(properties.Schedule));
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("endDate", "EndDate", properties.EndDate != null ? cfn_parse.FromCloudFormation.getString(properties.EndDate) : void 0);
      ret.addPropertyResult("scheduleOffset", "ScheduleOffset", properties.ScheduleOffset != null ? cfn_parse.FromCloudFormation.getNumber(properties.ScheduleOffset) : void 0);
      ret.addPropertyResult("scheduleTimezone", "ScheduleTimezone", properties.ScheduleTimezone != null ? cfn_parse.FromCloudFormation.getString(properties.ScheduleTimezone) : void 0);
      ret.addPropertyResult("startDate", "StartDate", properties.StartDate != null ? cfn_parse.FromCloudFormation.getString(properties.StartDate) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnMaintenanceWindow = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnMaintenanceWindow.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "allowUnassociatedTargets", this);
        cdk.requireProperty(props, "cutoff", this);
        cdk.requireProperty(props, "duration", this);
        cdk.requireProperty(props, "name", this);
        cdk.requireProperty(props, "schedule", this);
        this.allowUnassociatedTargets = props.allowUnassociatedTargets;
        this.cutoff = props.cutoff;
        this.duration = props.duration;
        this.name = props.name;
        this.schedule = props.schedule;
        this.description = props.description;
        this.endDate = props.endDate;
        this.scheduleOffset = props.scheduleOffset;
        this.scheduleTimezone = props.scheduleTimezone;
        this.startDate = props.startDate;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SSM::MaintenanceWindow", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnMaintenanceWindowPropsFromCloudFormation(resourceProperties);
        const ret = new CfnMaintenanceWindow(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnMaintenanceWindow.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          allowUnassociatedTargets: this.allowUnassociatedTargets,
          cutoff: this.cutoff,
          duration: this.duration,
          name: this.name,
          schedule: this.schedule,
          description: this.description,
          endDate: this.endDate,
          scheduleOffset: this.scheduleOffset,
          scheduleTimezone: this.scheduleTimezone,
          startDate: this.startDate,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnMaintenanceWindowPropsToCloudFormation(props);
      }
    };
    exports2.CfnMaintenanceWindow = CfnMaintenanceWindow;
    _c = JSII_RTTI_SYMBOL_1;
    CfnMaintenanceWindow[_c] = { fqn: "@aws-cdk/aws-ssm.CfnMaintenanceWindow", version: "1.132.0" };
    CfnMaintenanceWindow.CFN_RESOURCE_TYPE_NAME = "AWS::SSM::MaintenanceWindow";
    function CfnMaintenanceWindowTargetPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("ownerInformation", cdk.validateString)(properties.ownerInformation));
      errors.collect(cdk.propertyValidator("resourceType", cdk.requiredValidator)(properties.resourceType));
      errors.collect(cdk.propertyValidator("resourceType", cdk.validateString)(properties.resourceType));
      errors.collect(cdk.propertyValidator("targets", cdk.requiredValidator)(properties.targets));
      errors.collect(cdk.propertyValidator("targets", cdk.listValidator(CfnMaintenanceWindowTarget_TargetsPropertyValidator))(properties.targets));
      errors.collect(cdk.propertyValidator("windowId", cdk.requiredValidator)(properties.windowId));
      errors.collect(cdk.propertyValidator("windowId", cdk.validateString)(properties.windowId));
      return errors.wrap('supplied properties not correct for "CfnMaintenanceWindowTargetProps"');
    }
    function cfnMaintenanceWindowTargetPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnMaintenanceWindowTargetPropsValidator(properties).assertSuccess();
      return {
        ResourceType: cdk.stringToCloudFormation(properties.resourceType),
        Targets: cdk.listMapper(cfnMaintenanceWindowTargetTargetsPropertyToCloudFormation)(properties.targets),
        WindowId: cdk.stringToCloudFormation(properties.windowId),
        Description: cdk.stringToCloudFormation(properties.description),
        Name: cdk.stringToCloudFormation(properties.name),
        OwnerInformation: cdk.stringToCloudFormation(properties.ownerInformation)
      };
    }
    function CfnMaintenanceWindowTargetPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("resourceType", "ResourceType", cfn_parse.FromCloudFormation.getString(properties.ResourceType));
      ret.addPropertyResult("targets", "Targets", cfn_parse.FromCloudFormation.getArray(CfnMaintenanceWindowTargetTargetsPropertyFromCloudFormation)(properties.Targets));
      ret.addPropertyResult("windowId", "WindowId", cfn_parse.FromCloudFormation.getString(properties.WindowId));
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("name", "Name", properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : void 0);
      ret.addPropertyResult("ownerInformation", "OwnerInformation", properties.OwnerInformation != null ? cfn_parse.FromCloudFormation.getString(properties.OwnerInformation) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnMaintenanceWindowTarget = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnMaintenanceWindowTarget.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "resourceType", this);
        cdk.requireProperty(props, "targets", this);
        cdk.requireProperty(props, "windowId", this);
        this.resourceType = props.resourceType;
        this.targets = props.targets;
        this.windowId = props.windowId;
        this.description = props.description;
        this.name = props.name;
        this.ownerInformation = props.ownerInformation;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnMaintenanceWindowTargetPropsFromCloudFormation(resourceProperties);
        const ret = new CfnMaintenanceWindowTarget(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnMaintenanceWindowTarget.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          resourceType: this.resourceType,
          targets: this.targets,
          windowId: this.windowId,
          description: this.description,
          name: this.name,
          ownerInformation: this.ownerInformation
        };
      }
      renderProperties(props) {
        return cfnMaintenanceWindowTargetPropsToCloudFormation(props);
      }
    };
    exports2.CfnMaintenanceWindowTarget = CfnMaintenanceWindowTarget;
    _d = JSII_RTTI_SYMBOL_1;
    CfnMaintenanceWindowTarget[_d] = { fqn: "@aws-cdk/aws-ssm.CfnMaintenanceWindowTarget", version: "1.132.0" };
    CfnMaintenanceWindowTarget.CFN_RESOURCE_TYPE_NAME = "AWS::SSM::MaintenanceWindowTarget";
    function CfnMaintenanceWindowTarget_TargetsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("key", cdk.requiredValidator)(properties.key));
      errors.collect(cdk.propertyValidator("key", cdk.validateString)(properties.key));
      errors.collect(cdk.propertyValidator("values", cdk.requiredValidator)(properties.values));
      errors.collect(cdk.propertyValidator("values", cdk.listValidator(cdk.validateString))(properties.values));
      return errors.wrap('supplied properties not correct for "TargetsProperty"');
    }
    function cfnMaintenanceWindowTargetTargetsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnMaintenanceWindowTarget_TargetsPropertyValidator(properties).assertSuccess();
      return {
        Key: cdk.stringToCloudFormation(properties.key),
        Values: cdk.listMapper(cdk.stringToCloudFormation)(properties.values)
      };
    }
    function CfnMaintenanceWindowTargetTargetsPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("key", "Key", cfn_parse.FromCloudFormation.getString(properties.Key));
      ret.addPropertyResult("values", "Values", cfn_parse.FromCloudFormation.getStringArray(properties.Values));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnMaintenanceWindowTaskPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("cutoffBehavior", cdk.validateString)(properties.cutoffBehavior));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("loggingInfo", CfnMaintenanceWindowTask_LoggingInfoPropertyValidator)(properties.loggingInfo));
      errors.collect(cdk.propertyValidator("maxConcurrency", cdk.validateString)(properties.maxConcurrency));
      errors.collect(cdk.propertyValidator("maxErrors", cdk.validateString)(properties.maxErrors));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("priority", cdk.requiredValidator)(properties.priority));
      errors.collect(cdk.propertyValidator("priority", cdk.validateNumber)(properties.priority));
      errors.collect(cdk.propertyValidator("serviceRoleArn", cdk.validateString)(properties.serviceRoleArn));
      errors.collect(cdk.propertyValidator("targets", cdk.listValidator(CfnMaintenanceWindowTask_TargetPropertyValidator))(properties.targets));
      errors.collect(cdk.propertyValidator("taskArn", cdk.requiredValidator)(properties.taskArn));
      errors.collect(cdk.propertyValidator("taskArn", cdk.validateString)(properties.taskArn));
      errors.collect(cdk.propertyValidator("taskInvocationParameters", CfnMaintenanceWindowTask_TaskInvocationParametersPropertyValidator)(properties.taskInvocationParameters));
      errors.collect(cdk.propertyValidator("taskParameters", cdk.validateObject)(properties.taskParameters));
      errors.collect(cdk.propertyValidator("taskType", cdk.requiredValidator)(properties.taskType));
      errors.collect(cdk.propertyValidator("taskType", cdk.validateString)(properties.taskType));
      errors.collect(cdk.propertyValidator("windowId", cdk.requiredValidator)(properties.windowId));
      errors.collect(cdk.propertyValidator("windowId", cdk.validateString)(properties.windowId));
      return errors.wrap('supplied properties not correct for "CfnMaintenanceWindowTaskProps"');
    }
    function cfnMaintenanceWindowTaskPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnMaintenanceWindowTaskPropsValidator(properties).assertSuccess();
      return {
        Priority: cdk.numberToCloudFormation(properties.priority),
        TaskArn: cdk.stringToCloudFormation(properties.taskArn),
        TaskType: cdk.stringToCloudFormation(properties.taskType),
        WindowId: cdk.stringToCloudFormation(properties.windowId),
        CutoffBehavior: cdk.stringToCloudFormation(properties.cutoffBehavior),
        Description: cdk.stringToCloudFormation(properties.description),
        LoggingInfo: cfnMaintenanceWindowTaskLoggingInfoPropertyToCloudFormation(properties.loggingInfo),
        MaxConcurrency: cdk.stringToCloudFormation(properties.maxConcurrency),
        MaxErrors: cdk.stringToCloudFormation(properties.maxErrors),
        Name: cdk.stringToCloudFormation(properties.name),
        ServiceRoleArn: cdk.stringToCloudFormation(properties.serviceRoleArn),
        Targets: cdk.listMapper(cfnMaintenanceWindowTaskTargetPropertyToCloudFormation)(properties.targets),
        TaskInvocationParameters: cfnMaintenanceWindowTaskTaskInvocationParametersPropertyToCloudFormation(properties.taskInvocationParameters),
        TaskParameters: cdk.objectToCloudFormation(properties.taskParameters)
      };
    }
    function CfnMaintenanceWindowTaskPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("priority", "Priority", cfn_parse.FromCloudFormation.getNumber(properties.Priority));
      ret.addPropertyResult("taskArn", "TaskArn", cfn_parse.FromCloudFormation.getString(properties.TaskArn));
      ret.addPropertyResult("taskType", "TaskType", cfn_parse.FromCloudFormation.getString(properties.TaskType));
      ret.addPropertyResult("windowId", "WindowId", cfn_parse.FromCloudFormation.getString(properties.WindowId));
      ret.addPropertyResult("cutoffBehavior", "CutoffBehavior", properties.CutoffBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.CutoffBehavior) : void 0);
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("loggingInfo", "LoggingInfo", properties.LoggingInfo != null ? CfnMaintenanceWindowTaskLoggingInfoPropertyFromCloudFormation(properties.LoggingInfo) : void 0);
      ret.addPropertyResult("maxConcurrency", "MaxConcurrency", properties.MaxConcurrency != null ? cfn_parse.FromCloudFormation.getString(properties.MaxConcurrency) : void 0);
      ret.addPropertyResult("maxErrors", "MaxErrors", properties.MaxErrors != null ? cfn_parse.FromCloudFormation.getString(properties.MaxErrors) : void 0);
      ret.addPropertyResult("name", "Name", properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : void 0);
      ret.addPropertyResult("serviceRoleArn", "ServiceRoleArn", properties.ServiceRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.ServiceRoleArn) : void 0);
      ret.addPropertyResult("targets", "Targets", properties.Targets != null ? cfn_parse.FromCloudFormation.getArray(CfnMaintenanceWindowTaskTargetPropertyFromCloudFormation)(properties.Targets) : void 0);
      ret.addPropertyResult("taskInvocationParameters", "TaskInvocationParameters", properties.TaskInvocationParameters != null ? CfnMaintenanceWindowTaskTaskInvocationParametersPropertyFromCloudFormation(properties.TaskInvocationParameters) : void 0);
      ret.addPropertyResult("taskParameters", "TaskParameters", properties.TaskParameters != null ? cfn_parse.FromCloudFormation.getAny(properties.TaskParameters) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnMaintenanceWindowTask = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnMaintenanceWindowTask.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "priority", this);
        cdk.requireProperty(props, "taskArn", this);
        cdk.requireProperty(props, "taskType", this);
        cdk.requireProperty(props, "windowId", this);
        this.priority = props.priority;
        this.taskArn = props.taskArn;
        this.taskType = props.taskType;
        this.windowId = props.windowId;
        this.cutoffBehavior = props.cutoffBehavior;
        this.description = props.description;
        this.loggingInfo = props.loggingInfo;
        this.maxConcurrency = props.maxConcurrency;
        this.maxErrors = props.maxErrors;
        this.name = props.name;
        this.serviceRoleArn = props.serviceRoleArn;
        this.targets = props.targets;
        this.taskInvocationParameters = props.taskInvocationParameters;
        this.taskParameters = props.taskParameters;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnMaintenanceWindowTaskPropsFromCloudFormation(resourceProperties);
        const ret = new CfnMaintenanceWindowTask(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnMaintenanceWindowTask.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          priority: this.priority,
          taskArn: this.taskArn,
          taskType: this.taskType,
          windowId: this.windowId,
          cutoffBehavior: this.cutoffBehavior,
          description: this.description,
          loggingInfo: this.loggingInfo,
          maxConcurrency: this.maxConcurrency,
          maxErrors: this.maxErrors,
          name: this.name,
          serviceRoleArn: this.serviceRoleArn,
          targets: this.targets,
          taskInvocationParameters: this.taskInvocationParameters,
          taskParameters: this.taskParameters
        };
      }
      renderProperties(props) {
        return cfnMaintenanceWindowTaskPropsToCloudFormation(props);
      }
    };
    exports2.CfnMaintenanceWindowTask = CfnMaintenanceWindowTask;
    _e = JSII_RTTI_SYMBOL_1;
    CfnMaintenanceWindowTask[_e] = { fqn: "@aws-cdk/aws-ssm.CfnMaintenanceWindowTask", version: "1.132.0" };
    CfnMaintenanceWindowTask.CFN_RESOURCE_TYPE_NAME = "AWS::SSM::MaintenanceWindowTask";
    function CfnMaintenanceWindowTask_LoggingInfoPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("region", cdk.requiredValidator)(properties.region));
      errors.collect(cdk.propertyValidator("region", cdk.validateString)(properties.region));
      errors.collect(cdk.propertyValidator("s3Bucket", cdk.requiredValidator)(properties.s3Bucket));
      errors.collect(cdk.propertyValidator("s3Bucket", cdk.validateString)(properties.s3Bucket));
      errors.collect(cdk.propertyValidator("s3Prefix", cdk.validateString)(properties.s3Prefix));
      return errors.wrap('supplied properties not correct for "LoggingInfoProperty"');
    }
    function cfnMaintenanceWindowTaskLoggingInfoPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnMaintenanceWindowTask_LoggingInfoPropertyValidator(properties).assertSuccess();
      return {
        Region: cdk.stringToCloudFormation(properties.region),
        S3Bucket: cdk.stringToCloudFormation(properties.s3Bucket),
        S3Prefix: cdk.stringToCloudFormation(properties.s3Prefix)
      };
    }
    function CfnMaintenanceWindowTaskLoggingInfoPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("region", "Region", cfn_parse.FromCloudFormation.getString(properties.Region));
      ret.addPropertyResult("s3Bucket", "S3Bucket", cfn_parse.FromCloudFormation.getString(properties.S3Bucket));
      ret.addPropertyResult("s3Prefix", "S3Prefix", properties.S3Prefix != null ? cfn_parse.FromCloudFormation.getString(properties.S3Prefix) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnMaintenanceWindowTask_MaintenanceWindowAutomationParametersPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("documentVersion", cdk.validateString)(properties.documentVersion));
      errors.collect(cdk.propertyValidator("parameters", cdk.validateObject)(properties.parameters));
      return errors.wrap('supplied properties not correct for "MaintenanceWindowAutomationParametersProperty"');
    }
    function cfnMaintenanceWindowTaskMaintenanceWindowAutomationParametersPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnMaintenanceWindowTask_MaintenanceWindowAutomationParametersPropertyValidator(properties).assertSuccess();
      return {
        DocumentVersion: cdk.stringToCloudFormation(properties.documentVersion),
        Parameters: cdk.objectToCloudFormation(properties.parameters)
      };
    }
    function CfnMaintenanceWindowTaskMaintenanceWindowAutomationParametersPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("documentVersion", "DocumentVersion", properties.DocumentVersion != null ? cfn_parse.FromCloudFormation.getString(properties.DocumentVersion) : void 0);
      ret.addPropertyResult("parameters", "Parameters", properties.Parameters != null ? cfn_parse.FromCloudFormation.getAny(properties.Parameters) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnMaintenanceWindowTask_MaintenanceWindowLambdaParametersPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("clientContext", cdk.validateString)(properties.clientContext));
      errors.collect(cdk.propertyValidator("payload", cdk.validateString)(properties.payload));
      errors.collect(cdk.propertyValidator("qualifier", cdk.validateString)(properties.qualifier));
      return errors.wrap('supplied properties not correct for "MaintenanceWindowLambdaParametersProperty"');
    }
    function cfnMaintenanceWindowTaskMaintenanceWindowLambdaParametersPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnMaintenanceWindowTask_MaintenanceWindowLambdaParametersPropertyValidator(properties).assertSuccess();
      return {
        ClientContext: cdk.stringToCloudFormation(properties.clientContext),
        Payload: cdk.stringToCloudFormation(properties.payload),
        Qualifier: cdk.stringToCloudFormation(properties.qualifier)
      };
    }
    function CfnMaintenanceWindowTaskMaintenanceWindowLambdaParametersPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("clientContext", "ClientContext", properties.ClientContext != null ? cfn_parse.FromCloudFormation.getString(properties.ClientContext) : void 0);
      ret.addPropertyResult("payload", "Payload", properties.Payload != null ? cfn_parse.FromCloudFormation.getString(properties.Payload) : void 0);
      ret.addPropertyResult("qualifier", "Qualifier", properties.Qualifier != null ? cfn_parse.FromCloudFormation.getString(properties.Qualifier) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnMaintenanceWindowTask_MaintenanceWindowRunCommandParametersPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("comment", cdk.validateString)(properties.comment));
      errors.collect(cdk.propertyValidator("documentHash", cdk.validateString)(properties.documentHash));
      errors.collect(cdk.propertyValidator("documentHashType", cdk.validateString)(properties.documentHashType));
      errors.collect(cdk.propertyValidator("notificationConfig", CfnMaintenanceWindowTask_NotificationConfigPropertyValidator)(properties.notificationConfig));
      errors.collect(cdk.propertyValidator("outputS3BucketName", cdk.validateString)(properties.outputS3BucketName));
      errors.collect(cdk.propertyValidator("outputS3KeyPrefix", cdk.validateString)(properties.outputS3KeyPrefix));
      errors.collect(cdk.propertyValidator("parameters", cdk.validateObject)(properties.parameters));
      errors.collect(cdk.propertyValidator("serviceRoleArn", cdk.validateString)(properties.serviceRoleArn));
      errors.collect(cdk.propertyValidator("timeoutSeconds", cdk.validateNumber)(properties.timeoutSeconds));
      return errors.wrap('supplied properties not correct for "MaintenanceWindowRunCommandParametersProperty"');
    }
    function cfnMaintenanceWindowTaskMaintenanceWindowRunCommandParametersPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnMaintenanceWindowTask_MaintenanceWindowRunCommandParametersPropertyValidator(properties).assertSuccess();
      return {
        Comment: cdk.stringToCloudFormation(properties.comment),
        DocumentHash: cdk.stringToCloudFormation(properties.documentHash),
        DocumentHashType: cdk.stringToCloudFormation(properties.documentHashType),
        NotificationConfig: cfnMaintenanceWindowTaskNotificationConfigPropertyToCloudFormation(properties.notificationConfig),
        OutputS3BucketName: cdk.stringToCloudFormation(properties.outputS3BucketName),
        OutputS3KeyPrefix: cdk.stringToCloudFormation(properties.outputS3KeyPrefix),
        Parameters: cdk.objectToCloudFormation(properties.parameters),
        ServiceRoleArn: cdk.stringToCloudFormation(properties.serviceRoleArn),
        TimeoutSeconds: cdk.numberToCloudFormation(properties.timeoutSeconds)
      };
    }
    function CfnMaintenanceWindowTaskMaintenanceWindowRunCommandParametersPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("comment", "Comment", properties.Comment != null ? cfn_parse.FromCloudFormation.getString(properties.Comment) : void 0);
      ret.addPropertyResult("documentHash", "DocumentHash", properties.DocumentHash != null ? cfn_parse.FromCloudFormation.getString(properties.DocumentHash) : void 0);
      ret.addPropertyResult("documentHashType", "DocumentHashType", properties.DocumentHashType != null ? cfn_parse.FromCloudFormation.getString(properties.DocumentHashType) : void 0);
      ret.addPropertyResult("notificationConfig", "NotificationConfig", properties.NotificationConfig != null ? CfnMaintenanceWindowTaskNotificationConfigPropertyFromCloudFormation(properties.NotificationConfig) : void 0);
      ret.addPropertyResult("outputS3BucketName", "OutputS3BucketName", properties.OutputS3BucketName != null ? cfn_parse.FromCloudFormation.getString(properties.OutputS3BucketName) : void 0);
      ret.addPropertyResult("outputS3KeyPrefix", "OutputS3KeyPrefix", properties.OutputS3KeyPrefix != null ? cfn_parse.FromCloudFormation.getString(properties.OutputS3KeyPrefix) : void 0);
      ret.addPropertyResult("parameters", "Parameters", properties.Parameters != null ? cfn_parse.FromCloudFormation.getAny(properties.Parameters) : void 0);
      ret.addPropertyResult("serviceRoleArn", "ServiceRoleArn", properties.ServiceRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.ServiceRoleArn) : void 0);
      ret.addPropertyResult("timeoutSeconds", "TimeoutSeconds", properties.TimeoutSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.TimeoutSeconds) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnMaintenanceWindowTask_MaintenanceWindowStepFunctionsParametersPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("input", cdk.validateString)(properties.input));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      return errors.wrap('supplied properties not correct for "MaintenanceWindowStepFunctionsParametersProperty"');
    }
    function cfnMaintenanceWindowTaskMaintenanceWindowStepFunctionsParametersPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnMaintenanceWindowTask_MaintenanceWindowStepFunctionsParametersPropertyValidator(properties).assertSuccess();
      return {
        Input: cdk.stringToCloudFormation(properties.input),
        Name: cdk.stringToCloudFormation(properties.name)
      };
    }
    function CfnMaintenanceWindowTaskMaintenanceWindowStepFunctionsParametersPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("input", "Input", properties.Input != null ? cfn_parse.FromCloudFormation.getString(properties.Input) : void 0);
      ret.addPropertyResult("name", "Name", properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnMaintenanceWindowTask_NotificationConfigPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("notificationArn", cdk.requiredValidator)(properties.notificationArn));
      errors.collect(cdk.propertyValidator("notificationArn", cdk.validateString)(properties.notificationArn));
      errors.collect(cdk.propertyValidator("notificationEvents", cdk.listValidator(cdk.validateString))(properties.notificationEvents));
      errors.collect(cdk.propertyValidator("notificationType", cdk.validateString)(properties.notificationType));
      return errors.wrap('supplied properties not correct for "NotificationConfigProperty"');
    }
    function cfnMaintenanceWindowTaskNotificationConfigPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnMaintenanceWindowTask_NotificationConfigPropertyValidator(properties).assertSuccess();
      return {
        NotificationArn: cdk.stringToCloudFormation(properties.notificationArn),
        NotificationEvents: cdk.listMapper(cdk.stringToCloudFormation)(properties.notificationEvents),
        NotificationType: cdk.stringToCloudFormation(properties.notificationType)
      };
    }
    function CfnMaintenanceWindowTaskNotificationConfigPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("notificationArn", "NotificationArn", cfn_parse.FromCloudFormation.getString(properties.NotificationArn));
      ret.addPropertyResult("notificationEvents", "NotificationEvents", properties.NotificationEvents != null ? cfn_parse.FromCloudFormation.getStringArray(properties.NotificationEvents) : void 0);
      ret.addPropertyResult("notificationType", "NotificationType", properties.NotificationType != null ? cfn_parse.FromCloudFormation.getString(properties.NotificationType) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnMaintenanceWindowTask_TargetPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("key", cdk.requiredValidator)(properties.key));
      errors.collect(cdk.propertyValidator("key", cdk.validateString)(properties.key));
      errors.collect(cdk.propertyValidator("values", cdk.requiredValidator)(properties.values));
      errors.collect(cdk.propertyValidator("values", cdk.listValidator(cdk.validateString))(properties.values));
      return errors.wrap('supplied properties not correct for "TargetProperty"');
    }
    function cfnMaintenanceWindowTaskTargetPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnMaintenanceWindowTask_TargetPropertyValidator(properties).assertSuccess();
      return {
        Key: cdk.stringToCloudFormation(properties.key),
        Values: cdk.listMapper(cdk.stringToCloudFormation)(properties.values)
      };
    }
    function CfnMaintenanceWindowTaskTargetPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("key", "Key", cfn_parse.FromCloudFormation.getString(properties.Key));
      ret.addPropertyResult("values", "Values", cfn_parse.FromCloudFormation.getStringArray(properties.Values));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnMaintenanceWindowTask_TaskInvocationParametersPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("maintenanceWindowAutomationParameters", CfnMaintenanceWindowTask_MaintenanceWindowAutomationParametersPropertyValidator)(properties.maintenanceWindowAutomationParameters));
      errors.collect(cdk.propertyValidator("maintenanceWindowLambdaParameters", CfnMaintenanceWindowTask_MaintenanceWindowLambdaParametersPropertyValidator)(properties.maintenanceWindowLambdaParameters));
      errors.collect(cdk.propertyValidator("maintenanceWindowRunCommandParameters", CfnMaintenanceWindowTask_MaintenanceWindowRunCommandParametersPropertyValidator)(properties.maintenanceWindowRunCommandParameters));
      errors.collect(cdk.propertyValidator("maintenanceWindowStepFunctionsParameters", CfnMaintenanceWindowTask_MaintenanceWindowStepFunctionsParametersPropertyValidator)(properties.maintenanceWindowStepFunctionsParameters));
      return errors.wrap('supplied properties not correct for "TaskInvocationParametersProperty"');
    }
    function cfnMaintenanceWindowTaskTaskInvocationParametersPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnMaintenanceWindowTask_TaskInvocationParametersPropertyValidator(properties).assertSuccess();
      return {
        MaintenanceWindowAutomationParameters: cfnMaintenanceWindowTaskMaintenanceWindowAutomationParametersPropertyToCloudFormation(properties.maintenanceWindowAutomationParameters),
        MaintenanceWindowLambdaParameters: cfnMaintenanceWindowTaskMaintenanceWindowLambdaParametersPropertyToCloudFormation(properties.maintenanceWindowLambdaParameters),
        MaintenanceWindowRunCommandParameters: cfnMaintenanceWindowTaskMaintenanceWindowRunCommandParametersPropertyToCloudFormation(properties.maintenanceWindowRunCommandParameters),
        MaintenanceWindowStepFunctionsParameters: cfnMaintenanceWindowTaskMaintenanceWindowStepFunctionsParametersPropertyToCloudFormation(properties.maintenanceWindowStepFunctionsParameters)
      };
    }
    function CfnMaintenanceWindowTaskTaskInvocationParametersPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("maintenanceWindowAutomationParameters", "MaintenanceWindowAutomationParameters", properties.MaintenanceWindowAutomationParameters != null ? CfnMaintenanceWindowTaskMaintenanceWindowAutomationParametersPropertyFromCloudFormation(properties.MaintenanceWindowAutomationParameters) : void 0);
      ret.addPropertyResult("maintenanceWindowLambdaParameters", "MaintenanceWindowLambdaParameters", properties.MaintenanceWindowLambdaParameters != null ? CfnMaintenanceWindowTaskMaintenanceWindowLambdaParametersPropertyFromCloudFormation(properties.MaintenanceWindowLambdaParameters) : void 0);
      ret.addPropertyResult("maintenanceWindowRunCommandParameters", "MaintenanceWindowRunCommandParameters", properties.MaintenanceWindowRunCommandParameters != null ? CfnMaintenanceWindowTaskMaintenanceWindowRunCommandParametersPropertyFromCloudFormation(properties.MaintenanceWindowRunCommandParameters) : void 0);
      ret.addPropertyResult("maintenanceWindowStepFunctionsParameters", "MaintenanceWindowStepFunctionsParameters", properties.MaintenanceWindowStepFunctionsParameters != null ? CfnMaintenanceWindowTaskMaintenanceWindowStepFunctionsParametersPropertyFromCloudFormation(properties.MaintenanceWindowStepFunctionsParameters) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnParameterPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("allowedPattern", cdk.validateString)(properties.allowedPattern));
      errors.collect(cdk.propertyValidator("dataType", cdk.validateString)(properties.dataType));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("policies", cdk.validateString)(properties.policies));
      errors.collect(cdk.propertyValidator("tags", cdk.validateObject)(properties.tags));
      errors.collect(cdk.propertyValidator("tier", cdk.validateString)(properties.tier));
      errors.collect(cdk.propertyValidator("type", cdk.requiredValidator)(properties.type));
      errors.collect(cdk.propertyValidator("type", cdk.validateString)(properties.type));
      errors.collect(cdk.propertyValidator("value", cdk.requiredValidator)(properties.value));
      errors.collect(cdk.propertyValidator("value", cdk.validateString)(properties.value));
      return errors.wrap('supplied properties not correct for "CfnParameterProps"');
    }
    function cfnParameterPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnParameterPropsValidator(properties).assertSuccess();
      return {
        Type: cdk.stringToCloudFormation(properties.type),
        Value: cdk.stringToCloudFormation(properties.value),
        AllowedPattern: cdk.stringToCloudFormation(properties.allowedPattern),
        DataType: cdk.stringToCloudFormation(properties.dataType),
        Description: cdk.stringToCloudFormation(properties.description),
        Name: cdk.stringToCloudFormation(properties.name),
        Policies: cdk.stringToCloudFormation(properties.policies),
        Tags: cdk.objectToCloudFormation(properties.tags),
        Tier: cdk.stringToCloudFormation(properties.tier)
      };
    }
    function CfnParameterPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("type", "Type", cfn_parse.FromCloudFormation.getString(properties.Type));
      ret.addPropertyResult("value", "Value", cfn_parse.FromCloudFormation.getString(properties.Value));
      ret.addPropertyResult("allowedPattern", "AllowedPattern", properties.AllowedPattern != null ? cfn_parse.FromCloudFormation.getString(properties.AllowedPattern) : void 0);
      ret.addPropertyResult("dataType", "DataType", properties.DataType != null ? cfn_parse.FromCloudFormation.getString(properties.DataType) : void 0);
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("name", "Name", properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : void 0);
      ret.addPropertyResult("policies", "Policies", properties.Policies != null ? cfn_parse.FromCloudFormation.getString(properties.Policies) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : void 0);
      ret.addPropertyResult("tier", "Tier", properties.Tier != null ? cfn_parse.FromCloudFormation.getString(properties.Tier) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnParameter = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnParameter.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "type", this);
        cdk.requireProperty(props, "value", this);
        this.attrType = cdk.Token.asString(this.getAtt("Type"));
        this.attrValue = cdk.Token.asString(this.getAtt("Value"));
        this.type = props.type;
        this.value = props.value;
        this.allowedPattern = props.allowedPattern;
        this.dataType = props.dataType;
        this.description = props.description;
        this.name = props.name;
        this.policies = props.policies;
        this.tags = new cdk.TagManager(cdk.TagType.MAP, "AWS::SSM::Parameter", props.tags, { tagPropertyName: "tags" });
        this.tier = props.tier;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnParameterPropsFromCloudFormation(resourceProperties);
        const ret = new CfnParameter(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnParameter.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          type: this.type,
          value: this.value,
          allowedPattern: this.allowedPattern,
          dataType: this.dataType,
          description: this.description,
          name: this.name,
          policies: this.policies,
          tags: this.tags.renderTags(),
          tier: this.tier
        };
      }
      renderProperties(props) {
        return cfnParameterPropsToCloudFormation(props);
      }
    };
    exports2.CfnParameter = CfnParameter;
    _f = JSII_RTTI_SYMBOL_1;
    CfnParameter[_f] = { fqn: "@aws-cdk/aws-ssm.CfnParameter", version: "1.132.0" };
    CfnParameter.CFN_RESOURCE_TYPE_NAME = "AWS::SSM::Parameter";
    function CfnPatchBaselinePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("approvalRules", CfnPatchBaseline_RuleGroupPropertyValidator)(properties.approvalRules));
      errors.collect(cdk.propertyValidator("approvedPatches", cdk.listValidator(cdk.validateString))(properties.approvedPatches));
      errors.collect(cdk.propertyValidator("approvedPatchesComplianceLevel", cdk.validateString)(properties.approvedPatchesComplianceLevel));
      errors.collect(cdk.propertyValidator("approvedPatchesEnableNonSecurity", cdk.validateBoolean)(properties.approvedPatchesEnableNonSecurity));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("globalFilters", CfnPatchBaseline_PatchFilterGroupPropertyValidator)(properties.globalFilters));
      errors.collect(cdk.propertyValidator("name", cdk.requiredValidator)(properties.name));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("operatingSystem", cdk.validateString)(properties.operatingSystem));
      errors.collect(cdk.propertyValidator("patchGroups", cdk.listValidator(cdk.validateString))(properties.patchGroups));
      errors.collect(cdk.propertyValidator("rejectedPatches", cdk.listValidator(cdk.validateString))(properties.rejectedPatches));
      errors.collect(cdk.propertyValidator("rejectedPatchesAction", cdk.validateString)(properties.rejectedPatchesAction));
      errors.collect(cdk.propertyValidator("sources", cdk.listValidator(CfnPatchBaseline_PatchSourcePropertyValidator))(properties.sources));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnPatchBaselineProps"');
    }
    function cfnPatchBaselinePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnPatchBaselinePropsValidator(properties).assertSuccess();
      return {
        Name: cdk.stringToCloudFormation(properties.name),
        ApprovalRules: cfnPatchBaselineRuleGroupPropertyToCloudFormation(properties.approvalRules),
        ApprovedPatches: cdk.listMapper(cdk.stringToCloudFormation)(properties.approvedPatches),
        ApprovedPatchesComplianceLevel: cdk.stringToCloudFormation(properties.approvedPatchesComplianceLevel),
        ApprovedPatchesEnableNonSecurity: cdk.booleanToCloudFormation(properties.approvedPatchesEnableNonSecurity),
        Description: cdk.stringToCloudFormation(properties.description),
        GlobalFilters: cfnPatchBaselinePatchFilterGroupPropertyToCloudFormation(properties.globalFilters),
        OperatingSystem: cdk.stringToCloudFormation(properties.operatingSystem),
        PatchGroups: cdk.listMapper(cdk.stringToCloudFormation)(properties.patchGroups),
        RejectedPatches: cdk.listMapper(cdk.stringToCloudFormation)(properties.rejectedPatches),
        RejectedPatchesAction: cdk.stringToCloudFormation(properties.rejectedPatchesAction),
        Sources: cdk.listMapper(cfnPatchBaselinePatchSourcePropertyToCloudFormation)(properties.sources),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnPatchBaselinePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("name", "Name", cfn_parse.FromCloudFormation.getString(properties.Name));
      ret.addPropertyResult("approvalRules", "ApprovalRules", properties.ApprovalRules != null ? CfnPatchBaselineRuleGroupPropertyFromCloudFormation(properties.ApprovalRules) : void 0);
      ret.addPropertyResult("approvedPatches", "ApprovedPatches", properties.ApprovedPatches != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ApprovedPatches) : void 0);
      ret.addPropertyResult("approvedPatchesComplianceLevel", "ApprovedPatchesComplianceLevel", properties.ApprovedPatchesComplianceLevel != null ? cfn_parse.FromCloudFormation.getString(properties.ApprovedPatchesComplianceLevel) : void 0);
      ret.addPropertyResult("approvedPatchesEnableNonSecurity", "ApprovedPatchesEnableNonSecurity", properties.ApprovedPatchesEnableNonSecurity != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ApprovedPatchesEnableNonSecurity) : void 0);
      ret.addPropertyResult("description", "Description", properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : void 0);
      ret.addPropertyResult("globalFilters", "GlobalFilters", properties.GlobalFilters != null ? CfnPatchBaselinePatchFilterGroupPropertyFromCloudFormation(properties.GlobalFilters) : void 0);
      ret.addPropertyResult("operatingSystem", "OperatingSystem", properties.OperatingSystem != null ? cfn_parse.FromCloudFormation.getString(properties.OperatingSystem) : void 0);
      ret.addPropertyResult("patchGroups", "PatchGroups", properties.PatchGroups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.PatchGroups) : void 0);
      ret.addPropertyResult("rejectedPatches", "RejectedPatches", properties.RejectedPatches != null ? cfn_parse.FromCloudFormation.getStringArray(properties.RejectedPatches) : void 0);
      ret.addPropertyResult("rejectedPatchesAction", "RejectedPatchesAction", properties.RejectedPatchesAction != null ? cfn_parse.FromCloudFormation.getString(properties.RejectedPatchesAction) : void 0);
      ret.addPropertyResult("sources", "Sources", properties.Sources != null ? cfn_parse.FromCloudFormation.getArray(CfnPatchBaselinePatchSourcePropertyFromCloudFormation)(properties.Sources) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnPatchBaseline = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnPatchBaseline.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "name", this);
        this.name = props.name;
        this.approvalRules = props.approvalRules;
        this.approvedPatches = props.approvedPatches;
        this.approvedPatchesComplianceLevel = props.approvedPatchesComplianceLevel;
        this.approvedPatchesEnableNonSecurity = props.approvedPatchesEnableNonSecurity;
        this.description = props.description;
        this.globalFilters = props.globalFilters;
        this.operatingSystem = props.operatingSystem;
        this.patchGroups = props.patchGroups;
        this.rejectedPatches = props.rejectedPatches;
        this.rejectedPatchesAction = props.rejectedPatchesAction;
        this.sources = props.sources;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SSM::PatchBaseline", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnPatchBaselinePropsFromCloudFormation(resourceProperties);
        const ret = new CfnPatchBaseline(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnPatchBaseline.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          name: this.name,
          approvalRules: this.approvalRules,
          approvedPatches: this.approvedPatches,
          approvedPatchesComplianceLevel: this.approvedPatchesComplianceLevel,
          approvedPatchesEnableNonSecurity: this.approvedPatchesEnableNonSecurity,
          description: this.description,
          globalFilters: this.globalFilters,
          operatingSystem: this.operatingSystem,
          patchGroups: this.patchGroups,
          rejectedPatches: this.rejectedPatches,
          rejectedPatchesAction: this.rejectedPatchesAction,
          sources: this.sources,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnPatchBaselinePropsToCloudFormation(props);
      }
    };
    exports2.CfnPatchBaseline = CfnPatchBaseline;
    _g = JSII_RTTI_SYMBOL_1;
    CfnPatchBaseline[_g] = { fqn: "@aws-cdk/aws-ssm.CfnPatchBaseline", version: "1.132.0" };
    CfnPatchBaseline.CFN_RESOURCE_TYPE_NAME = "AWS::SSM::PatchBaseline";
    function CfnPatchBaseline_PatchFilterPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("key", cdk.validateString)(properties.key));
      errors.collect(cdk.propertyValidator("values", cdk.listValidator(cdk.validateString))(properties.values));
      return errors.wrap('supplied properties not correct for "PatchFilterProperty"');
    }
    function cfnPatchBaselinePatchFilterPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnPatchBaseline_PatchFilterPropertyValidator(properties).assertSuccess();
      return {
        Key: cdk.stringToCloudFormation(properties.key),
        Values: cdk.listMapper(cdk.stringToCloudFormation)(properties.values)
      };
    }
    function CfnPatchBaselinePatchFilterPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("key", "Key", properties.Key != null ? cfn_parse.FromCloudFormation.getString(properties.Key) : void 0);
      ret.addPropertyResult("values", "Values", properties.Values != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Values) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnPatchBaseline_PatchFilterGroupPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("patchFilters", cdk.listValidator(CfnPatchBaseline_PatchFilterPropertyValidator))(properties.patchFilters));
      return errors.wrap('supplied properties not correct for "PatchFilterGroupProperty"');
    }
    function cfnPatchBaselinePatchFilterGroupPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnPatchBaseline_PatchFilterGroupPropertyValidator(properties).assertSuccess();
      return {
        PatchFilters: cdk.listMapper(cfnPatchBaselinePatchFilterPropertyToCloudFormation)(properties.patchFilters)
      };
    }
    function CfnPatchBaselinePatchFilterGroupPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("patchFilters", "PatchFilters", properties.PatchFilters != null ? cfn_parse.FromCloudFormation.getArray(CfnPatchBaselinePatchFilterPropertyFromCloudFormation)(properties.PatchFilters) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnPatchBaseline_PatchSourcePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("configuration", cdk.validateString)(properties.configuration));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("products", cdk.listValidator(cdk.validateString))(properties.products));
      return errors.wrap('supplied properties not correct for "PatchSourceProperty"');
    }
    function cfnPatchBaselinePatchSourcePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnPatchBaseline_PatchSourcePropertyValidator(properties).assertSuccess();
      return {
        Configuration: cdk.stringToCloudFormation(properties.configuration),
        Name: cdk.stringToCloudFormation(properties.name),
        Products: cdk.listMapper(cdk.stringToCloudFormation)(properties.products)
      };
    }
    function CfnPatchBaselinePatchSourcePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("configuration", "Configuration", properties.Configuration != null ? cfn_parse.FromCloudFormation.getString(properties.Configuration) : void 0);
      ret.addPropertyResult("name", "Name", properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : void 0);
      ret.addPropertyResult("products", "Products", properties.Products != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Products) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnPatchBaseline_RulePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("approveAfterDays", cdk.validateNumber)(properties.approveAfterDays));
      errors.collect(cdk.propertyValidator("approveUntilDate", cdk.validateString)(properties.approveUntilDate));
      errors.collect(cdk.propertyValidator("complianceLevel", cdk.validateString)(properties.complianceLevel));
      errors.collect(cdk.propertyValidator("enableNonSecurity", cdk.validateBoolean)(properties.enableNonSecurity));
      errors.collect(cdk.propertyValidator("patchFilterGroup", CfnPatchBaseline_PatchFilterGroupPropertyValidator)(properties.patchFilterGroup));
      return errors.wrap('supplied properties not correct for "RuleProperty"');
    }
    function cfnPatchBaselineRulePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnPatchBaseline_RulePropertyValidator(properties).assertSuccess();
      return {
        ApproveAfterDays: cdk.numberToCloudFormation(properties.approveAfterDays),
        ApproveUntilDate: cdk.stringToCloudFormation(properties.approveUntilDate),
        ComplianceLevel: cdk.stringToCloudFormation(properties.complianceLevel),
        EnableNonSecurity: cdk.booleanToCloudFormation(properties.enableNonSecurity),
        PatchFilterGroup: cfnPatchBaselinePatchFilterGroupPropertyToCloudFormation(properties.patchFilterGroup)
      };
    }
    function CfnPatchBaselineRulePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("approveAfterDays", "ApproveAfterDays", properties.ApproveAfterDays != null ? cfn_parse.FromCloudFormation.getNumber(properties.ApproveAfterDays) : void 0);
      ret.addPropertyResult("approveUntilDate", "ApproveUntilDate", properties.ApproveUntilDate != null ? cfn_parse.FromCloudFormation.getString(properties.ApproveUntilDate) : void 0);
      ret.addPropertyResult("complianceLevel", "ComplianceLevel", properties.ComplianceLevel != null ? cfn_parse.FromCloudFormation.getString(properties.ComplianceLevel) : void 0);
      ret.addPropertyResult("enableNonSecurity", "EnableNonSecurity", properties.EnableNonSecurity != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableNonSecurity) : void 0);
      ret.addPropertyResult("patchFilterGroup", "PatchFilterGroup", properties.PatchFilterGroup != null ? CfnPatchBaselinePatchFilterGroupPropertyFromCloudFormation(properties.PatchFilterGroup) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnPatchBaseline_RuleGroupPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("patchRules", cdk.listValidator(CfnPatchBaseline_RulePropertyValidator))(properties.patchRules));
      return errors.wrap('supplied properties not correct for "RuleGroupProperty"');
    }
    function cfnPatchBaselineRuleGroupPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnPatchBaseline_RuleGroupPropertyValidator(properties).assertSuccess();
      return {
        PatchRules: cdk.listMapper(cfnPatchBaselineRulePropertyToCloudFormation)(properties.patchRules)
      };
    }
    function CfnPatchBaselineRuleGroupPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("patchRules", "PatchRules", properties.PatchRules != null ? cfn_parse.FromCloudFormation.getArray(CfnPatchBaselineRulePropertyFromCloudFormation)(properties.PatchRules) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnResourceDataSyncPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("bucketName", cdk.validateString)(properties.bucketName));
      errors.collect(cdk.propertyValidator("bucketPrefix", cdk.validateString)(properties.bucketPrefix));
      errors.collect(cdk.propertyValidator("bucketRegion", cdk.validateString)(properties.bucketRegion));
      errors.collect(cdk.propertyValidator("kmsKeyArn", cdk.validateString)(properties.kmsKeyArn));
      errors.collect(cdk.propertyValidator("s3Destination", CfnResourceDataSync_S3DestinationPropertyValidator)(properties.s3Destination));
      errors.collect(cdk.propertyValidator("syncFormat", cdk.validateString)(properties.syncFormat));
      errors.collect(cdk.propertyValidator("syncName", cdk.requiredValidator)(properties.syncName));
      errors.collect(cdk.propertyValidator("syncName", cdk.validateString)(properties.syncName));
      errors.collect(cdk.propertyValidator("syncSource", CfnResourceDataSync_SyncSourcePropertyValidator)(properties.syncSource));
      errors.collect(cdk.propertyValidator("syncType", cdk.validateString)(properties.syncType));
      return errors.wrap('supplied properties not correct for "CfnResourceDataSyncProps"');
    }
    function cfnResourceDataSyncPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnResourceDataSyncPropsValidator(properties).assertSuccess();
      return {
        SyncName: cdk.stringToCloudFormation(properties.syncName),
        BucketName: cdk.stringToCloudFormation(properties.bucketName),
        BucketPrefix: cdk.stringToCloudFormation(properties.bucketPrefix),
        BucketRegion: cdk.stringToCloudFormation(properties.bucketRegion),
        KMSKeyArn: cdk.stringToCloudFormation(properties.kmsKeyArn),
        S3Destination: cfnResourceDataSyncS3DestinationPropertyToCloudFormation(properties.s3Destination),
        SyncFormat: cdk.stringToCloudFormation(properties.syncFormat),
        SyncSource: cfnResourceDataSyncSyncSourcePropertyToCloudFormation(properties.syncSource),
        SyncType: cdk.stringToCloudFormation(properties.syncType)
      };
    }
    function CfnResourceDataSyncPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("syncName", "SyncName", cfn_parse.FromCloudFormation.getString(properties.SyncName));
      ret.addPropertyResult("bucketName", "BucketName", properties.BucketName != null ? cfn_parse.FromCloudFormation.getString(properties.BucketName) : void 0);
      ret.addPropertyResult("bucketPrefix", "BucketPrefix", properties.BucketPrefix != null ? cfn_parse.FromCloudFormation.getString(properties.BucketPrefix) : void 0);
      ret.addPropertyResult("bucketRegion", "BucketRegion", properties.BucketRegion != null ? cfn_parse.FromCloudFormation.getString(properties.BucketRegion) : void 0);
      ret.addPropertyResult("kmsKeyArn", "KMSKeyArn", properties.KMSKeyArn != null ? cfn_parse.FromCloudFormation.getString(properties.KMSKeyArn) : void 0);
      ret.addPropertyResult("s3Destination", "S3Destination", properties.S3Destination != null ? CfnResourceDataSyncS3DestinationPropertyFromCloudFormation(properties.S3Destination) : void 0);
      ret.addPropertyResult("syncFormat", "SyncFormat", properties.SyncFormat != null ? cfn_parse.FromCloudFormation.getString(properties.SyncFormat) : void 0);
      ret.addPropertyResult("syncSource", "SyncSource", properties.SyncSource != null ? CfnResourceDataSyncSyncSourcePropertyFromCloudFormation(properties.SyncSource) : void 0);
      ret.addPropertyResult("syncType", "SyncType", properties.SyncType != null ? cfn_parse.FromCloudFormation.getString(properties.SyncType) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnResourceDataSync = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnResourceDataSync.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "syncName", this);
        this.attrSyncName = cdk.Token.asString(this.getAtt("SyncName"));
        this.syncName = props.syncName;
        this.bucketName = props.bucketName;
        this.bucketPrefix = props.bucketPrefix;
        this.bucketRegion = props.bucketRegion;
        this.kmsKeyArn = props.kmsKeyArn;
        this.s3Destination = props.s3Destination;
        this.syncFormat = props.syncFormat;
        this.syncSource = props.syncSource;
        this.syncType = props.syncType;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnResourceDataSyncPropsFromCloudFormation(resourceProperties);
        const ret = new CfnResourceDataSync(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnResourceDataSync.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          syncName: this.syncName,
          bucketName: this.bucketName,
          bucketPrefix: this.bucketPrefix,
          bucketRegion: this.bucketRegion,
          kmsKeyArn: this.kmsKeyArn,
          s3Destination: this.s3Destination,
          syncFormat: this.syncFormat,
          syncSource: this.syncSource,
          syncType: this.syncType
        };
      }
      renderProperties(props) {
        return cfnResourceDataSyncPropsToCloudFormation(props);
      }
    };
    exports2.CfnResourceDataSync = CfnResourceDataSync;
    _h = JSII_RTTI_SYMBOL_1;
    CfnResourceDataSync[_h] = { fqn: "@aws-cdk/aws-ssm.CfnResourceDataSync", version: "1.132.0" };
    CfnResourceDataSync.CFN_RESOURCE_TYPE_NAME = "AWS::SSM::ResourceDataSync";
    function CfnResourceDataSync_AwsOrganizationsSourcePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("organizationSourceType", cdk.requiredValidator)(properties.organizationSourceType));
      errors.collect(cdk.propertyValidator("organizationSourceType", cdk.validateString)(properties.organizationSourceType));
      errors.collect(cdk.propertyValidator("organizationalUnits", cdk.listValidator(cdk.validateString))(properties.organizationalUnits));
      return errors.wrap('supplied properties not correct for "AwsOrganizationsSourceProperty"');
    }
    function cfnResourceDataSyncAwsOrganizationsSourcePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnResourceDataSync_AwsOrganizationsSourcePropertyValidator(properties).assertSuccess();
      return {
        OrganizationSourceType: cdk.stringToCloudFormation(properties.organizationSourceType),
        OrganizationalUnits: cdk.listMapper(cdk.stringToCloudFormation)(properties.organizationalUnits)
      };
    }
    function CfnResourceDataSyncAwsOrganizationsSourcePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("organizationSourceType", "OrganizationSourceType", cfn_parse.FromCloudFormation.getString(properties.OrganizationSourceType));
      ret.addPropertyResult("organizationalUnits", "OrganizationalUnits", properties.OrganizationalUnits != null ? cfn_parse.FromCloudFormation.getStringArray(properties.OrganizationalUnits) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnResourceDataSync_S3DestinationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("bucketName", cdk.requiredValidator)(properties.bucketName));
      errors.collect(cdk.propertyValidator("bucketName", cdk.validateString)(properties.bucketName));
      errors.collect(cdk.propertyValidator("bucketPrefix", cdk.validateString)(properties.bucketPrefix));
      errors.collect(cdk.propertyValidator("bucketRegion", cdk.requiredValidator)(properties.bucketRegion));
      errors.collect(cdk.propertyValidator("bucketRegion", cdk.validateString)(properties.bucketRegion));
      errors.collect(cdk.propertyValidator("kmsKeyArn", cdk.validateString)(properties.kmsKeyArn));
      errors.collect(cdk.propertyValidator("syncFormat", cdk.requiredValidator)(properties.syncFormat));
      errors.collect(cdk.propertyValidator("syncFormat", cdk.validateString)(properties.syncFormat));
      return errors.wrap('supplied properties not correct for "S3DestinationProperty"');
    }
    function cfnResourceDataSyncS3DestinationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnResourceDataSync_S3DestinationPropertyValidator(properties).assertSuccess();
      return {
        BucketName: cdk.stringToCloudFormation(properties.bucketName),
        BucketPrefix: cdk.stringToCloudFormation(properties.bucketPrefix),
        BucketRegion: cdk.stringToCloudFormation(properties.bucketRegion),
        KMSKeyArn: cdk.stringToCloudFormation(properties.kmsKeyArn),
        SyncFormat: cdk.stringToCloudFormation(properties.syncFormat)
      };
    }
    function CfnResourceDataSyncS3DestinationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("bucketName", "BucketName", cfn_parse.FromCloudFormation.getString(properties.BucketName));
      ret.addPropertyResult("bucketPrefix", "BucketPrefix", properties.BucketPrefix != null ? cfn_parse.FromCloudFormation.getString(properties.BucketPrefix) : void 0);
      ret.addPropertyResult("bucketRegion", "BucketRegion", cfn_parse.FromCloudFormation.getString(properties.BucketRegion));
      ret.addPropertyResult("kmsKeyArn", "KMSKeyArn", properties.KMSKeyArn != null ? cfn_parse.FromCloudFormation.getString(properties.KMSKeyArn) : void 0);
      ret.addPropertyResult("syncFormat", "SyncFormat", cfn_parse.FromCloudFormation.getString(properties.SyncFormat));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnResourceDataSync_SyncSourcePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("awsOrganizationsSource", CfnResourceDataSync_AwsOrganizationsSourcePropertyValidator)(properties.awsOrganizationsSource));
      errors.collect(cdk.propertyValidator("includeFutureRegions", cdk.validateBoolean)(properties.includeFutureRegions));
      errors.collect(cdk.propertyValidator("sourceRegions", cdk.requiredValidator)(properties.sourceRegions));
      errors.collect(cdk.propertyValidator("sourceRegions", cdk.listValidator(cdk.validateString))(properties.sourceRegions));
      errors.collect(cdk.propertyValidator("sourceType", cdk.requiredValidator)(properties.sourceType));
      errors.collect(cdk.propertyValidator("sourceType", cdk.validateString)(properties.sourceType));
      return errors.wrap('supplied properties not correct for "SyncSourceProperty"');
    }
    function cfnResourceDataSyncSyncSourcePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnResourceDataSync_SyncSourcePropertyValidator(properties).assertSuccess();
      return {
        AwsOrganizationsSource: cfnResourceDataSyncAwsOrganizationsSourcePropertyToCloudFormation(properties.awsOrganizationsSource),
        IncludeFutureRegions: cdk.booleanToCloudFormation(properties.includeFutureRegions),
        SourceRegions: cdk.listMapper(cdk.stringToCloudFormation)(properties.sourceRegions),
        SourceType: cdk.stringToCloudFormation(properties.sourceType)
      };
    }
    function CfnResourceDataSyncSyncSourcePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("awsOrganizationsSource", "AwsOrganizationsSource", properties.AwsOrganizationsSource != null ? CfnResourceDataSyncAwsOrganizationsSourcePropertyFromCloudFormation(properties.AwsOrganizationsSource) : void 0);
      ret.addPropertyResult("includeFutureRegions", "IncludeFutureRegions", properties.IncludeFutureRegions != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IncludeFutureRegions) : void 0);
      ret.addPropertyResult("sourceRegions", "SourceRegions", cfn_parse.FromCloudFormation.getStringArray(properties.SourceRegions));
      ret.addPropertyResult("sourceType", "SourceType", cfn_parse.FromCloudFormation.getString(properties.SourceType));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-ssm/lib/util.js
var require_util7 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ssm/lib/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.arnForParameterName = exports2.AUTOGEN_MARKER = void 0;
    var core_1 = require_lib8();
    exports2.AUTOGEN_MARKER = "$$autogen$$";
    function arnForParameterName(scope, parameterName, options = {}) {
      const physicalName = options.physicalName;
      const nameToValidate = physicalName || parameterName;
      if (!core_1.Token.isUnresolved(nameToValidate) && nameToValidate.includes("/") && !nameToValidate.startsWith("/")) {
        throw new Error(`Parameter names must be fully qualified (if they include "/" they must also begin with a "/"): ${nameToValidate}`);
      }
      return core_1.Stack.of(scope).formatArn({
        service: "ssm",
        resource: "parameter",
        sep: isSimpleName() ? "/" : "",
        resourceName: parameterName
      });
      function isSimpleName() {
        const concreteName = !core_1.Token.isUnresolved(parameterName) ? parameterName : physicalName;
        if (!concreteName || core_1.Token.isUnresolved(concreteName)) {
          if (options.simpleName === void 0) {
            throw new Error('Unable to determine ARN separator for SSM parameter since the parameter name is an unresolved token. Use "fromAttributes" and specify "simpleName" explicitly');
          }
          return options.simpleName;
        }
        const result = !concreteName.startsWith("/");
        if (options.simpleName !== void 0 && options.simpleName !== result) {
          if (concreteName === exports2.AUTOGEN_MARKER) {
            throw new Error('If "parameterName" is not explicitly defined, "simpleName" must be "true" or undefined since auto-generated parameter names always have simple names');
          }
          throw new Error(`Parameter name "${concreteName}" is ${result ? "a simple name" : "not a simple name"}, but "simpleName" was explicitly set to ${options.simpleName}. Either omit it or set it to ${result}`);
        }
        return result;
      }
    }
    exports2.arnForParameterName = arnForParameterName;
  }
});

// asset-input/node_modules/@aws-cdk/aws-ssm/lib/parameter.js
var require_parameter = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ssm/lib/parameter.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StringListParameter = exports2.StringParameter = exports2.ParameterTier = exports2.ParameterDataType = exports2.ParameterType = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var iam = require_lib9();
    var cxschema = require_lib3();
    var core_1 = require_lib8();
    var ssm = require_ssm_generated();
    var util_1 = require_util7();
    var ParameterBase = class extends core_1.Resource {
      grantRead(grantee) {
        if (this.encryptionKey) {
          this.encryptionKey.grantDecrypt(grantee);
        }
        return iam.Grant.addToPrincipal({
          grantee,
          actions: [
            "ssm:DescribeParameters",
            "ssm:GetParameters",
            "ssm:GetParameter",
            "ssm:GetParameterHistory"
          ],
          resourceArns: [this.parameterArn]
        });
      }
      grantWrite(grantee) {
        if (this.encryptionKey) {
          this.encryptionKey.grantEncrypt(grantee);
        }
        return iam.Grant.addToPrincipal({
          grantee,
          actions: ["ssm:PutParameter"],
          resourceArns: [this.parameterArn]
        });
      }
    };
    var ParameterType;
    (function(ParameterType2) {
      ParameterType2["STRING"] = "String";
      ParameterType2["SECURE_STRING"] = "SecureString";
      ParameterType2["STRING_LIST"] = "StringList";
      ParameterType2["AWS_EC2_IMAGE_ID"] = "AWS::EC2::Image::Id";
    })(ParameterType = exports2.ParameterType || (exports2.ParameterType = {}));
    var ParameterDataType;
    (function(ParameterDataType2) {
      ParameterDataType2["TEXT"] = "text";
      ParameterDataType2["AWS_EC2_IMAGE"] = "aws:ec2:image";
    })(ParameterDataType = exports2.ParameterDataType || (exports2.ParameterDataType = {}));
    var ParameterTier;
    (function(ParameterTier2) {
      ParameterTier2["ADVANCED"] = "Advanced";
      ParameterTier2["INTELLIGENT_TIERING"] = "Intelligent-Tiering";
      ParameterTier2["STANDARD"] = "Standard";
    })(ParameterTier = exports2.ParameterTier || (exports2.ParameterTier = {}));
    var StringParameter = class extends ParameterBase {
      constructor(scope, id, props) {
        var _c;
        super(scope, id, {
          physicalName: props.parameterName
        });
        if (props.allowedPattern) {
          _assertValidValue(props.stringValue, props.allowedPattern);
        }
        validateParameterName(this.physicalName);
        if (props.description && ((_c = props.description) === null || _c === void 0 ? void 0 : _c.length) > 1024) {
          throw new Error("Description cannot be longer than 1024 characters.");
        }
        if (props.type && props.type === ParameterType.AWS_EC2_IMAGE_ID) {
          throw new Error("The type must either be ParameterType.STRING or ParameterType.STRING_LIST. Did you mean to set dataType: ParameterDataType.AWS_EC2_IMAGE instead?");
        }
        const resource = new ssm.CfnParameter(this, "Resource", {
          allowedPattern: props.allowedPattern,
          description: props.description,
          name: this.physicalName,
          tier: props.tier,
          type: props.type || ParameterType.STRING,
          dataType: props.dataType,
          value: props.stringValue
        });
        this.parameterName = this.getResourceNameAttribute(resource.ref);
        this.parameterArn = util_1.arnForParameterName(this, this.parameterName, {
          physicalName: props.parameterName || util_1.AUTOGEN_MARKER,
          simpleName: props.simpleName
        });
        this.parameterType = resource.attrType;
        this.stringValue = resource.attrValue;
      }
      static fromStringParameterName(scope, id, stringParameterName) {
        return this.fromStringParameterAttributes(scope, id, { parameterName: stringParameterName });
      }
      static fromStringParameterAttributes(scope, id, attrs) {
        if (!attrs.parameterName) {
          throw new Error("parameterName cannot be an empty string");
        }
        const type = attrs.type || ParameterType.STRING;
        const stringValue = attrs.version ? new core_1.CfnDynamicReference(core_1.CfnDynamicReferenceService.SSM, `${attrs.parameterName}:${core_1.Tokenization.stringifyNumber(attrs.version)}`).toString() : new core_1.CfnParameter(scope, `${id}.Parameter`, { type: `AWS::SSM::Parameter::Value<${type}>`, default: attrs.parameterName }).valueAsString;
        class Import extends ParameterBase {
          constructor() {
            super(...arguments);
            this.parameterName = attrs.parameterName;
            this.parameterArn = util_1.arnForParameterName(this, attrs.parameterName, { simpleName: attrs.simpleName });
            this.parameterType = type;
            this.stringValue = stringValue;
          }
        }
        return new Import(scope, id);
      }
      static fromSecureStringParameterAttributes(scope, id, attrs) {
        const stringValue = new core_1.CfnDynamicReference(core_1.CfnDynamicReferenceService.SSM_SECURE, `${attrs.parameterName}:${core_1.Tokenization.stringifyNumber(attrs.version)}`).toString();
        class Import extends ParameterBase {
          constructor() {
            super(...arguments);
            this.parameterName = attrs.parameterName;
            this.parameterArn = util_1.arnForParameterName(this, attrs.parameterName, { simpleName: attrs.simpleName });
            this.parameterType = ParameterType.SECURE_STRING;
            this.stringValue = stringValue;
            this.encryptionKey = attrs.encryptionKey;
          }
        }
        return new Import(scope, id);
      }
      static valueFromLookup(scope, parameterName) {
        const value = core_1.ContextProvider.getValue(scope, {
          provider: cxschema.ContextProvider.SSM_PARAMETER_PROVIDER,
          props: { parameterName },
          dummyValue: `dummy-value-for-${parameterName}`
        }).value;
        return value;
      }
      static valueForStringParameter(scope, parameterName, version) {
        return StringParameter.valueForTypedStringParameter(scope, parameterName, ParameterType.STRING, version);
      }
      static valueForTypedStringParameter(scope, parameterName, type = ParameterType.STRING, version) {
        const stack = core_1.Stack.of(scope);
        const id = makeIdentityForImportedValue(parameterName);
        const exists = stack.node.tryFindChild(id);
        if (exists) {
          return exists.stringValue;
        }
        return this.fromStringParameterAttributes(stack, id, { parameterName, version, type }).stringValue;
      }
      static valueForSecureStringParameter(scope, parameterName, version) {
        const stack = core_1.Stack.of(scope);
        const id = makeIdentityForImportedValue(parameterName);
        const exists = stack.node.tryFindChild(id);
        if (exists) {
          return exists.stringValue;
        }
        return this.fromSecureStringParameterAttributes(stack, id, { parameterName, version }).stringValue;
      }
    };
    exports2.StringParameter = StringParameter;
    _a = JSII_RTTI_SYMBOL_1;
    StringParameter[_a] = { fqn: "@aws-cdk/aws-ssm.StringParameter", version: "1.132.0" };
    var StringListParameter = class extends ParameterBase {
      constructor(scope, id, props) {
        var _c;
        super(scope, id, {
          physicalName: props.parameterName
        });
        if (props.stringListValue.find((str) => !core_1.Token.isUnresolved(str) && str.indexOf(",") !== -1)) {
          throw new Error("Values of a StringList SSM Parameter cannot contain the ',' character. Use a string parameter instead.");
        }
        if (props.allowedPattern && !core_1.Token.isUnresolved(props.stringListValue)) {
          props.stringListValue.forEach((str) => _assertValidValue(str, props.allowedPattern));
        }
        validateParameterName(this.physicalName);
        if (props.description && ((_c = props.description) === null || _c === void 0 ? void 0 : _c.length) > 1024) {
          throw new Error("Description cannot be longer than 1024 characters.");
        }
        const resource = new ssm.CfnParameter(this, "Resource", {
          allowedPattern: props.allowedPattern,
          description: props.description,
          name: this.physicalName,
          tier: props.tier,
          type: ParameterType.STRING_LIST,
          value: props.stringListValue.join(",")
        });
        this.parameterName = this.getResourceNameAttribute(resource.ref);
        this.parameterArn = util_1.arnForParameterName(this, this.parameterName, {
          physicalName: props.parameterName || util_1.AUTOGEN_MARKER,
          simpleName: props.simpleName
        });
        this.parameterType = resource.attrType;
        this.stringListValue = core_1.Fn.split(",", resource.attrValue);
      }
      static fromStringListParameterName(scope, id, stringListParameterName) {
        class Import extends ParameterBase {
          constructor() {
            super(...arguments);
            this.parameterName = stringListParameterName;
            this.parameterArn = util_1.arnForParameterName(this, this.parameterName);
            this.parameterType = ParameterType.STRING_LIST;
            this.stringListValue = core_1.Fn.split(",", new core_1.CfnDynamicReference(core_1.CfnDynamicReferenceService.SSM, stringListParameterName).toString());
          }
        }
        return new Import(scope, id);
      }
    };
    exports2.StringListParameter = StringListParameter;
    _b = JSII_RTTI_SYMBOL_1;
    StringListParameter[_b] = { fqn: "@aws-cdk/aws-ssm.StringListParameter", version: "1.132.0" };
    function _assertValidValue(value, allowedPattern) {
      if (core_1.Token.isUnresolved(value) || core_1.Token.isUnresolved(allowedPattern)) {
        return;
      }
      if (!new RegExp(allowedPattern).test(value)) {
        throw new Error(`The supplied value (${value}) does not match the specified allowedPattern (${allowedPattern})`);
      }
    }
    function makeIdentityForImportedValue(parameterName) {
      return `SsmParameterValue:${parameterName}:C96584B6-F00A-464E-AD19-53AFF4B05118`;
    }
    function validateParameterName(parameterName) {
      if (core_1.Token.isUnresolved(parameterName)) {
        return;
      }
      if (parameterName.length > 2048) {
        throw new Error("name cannot be longer than 2048 characters.");
      }
      if (!parameterName.match(/^[\/\w.-]+$/)) {
        throw new Error(`name must only contain letters, numbers, and the following 4 symbols .-_/; got ${parameterName}`);
      }
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-ssm/lib/index.js
var require_lib20 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ssm/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_parameter(), exports2);
    __exportStar(require_ssm_generated(), exports2);
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/user-data.js
var require_user_data = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/user-data.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MultipartUserData = exports2.MultipartBody = exports2.UserData = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var machine_image_1 = require_machine_image();
    var UserData = class {
      static forLinux(options = {}) {
        return new LinuxUserData(options);
      }
      static forWindows() {
        return new WindowsUserData();
      }
      static custom(content) {
        const userData = new CustomUserData();
        userData.addCommands(content);
        return userData;
      }
      static forOperatingSystem(os) {
        switch (os) {
          case machine_image_1.OperatingSystemType.LINUX:
            return UserData.forLinux();
          case machine_image_1.OperatingSystemType.WINDOWS:
            return UserData.forWindows();
          case machine_image_1.OperatingSystemType.UNKNOWN:
            throw new Error("Cannot determine UserData for unknown operating system type");
        }
      }
    };
    exports2.UserData = UserData;
    _a = JSII_RTTI_SYMBOL_1;
    UserData[_a] = { fqn: "@aws-cdk/aws-ec2.UserData", version: "1.132.0" };
    var LinuxUserData = class extends UserData {
      constructor(props = {}) {
        super();
        this.props = props;
        this.lines = [];
        this.onExitLines = [];
      }
      addCommands(...commands) {
        this.lines.push(...commands);
      }
      addOnExitCommands(...commands) {
        this.onExitLines.push(...commands);
      }
      render() {
        var _d;
        const shebang = (_d = this.props.shebang) !== null && _d !== void 0 ? _d : "#!/bin/bash";
        return [shebang, ...this.renderOnExitLines(), ...this.lines].join("\n");
      }
      addS3DownloadCommand(params) {
        const s3Path = `s3://${params.bucket.bucketName}/${params.bucketKey}`;
        const localPath = params.localFile && params.localFile.length !== 0 ? params.localFile : `/tmp/${params.bucketKey}`;
        this.addCommands(`mkdir -p $(dirname '${localPath}')`, `aws s3 cp '${s3Path}' '${localPath}'` + (params.region !== void 0 ? ` --region ${params.region}` : ""));
        return localPath;
      }
      addExecuteFileCommand(params) {
        var _d;
        this.addCommands("set -e", `chmod +x '${params.filePath}'`, `'${params.filePath}' ${(_d = params.arguments) !== null && _d !== void 0 ? _d : ""}`.trim());
      }
      addSignalOnExitCommand(resource) {
        const stack = core_1.Stack.of(resource);
        const resourceID = stack.getLogicalId(resource.node.defaultChild);
        this.addOnExitCommands(`/opt/aws/bin/cfn-signal --stack ${stack.stackName} --resource ${resourceID} --region ${stack.region} -e $exitCode || echo 'Failed to send Cloudformation Signal'`);
      }
      renderOnExitLines() {
        if (this.onExitLines.length > 0) {
          return ["function exitTrap(){", "exitCode=$?", ...this.onExitLines, "}", "trap exitTrap EXIT"];
        }
        return [];
      }
    };
    var WindowsUserData = class extends UserData {
      constructor() {
        super();
        this.lines = [];
        this.onExitLines = [];
      }
      addCommands(...commands) {
        this.lines.push(...commands);
      }
      addOnExitCommands(...commands) {
        this.onExitLines.push(...commands);
      }
      render() {
        return `<powershell>${[
          ...this.renderOnExitLines(),
          ...this.lines,
          ...this.onExitLines.length > 0 ? ['throw "Success"'] : []
        ].join("\n")}</powershell>`;
      }
      addS3DownloadCommand(params) {
        const localPath = params.localFile && params.localFile.length !== 0 ? params.localFile : `C:/temp/${params.bucketKey}`;
        this.addCommands(`mkdir (Split-Path -Path '${localPath}' ) -ea 0`, `Read-S3Object -BucketName '${params.bucket.bucketName}' -key '${params.bucketKey}' -file '${localPath}' -ErrorAction Stop` + (params.region !== void 0 ? ` -Region ${params.region}` : ""));
        return localPath;
      }
      addExecuteFileCommand(params) {
        var _d;
        this.addCommands(`&'${params.filePath}' ${(_d = params.arguments) !== null && _d !== void 0 ? _d : ""}`.trim(), `if (!$?) { Write-Error 'Failed to execute the file "${params.filePath}"' -ErrorAction Stop }`);
      }
      addSignalOnExitCommand(resource) {
        const stack = core_1.Stack.of(resource);
        const resourceID = stack.getLogicalId(resource.node.defaultChild);
        this.addOnExitCommands(`cfn-signal --stack ${stack.stackName} --resource ${resourceID} --region ${stack.region} --success ($success.ToString().ToLower())`);
      }
      renderOnExitLines() {
        if (this.onExitLines.length > 0) {
          return ["trap {", '$success=($PSItem.Exception.Message -eq "Success")', ...this.onExitLines, "break", "}"];
        }
        return [];
      }
    };
    var CustomUserData = class extends UserData {
      constructor() {
        super();
        this.lines = [];
      }
      addCommands(...commands) {
        this.lines.push(...commands);
      }
      addOnExitCommands() {
        throw new Error("CustomUserData does not support addOnExitCommands, use UserData.forLinux() or UserData.forWindows() instead.");
      }
      render() {
        return this.lines.join("\n");
      }
      addS3DownloadCommand() {
        throw new Error("CustomUserData does not support addS3DownloadCommand, use UserData.forLinux() or UserData.forWindows() instead.");
      }
      addExecuteFileCommand() {
        throw new Error("CustomUserData does not support addExecuteFileCommand, use UserData.forLinux() or UserData.forWindows() instead.");
      }
      addSignalOnExitCommand() {
        throw new Error("CustomUserData does not support addSignalOnExitCommand, use UserData.forLinux() or UserData.forWindows() instead.");
      }
    };
    var MultipartBody = class {
      constructor() {
      }
      static fromUserData(userData, contentType) {
        return new MultipartBodyUserDataWrapper(userData, contentType);
      }
      static fromRawBody(opts) {
        return new MultipartBodyRaw(opts);
      }
    };
    exports2.MultipartBody = MultipartBody;
    _b = JSII_RTTI_SYMBOL_1;
    MultipartBody[_b] = { fqn: "@aws-cdk/aws-ec2.MultipartBody", version: "1.132.0" };
    MultipartBody.SHELL_SCRIPT = 'text/x-shellscript; charset="utf-8"';
    MultipartBody.CLOUD_BOOTHOOK = 'text/cloud-boothook; charset="utf-8"';
    var MultipartBodyRaw = class extends MultipartBody {
      constructor(props) {
        super();
        this.props = props;
      }
      renderBodyPart() {
        const result = [];
        result.push(`Content-Type: ${this.props.contentType}`);
        if (this.props.transferEncoding != null) {
          result.push(`Content-Transfer-Encoding: ${this.props.transferEncoding}`);
        }
        result.push("");
        if (this.props.body != null) {
          result.push(this.props.body);
        }
        return result;
      }
    };
    var MultipartBodyUserDataWrapper = class extends MultipartBody {
      constructor(userData, contentType) {
        super();
        this.userData = userData;
        this.contentType = contentType || MultipartBody.SHELL_SCRIPT;
      }
      renderBodyPart() {
        const result = [];
        result.push(`Content-Type: ${this.contentType}`);
        result.push("Content-Transfer-Encoding: base64");
        result.push("");
        result.push(core_1.Fn.base64(this.userData.render()));
        return result;
      }
    };
    var MultipartUserData = class extends UserData {
      constructor(opts) {
        super();
        this.parts = [];
        let partsSeparator;
        if ((opts === null || opts === void 0 ? void 0 : opts.partsSeparator) != null) {
          if (new RegExp(MultipartUserData.BOUNDRY_PATTERN).test(opts.partsSeparator)) {
            throw new Error(`Invalid characters in separator. Separator has to match pattern ${MultipartUserData.BOUNDRY_PATTERN}`);
          } else {
            partsSeparator = opts.partsSeparator;
          }
        } else {
          partsSeparator = "+AWS+CDK+User+Data+Separator==";
        }
        this.opts = {
          partsSeparator
        };
      }
      addPart(part) {
        this.parts.push(part);
      }
      addUserDataPart(userData, contentType, makeDefault) {
        this.addPart(MultipartBody.fromUserData(userData, contentType));
        makeDefault = makeDefault !== null && makeDefault !== void 0 ? makeDefault : this.defaultUserData === void 0 ? true : false;
        if (makeDefault) {
          this.defaultUserData = userData;
        }
      }
      render() {
        const boundary = this.opts.partsSeparator;
        var resultArchive = new Array();
        resultArchive.push(`Content-Type: multipart/mixed; boundary="${boundary}"`);
        resultArchive.push("MIME-Version: 1.0");
        resultArchive.push("");
        this.parts.forEach((part) => {
          resultArchive.push(`--${boundary}`);
          resultArchive.push(...part.renderBodyPart());
        });
        resultArchive.push(`--${boundary}--`);
        resultArchive.push("");
        return resultArchive.join("\n");
      }
      addS3DownloadCommand(params) {
        if (this.defaultUserData) {
          return this.defaultUserData.addS3DownloadCommand(params);
        } else {
          throw new Error(MultipartUserData.USE_PART_ERROR);
        }
      }
      addExecuteFileCommand(params) {
        if (this.defaultUserData) {
          this.defaultUserData.addExecuteFileCommand(params);
        } else {
          throw new Error(MultipartUserData.USE_PART_ERROR);
        }
      }
      addSignalOnExitCommand(resource) {
        if (this.defaultUserData) {
          this.defaultUserData.addSignalOnExitCommand(resource);
        } else {
          throw new Error(MultipartUserData.USE_PART_ERROR);
        }
      }
      addCommands(...commands) {
        if (this.defaultUserData) {
          this.defaultUserData.addCommands(...commands);
        } else {
          throw new Error(MultipartUserData.USE_PART_ERROR);
        }
      }
      addOnExitCommands(...commands) {
        if (this.defaultUserData) {
          this.defaultUserData.addOnExitCommands(...commands);
        } else {
          throw new Error(MultipartUserData.USE_PART_ERROR);
        }
      }
    };
    exports2.MultipartUserData = MultipartUserData;
    _c = JSII_RTTI_SYMBOL_1;
    MultipartUserData[_c] = { fqn: "@aws-cdk/aws-ec2.MultipartUserData", version: "1.132.0" };
    MultipartUserData.USE_PART_ERROR = "MultipartUserData only supports this operation if it has a default UserData. Call addUserDataPart with makeDefault=true.";
    MultipartUserData.BOUNDRY_PATTERN = "[^a-zA-Z0-9()+,-./:=?]";
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/machine-image.js
var require_machine_image = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/machine-image.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    var _d;
    var _e;
    var _f;
    var _g;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LookupMachineImage = exports2.OperatingSystemType = exports2.GenericWindowsImage = exports2.GenericLinuxImage = exports2.AmazonLinuxStorage = exports2.AmazonLinuxVirt = exports2.AmazonLinuxEdition = exports2.AmazonLinuxGeneration = exports2.AmazonLinuxImage = exports2.AmazonLinuxCpuType = exports2.WindowsImage = exports2.GenericSSMParameterImage = exports2.MachineImage = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var ssm = require_lib20();
    var cxschema = require_lib3();
    var core_1 = require_lib8();
    var user_data_1 = require_user_data();
    var MachineImage = class {
      static latestWindows(version, props) {
        return new WindowsImage(version, props);
      }
      static latestAmazonLinux(props) {
        return new AmazonLinuxImage(props);
      }
      static genericLinux(amiMap, props) {
        return new GenericLinuxImage(amiMap, props);
      }
      static genericWindows(amiMap, props) {
        return new GenericWindowsImage(amiMap, props);
      }
      static fromSSMParameter(parameterName, os, userData) {
        return new GenericSSMParameterImage(parameterName, os, userData);
      }
      static fromSsmParameter(parameterName, options) {
        return new GenericSsmParameterImage(parameterName, options);
      }
      static lookup(props) {
        return new LookupMachineImage(props);
      }
    };
    exports2.MachineImage = MachineImage;
    _a = JSII_RTTI_SYMBOL_1;
    MachineImage[_a] = { fqn: "@aws-cdk/aws-ec2.MachineImage", version: "1.132.0" };
    var GenericSSMParameterImage = class {
      constructor(parameterName, os, userData) {
        this.os = os;
        this.userData = userData;
        this.parameterName = parameterName;
      }
      getImage(scope) {
        var _h;
        const ami = ssm.StringParameter.valueForTypedStringParameter(scope, this.parameterName, ssm.ParameterType.AWS_EC2_IMAGE_ID);
        return {
          imageId: ami,
          osType: this.os,
          userData: (_h = this.userData) !== null && _h !== void 0 ? _h : this.os === OperatingSystemType.WINDOWS ? user_data_1.UserData.forWindows() : user_data_1.UserData.forLinux()
        };
      }
    };
    exports2.GenericSSMParameterImage = GenericSSMParameterImage;
    _b = JSII_RTTI_SYMBOL_1;
    GenericSSMParameterImage[_b] = { fqn: "@aws-cdk/aws-ec2.GenericSSMParameterImage", version: "1.132.0" };
    var GenericSsmParameterImage = class {
      constructor(parameterName, props = {}) {
        this.parameterName = parameterName;
        this.props = props;
      }
      getImage(scope) {
        var _h, _j;
        const imageId = lookupImage(scope, this.props.cachedInContext, this.parameterName);
        const osType = (_h = this.props.os) !== null && _h !== void 0 ? _h : OperatingSystemType.LINUX;
        return {
          imageId,
          osType,
          userData: (_j = this.props.userData) !== null && _j !== void 0 ? _j : osType === OperatingSystemType.WINDOWS ? user_data_1.UserData.forWindows() : user_data_1.UserData.forLinux()
        };
      }
    };
    var WindowsImage = class extends GenericSSMParameterImage {
      constructor(version, props = {}) {
        super("/aws/service/ami-windows-latest/" + version, OperatingSystemType.WINDOWS, props.userData);
      }
    };
    exports2.WindowsImage = WindowsImage;
    _c = JSII_RTTI_SYMBOL_1;
    WindowsImage[_c] = { fqn: "@aws-cdk/aws-ec2.WindowsImage", version: "1.132.0" };
    var AmazonLinuxCpuType;
    (function(AmazonLinuxCpuType2) {
      AmazonLinuxCpuType2["ARM_64"] = "arm64";
      AmazonLinuxCpuType2["X86_64"] = "x86_64";
    })(AmazonLinuxCpuType = exports2.AmazonLinuxCpuType || (exports2.AmazonLinuxCpuType = {}));
    var AmazonLinuxImage = class extends GenericSSMParameterImage {
      constructor(props = {}) {
        var _h;
        super(AmazonLinuxImage.ssmParameterName(props), OperatingSystemType.LINUX, props.userData);
        this.props = props;
        this.cachedInContext = (_h = props.cachedInContext) !== null && _h !== void 0 ? _h : false;
      }
      static ssmParameterName(props = {}) {
        const generation = props && props.generation || AmazonLinuxGeneration.AMAZON_LINUX;
        const edition = props && props.edition || AmazonLinuxEdition.STANDARD;
        const virtualization = props && props.virtualization || AmazonLinuxVirt.HVM;
        const storage = props && props.storage || AmazonLinuxStorage.GENERAL_PURPOSE;
        const cpu = props && props.cpuType || AmazonLinuxCpuType.X86_64;
        const parts = [
          generation,
          "ami",
          edition !== AmazonLinuxEdition.STANDARD ? edition : void 0,
          virtualization,
          cpu,
          storage
        ].filter((x) => x !== void 0);
        return "/aws/service/ami-amazon-linux-latest/" + parts.join("-");
      }
      getImage(scope) {
        var _h;
        const imageId = lookupImage(scope, this.cachedInContext, this.parameterName);
        const osType = OperatingSystemType.LINUX;
        return {
          imageId,
          osType,
          userData: (_h = this.props.userData) !== null && _h !== void 0 ? _h : user_data_1.UserData.forLinux()
        };
      }
    };
    exports2.AmazonLinuxImage = AmazonLinuxImage;
    _d = JSII_RTTI_SYMBOL_1;
    AmazonLinuxImage[_d] = { fqn: "@aws-cdk/aws-ec2.AmazonLinuxImage", version: "1.132.0" };
    var AmazonLinuxGeneration;
    (function(AmazonLinuxGeneration2) {
      AmazonLinuxGeneration2["AMAZON_LINUX"] = "amzn";
      AmazonLinuxGeneration2["AMAZON_LINUX_2"] = "amzn2";
    })(AmazonLinuxGeneration = exports2.AmazonLinuxGeneration || (exports2.AmazonLinuxGeneration = {}));
    var AmazonLinuxEdition;
    (function(AmazonLinuxEdition2) {
      AmazonLinuxEdition2["STANDARD"] = "standard";
      AmazonLinuxEdition2["MINIMAL"] = "minimal";
    })(AmazonLinuxEdition = exports2.AmazonLinuxEdition || (exports2.AmazonLinuxEdition = {}));
    var AmazonLinuxVirt;
    (function(AmazonLinuxVirt2) {
      AmazonLinuxVirt2["HVM"] = "hvm";
      AmazonLinuxVirt2["PV"] = "pv";
    })(AmazonLinuxVirt = exports2.AmazonLinuxVirt || (exports2.AmazonLinuxVirt = {}));
    var AmazonLinuxStorage;
    (function(AmazonLinuxStorage2) {
      AmazonLinuxStorage2["EBS"] = "ebs";
      AmazonLinuxStorage2["S3"] = "ebs";
      AmazonLinuxStorage2["GENERAL_PURPOSE"] = "gp2";
    })(AmazonLinuxStorage = exports2.AmazonLinuxStorage || (exports2.AmazonLinuxStorage = {}));
    var GenericLinuxImage = class {
      constructor(amiMap, props = {}) {
        this.amiMap = amiMap;
        this.props = props;
      }
      getImage(scope) {
        var _h;
        const userData = (_h = this.props.userData) !== null && _h !== void 0 ? _h : user_data_1.UserData.forLinux();
        const osType = OperatingSystemType.LINUX;
        const region = core_1.Stack.of(scope).region;
        if (core_1.Token.isUnresolved(region)) {
          const mapping = {};
          for (const [rgn, ami] of Object.entries(this.amiMap)) {
            mapping[rgn] = { ami };
          }
          const amiMap = new core_1.CfnMapping(scope, "AmiMap", { mapping });
          return {
            imageId: amiMap.findInMap(core_1.Aws.REGION, "ami"),
            userData,
            osType
          };
        }
        const imageId = region !== "test-region" ? this.amiMap[region] : "ami-12345";
        if (!imageId) {
          throw new Error(`Unable to find AMI in AMI map: no AMI specified for region '${region}'`);
        }
        return {
          imageId,
          userData,
          osType
        };
      }
    };
    exports2.GenericLinuxImage = GenericLinuxImage;
    _e = JSII_RTTI_SYMBOL_1;
    GenericLinuxImage[_e] = { fqn: "@aws-cdk/aws-ec2.GenericLinuxImage", version: "1.132.0" };
    var GenericWindowsImage = class {
      constructor(amiMap, props = {}) {
        this.amiMap = amiMap;
        this.props = props;
      }
      getImage(scope) {
        var _h;
        const userData = (_h = this.props.userData) !== null && _h !== void 0 ? _h : user_data_1.UserData.forWindows();
        const osType = OperatingSystemType.WINDOWS;
        const region = core_1.Stack.of(scope).region;
        if (core_1.Token.isUnresolved(region)) {
          const mapping = {};
          for (const [rgn, ami] of Object.entries(this.amiMap)) {
            mapping[rgn] = { ami };
          }
          const amiMap = new core_1.CfnMapping(scope, "AmiMap", { mapping });
          return {
            imageId: amiMap.findInMap(core_1.Aws.REGION, "ami"),
            userData,
            osType
          };
        }
        const imageId = region !== "test-region" ? this.amiMap[region] : "ami-12345";
        if (!imageId) {
          throw new Error(`Unable to find AMI in AMI map: no AMI specified for region '${region}'`);
        }
        return {
          imageId,
          userData,
          osType
        };
      }
    };
    exports2.GenericWindowsImage = GenericWindowsImage;
    _f = JSII_RTTI_SYMBOL_1;
    GenericWindowsImage[_f] = { fqn: "@aws-cdk/aws-ec2.GenericWindowsImage", version: "1.132.0" };
    var OperatingSystemType;
    (function(OperatingSystemType2) {
      OperatingSystemType2[OperatingSystemType2["LINUX"] = 0] = "LINUX";
      OperatingSystemType2[OperatingSystemType2["WINDOWS"] = 1] = "WINDOWS";
      OperatingSystemType2[OperatingSystemType2["UNKNOWN"] = 2] = "UNKNOWN";
    })(OperatingSystemType = exports2.OperatingSystemType || (exports2.OperatingSystemType = {}));
    var LookupMachineImage = class {
      constructor(props) {
        this.props = props;
      }
      getImage(scope) {
        var _h;
        const filters = {
          "name": [this.props.name],
          "state": ["available"],
          "image-type": ["machine"],
          "platform": this.props.windows ? ["windows"] : void 0
        };
        Object.assign(filters, this.props.filters);
        const value = core_1.ContextProvider.getValue(scope, {
          provider: cxschema.ContextProvider.AMI_PROVIDER,
          props: {
            owners: this.props.owners,
            filters
          },
          dummyValue: "ami-1234"
        }).value;
        if (typeof value !== "string") {
          throw new Error(`Response to AMI lookup invalid, got: ${value}`);
        }
        const osType = this.props.windows ? OperatingSystemType.WINDOWS : OperatingSystemType.LINUX;
        return {
          imageId: value,
          osType,
          userData: (_h = this.props.userData) !== null && _h !== void 0 ? _h : user_data_1.UserData.forOperatingSystem(osType)
        };
      }
    };
    exports2.LookupMachineImage = LookupMachineImage;
    _g = JSII_RTTI_SYMBOL_1;
    LookupMachineImage[_g] = { fqn: "@aws-cdk/aws-ec2.LookupMachineImage", version: "1.132.0" };
    function lookupImage(scope, cachedInContext, parameterName) {
      return cachedInContext ? ssm.StringParameter.valueFromLookup(scope, parameterName) : ssm.StringParameter.valueForTypedStringParameter(scope, parameterName, ssm.ParameterType.AWS_EC2_IMAGE_ID);
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/nat.js
var require_nat = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/nat.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NatInstanceImage = exports2.NatInstanceProvider = exports2.NatProvider = exports2.NatTrafficDirection = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var iam = require_lib9();
    var core_1 = require_lib8();
    var connections_1 = require_connections();
    var instance_1 = require_instance();
    var machine_image_1 = require_machine_image();
    var port_1 = require_port();
    var security_group_1 = require_security_group2();
    var vpc_1 = require_vpc2();
    var NatTrafficDirection;
    (function(NatTrafficDirection2) {
      NatTrafficDirection2["OUTBOUND_ONLY"] = "OUTBOUND_ONLY";
      NatTrafficDirection2["INBOUND_AND_OUTBOUND"] = "INBOUND_AND_OUTBOUND";
      NatTrafficDirection2["NONE"] = "NONE";
    })(NatTrafficDirection = exports2.NatTrafficDirection || (exports2.NatTrafficDirection = {}));
    var NatProvider = class {
      static gateway(props = {}) {
        return new NatGatewayProvider(props);
      }
      static instance(props) {
        return new NatInstanceProvider(props);
      }
    };
    exports2.NatProvider = NatProvider;
    _a = JSII_RTTI_SYMBOL_1;
    NatProvider[_a] = { fqn: "@aws-cdk/aws-ec2.NatProvider", version: "1.132.0" };
    var NatGatewayProvider = class extends NatProvider {
      constructor(props = {}) {
        super();
        this.props = props;
        this.gateways = new PrefSet();
      }
      configureNat(options) {
        if (this.props.eipAllocationIds != null && !core_1.Token.isUnresolved(this.props.eipAllocationIds) && this.props.eipAllocationIds.length < options.natSubnets.length) {
          throw new Error(`Not enough NAT gateway EIP allocation IDs (${this.props.eipAllocationIds.length} provided) for the requested subnet count (${options.natSubnets.length} needed).`);
        }
        let i = 0;
        for (const sub of options.natSubnets) {
          const gateway = sub.addNatGateway();
          if (this.props.eipAllocationIds) {
            gateway.allocationId = pickN(i, this.props.eipAllocationIds);
          }
          this.gateways.add(sub.availabilityZone, gateway.ref);
          i++;
        }
        for (const sub of options.privateSubnets) {
          this.configureSubnet(sub);
        }
      }
      configureSubnet(subnet) {
        const az = subnet.availabilityZone;
        const gatewayId = this.gateways.pick(az);
        subnet.addRoute("DefaultRoute", {
          routerType: vpc_1.RouterType.NAT_GATEWAY,
          routerId: gatewayId,
          enablesInternetConnectivity: true
        });
      }
      get configuredGateways() {
        return this.gateways.values().map((x) => ({ az: x[0], gatewayId: x[1] }));
      }
    };
    var NatInstanceProvider = class extends NatProvider {
      constructor(props) {
        super();
        this.props = props;
        this.gateways = new PrefSet();
        if (props.defaultAllowedTraffic !== void 0 && props.allowAllTraffic !== void 0) {
          throw new Error("Can not specify both of 'defaultAllowedTraffic' and 'defaultAllowedTraffic'; prefer 'defaultAllowedTraffic'");
        }
      }
      configureNat(options) {
        var _d, _e, _f;
        const defaultDirection = (_d = this.props.defaultAllowedTraffic) !== null && _d !== void 0 ? _d : ((_e = this.props.allowAllTraffic) !== null && _e !== void 0 ? _e : true) ? NatTrafficDirection.INBOUND_AND_OUTBOUND : NatTrafficDirection.OUTBOUND_ONLY;
        const machineImage = this.props.machineImage || new NatInstanceImage();
        this._securityGroup = (_f = this.props.securityGroup) !== null && _f !== void 0 ? _f : new security_group_1.SecurityGroup(options.vpc, "NatSecurityGroup", {
          vpc: options.vpc,
          description: "Security Group for NAT instances",
          allowAllOutbound: isOutboundAllowed(defaultDirection)
        });
        this._connections = new connections_1.Connections({ securityGroups: [this._securityGroup] });
        if (isInboundAllowed(defaultDirection)) {
          this.connections.allowFromAnyIpv4(port_1.Port.allTraffic());
        }
        const role = new iam.Role(options.vpc, "NatRole", {
          assumedBy: new iam.ServicePrincipal("ec2.amazonaws.com")
        });
        for (const sub of options.natSubnets) {
          const natInstance = new instance_1.Instance(sub, "NatInstance", {
            instanceType: this.props.instanceType,
            machineImage,
            sourceDestCheck: false,
            vpc: options.vpc,
            vpcSubnets: { subnets: [sub] },
            securityGroup: this._securityGroup,
            role,
            keyName: this.props.keyName
          });
          this.gateways.add(sub.availabilityZone, natInstance);
        }
        for (const sub of options.privateSubnets) {
          this.configureSubnet(sub);
        }
      }
      get securityGroup() {
        if (!this._securityGroup) {
          throw new Error("Pass the NatInstanceProvider to a Vpc before accessing 'securityGroup'");
        }
        return this._securityGroup;
      }
      get connections() {
        if (!this._connections) {
          throw new Error("Pass the NatInstanceProvider to a Vpc before accessing 'connections'");
        }
        return this._connections;
      }
      get configuredGateways() {
        return this.gateways.values().map((x) => ({ az: x[0], gatewayId: x[1].instanceId }));
      }
      configureSubnet(subnet) {
        const az = subnet.availabilityZone;
        const gatewayId = this.gateways.pick(az).instanceId;
        subnet.addRoute("DefaultRoute", {
          routerType: vpc_1.RouterType.INSTANCE,
          routerId: gatewayId,
          enablesInternetConnectivity: true
        });
      }
    };
    exports2.NatInstanceProvider = NatInstanceProvider;
    _b = JSII_RTTI_SYMBOL_1;
    NatInstanceProvider[_b] = { fqn: "@aws-cdk/aws-ec2.NatInstanceProvider", version: "1.132.0" };
    var PrefSet = class {
      constructor() {
        this.map = {};
        this.vals = new Array();
        this.next = 0;
      }
      add(pref, value) {
        this.map[pref] = value;
        this.vals.push([pref, value]);
      }
      pick(pref) {
        if (this.vals.length === 0) {
          throw new Error("Cannot pick, set is empty");
        }
        if (pref in this.map) {
          return this.map[pref];
        }
        return this.vals[this.next++ % this.vals.length][1];
      }
      values() {
        return this.vals;
      }
    };
    var NatInstanceImage = class extends machine_image_1.LookupMachineImage {
      constructor() {
        super({
          name: "amzn-ami-vpc-nat-*",
          owners: ["amazon"]
        });
      }
    };
    exports2.NatInstanceImage = NatInstanceImage;
    _c = JSII_RTTI_SYMBOL_1;
    NatInstanceImage[_c] = { fqn: "@aws-cdk/aws-ec2.NatInstanceImage", version: "1.132.0" };
    function isOutboundAllowed(direction) {
      return direction === NatTrafficDirection.INBOUND_AND_OUTBOUND || direction === NatTrafficDirection.OUTBOUND_ONLY;
    }
    function isInboundAllowed(direction) {
      return direction === NatTrafficDirection.INBOUND_AND_OUTBOUND;
    }
    function pickN(i, xs) {
      if (core_1.Token.isUnresolved(xs)) {
        return core_1.Fn.select(i, xs);
      }
      if (i >= xs.length) {
        throw new Error(`Cannot get element ${i} from ${xs}`);
      }
      return xs[i];
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/network-acl.js
var require_network_acl = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/network-acl.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SubnetNetworkAclAssociation = exports2.NetworkAclEntry = exports2.TrafficDirection = exports2.Action = exports2.NetworkAcl = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var ec2_generated_1 = require_ec2_generated();
    var NetworkAclBase = class extends core_1.Resource {
      addEntry(id, options) {
        return new NetworkAclEntry(this, id, __spreadValues({
          networkAcl: this
        }, options));
      }
    };
    var NetworkAcl = class extends NetworkAclBase {
      constructor(scope, id, props) {
        super(scope, id, {
          physicalName: props.networkAclName
        });
        this.vpc = props.vpc;
        this.networkAcl = new ec2_generated_1.CfnNetworkAcl(this, "Resource", {
          vpcId: props.vpc.vpcId
        });
        this.networkAclId = this.networkAcl.ref;
        this.networkAclVpcId = this.networkAcl.vpcId;
        if (props.subnetSelection !== void 0) {
          this.associateWithSubnet("DefaultAssociation", props.subnetSelection);
        }
      }
      static fromNetworkAclId(scope, id, networkAclId) {
        class Import extends NetworkAclBase {
          constructor() {
            super(...arguments);
            this.networkAclId = networkAclId;
          }
        }
        return new Import(scope, id);
      }
      associateWithSubnet(id, selection) {
        const subnets = this.vpc.selectSubnets(selection);
        for (const subnet of subnets.subnets) {
          subnet.associateNetworkAcl(id, this);
        }
      }
    };
    exports2.NetworkAcl = NetworkAcl;
    _a = JSII_RTTI_SYMBOL_1;
    NetworkAcl[_a] = { fqn: "@aws-cdk/aws-ec2.NetworkAcl", version: "1.132.0" };
    var Action;
    (function(Action2) {
      Action2["ALLOW"] = "allow";
      Action2["DENY"] = "deny";
    })(Action = exports2.Action || (exports2.Action = {}));
    var NetworkAclEntryBase = class extends core_1.Resource {
    };
    var TrafficDirection;
    (function(TrafficDirection2) {
      TrafficDirection2[TrafficDirection2["EGRESS"] = 0] = "EGRESS";
      TrafficDirection2[TrafficDirection2["INGRESS"] = 1] = "INGRESS";
    })(TrafficDirection = exports2.TrafficDirection || (exports2.TrafficDirection = {}));
    var NetworkAclEntry = class extends NetworkAclEntryBase {
      constructor(scope, id, props) {
        var _d;
        super(scope, id, {
          physicalName: props.networkAclEntryName
        });
        this.networkAcl = props.networkAcl;
        new ec2_generated_1.CfnNetworkAclEntry(this, "Resource", __spreadValues(__spreadValues({
          networkAclId: this.networkAcl.networkAclId,
          ruleNumber: props.ruleNumber,
          ruleAction: (_d = props.ruleAction) !== null && _d !== void 0 ? _d : Action.ALLOW,
          egress: props.direction !== void 0 ? props.direction === TrafficDirection.EGRESS : void 0
        }, props.traffic.toTrafficConfig()), props.cidr.toCidrConfig()));
      }
    };
    exports2.NetworkAclEntry = NetworkAclEntry;
    _b = JSII_RTTI_SYMBOL_1;
    NetworkAclEntry[_b] = { fqn: "@aws-cdk/aws-ec2.NetworkAclEntry", version: "1.132.0" };
    var SubnetNetworkAclAssociationBase = class extends core_1.Resource {
    };
    var SubnetNetworkAclAssociation = class extends SubnetNetworkAclAssociationBase {
      constructor(scope, id, props) {
        super(scope, id, {
          physicalName: props.subnetNetworkAclAssociationName
        });
        this.association = new ec2_generated_1.CfnSubnetNetworkAclAssociation(this, "Resource", {
          networkAclId: props.networkAcl.networkAclId,
          subnetId: props.subnet.subnetId
        });
        this.networkAcl = props.networkAcl;
        this.subnet = props.subnet;
        this.subnetNetworkAclAssociationAssociationId = this.association.attrAssociationId;
      }
      static fromSubnetNetworkAclAssociationAssociationId(scope, id, subnetNetworkAclAssociationAssociationId) {
        class Import extends SubnetNetworkAclAssociationBase {
          constructor() {
            super(...arguments);
            this.subnetNetworkAclAssociationAssociationId = subnetNetworkAclAssociationAssociationId;
          }
        }
        return new Import(scope, id);
      }
    };
    exports2.SubnetNetworkAclAssociation = SubnetNetworkAclAssociation;
    _c = JSII_RTTI_SYMBOL_1;
    SubnetNetworkAclAssociation[_c] = { fqn: "@aws-cdk/aws-ec2.SubnetNetworkAclAssociation", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/subnet.js
var require_subnet = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/subnet.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SubnetFilter = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var network_util_1 = require_network_util();
    var SubnetFilter = class {
      static byIds(subnetIds) {
        return new SubnetIdSubnetFilter(subnetIds);
      }
      static availabilityZones(availabilityZones) {
        return new AvailabilityZoneSubnetFilter(availabilityZones);
      }
      static onePerAz() {
        return new OnePerAZSubnetFilter();
      }
      static containsIpAddresses(ipv4addrs) {
        return new ContainsIpAddressesSubnetFilter(ipv4addrs);
      }
      static byCidrMask(mask) {
        return new CidrMaskSubnetFilter(mask);
      }
      selectSubnets(_subnets) {
        throw new Error("Cannot select subnets with an abstract SubnetFilter. `selectSubnets` needs to be implmemented.");
      }
    };
    exports2.SubnetFilter = SubnetFilter;
    _a = JSII_RTTI_SYMBOL_1;
    SubnetFilter[_a] = { fqn: "@aws-cdk/aws-ec2.SubnetFilter", version: "1.132.0" };
    var AvailabilityZoneSubnetFilter = class extends SubnetFilter {
      constructor(availabilityZones) {
        super();
        this.availabilityZones = availabilityZones;
      }
      selectSubnets(subnets) {
        return subnets.filter((s) => this.availabilityZones.includes(s.availabilityZone));
      }
    };
    var OnePerAZSubnetFilter = class extends SubnetFilter {
      constructor() {
        super();
      }
      selectSubnets(subnets) {
        return this.retainOnePerAz(subnets);
      }
      retainOnePerAz(subnets) {
        const azsSeen = new Set();
        return subnets.filter((subnet) => {
          if (azsSeen.has(subnet.availabilityZone)) {
            return false;
          }
          azsSeen.add(subnet.availabilityZone);
          return true;
        });
      }
    };
    var ContainsIpAddressesSubnetFilter = class extends SubnetFilter {
      constructor(ipAddresses) {
        super();
        this.ipAddresses = ipAddresses;
      }
      selectSubnets(subnets) {
        return this.retainByIp(subnets, this.ipAddresses);
      }
      retainByIp(subnets, ips) {
        const cidrBlockObjs = ips.map((ip) => {
          const ipNum = network_util_1.NetworkUtils.ipToNum(ip);
          return new network_util_1.CidrBlock(ipNum, 32);
        });
        return subnets.filter((s) => {
          const subnetCidrBlock = new network_util_1.CidrBlock(s.ipv4CidrBlock);
          return cidrBlockObjs.some((cidr) => subnetCidrBlock.containsCidr(cidr));
        });
      }
    };
    var SubnetIdSubnetFilter = class extends SubnetFilter {
      constructor(subnetIds) {
        super();
        this.subnetIds = subnetIds;
      }
      selectSubnets(subnets) {
        return subnets.filter((subnet) => this.subnetIds.includes(subnet.subnetId));
      }
    };
    var CidrMaskSubnetFilter = class extends SubnetFilter {
      constructor(mask) {
        super();
        this.mask = mask;
      }
      selectSubnets(subnets) {
        return subnets.filter((subnet) => {
          const subnetCidr = new network_util_1.CidrBlock(subnet.ipv4CidrBlock);
          return subnetCidr.mask === this.mask;
        });
      }
    };
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/util.js
var require_util8 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.flatten = exports2.allRouteTableIds = exports2.range = exports2.ImportSubnetGroup = exports2.subnetId = exports2.subnetGroupNameFromConstructId = exports2.defaultSubnetName = exports2.slugify = void 0;
    var vpc_1 = require_vpc2();
    function slugify(x) {
      return x.replace(/[^a-zA-Z0-9]/g, "");
    }
    exports2.slugify = slugify;
    function defaultSubnetName(type) {
      switch (type) {
        case vpc_1.SubnetType.PUBLIC:
          return "Public";
        case vpc_1.SubnetType.PRIVATE_WITH_NAT:
          return "Private";
        case vpc_1.SubnetType.PRIVATE_ISOLATED:
          return "Isolated";
      }
    }
    exports2.defaultSubnetName = defaultSubnetName;
    function subnetGroupNameFromConstructId(subnet) {
      return subnet.node.id.replace(/Subnet\d+$/, "");
    }
    exports2.subnetGroupNameFromConstructId = subnetGroupNameFromConstructId;
    function subnetId(name, i) {
      return `${name}Subnet${i + 1}`;
    }
    exports2.subnetId = subnetId;
    var ImportSubnetGroup = class {
      constructor(subnetIds, names, routeTableIds, type, availabilityZones, idField, nameField, routeTableIdField) {
        this.availabilityZones = availabilityZones;
        this.subnetIds = subnetIds || [];
        this.routeTableIds = routeTableIds || [];
        this.groups = this.subnetIds.length / this.availabilityZones.length;
        if (Math.floor(this.groups) !== this.groups) {
          throw new Error(`Number of ${idField} (${this.subnetIds.length}) must be a multiple of availability zones (${this.availabilityZones.length}).`);
        }
        if (this.routeTableIds.length !== this.subnetIds.length && routeTableIds != null) {
          throw new Error(`Number of ${routeTableIdField} (${this.routeTableIds.length}) must be equal to the amount of ${idField} (${this.subnetIds.length}).`);
        }
        this.names = this.normalizeNames(names, defaultSubnetName(type), nameField);
      }
      import(scope) {
        return range(this.subnetIds.length).map((i) => {
          const k = Math.floor(i / this.availabilityZones.length);
          return vpc_1.Subnet.fromSubnetAttributes(scope, subnetId(this.names[k], i), {
            availabilityZone: this.pickAZ(i),
            subnetId: this.subnetIds[i],
            routeTableId: this.routeTableIds[i]
          });
        });
      }
      normalizeNames(names, defaultName, fieldName) {
        if (names === void 0 || names.length === 0) {
          return [defaultName];
        }
        if (names.length !== this.groups) {
          throw new Error(`${fieldName} must have an entry for every corresponding subnet group, got: ${JSON.stringify(names)}`);
        }
        return names;
      }
      pickAZ(i) {
        return this.availabilityZones[i % this.availabilityZones.length];
      }
    };
    exports2.ImportSubnetGroup = ImportSubnetGroup;
    function range(n) {
      const ret = [];
      for (let i = 0; i < n; i++) {
        ret.push(i);
      }
      return ret;
    }
    exports2.range = range;
    function allRouteTableIds(subnets) {
      const ret = new Set();
      for (const subnet of subnets) {
        if (subnet.routeTable && subnet.routeTable.routeTableId) {
          ret.add(subnet.routeTable.routeTableId);
        }
      }
      return Array.from(ret);
    }
    exports2.allRouteTableIds = allRouteTableIds;
    function flatten(xs) {
      return Array.prototype.concat.apply([], xs);
    }
    exports2.flatten = flatten;
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/vpc-endpoint.js
var require_vpc_endpoint = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/vpc-endpoint.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    var _d;
    var _e;
    var _f;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InterfaceVpcEndpoint = exports2.InterfaceVpcEndpointAwsService = exports2.InterfaceVpcEndpointService = exports2.GatewayVpcEndpoint = exports2.GatewayVpcEndpointAwsService = exports2.VpcEndpointType = exports2.VpcEndpoint = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var iam = require_lib9();
    var cxschema = require_lib3();
    var core_1 = require_lib8();
    var connections_1 = require_connections();
    var ec2_generated_1 = require_ec2_generated();
    var peer_1 = require_peer();
    var port_1 = require_port();
    var security_group_1 = require_security_group2();
    var util_1 = require_util8();
    var VpcEndpoint = class extends core_1.Resource {
      addToPolicy(statement) {
        if (!statement.hasPrincipal) {
          throw new Error("Statement must have a `Principal`.");
        }
        if (!this.policyDocument) {
          this.policyDocument = new iam.PolicyDocument();
        }
        this.policyDocument.addStatements(statement);
      }
    };
    exports2.VpcEndpoint = VpcEndpoint;
    _a = JSII_RTTI_SYMBOL_1;
    VpcEndpoint[_a] = { fqn: "@aws-cdk/aws-ec2.VpcEndpoint", version: "1.132.0" };
    var VpcEndpointType;
    (function(VpcEndpointType2) {
      VpcEndpointType2["INTERFACE"] = "Interface";
      VpcEndpointType2["GATEWAY"] = "Gateway";
    })(VpcEndpointType = exports2.VpcEndpointType || (exports2.VpcEndpointType = {}));
    var GatewayVpcEndpointAwsService = class {
      constructor(name, prefix) {
        this.name = `${prefix || "com.amazonaws"}.${core_1.Aws.REGION}.${name}`;
      }
    };
    exports2.GatewayVpcEndpointAwsService = GatewayVpcEndpointAwsService;
    _b = JSII_RTTI_SYMBOL_1;
    GatewayVpcEndpointAwsService[_b] = { fqn: "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService", version: "1.132.0" };
    GatewayVpcEndpointAwsService.DYNAMODB = new GatewayVpcEndpointAwsService("dynamodb");
    GatewayVpcEndpointAwsService.S3 = new GatewayVpcEndpointAwsService("s3");
    var GatewayVpcEndpoint = class extends VpcEndpoint {
      constructor(scope, id, props) {
        super(scope, id);
        const subnets = props.subnets ? util_1.flatten(props.subnets.map((s) => props.vpc.selectSubnets(s).subnets)) : [...props.vpc.privateSubnets, ...props.vpc.publicSubnets, ...props.vpc.isolatedSubnets];
        const routeTableIds = util_1.allRouteTableIds(subnets);
        if (routeTableIds.length === 0) {
          throw new Error("Can't add a gateway endpoint to VPC; route table IDs are not available");
        }
        const endpoint = new ec2_generated_1.CfnVPCEndpoint(this, "Resource", {
          policyDocument: core_1.Lazy.any({ produce: () => this.policyDocument }),
          routeTableIds,
          serviceName: props.service.name,
          vpcEndpointType: VpcEndpointType.GATEWAY,
          vpcId: props.vpc.vpcId
        });
        this.vpcEndpointId = endpoint.ref;
        this.vpcEndpointCreationTimestamp = endpoint.attrCreationTimestamp;
        this.vpcEndpointDnsEntries = endpoint.attrDnsEntries;
        this.vpcEndpointNetworkInterfaceIds = endpoint.attrNetworkInterfaceIds;
      }
      static fromGatewayVpcEndpointId(scope, id, gatewayVpcEndpointId) {
        class Import extends VpcEndpoint {
          constructor() {
            super(...arguments);
            this.vpcEndpointId = gatewayVpcEndpointId;
          }
        }
        return new Import(scope, id);
      }
    };
    exports2.GatewayVpcEndpoint = GatewayVpcEndpoint;
    _c = JSII_RTTI_SYMBOL_1;
    GatewayVpcEndpoint[_c] = { fqn: "@aws-cdk/aws-ec2.GatewayVpcEndpoint", version: "1.132.0" };
    var InterfaceVpcEndpointService = class {
      constructor(name, port) {
        this.privateDnsDefault = false;
        this.name = name;
        this.port = port || 443;
      }
    };
    exports2.InterfaceVpcEndpointService = InterfaceVpcEndpointService;
    _d = JSII_RTTI_SYMBOL_1;
    InterfaceVpcEndpointService[_d] = { fqn: "@aws-cdk/aws-ec2.InterfaceVpcEndpointService", version: "1.132.0" };
    var InterfaceVpcEndpointAwsService = class {
      constructor(name, prefix, port) {
        this.privateDnsDefault = true;
        const region = core_1.Lazy.uncachedString({
          produce: (context) => core_1.Stack.of(context.scope).region
        });
        const defaultEndpointPrefix = core_1.Lazy.uncachedString({
          produce: (context) => {
            const regionName = core_1.Stack.of(context.scope).region;
            return this.getDefaultEndpointPrefix(name, regionName);
          }
        });
        const defaultEndpointSuffix = core_1.Lazy.uncachedString({
          produce: (context) => {
            const regionName = core_1.Stack.of(context.scope).region;
            return this.getDefaultEndpointSuffix(name, regionName);
          }
        });
        this.name = `${prefix || defaultEndpointPrefix}.${region}.${name}${defaultEndpointSuffix}`;
        this.port = port || 443;
      }
      getDefaultEndpointPrefix(name, region) {
        var _g;
        const VPC_ENDPOINT_SERVICE_EXCEPTIONS = {
          "cn-north-1": [
            "application-autoscaling",
            "athena",
            "autoscaling",
            "awsconnector",
            "cassandra",
            "cloudformation",
            "codedeploy-commands-secure",
            "databrew",
            "dms",
            "ebs",
            "ec2",
            "ecr.api",
            "ecr.dkr",
            "elasticbeanstalk",
            "elasticfilesystem",
            "elasticfilesystem-fips",
            "execute-api",
            "imagebuilder",
            "iotsitewise.api",
            "iotsitewise.data",
            "kinesis-streams",
            "lambda",
            "license-manager",
            "monitoring",
            "rds",
            "redshift",
            "redshift-data",
            "s3",
            "sagemaker.api",
            "sagemaker.featurestore-runtime",
            "sagemaker.runtime",
            "servicecatalog",
            "sms",
            "sqs",
            "states",
            "sts",
            "synthetics",
            "transcribe",
            "transcribestreaming",
            "transfer",
            "xray"
          ],
          "cn-northwest-1": [
            "application-autoscaling",
            "athena",
            "autoscaling",
            "awsconnector",
            "cassandra",
            "cloudformation",
            "codedeploy-commands-secure",
            "databrew",
            "dms",
            "ebs",
            "ec2",
            "ecr.api",
            "ecr.dkr",
            "elasticbeanstalk",
            "elasticfilesystem",
            "elasticfilesystem-fips",
            "execute-api",
            "imagebuilder",
            "kinesis-streams",
            "lambda",
            "license-manager",
            "monitoring",
            "rds",
            "redshift",
            "redshift-data",
            "s3",
            "sagemaker.api",
            "sagemaker.featurestore-runtime",
            "sagemaker.runtime",
            "servicecatalog",
            "sms",
            "sqs",
            "states",
            "sts",
            "synthetics",
            "transcribe",
            "transcribestreaming",
            "transfer",
            "workspaces",
            "xray"
          ]
        };
        if ((_g = VPC_ENDPOINT_SERVICE_EXCEPTIONS[region]) === null || _g === void 0 ? void 0 : _g.includes(name)) {
          return "cn.com.amazonaws";
        } else {
          return "com.amazonaws";
        }
      }
      getDefaultEndpointSuffix(name, region) {
        var _g;
        const VPC_ENDPOINT_SERVICE_EXCEPTIONS = {
          "cn-north-1": ["transcribe"],
          "cn-northwest-1": ["transcribe"]
        };
        return ((_g = VPC_ENDPOINT_SERVICE_EXCEPTIONS[region]) === null || _g === void 0 ? void 0 : _g.includes(name)) ? ".cn" : "";
      }
    };
    exports2.InterfaceVpcEndpointAwsService = InterfaceVpcEndpointAwsService;
    _e = JSII_RTTI_SYMBOL_1;
    InterfaceVpcEndpointAwsService[_e] = { fqn: "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService", version: "1.132.0" };
    InterfaceVpcEndpointAwsService.SAGEMAKER_NOTEBOOK = new InterfaceVpcEndpointAwsService("notebook", "aws.sagemaker");
    InterfaceVpcEndpointAwsService.ATHENA = new InterfaceVpcEndpointAwsService("athena");
    InterfaceVpcEndpointAwsService.CLOUDFORMATION = new InterfaceVpcEndpointAwsService("cloudformation");
    InterfaceVpcEndpointAwsService.CLOUDTRAIL = new InterfaceVpcEndpointAwsService("cloudtrail");
    InterfaceVpcEndpointAwsService.CODEBUILD = new InterfaceVpcEndpointAwsService("codebuild");
    InterfaceVpcEndpointAwsService.CODEBUILD_FIPS = new InterfaceVpcEndpointAwsService("codebuild-fips");
    InterfaceVpcEndpointAwsService.CODECOMMIT = new InterfaceVpcEndpointAwsService("codecommit");
    InterfaceVpcEndpointAwsService.CODECOMMIT_FIPS = new InterfaceVpcEndpointAwsService("codecommit-fips");
    InterfaceVpcEndpointAwsService.CODEPIPELINE = new InterfaceVpcEndpointAwsService("codepipeline");
    InterfaceVpcEndpointAwsService.CONFIG = new InterfaceVpcEndpointAwsService("config");
    InterfaceVpcEndpointAwsService.EC2 = new InterfaceVpcEndpointAwsService("ec2");
    InterfaceVpcEndpointAwsService.EC2_MESSAGES = new InterfaceVpcEndpointAwsService("ec2messages");
    InterfaceVpcEndpointAwsService.ECR = new InterfaceVpcEndpointAwsService("ecr.api");
    InterfaceVpcEndpointAwsService.ECR_DOCKER = new InterfaceVpcEndpointAwsService("ecr.dkr");
    InterfaceVpcEndpointAwsService.ECS = new InterfaceVpcEndpointAwsService("ecs");
    InterfaceVpcEndpointAwsService.ECS_AGENT = new InterfaceVpcEndpointAwsService("ecs-agent");
    InterfaceVpcEndpointAwsService.ECS_TELEMETRY = new InterfaceVpcEndpointAwsService("ecs-telemetry");
    InterfaceVpcEndpointAwsService.ELASTIC_FILESYSTEM = new InterfaceVpcEndpointAwsService("elasticfilesystem");
    InterfaceVpcEndpointAwsService.ELASTIC_FILESYSTEM_FIPS = new InterfaceVpcEndpointAwsService("elasticfilesystem-fips");
    InterfaceVpcEndpointAwsService.ELASTIC_INFERENCE_RUNTIME = new InterfaceVpcEndpointAwsService("elastic-inference.runtime");
    InterfaceVpcEndpointAwsService.ELASTIC_LOAD_BALANCING = new InterfaceVpcEndpointAwsService("elasticloadbalancing");
    InterfaceVpcEndpointAwsService.CLOUDWATCH_EVENTS = new InterfaceVpcEndpointAwsService("events");
    InterfaceVpcEndpointAwsService.APIGATEWAY = new InterfaceVpcEndpointAwsService("execute-api");
    InterfaceVpcEndpointAwsService.CODECOMMIT_GIT = new InterfaceVpcEndpointAwsService("git-codecommit");
    InterfaceVpcEndpointAwsService.CODECOMMIT_GIT_FIPS = new InterfaceVpcEndpointAwsService("git-codecommit-fips");
    InterfaceVpcEndpointAwsService.GLUE = new InterfaceVpcEndpointAwsService("glue");
    InterfaceVpcEndpointAwsService.KEYSPACES = new InterfaceVpcEndpointAwsService("cassandra", "", 9142);
    InterfaceVpcEndpointAwsService.KINESIS_STREAMS = new InterfaceVpcEndpointAwsService("kinesis-streams");
    InterfaceVpcEndpointAwsService.KINESIS_FIREHOSE = new InterfaceVpcEndpointAwsService("kinesis-firehose");
    InterfaceVpcEndpointAwsService.KMS = new InterfaceVpcEndpointAwsService("kms");
    InterfaceVpcEndpointAwsService.CLOUDWATCH_LOGS = new InterfaceVpcEndpointAwsService("logs");
    InterfaceVpcEndpointAwsService.CLOUDWATCH = new InterfaceVpcEndpointAwsService("monitoring");
    InterfaceVpcEndpointAwsService.RDS = new InterfaceVpcEndpointAwsService("rds");
    InterfaceVpcEndpointAwsService.RDS_DATA = new InterfaceVpcEndpointAwsService("rds-data");
    InterfaceVpcEndpointAwsService.SAGEMAKER_API = new InterfaceVpcEndpointAwsService("sagemaker.api");
    InterfaceVpcEndpointAwsService.SAGEMAKER_RUNTIME = new InterfaceVpcEndpointAwsService("sagemaker.runtime");
    InterfaceVpcEndpointAwsService.SAGEMAKER_RUNTIME_FIPS = new InterfaceVpcEndpointAwsService("sagemaker.runtime-fips");
    InterfaceVpcEndpointAwsService.SECRETS_MANAGER = new InterfaceVpcEndpointAwsService("secretsmanager");
    InterfaceVpcEndpointAwsService.SERVICE_CATALOG = new InterfaceVpcEndpointAwsService("servicecatalog");
    InterfaceVpcEndpointAwsService.SNS = new InterfaceVpcEndpointAwsService("sns");
    InterfaceVpcEndpointAwsService.SQS = new InterfaceVpcEndpointAwsService("sqs");
    InterfaceVpcEndpointAwsService.SSM = new InterfaceVpcEndpointAwsService("ssm");
    InterfaceVpcEndpointAwsService.SSM_MESSAGES = new InterfaceVpcEndpointAwsService("ssmmessages");
    InterfaceVpcEndpointAwsService.STS = new InterfaceVpcEndpointAwsService("sts");
    InterfaceVpcEndpointAwsService.TRANSFER = new InterfaceVpcEndpointAwsService("transfer.server");
    InterfaceVpcEndpointAwsService.STORAGE_GATEWAY = new InterfaceVpcEndpointAwsService("storagegateway");
    InterfaceVpcEndpointAwsService.REKOGNITION = new InterfaceVpcEndpointAwsService("rekognition");
    InterfaceVpcEndpointAwsService.REKOGNITION_FIPS = new InterfaceVpcEndpointAwsService("rekognition-fips");
    InterfaceVpcEndpointAwsService.STEP_FUNCTIONS = new InterfaceVpcEndpointAwsService("states");
    InterfaceVpcEndpointAwsService.LAMBDA = new InterfaceVpcEndpointAwsService("lambda");
    InterfaceVpcEndpointAwsService.TRANSCRIBE = new InterfaceVpcEndpointAwsService("transcribe");
    InterfaceVpcEndpointAwsService.XRAY = new InterfaceVpcEndpointAwsService("xray");
    var InterfaceVpcEndpoint = class extends VpcEndpoint {
      constructor(scope, id, props) {
        var _g, _h;
        super(scope, id);
        const securityGroups = props.securityGroups || [new security_group_1.SecurityGroup(this, "SecurityGroup", {
          vpc: props.vpc
        })];
        this.securityGroupId = securityGroups[0].securityGroupId;
        this.connections = new connections_1.Connections({
          defaultPort: port_1.Port.tcp(props.service.port),
          securityGroups
        });
        if (props.open !== false) {
          this.connections.allowDefaultPortFrom(peer_1.Peer.ipv4(props.vpc.vpcCidrBlock));
        }
        const subnetIds = this.endpointSubnets(props);
        const endpoint = new ec2_generated_1.CfnVPCEndpoint(this, "Resource", {
          privateDnsEnabled: (_h = (_g = props.privateDnsEnabled) !== null && _g !== void 0 ? _g : props.service.privateDnsDefault) !== null && _h !== void 0 ? _h : true,
          policyDocument: core_1.Lazy.any({ produce: () => this.policyDocument }),
          securityGroupIds: securityGroups.map((s) => s.securityGroupId),
          serviceName: props.service.name,
          vpcEndpointType: VpcEndpointType.INTERFACE,
          subnetIds,
          vpcId: props.vpc.vpcId
        });
        this.vpcEndpointId = endpoint.ref;
        this.vpcEndpointCreationTimestamp = endpoint.attrCreationTimestamp;
        this.vpcEndpointDnsEntries = endpoint.attrDnsEntries;
        this.vpcEndpointNetworkInterfaceIds = endpoint.attrNetworkInterfaceIds;
      }
      static fromInterfaceVpcEndpointAttributes(scope, id, attrs) {
        const securityGroups = attrs.securityGroupId ? [security_group_1.SecurityGroup.fromSecurityGroupId(scope, "SecurityGroup", attrs.securityGroupId)] : attrs.securityGroups;
        class Import extends core_1.Resource {
          constructor() {
            super(...arguments);
            this.vpcEndpointId = attrs.vpcEndpointId;
            this.connections = new connections_1.Connections({
              defaultPort: port_1.Port.tcp(attrs.port),
              securityGroups
            });
          }
        }
        return new Import(scope, id);
      }
      endpointSubnets(props) {
        var _g;
        const lookupSupportedAzs = (_g = props.lookupSupportedAzs) !== null && _g !== void 0 ? _g : false;
        const subnetSelection = props.vpc.selectSubnets(__spreadProps(__spreadValues({}, props.subnets), { onePerAz: true }));
        const subnets = subnetSelection.subnets;
        if (subnetSelection.subnets.length == 0) {
          throw new Error("Cannot create a VPC Endpoint with no subnets");
        }
        if (!lookupSupportedAzs) {
          return subnetSelection.subnetIds;
        }
        const isAwsService = core_1.Token.isUnresolved(props.service.name) && props.service instanceof InterfaceVpcEndpointAwsService;
        const lookupServiceName = isAwsService ? core_1.Stack.of(this).resolve(props.service.name) : props.service.name;
        this.validateCanLookupSupportedAzs(subnets, lookupServiceName);
        const availableAZs = this.availableAvailabilityZones(lookupServiceName);
        const filteredSubnets = subnets.filter((s) => availableAZs.includes(s.availabilityZone));
        if (filteredSubnets.length == 0) {
          throw new Error(`lookupSupportedAzs returned ${availableAZs} but subnets have AZs ${subnets.map((s) => s.availabilityZone)}`);
        }
        return filteredSubnets.map((s) => s.subnetId);
      }
      validateCanLookupSupportedAzs(subnets, serviceName) {
        const agnosticAcct = core_1.Token.isUnresolved(this.stack.account);
        const agnosticRegion = core_1.Token.isUnresolved(this.stack.region);
        const agnosticService = core_1.Token.isUnresolved(serviceName);
        const agnosticSubnets = subnets.some((s) => core_1.Token.isUnresolved(s.availabilityZone));
        const agnosticSubnetList = core_1.Token.isUnresolved(subnets.map((s) => s.availabilityZone));
        if (agnosticAcct || agnosticRegion) {
          throw new Error("Cannot look up VPC endpoint availability zones if account/region are not specified");
        }
        if (agnosticService) {
          throw new Error(`Cannot lookup AZs for a service name with a Token: ${serviceName}`);
        }
        if (agnosticSubnets || agnosticSubnetList) {
          const agnostic = subnets.filter((s) => core_1.Token.isUnresolved(s.availabilityZone));
          throw new Error(`lookupSupportedAzs cannot filter on subnets with Token AZs: ${agnostic}`);
        }
      }
      availableAvailabilityZones(serviceName) {
        const availableAZs = core_1.ContextProvider.getValue(this, {
          provider: cxschema.ContextProvider.ENDPOINT_SERVICE_AVAILABILITY_ZONE_PROVIDER,
          dummyValue: this.stack.availabilityZones,
          props: { serviceName }
        }).value;
        if (!Array.isArray(availableAZs)) {
          throw new Error(`Discovered AZs for endpoint service ${serviceName} must be an array`);
        }
        return availableAZs;
      }
    };
    exports2.InterfaceVpcEndpoint = InterfaceVpcEndpoint;
    _f = JSII_RTTI_SYMBOL_1;
    InterfaceVpcEndpoint[_f] = { fqn: "@aws-cdk/aws-ec2.InterfaceVpcEndpoint", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/vpc-flow-logs.js
var require_vpc_flow_logs = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/vpc-flow-logs.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FlowLog = exports2.FlowLogDestination = exports2.FlowLogResourceType = exports2.FlowLogDestinationType = exports2.FlowLogTrafficType = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var iam = require_lib9();
    var logs = require_lib19();
    var s3 = require_lib16();
    var core_1 = require_lib8();
    var ec2_generated_1 = require_ec2_generated();
    var FlowLogTrafficType;
    (function(FlowLogTrafficType2) {
      FlowLogTrafficType2["ACCEPT"] = "ACCEPT";
      FlowLogTrafficType2["ALL"] = "ALL";
      FlowLogTrafficType2["REJECT"] = "REJECT";
    })(FlowLogTrafficType = exports2.FlowLogTrafficType || (exports2.FlowLogTrafficType = {}));
    var FlowLogDestinationType;
    (function(FlowLogDestinationType2) {
      FlowLogDestinationType2["CLOUD_WATCH_LOGS"] = "cloud-watch-logs";
      FlowLogDestinationType2["S3"] = "s3";
    })(FlowLogDestinationType = exports2.FlowLogDestinationType || (exports2.FlowLogDestinationType = {}));
    var FlowLogResourceType = class {
      static fromSubnet(subnet) {
        return {
          resourceType: "Subnet",
          resourceId: subnet.subnetId
        };
      }
      static fromVpc(vpc) {
        return {
          resourceType: "VPC",
          resourceId: vpc.vpcId
        };
      }
      static fromNetworkInterfaceId(id) {
        return {
          resourceType: "NetworkInterface",
          resourceId: id
        };
      }
    };
    exports2.FlowLogResourceType = FlowLogResourceType;
    _a = JSII_RTTI_SYMBOL_1;
    FlowLogResourceType[_a] = { fqn: "@aws-cdk/aws-ec2.FlowLogResourceType", version: "1.132.0" };
    var FlowLogDestination = class {
      static toCloudWatchLogs(logGroup, iamRole) {
        return new CloudWatchLogsDestination({
          logDestinationType: FlowLogDestinationType.CLOUD_WATCH_LOGS,
          logGroup,
          iamRole
        });
      }
      static toS3(bucket, keyPrefix) {
        return new S3Destination({
          logDestinationType: FlowLogDestinationType.S3,
          s3Bucket: bucket,
          keyPrefix
        });
      }
    };
    exports2.FlowLogDestination = FlowLogDestination;
    _b = JSII_RTTI_SYMBOL_1;
    FlowLogDestination[_b] = { fqn: "@aws-cdk/aws-ec2.FlowLogDestination", version: "1.132.0" };
    var S3Destination = class extends FlowLogDestination {
      constructor(props) {
        super();
        this.props = props;
      }
      bind(scope, _flowLog) {
        let s3Bucket;
        if (this.props.s3Bucket === void 0) {
          s3Bucket = new s3.Bucket(scope, "Bucket", {
            encryption: s3.BucketEncryption.UNENCRYPTED,
            removalPolicy: core_1.RemovalPolicy.RETAIN
          });
        } else {
          s3Bucket = this.props.s3Bucket;
        }
        return {
          logDestinationType: FlowLogDestinationType.S3,
          s3Bucket,
          keyPrefix: this.props.keyPrefix
        };
      }
    };
    var CloudWatchLogsDestination = class extends FlowLogDestination {
      constructor(props) {
        super();
        this.props = props;
      }
      bind(scope, _flowLog) {
        let iamRole;
        let logGroup;
        if (this.props.iamRole === void 0) {
          iamRole = new iam.Role(scope, "IAMRole", {
            roleName: core_1.PhysicalName.GENERATE_IF_NEEDED,
            assumedBy: new iam.ServicePrincipal("vpc-flow-logs.amazonaws.com")
          });
        } else {
          iamRole = this.props.iamRole;
        }
        if (this.props.logGroup === void 0) {
          logGroup = new logs.LogGroup(scope, "LogGroup");
        } else {
          logGroup = this.props.logGroup;
        }
        iamRole.addToPrincipalPolicy(new iam.PolicyStatement({
          actions: [
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "logs:DescribeLogStreams"
          ],
          effect: iam.Effect.ALLOW,
          resources: [logGroup.logGroupArn]
        }));
        iamRole.addToPrincipalPolicy(new iam.PolicyStatement({
          actions: ["iam:PassRole"],
          effect: iam.Effect.ALLOW,
          resources: [iamRole.roleArn]
        }));
        return {
          logDestinationType: FlowLogDestinationType.CLOUD_WATCH_LOGS,
          logGroup,
          iamRole
        };
      }
    };
    var FlowLogBase = class extends core_1.Resource {
    };
    var FlowLog = class extends FlowLogBase {
      constructor(scope, id, props) {
        super(scope, id, {
          physicalName: props.flowLogName
        });
        const destination = props.destination || FlowLogDestination.toCloudWatchLogs();
        const destinationConfig = destination.bind(this, this);
        this.logGroup = destinationConfig.logGroup;
        this.bucket = destinationConfig.s3Bucket;
        this.iamRole = destinationConfig.iamRole;
        this.keyPrefix = destinationConfig.keyPrefix;
        let logDestination = void 0;
        if (this.bucket) {
          logDestination = this.keyPrefix ? this.bucket.arnForObjects(this.keyPrefix) : this.bucket.bucketArn;
        }
        const flowLog = new ec2_generated_1.CfnFlowLog(this, "FlowLog", {
          deliverLogsPermissionArn: this.iamRole ? this.iamRole.roleArn : void 0,
          logDestinationType: destinationConfig.logDestinationType,
          logGroupName: this.logGroup ? this.logGroup.logGroupName : void 0,
          resourceId: props.resourceType.resourceId,
          resourceType: props.resourceType.resourceType,
          trafficType: props.trafficType ? props.trafficType : FlowLogTrafficType.ALL,
          logDestination
        });
        this.flowLogId = flowLog.ref;
      }
      static fromFlowLogId(scope, id, flowLogId) {
        class Import extends FlowLogBase {
          constructor() {
            super(...arguments);
            this.flowLogId = flowLogId;
          }
        }
        return new Import(scope, id);
      }
    };
    exports2.FlowLog = FlowLog;
    _c = JSII_RTTI_SYMBOL_1;
    FlowLog[_c] = { fqn: "@aws-cdk/aws-ec2.FlowLog", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/vpn.js
var require_vpn = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/vpn.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RESERVED_TUNNEL_INSIDE_CIDR = exports2.VpnConnection = exports2.VpnGateway = exports2.VpnConnectionType = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var net = require("net");
    var cloudwatch = require_lib10();
    var core_1 = require_lib8();
    var ec2_generated_1 = require_ec2_generated();
    var VpnConnectionType;
    (function(VpnConnectionType2) {
      VpnConnectionType2["IPSEC_1"] = "ipsec.1";
      VpnConnectionType2["DUMMY"] = "dummy";
    })(VpnConnectionType = exports2.VpnConnectionType || (exports2.VpnConnectionType = {}));
    var VpnGateway = class extends core_1.Resource {
      constructor(scope, id, props) {
        super(scope, id);
        const vpnGW = new ec2_generated_1.CfnVPNGateway(this, "Default", props);
        this.gatewayId = vpnGW.ref;
      }
    };
    exports2.VpnGateway = VpnGateway;
    _a = JSII_RTTI_SYMBOL_1;
    VpnGateway[_a] = { fqn: "@aws-cdk/aws-ec2.VpnGateway", version: "1.132.0" };
    var VpnConnection = class extends core_1.Resource {
      constructor(scope, id, props) {
        super(scope, id);
        if (!props.vpc.vpnGatewayId) {
          props.vpc.enableVpnGateway({
            type: "ipsec.1",
            amazonSideAsn: props.asn
          });
        }
        if (!core_1.Token.isUnresolved(props.ip) && !net.isIPv4(props.ip)) {
          throw new Error(`The \`ip\` ${props.ip} is not a valid IPv4 address.`);
        }
        const type = VpnConnectionType.IPSEC_1;
        const bgpAsn = props.asn || 65e3;
        const customerGateway = new ec2_generated_1.CfnCustomerGateway(this, "CustomerGateway", {
          bgpAsn,
          ipAddress: props.ip,
          type
        });
        this.customerGatewayId = customerGateway.ref;
        this.customerGatewayAsn = bgpAsn;
        this.customerGatewayIp = props.ip;
        if (props.tunnelOptions) {
          if (props.tunnelOptions.length > 2) {
            throw new Error("Cannot specify more than two `tunnelOptions`");
          }
          if (props.tunnelOptions.length === 2 && props.tunnelOptions[0].tunnelInsideCidr === props.tunnelOptions[1].tunnelInsideCidr) {
            throw new Error(`Same ${props.tunnelOptions[0].tunnelInsideCidr} \`tunnelInsideCidr\` cannot be used for both tunnels.`);
          }
          props.tunnelOptions.forEach((options, index) => {
            if (options.preSharedKey && !core_1.Token.isUnresolved(options.preSharedKey) && !/^[a-zA-Z1-9._][a-zA-Z\d._]{7,63}$/.test(options.preSharedKey)) {
              throw new Error(`The \`preSharedKey\` ${options.preSharedKey} for tunnel ${index + 1} is invalid. Allowed characters are alphanumeric characters and ._. Must be between 8 and 64 characters in length and cannot start with zero (0).`);
            }
            if (options.tunnelInsideCidr) {
              if (exports2.RESERVED_TUNNEL_INSIDE_CIDR.includes(options.tunnelInsideCidr)) {
                throw new Error(`The \`tunnelInsideCidr\` ${options.tunnelInsideCidr} for tunnel ${index + 1} is a reserved inside CIDR.`);
              }
              if (!/^169\.254\.\d{1,3}\.\d{1,3}\/30$/.test(options.tunnelInsideCidr)) {
                throw new Error(`The \`tunnelInsideCidr\` ${options.tunnelInsideCidr} for tunnel ${index + 1} is not a size /30 CIDR block from the 169.254.0.0/16 range.`);
              }
            }
          });
        }
        const vpnConnection = new ec2_generated_1.CfnVPNConnection(this, "Resource", {
          type,
          customerGatewayId: customerGateway.ref,
          staticRoutesOnly: props.staticRoutes ? true : false,
          vpnGatewayId: props.vpc.vpnGatewayId,
          vpnTunnelOptionsSpecifications: props.tunnelOptions
        });
        this.vpnId = vpnConnection.ref;
        if (props.staticRoutes) {
          props.staticRoutes.forEach((route) => {
            new ec2_generated_1.CfnVPNConnectionRoute(this, `Route${route.replace(/[^\d]/g, "")}`, {
              destinationCidrBlock: route,
              vpnConnectionId: this.vpnId
            });
          });
        }
      }
      static metricAll(metricName, props) {
        return new cloudwatch.Metric(__spreadValues({
          namespace: "AWS/VPN",
          metricName
        }, props));
      }
      static metricAllTunnelState(props) {
        return this.metricAll("TunnelState", __spreadValues({ statistic: "avg" }, props));
      }
      static metricAllTunnelDataIn(props) {
        return this.metricAll("TunnelDataIn", __spreadValues({ statistic: "sum" }, props));
      }
      static metricAllTunnelDataOut(props) {
        return this.metricAll("TunnelDataOut", __spreadValues({ statistic: "sum" }, props));
      }
    };
    exports2.VpnConnection = VpnConnection;
    _b = JSII_RTTI_SYMBOL_1;
    VpnConnection[_b] = { fqn: "@aws-cdk/aws-ec2.VpnConnection", version: "1.132.0" };
    exports2.RESERVED_TUNNEL_INSIDE_CIDR = [
      "169.254.0.0/30",
      "169.254.1.0/30",
      "169.254.2.0/30",
      "169.254.3.0/30",
      "169.254.4.0/30",
      "169.254.5.0/30",
      "169.254.169.252/30"
    ];
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/vpc.js
var require_vpc2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/vpc.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    var _d;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PrivateSubnet = exports2.PublicSubnet = exports2.RouterType = exports2.Subnet = exports2.Vpc = exports2.DefaultInstanceTenancy = exports2.SubnetType = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cxschema = require_lib3();
    var core_1 = require_lib8();
    var cxapi = require_lib5();
    var constructs_1 = require_lib4();
    var client_vpn_endpoint_1 = require_client_vpn_endpoint();
    var ec2_generated_1 = require_ec2_generated();
    var nat_1 = require_nat();
    var network_acl_1 = require_network_acl();
    var network_util_1 = require_network_util();
    var subnet_1 = require_subnet();
    var util_1 = require_util8();
    var vpc_endpoint_1 = require_vpc_endpoint();
    var vpc_flow_logs_1 = require_vpc_flow_logs();
    var vpn_1 = require_vpn();
    var core_2 = require_lib8();
    var VPC_SUBNET_SYMBOL = Symbol.for("@aws-cdk/aws-ec2.VpcSubnet");
    var SubnetType;
    (function(SubnetType2) {
      SubnetType2["ISOLATED"] = "Isolated";
      SubnetType2["PRIVATE_ISOLATED"] = "Isolated";
      SubnetType2["PRIVATE"] = "Private";
      SubnetType2["PRIVATE_WITH_NAT"] = "Private";
      SubnetType2["PUBLIC"] = "Public";
    })(SubnetType = exports2.SubnetType || (exports2.SubnetType = {}));
    var VpcBase = class extends core_1.Resource {
      constructor() {
        super(...arguments);
        this.natDependencies = new Array();
        this.incompleteSubnetDefinition = false;
      }
      selectSubnets(selection = {}) {
        const subnets = this.selectSubnetObjects(selection);
        const pubs = new Set(this.publicSubnets);
        return {
          subnetIds: subnets.map((s) => s.subnetId),
          get availabilityZones() {
            return subnets.map((s) => s.availabilityZone);
          },
          internetConnectivityEstablished: tap(new CompositeDependable(), (d) => subnets.forEach((s) => d.add(s.internetConnectivityEstablished))),
          subnets,
          hasPublic: subnets.some((s) => pubs.has(s))
        };
      }
      enableVpnGateway(options) {
        var _e;
        if (this.vpnGatewayId) {
          throw new Error("The VPN Gateway has already been enabled.");
        }
        const vpnGateway = new vpn_1.VpnGateway(this, "VpnGateway", {
          amazonSideAsn: options.amazonSideAsn,
          type: vpn_1.VpnConnectionType.IPSEC_1
        });
        this._vpnGatewayId = vpnGateway.gatewayId;
        const attachment = new ec2_generated_1.CfnVPCGatewayAttachment(this, "VPCVPNGW", {
          vpcId: this.vpcId,
          vpnGatewayId: this._vpnGatewayId
        });
        const vpnRoutePropagation = (_e = options.vpnRoutePropagation) !== null && _e !== void 0 ? _e : [{}];
        const routeTableIds = util_1.allRouteTableIds(util_1.flatten(vpnRoutePropagation.map((s) => this.selectSubnets(s).subnets)));
        if (routeTableIds.length === 0) {
          core_1.Annotations.of(this).addError(`enableVpnGateway: no subnets matching selection: '${JSON.stringify(vpnRoutePropagation)}'. Select other subnets to add routes to.`);
        }
        const routePropagation = new ec2_generated_1.CfnVPNGatewayRoutePropagation(this, "RoutePropagation", {
          routeTableIds,
          vpnGatewayId: this._vpnGatewayId
        });
        routePropagation.node.addDependency(attachment);
      }
      addVpnConnection(id, options) {
        return new vpn_1.VpnConnection(this, id, __spreadValues({
          vpc: this
        }, options));
      }
      addClientVpnEndpoint(id, options) {
        return new client_vpn_endpoint_1.ClientVpnEndpoint(this, id, __spreadProps(__spreadValues({}, options), {
          vpc: this
        }));
      }
      addInterfaceEndpoint(id, options) {
        return new vpc_endpoint_1.InterfaceVpcEndpoint(this, id, __spreadValues({
          vpc: this
        }, options));
      }
      addGatewayEndpoint(id, options) {
        return new vpc_endpoint_1.GatewayVpcEndpoint(this, id, __spreadValues({
          vpc: this
        }, options));
      }
      addFlowLog(id, options) {
        return new vpc_flow_logs_1.FlowLog(this, id, __spreadValues({
          resourceType: vpc_flow_logs_1.FlowLogResourceType.fromVpc(this)
        }, options));
      }
      get vpnGatewayId() {
        return this._vpnGatewayId;
      }
      selectSubnetObjects(selection = {}) {
        var _e;
        selection = this.reifySelectionDefaults(selection);
        if (selection.subnets !== void 0) {
          return selection.subnets;
        }
        let subnets;
        if (selection.subnetGroupName !== void 0) {
          subnets = this.selectSubnetObjectsByName(selection.subnetGroupName);
        } else {
          const type = selection.subnetType || SubnetType.PRIVATE_WITH_NAT;
          subnets = this.selectSubnetObjectsByType(type);
        }
        subnets = this.applySubnetFilters(subnets, (_e = selection.subnetFilters) !== null && _e !== void 0 ? _e : []);
        return subnets;
      }
      applySubnetFilters(subnets, filters) {
        let filtered = subnets;
        for (const filter of filters) {
          filtered = filter.selectSubnets(filtered);
        }
        return filtered;
      }
      selectSubnetObjectsByName(groupName) {
        const allSubnets = [...this.publicSubnets, ...this.privateSubnets, ...this.isolatedSubnets];
        const subnets = allSubnets.filter((s) => util_1.subnetGroupNameFromConstructId(s) === groupName);
        if (subnets.length === 0 && !this.incompleteSubnetDefinition) {
          const names = Array.from(new Set(allSubnets.map(util_1.subnetGroupNameFromConstructId)));
          throw new Error(`There are no subnet groups with name '${groupName}' in this VPC. Available names: ${names}`);
        }
        return subnets;
      }
      selectSubnetObjectsByType(subnetType) {
        const allSubnets = {
          [SubnetType.PRIVATE_ISOLATED]: this.isolatedSubnets,
          [SubnetType.PRIVATE_WITH_NAT]: this.privateSubnets,
          [SubnetType.PUBLIC]: this.publicSubnets
        };
        const subnets = allSubnets[subnetType];
        if (subnets.length === 0 && !this.incompleteSubnetDefinition) {
          const availableTypes = Object.entries(allSubnets).filter(([_, subs]) => subs.length > 0).map(([typeName, _]) => typeName);
          throw new Error(`There are no '${subnetType}' subnet groups in this VPC. Available types: ${availableTypes}`);
        }
        return subnets;
      }
      reifySelectionDefaults(placement) {
        var _e;
        if (placement.subnetName !== void 0) {
          if (placement.subnetGroupName !== void 0) {
            throw new Error("Please use only 'subnetGroupName' ('subnetName' is deprecated and has the same behavior)");
          } else {
            core_1.Annotations.of(this).addWarning("Usage of 'subnetName' in SubnetSelection is deprecated, use 'subnetGroupName' instead");
          }
          placement = __spreadProps(__spreadValues({}, placement), { subnetGroupName: placement.subnetName });
        }
        const exclusiveSelections = ["subnets", "subnetType", "subnetGroupName"];
        const providedSelections = exclusiveSelections.filter((key) => placement[key] !== void 0);
        if (providedSelections.length > 1) {
          throw new Error(`Only one of '${providedSelections}' can be supplied to subnet selection.`);
        }
        if (placement.subnetType === void 0 && placement.subnetGroupName === void 0 && placement.subnets === void 0) {
          let subnetType = this.privateSubnets.length ? SubnetType.PRIVATE_WITH_NAT : this.isolatedSubnets.length ? SubnetType.PRIVATE_ISOLATED : SubnetType.PUBLIC;
          placement = __spreadProps(__spreadValues({}, placement), { subnetType });
        }
        let subnetFilters = (_e = placement.subnetFilters) !== null && _e !== void 0 ? _e : [];
        if (placement.availabilityZones !== void 0) {
          subnetFilters.push(subnet_1.SubnetFilter.availabilityZones(placement.availabilityZones));
        }
        if (!!placement.onePerAz) {
          subnetFilters.push(subnet_1.SubnetFilter.onePerAz());
        }
        placement = __spreadProps(__spreadValues({}, placement), { subnetFilters, availabilityZones: void 0, onePerAz: void 0 });
        const _a2 = placement, { availabilityZones, onePerAz } = _a2, rest = __objRest(_a2, ["availabilityZones", "onePerAz"]);
        return rest;
      }
    };
    var NAME_TAG = "Name";
    var DefaultInstanceTenancy;
    (function(DefaultInstanceTenancy2) {
      DefaultInstanceTenancy2["DEFAULT"] = "default";
      DefaultInstanceTenancy2["DEDICATED"] = "dedicated";
    })(DefaultInstanceTenancy = exports2.DefaultInstanceTenancy || (exports2.DefaultInstanceTenancy = {}));
    var Vpc = class extends VpcBase {
      constructor(scope, id, props = {}) {
        var _e;
        super(scope, id);
        this.publicSubnets = [];
        this.privateSubnets = [];
        this.isolatedSubnets = [];
        this.subnetConfiguration = [];
        this._internetConnectivityEstablished = new core_1.ConcreteDependable();
        const stack = core_1.Stack.of(this);
        if (props.enableDnsHostnames && !props.enableDnsSupport) {
          throw new Error("To use DNS Hostnames, DNS Support must be enabled, however, it was explicitly disabled.");
        }
        const cidrBlock = ifUndefined(props.cidr, Vpc.DEFAULT_CIDR_RANGE);
        if (core_1.Token.isUnresolved(cidrBlock)) {
          throw new Error("'cidr' property must be a concrete CIDR string, got a Token (we need to parse it for automatic subdivision)");
        }
        this.networkBuilder = new network_util_1.NetworkBuilder(cidrBlock);
        this.dnsHostnamesEnabled = props.enableDnsHostnames == null ? true : props.enableDnsHostnames;
        this.dnsSupportEnabled = props.enableDnsSupport == null ? true : props.enableDnsSupport;
        const instanceTenancy = props.defaultInstanceTenancy || "default";
        this.internetConnectivityEstablished = this._internetConnectivityEstablished;
        this.resource = new ec2_generated_1.CfnVPC(this, "Resource", {
          cidrBlock,
          enableDnsHostnames: this.dnsHostnamesEnabled,
          enableDnsSupport: this.dnsSupportEnabled,
          instanceTenancy
        });
        this.vpcDefaultNetworkAcl = this.resource.attrDefaultNetworkAcl;
        this.vpcCidrBlockAssociations = this.resource.attrCidrBlockAssociations;
        this.vpcCidrBlock = this.resource.attrCidrBlock;
        this.vpcDefaultSecurityGroup = this.resource.attrDefaultSecurityGroup;
        this.vpcIpv6CidrBlocks = this.resource.attrIpv6CidrBlocks;
        core_1.Tags.of(this).add(NAME_TAG, this.node.path);
        this.availabilityZones = stack.availabilityZones;
        const maxAZs = (_e = props.maxAzs) !== null && _e !== void 0 ? _e : 3;
        this.availabilityZones = this.availabilityZones.slice(0, maxAZs);
        this.vpcId = this.resource.ref;
        this.vpcArn = core_1.Arn.format({
          service: "ec2",
          resource: "vpc",
          resourceName: this.vpcId
        }, stack);
        const defaultSubnet = props.natGateways === 0 ? Vpc.DEFAULT_SUBNETS_NO_NAT : Vpc.DEFAULT_SUBNETS;
        this.subnetConfiguration = ifUndefined(props.subnetConfiguration, defaultSubnet);
        const natGatewayPlacement = props.natGatewaySubnets || { subnetType: SubnetType.PUBLIC };
        const natGatewayCount = determineNatGatewayCount(props.natGateways, this.subnetConfiguration, this.availabilityZones.length);
        this.createSubnets();
        const allowOutbound = this.subnetConfiguration.filter((subnet) => subnet.subnetType !== SubnetType.PRIVATE_ISOLATED).length > 0;
        if (allowOutbound) {
          const igw = new ec2_generated_1.CfnInternetGateway(this, "IGW", {});
          this.internetGatewayId = igw.ref;
          this._internetConnectivityEstablished.add(igw);
          const att = new ec2_generated_1.CfnVPCGatewayAttachment(this, "VPCGW", {
            internetGatewayId: igw.ref,
            vpcId: this.resource.ref
          });
          this.publicSubnets.forEach((publicSubnet) => {
            publicSubnet.addDefaultInternetRoute(igw.ref, att);
          });
          if (natGatewayCount > 0) {
            const provider = props.natGatewayProvider || nat_1.NatProvider.gateway();
            this.createNatGateways(provider, natGatewayCount, natGatewayPlacement);
          }
        }
        if (props.vpnGateway && this.publicSubnets.length === 0 && this.privateSubnets.length === 0 && this.isolatedSubnets.length === 0) {
          throw new Error("Can not enable the VPN gateway while the VPC has no subnets at all");
        }
        if ((props.vpnConnections || props.vpnGatewayAsn) && props.vpnGateway === false) {
          throw new Error("Cannot specify `vpnConnections` or `vpnGatewayAsn` when `vpnGateway` is set to false.");
        }
        if (props.vpnGateway || props.vpnConnections || props.vpnGatewayAsn) {
          this.enableVpnGateway({
            amazonSideAsn: props.vpnGatewayAsn,
            type: vpn_1.VpnConnectionType.IPSEC_1,
            vpnRoutePropagation: props.vpnRoutePropagation
          });
          const vpnConnections = props.vpnConnections || {};
          for (const [connectionId, connection] of Object.entries(vpnConnections)) {
            this.addVpnConnection(connectionId, connection);
          }
        }
        if (props.gatewayEndpoints) {
          const gatewayEndpoints = props.gatewayEndpoints || {};
          for (const [endpointId, endpoint] of Object.entries(gatewayEndpoints)) {
            this.addGatewayEndpoint(endpointId, endpoint);
          }
        }
        if (props.flowLogs) {
          const flowLogs = props.flowLogs || {};
          for (const [flowLogId, flowLog] of Object.entries(flowLogs)) {
            this.addFlowLog(flowLogId, flowLog);
          }
        }
      }
      static fromVpcAttributes(scope, id, attrs) {
        return new ImportedVpc(scope, id, attrs, false);
      }
      static fromLookup(scope, id, options) {
        if (core_1.Token.isUnresolved(options.vpcId) || core_1.Token.isUnresolved(options.vpcName) || Object.values(options.tags || {}).some(core_1.Token.isUnresolved) || Object.keys(options.tags || {}).some(core_1.Token.isUnresolved)) {
          throw new Error("All arguments to Vpc.fromLookup() must be concrete (no Tokens)");
        }
        const filter = makeTagFilter(options.tags);
        if (options.vpcId) {
          filter["vpc-id"] = options.vpcId;
        }
        if (options.vpcName) {
          filter["tag:Name"] = options.vpcName;
        }
        if (options.isDefault !== void 0) {
          filter.isDefault = options.isDefault ? "true" : "false";
        }
        const overrides = {};
        if (options.region) {
          overrides.region = options.region;
        }
        const attributes = core_1.ContextProvider.getValue(scope, {
          provider: cxschema.ContextProvider.VPC_PROVIDER,
          props: __spreadProps(__spreadValues({}, overrides), {
            filter,
            returnAsymmetricSubnets: true,
            subnetGroupNameTag: options.subnetGroupNameTag
          }),
          dummyValue: void 0
        }).value;
        return new LookedUpVpc(scope, id, attributes || DUMMY_VPC_PROPS, attributes === void 0);
        function makeTagFilter(tags) {
          const result = {};
          for (const [name, value] of Object.entries(tags || {})) {
            result[`tag:${name}`] = value;
          }
          return result;
        }
      }
      addS3Endpoint(id, subnets) {
        return new vpc_endpoint_1.GatewayVpcEndpoint(this, id, {
          service: vpc_endpoint_1.GatewayVpcEndpointAwsService.S3,
          vpc: this,
          subnets
        });
      }
      addDynamoDbEndpoint(id, subnets) {
        return new vpc_endpoint_1.GatewayVpcEndpoint(this, id, {
          service: vpc_endpoint_1.GatewayVpcEndpointAwsService.DYNAMODB,
          vpc: this,
          subnets
        });
      }
      createNatGateways(provider, natCount, placement) {
        const natSubnets = this.selectSubnetObjects(placement);
        for (const sub of natSubnets) {
          if (this.publicSubnets.indexOf(sub) === -1) {
            throw new Error(`natGatewayPlacement ${placement} contains non public subnet ${sub}`);
          }
        }
        provider.configureNat({
          vpc: this,
          natSubnets: natSubnets.slice(0, natCount),
          privateSubnets: this.privateSubnets
        });
      }
      createSubnets() {
        const remainingSpaceSubnets = [];
        for (const subnet of this.subnetConfiguration) {
          if (subnet.cidrMask === void 0) {
            remainingSpaceSubnets.push(subnet);
            continue;
          }
          this.createSubnetResources(subnet, subnet.cidrMask);
        }
        const totalRemaining = remainingSpaceSubnets.length * this.availabilityZones.length;
        const cidrMaskForRemaining = this.networkBuilder.maskForRemainingSubnets(totalRemaining);
        for (const subnet of remainingSpaceSubnets) {
          this.createSubnetResources(subnet, cidrMaskForRemaining);
        }
      }
      createSubnetResources(subnetConfig, cidrMask) {
        this.availabilityZones.forEach((zone, index) => {
          if (subnetConfig.reserved === true) {
            this.networkBuilder.addSubnet(cidrMask);
            return;
          }
          const name = util_1.subnetId(subnetConfig.name, index);
          const subnetProps = {
            availabilityZone: zone,
            vpcId: this.vpcId,
            cidrBlock: this.networkBuilder.addSubnet(cidrMask),
            mapPublicIpOnLaunch: subnetConfig.subnetType === SubnetType.PUBLIC
          };
          let subnet;
          switch (subnetConfig.subnetType) {
            case SubnetType.PUBLIC:
              const publicSubnet = new PublicSubnet(this, name, subnetProps);
              this.publicSubnets.push(publicSubnet);
              subnet = publicSubnet;
              break;
            case SubnetType.PRIVATE_WITH_NAT:
              const privateSubnet = new PrivateSubnet(this, name, subnetProps);
              this.privateSubnets.push(privateSubnet);
              subnet = privateSubnet;
              break;
            case SubnetType.PRIVATE_ISOLATED:
              const isolatedSubnet = new PrivateSubnet(this, name, subnetProps);
              this.isolatedSubnets.push(isolatedSubnet);
              subnet = isolatedSubnet;
              break;
            default:
              throw new Error(`Unrecognized subnet type: ${subnetConfig.subnetType}`);
          }
          const includeResourceTypes = [ec2_generated_1.CfnSubnet.CFN_RESOURCE_TYPE_NAME];
          core_1.Tags.of(subnet).add(SUBNETNAME_TAG, subnetConfig.name, { includeResourceTypes });
          core_1.Tags.of(subnet).add(SUBNETTYPE_TAG, subnetTypeTagValue(subnetConfig.subnetType), { includeResourceTypes });
        });
      }
    };
    exports2.Vpc = Vpc;
    _a = JSII_RTTI_SYMBOL_1;
    Vpc[_a] = { fqn: "@aws-cdk/aws-ec2.Vpc", version: "1.132.0" };
    Vpc.DEFAULT_CIDR_RANGE = "10.0.0.0/16";
    Vpc.DEFAULT_SUBNETS = [
      {
        subnetType: SubnetType.PUBLIC,
        name: util_1.defaultSubnetName(SubnetType.PUBLIC)
      },
      {
        subnetType: SubnetType.PRIVATE_WITH_NAT,
        name: util_1.defaultSubnetName(SubnetType.PRIVATE_WITH_NAT)
      }
    ];
    Vpc.DEFAULT_SUBNETS_NO_NAT = [
      {
        subnetType: SubnetType.PUBLIC,
        name: util_1.defaultSubnetName(SubnetType.PUBLIC)
      },
      {
        subnetType: SubnetType.PRIVATE_ISOLATED,
        name: util_1.defaultSubnetName(SubnetType.PRIVATE_ISOLATED)
      }
    ];
    var SUBNETTYPE_TAG = "aws-cdk:subnet-type";
    var SUBNETNAME_TAG = "aws-cdk:subnet-name";
    function subnetTypeTagValue(type) {
      switch (type) {
        case SubnetType.PUBLIC:
          return "Public";
        case SubnetType.PRIVATE_WITH_NAT:
          return "Private";
        case SubnetType.PRIVATE_ISOLATED:
          return "Isolated";
      }
    }
    var Subnet = class extends core_1.Resource {
      constructor(scope, id, props) {
        super(scope, id);
        this.dependencyElements = [];
        this._internetConnectivityEstablished = new core_1.ConcreteDependable();
        Object.defineProperty(this, VPC_SUBNET_SYMBOL, { value: true });
        core_1.Tags.of(this).add(NAME_TAG, this.node.path);
        this.availabilityZone = props.availabilityZone;
        this.ipv4CidrBlock = props.cidrBlock;
        const subnet = new ec2_generated_1.CfnSubnet(this, "Subnet", {
          vpcId: props.vpcId,
          cidrBlock: props.cidrBlock,
          availabilityZone: props.availabilityZone,
          mapPublicIpOnLaunch: props.mapPublicIpOnLaunch
        });
        this.subnetId = subnet.ref;
        this.subnetVpcId = subnet.attrVpcId;
        this.subnetAvailabilityZone = subnet.attrAvailabilityZone;
        this.subnetIpv6CidrBlocks = subnet.attrIpv6CidrBlocks;
        this.subnetOutpostArn = subnet.attrOutpostArn;
        this._networkAcl = network_acl_1.NetworkAcl.fromNetworkAclId(this, "Acl", subnet.attrNetworkAclAssociationId);
        this.subnetNetworkAclAssociationId = core_1.Lazy.string({ produce: () => this._networkAcl.networkAclId });
        this.node.defaultChild = subnet;
        const table = new ec2_generated_1.CfnRouteTable(this, "RouteTable", {
          vpcId: props.vpcId
        });
        this.routeTable = { routeTableId: table.ref };
        new ec2_generated_1.CfnSubnetRouteTableAssociation(this, "RouteTableAssociation", {
          subnetId: this.subnetId,
          routeTableId: table.ref
        });
        this.internetConnectivityEstablished = this._internetConnectivityEstablished;
      }
      static isVpcSubnet(x) {
        return VPC_SUBNET_SYMBOL in x;
      }
      static fromSubnetAttributes(scope, id, attrs) {
        return new ImportedSubnet(scope, id, attrs);
      }
      static fromSubnetId(scope, id, subnetId) {
        return this.fromSubnetAttributes(scope, id, { subnetId });
      }
      addDefaultInternetRoute(gatewayId, gatewayAttachment) {
        const route = new ec2_generated_1.CfnRoute(this, "DefaultRoute", {
          routeTableId: this.routeTable.routeTableId,
          destinationCidrBlock: "0.0.0.0/0",
          gatewayId
        });
        route.node.addDependency(gatewayAttachment);
        this._internetConnectivityEstablished.add(route);
      }
      get networkAcl() {
        return this._networkAcl;
      }
      addDefaultNatRoute(natGatewayId) {
        this.addRoute("DefaultRoute", {
          routerType: RouterType.NAT_GATEWAY,
          routerId: natGatewayId,
          enablesInternetConnectivity: true
        });
      }
      addRoute(id, options) {
        if (options.destinationCidrBlock && options.destinationIpv6CidrBlock) {
          throw new Error("Cannot specify both 'destinationCidrBlock' and 'destinationIpv6CidrBlock'");
        }
        const route = new ec2_generated_1.CfnRoute(this, id, {
          routeTableId: this.routeTable.routeTableId,
          destinationCidrBlock: options.destinationCidrBlock || (options.destinationIpv6CidrBlock === void 0 ? "0.0.0.0/0" : void 0),
          destinationIpv6CidrBlock: options.destinationIpv6CidrBlock,
          [routerTypeToPropName(options.routerType)]: options.routerId
        });
        if (options.enablesInternetConnectivity) {
          this._internetConnectivityEstablished.add(route);
        }
      }
      associateNetworkAcl(id, networkAcl) {
        this._networkAcl = networkAcl;
        const scope = core_2.Construct.isConstruct(networkAcl) ? networkAcl : this;
        const other = core_2.Construct.isConstruct(networkAcl) ? this : networkAcl;
        new network_acl_1.SubnetNetworkAclAssociation(scope, id + core_1.Names.nodeUniqueId(other.node), {
          networkAcl,
          subnet: this
        });
      }
    };
    exports2.Subnet = Subnet;
    _b = JSII_RTTI_SYMBOL_1;
    Subnet[_b] = { fqn: "@aws-cdk/aws-ec2.Subnet", version: "1.132.0" };
    var RouterType;
    (function(RouterType2) {
      RouterType2["EGRESS_ONLY_INTERNET_GATEWAY"] = "EgressOnlyInternetGateway";
      RouterType2["GATEWAY"] = "Gateway";
      RouterType2["INSTANCE"] = "Instance";
      RouterType2["NAT_GATEWAY"] = "NatGateway";
      RouterType2["NETWORK_INTERFACE"] = "NetworkInterface";
      RouterType2["VPC_PEERING_CONNECTION"] = "VpcPeeringConnection";
    })(RouterType = exports2.RouterType || (exports2.RouterType = {}));
    function routerTypeToPropName(routerType) {
      return {
        [RouterType.EGRESS_ONLY_INTERNET_GATEWAY]: "egressOnlyInternetGatewayId",
        [RouterType.GATEWAY]: "gatewayId",
        [RouterType.INSTANCE]: "instanceId",
        [RouterType.NAT_GATEWAY]: "natGatewayId",
        [RouterType.NETWORK_INTERFACE]: "networkInterfaceId",
        [RouterType.VPC_PEERING_CONNECTION]: "vpcPeeringConnectionId"
      }[routerType];
    }
    var PublicSubnet = class extends Subnet {
      constructor(scope, id, props) {
        super(scope, id, props);
      }
      static fromPublicSubnetAttributes(scope, id, attrs) {
        return new ImportedSubnet(scope, id, attrs);
      }
      addNatGateway() {
        const ngw = new ec2_generated_1.CfnNatGateway(this, "NATGateway", {
          subnetId: this.subnetId,
          allocationId: new ec2_generated_1.CfnEIP(this, "EIP", {
            domain: "vpc"
          }).attrAllocationId
        });
        return ngw;
      }
    };
    exports2.PublicSubnet = PublicSubnet;
    _c = JSII_RTTI_SYMBOL_1;
    PublicSubnet[_c] = { fqn: "@aws-cdk/aws-ec2.PublicSubnet", version: "1.132.0" };
    var PrivateSubnet = class extends Subnet {
      constructor(scope, id, props) {
        super(scope, id, props);
      }
      static fromPrivateSubnetAttributes(scope, id, attrs) {
        return new ImportedSubnet(scope, id, attrs);
      }
    };
    exports2.PrivateSubnet = PrivateSubnet;
    _d = JSII_RTTI_SYMBOL_1;
    PrivateSubnet[_d] = { fqn: "@aws-cdk/aws-ec2.PrivateSubnet", version: "1.132.0" };
    function ifUndefined(value, defaultValue) {
      return value !== null && value !== void 0 ? value : defaultValue;
    }
    var ImportedVpc = class extends VpcBase {
      constructor(scope, id, props, isIncomplete) {
        super(scope, id);
        this.internetConnectivityEstablished = new core_1.ConcreteDependable();
        this.vpcId = props.vpcId;
        this.vpcArn = core_1.Arn.format({
          service: "ec2",
          resource: "vpc",
          resourceName: this.vpcId
        }, core_1.Stack.of(this));
        this.cidr = props.vpcCidrBlock;
        this.availabilityZones = props.availabilityZones;
        this._vpnGatewayId = props.vpnGatewayId;
        this.incompleteSubnetDefinition = isIncomplete;
        for (const k of Object.keys(props)) {
          if (Array.isArray(props[k]) && core_1.Token.isUnresolved(props[k])) {
            core_1.Annotations.of(this).addWarning(`fromVpcAttributes: '${k}' is a list token: the imported VPC will not work with constructs that require a list of subnets at synthesis time. Use 'Vpc.fromLookup()' or 'Fn.importListValue' instead.`);
          }
        }
        const pub = new util_1.ImportSubnetGroup(props.publicSubnetIds, props.publicSubnetNames, props.publicSubnetRouteTableIds, SubnetType.PUBLIC, this.availabilityZones, "publicSubnetIds", "publicSubnetNames", "publicSubnetRouteTableIds");
        const priv = new util_1.ImportSubnetGroup(props.privateSubnetIds, props.privateSubnetNames, props.privateSubnetRouteTableIds, SubnetType.PRIVATE_WITH_NAT, this.availabilityZones, "privateSubnetIds", "privateSubnetNames", "privateSubnetRouteTableIds");
        const iso = new util_1.ImportSubnetGroup(props.isolatedSubnetIds, props.isolatedSubnetNames, props.isolatedSubnetRouteTableIds, SubnetType.PRIVATE_ISOLATED, this.availabilityZones, "isolatedSubnetIds", "isolatedSubnetNames", "isolatedSubnetRouteTableIds");
        this.publicSubnets = pub.import(this);
        this.privateSubnets = priv.import(this);
        this.isolatedSubnets = iso.import(this);
      }
      get vpcCidrBlock() {
        if (this.cidr === void 0) {
          throw new Error("Cannot perform this operation: 'vpcCidrBlock' was not supplied when creating this VPC");
        }
        return this.cidr;
      }
    };
    var LookedUpVpc = class extends VpcBase {
      constructor(scope, id, props, isIncomplete) {
        super(scope, id);
        this.internetConnectivityEstablished = new core_1.ConcreteDependable();
        this.vpcId = props.vpcId;
        this.vpcArn = core_1.Arn.format({
          service: "ec2",
          resource: "vpc",
          resourceName: this.vpcId
        }, core_1.Stack.of(this));
        this.cidr = props.vpcCidrBlock;
        this._vpnGatewayId = props.vpnGatewayId;
        this.incompleteSubnetDefinition = isIncomplete;
        const subnetGroups = props.subnetGroups || [];
        const availabilityZones = Array.from(new Set(flatMap(subnetGroups, (subnetGroup) => {
          return subnetGroup.subnets.map((subnet) => subnet.availabilityZone);
        })));
        availabilityZones.sort((az1, az2) => az1.localeCompare(az2));
        this.availabilityZones = availabilityZones;
        this.publicSubnets = this.extractSubnetsOfType(subnetGroups, cxapi.VpcSubnetGroupType.PUBLIC);
        this.privateSubnets = this.extractSubnetsOfType(subnetGroups, cxapi.VpcSubnetGroupType.PRIVATE);
        this.isolatedSubnets = this.extractSubnetsOfType(subnetGroups, cxapi.VpcSubnetGroupType.ISOLATED);
      }
      get vpcCidrBlock() {
        if (this.cidr === void 0) {
          throw new Error("Cannot perform this operation: 'vpcCidrBlock' was not found when looking up this VPC. Use a newer version of the CDK CLI and clear the old context value.");
        }
        return this.cidr;
      }
      extractSubnetsOfType(subnetGroups, subnetGroupType) {
        return flatMap(subnetGroups.filter((subnetGroup) => subnetGroup.type === subnetGroupType), (subnetGroup) => this.subnetGroupToSubnets(subnetGroup));
      }
      subnetGroupToSubnets(subnetGroup) {
        const ret = new Array();
        for (let i = 0; i < subnetGroup.subnets.length; i++) {
          const vpcSubnet = subnetGroup.subnets[i];
          ret.push(Subnet.fromSubnetAttributes(this, `${subnetGroup.name}Subnet${i + 1}`, {
            availabilityZone: vpcSubnet.availabilityZone,
            subnetId: vpcSubnet.subnetId,
            routeTableId: vpcSubnet.routeTableId,
            ipv4CidrBlock: vpcSubnet.cidr
          }));
        }
        return ret;
      }
    };
    function flatMap(xs, fn) {
      const ret = new Array();
      for (const x of xs) {
        ret.push(...fn(x));
      }
      return ret;
    }
    var CompositeDependable = class {
      constructor() {
        this.dependables = new Array();
        const self = this;
        core_1.DependableTrait.implement(this, {
          get dependencyRoots() {
            const ret = new Array();
            for (const dep of self.dependables) {
              ret.push(...core_1.DependableTrait.get(dep).dependencyRoots);
            }
            return ret;
          }
        });
      }
      add(dep) {
        this.dependables.push(dep);
      }
    };
    function tap(x, fn) {
      fn(x);
      return x;
    }
    var ImportedSubnet = class extends core_1.Resource {
      constructor(scope, id, attrs) {
        super(scope, id);
        this.internetConnectivityEstablished = new core_1.ConcreteDependable();
        if (!attrs.routeTableId) {
          const ref = core_1.Token.isUnresolved(attrs.subnetId) || core_1.Token.isUnresolved([attrs.subnetId]) ? `at '${constructs_1.Node.of(scope).path}/${id}'` : `'${attrs.subnetId}'`;
          core_1.Annotations.of(this).addWarning(`No routeTableId was provided to the subnet ${ref}. Attempting to read its .routeTable.routeTableId will return null/undefined. (More info: https://github.com/aws/aws-cdk/pull/3171)`);
        }
        this._ipv4CidrBlock = attrs.ipv4CidrBlock;
        this._availabilityZone = attrs.availabilityZone;
        this.subnetId = attrs.subnetId;
        this.routeTable = {
          routeTableId: attrs.routeTableId
        };
      }
      get availabilityZone() {
        if (!this._availabilityZone) {
          throw new Error("You cannot reference a Subnet's availability zone if it was not supplied. Add the availabilityZone when importing using Subnet.fromSubnetAttributes()");
        }
        return this._availabilityZone;
      }
      get ipv4CidrBlock() {
        if (!this._ipv4CidrBlock) {
          throw new Error("You cannot reference an imported Subnet's IPv4 CIDR if it was not supplied. Add the ipv4CidrBlock when importing using Subnet.fromSubnetAttributes()");
        }
        return this._ipv4CidrBlock;
      }
      associateNetworkAcl(id, networkAcl) {
        const scope = core_2.Construct.isConstruct(networkAcl) ? networkAcl : this;
        const other = core_2.Construct.isConstruct(networkAcl) ? this : networkAcl;
        new network_acl_1.SubnetNetworkAclAssociation(scope, id + core_1.Names.nodeUniqueId(other.node), {
          networkAcl,
          subnet: this
        });
      }
    };
    function determineNatGatewayCount(requestedCount, subnetConfig, azCount) {
      const hasPrivateSubnets = subnetConfig.some((c) => c.subnetType === SubnetType.PRIVATE_WITH_NAT && !c.reserved);
      const hasPublicSubnets = subnetConfig.some((c) => c.subnetType === SubnetType.PUBLIC);
      const count = requestedCount !== void 0 ? Math.min(requestedCount, azCount) : hasPrivateSubnets ? azCount : 0;
      if (count === 0 && hasPrivateSubnets) {
        throw new Error("If you do not want NAT gateways (natGateways=0), make sure you don't configure any PRIVATE subnets in 'subnetConfiguration' (make them PUBLIC or ISOLATED instead)");
      }
      if (count > 0 && !hasPublicSubnets) {
        throw new Error(`If you configure PRIVATE subnets in 'subnetConfiguration', you must also configure PUBLIC subnets to put the NAT gateways into (got ${JSON.stringify(subnetConfig)}.`);
      }
      return count;
    }
    var DUMMY_VPC_PROPS = {
      availabilityZones: [],
      vpcCidrBlock: "1.2.3.4/5",
      isolatedSubnetIds: void 0,
      isolatedSubnetNames: void 0,
      isolatedSubnetRouteTableIds: void 0,
      privateSubnetIds: void 0,
      privateSubnetNames: void 0,
      privateSubnetRouteTableIds: void 0,
      publicSubnetIds: void 0,
      publicSubnetNames: void 0,
      publicSubnetRouteTableIds: void 0,
      subnetGroups: [
        {
          name: "Public",
          type: cxapi.VpcSubnetGroupType.PUBLIC,
          subnets: [
            {
              availabilityZone: "dummy1a",
              subnetId: "s-12345",
              routeTableId: "rtb-12345s",
              cidr: "1.2.3.4/5"
            },
            {
              availabilityZone: "dummy1b",
              subnetId: "s-67890",
              routeTableId: "rtb-67890s",
              cidr: "1.2.3.4/5"
            }
          ]
        },
        {
          name: "Private",
          type: cxapi.VpcSubnetGroupType.PRIVATE,
          subnets: [
            {
              availabilityZone: "dummy1a",
              subnetId: "p-12345",
              routeTableId: "rtb-12345p",
              cidr: "1.2.3.4/5"
            },
            {
              availabilityZone: "dummy1b",
              subnetId: "p-67890",
              routeTableId: "rtb-57890p",
              cidr: "1.2.3.4/5"
            }
          ]
        }
      ],
      vpcId: "vpc-12345"
    };
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/instance.js
var require_instance = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/instance.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Instance = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var crypto = require("crypto");
    var iam = require_lib9();
    var core_1 = require_lib8();
    var aspects_1 = require_aspects();
    var connections_1 = require_connections();
    var ec2_generated_1 = require_ec2_generated();
    var ebs_util_1 = require_ebs_util();
    var security_group_1 = require_security_group2();
    var vpc_1 = require_vpc2();
    var NAME_TAG = "Name";
    var Instance = class extends core_1.Resource {
      constructor(scope, id, props) {
        var _b;
        super(scope, id);
        this.securityGroups = [];
        if (props.initOptions && !props.init) {
          throw new Error("Setting 'initOptions' requires that 'init' is also set");
        }
        if (props.securityGroup) {
          this.securityGroup = props.securityGroup;
        } else {
          this.securityGroup = new security_group_1.SecurityGroup(this, "InstanceSecurityGroup", {
            vpc: props.vpc,
            allowAllOutbound: props.allowAllOutbound !== false
          });
        }
        this.connections = new connections_1.Connections({ securityGroups: [this.securityGroup] });
        this.securityGroups.push(this.securityGroup);
        core_1.Tags.of(this).add(NAME_TAG, props.instanceName || this.node.path);
        this.role = props.role || new iam.Role(this, "InstanceRole", {
          assumedBy: new iam.ServicePrincipal("ec2.amazonaws.com")
        });
        this.grantPrincipal = this.role;
        const iamProfile = new iam.CfnInstanceProfile(this, "InstanceProfile", {
          roles: [this.role.roleName]
        });
        const imageConfig = props.machineImage.getImage(this);
        this.userData = (_b = props.userData) !== null && _b !== void 0 ? _b : imageConfig.userData;
        const userDataToken = core_1.Lazy.string({ produce: () => core_1.Fn.base64(this.userData.render()) });
        const securityGroupsToken = core_1.Lazy.list({ produce: () => this.securityGroups.map((sg) => sg.securityGroupId) });
        const { subnets } = props.vpc.selectSubnets(props.vpcSubnets);
        let subnet;
        if (props.availabilityZone) {
          const selected = subnets.filter((sn) => sn.availabilityZone === props.availabilityZone);
          if (selected.length === 1) {
            subnet = selected[0];
          } else {
            core_1.Annotations.of(this).addError(`Need exactly 1 subnet to match AZ '${props.availabilityZone}', found ${selected.length}. Use a different availabilityZone.`);
          }
        } else {
          if (subnets.length > 0) {
            subnet = subnets[0];
          } else {
            core_1.Annotations.of(this).addError(`Did not find any subnets matching '${JSON.stringify(props.vpcSubnets)}', please use a different selection.`);
          }
        }
        if (!subnet) {
          subnet = vpc_1.Subnet.fromSubnetAttributes(this, "DummySubnet", {
            subnetId: "s-notfound",
            availabilityZone: "az-notfound"
          });
        }
        this.instance = new ec2_generated_1.CfnInstance(this, "Resource", {
          imageId: imageConfig.imageId,
          keyName: props.keyName,
          instanceType: props.instanceType.toString(),
          securityGroupIds: securityGroupsToken,
          iamInstanceProfile: iamProfile.ref,
          userData: userDataToken,
          subnetId: subnet.subnetId,
          availabilityZone: subnet.availabilityZone,
          sourceDestCheck: props.sourceDestCheck,
          blockDeviceMappings: props.blockDevices !== void 0 ? ebs_util_1.instanceBlockDeviceMappings(this, props.blockDevices) : void 0,
          privateIpAddress: props.privateIpAddress
        });
        this.instance.node.addDependency(this.role);
        this.osType = imageConfig.osType;
        this.node.defaultChild = this.instance;
        this.instanceId = this.instance.ref;
        this.instanceAvailabilityZone = this.instance.attrAvailabilityZone;
        this.instancePrivateDnsName = this.instance.attrPrivateDnsName;
        this.instancePrivateIp = this.instance.attrPrivateIp;
        this.instancePublicDnsName = this.instance.attrPublicDnsName;
        this.instancePublicIp = this.instance.attrPublicIp;
        if (props.init) {
          this.applyCloudFormationInit(props.init, props.initOptions);
        }
        this.applyUpdatePolicies(props);
        const originalLogicalId = core_1.Stack.of(this).getLogicalId(this.instance);
        let recursing = false;
        this.instance.overrideLogicalId(core_1.Lazy.uncachedString({
          produce: (context) => {
            var _b2;
            if (recursing) {
              return originalLogicalId;
            }
            if (!((_b2 = props.userDataCausesReplacement) !== null && _b2 !== void 0 ? _b2 : props.initOptions)) {
              return originalLogicalId;
            }
            const md5 = crypto.createHash("md5");
            recursing = true;
            try {
              md5.update(JSON.stringify(context.resolve(this.userData.render())));
            } finally {
              recursing = false;
            }
            const digest = md5.digest("hex").substr(0, 16);
            return `${originalLogicalId}${digest}`;
          }
        }));
        if (props.requireImdsv2) {
          core_1.Aspects.of(this).add(new aspects_1.InstanceRequireImdsv2Aspect());
        }
      }
      addSecurityGroup(securityGroup) {
        this.securityGroups.push(securityGroup);
      }
      addUserData(...commands) {
        this.userData.addCommands(...commands);
      }
      addToRolePolicy(statement) {
        this.role.addToPrincipalPolicy(statement);
      }
      applyCloudFormationInit(init, options = {}) {
        var _b;
        init.attach(this.instance, {
          platform: this.osType,
          instanceRole: this.role,
          userData: this.userData,
          configSets: options.configSets,
          embedFingerprint: options.embedFingerprint,
          printLog: options.printLog,
          ignoreFailures: options.ignoreFailures,
          includeRole: options.includeRole,
          includeUrl: options.includeUrl
        });
        this.waitForResourceSignal((_b = options.timeout) !== null && _b !== void 0 ? _b : core_1.Duration.minutes(5));
      }
      waitForResourceSignal(timeout) {
        var _b, _c;
        const oldResourceSignal = (_b = this.instance.cfnOptions.creationPolicy) === null || _b === void 0 ? void 0 : _b.resourceSignal;
        this.instance.cfnOptions.creationPolicy = __spreadProps(__spreadValues({}, this.instance.cfnOptions.creationPolicy), {
          resourceSignal: {
            count: ((_c = oldResourceSignal === null || oldResourceSignal === void 0 ? void 0 : oldResourceSignal.count) !== null && _c !== void 0 ? _c : 0) + 1,
            timeout: ((oldResourceSignal === null || oldResourceSignal === void 0 ? void 0 : oldResourceSignal.timeout) ? core_1.Duration.parse(oldResourceSignal === null || oldResourceSignal === void 0 ? void 0 : oldResourceSignal.timeout).plus(timeout) : timeout).toIsoString()
          }
        });
      }
      applyUpdatePolicies(props) {
        if (props.resourceSignalTimeout !== void 0) {
          this.instance.cfnOptions.creationPolicy = __spreadProps(__spreadValues({}, this.instance.cfnOptions.creationPolicy), {
            resourceSignal: {
              timeout: props.resourceSignalTimeout && props.resourceSignalTimeout.toIsoString()
            }
          });
        }
      }
    };
    exports2.Instance = Instance;
    _a = JSII_RTTI_SYMBOL_1;
    Instance[_a] = { fqn: "@aws-cdk/aws-ec2.Instance", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/launch-template.js
var require_launch_template = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/launch-template.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LaunchTemplate = exports2.LaunchTemplateSpecialVersions = exports2.SpotRequestType = exports2.SpotInstanceInterruption = exports2.InstanceInitiatedShutdownBehavior = exports2.CpuCredits = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var iam = require_lib9();
    var core_1 = require_lib8();
    var _1 = require_lib21();
    var connections_1 = require_connections();
    var ec2_generated_1 = require_ec2_generated();
    var ebs_util_1 = require_ebs_util();
    var NAME_TAG = "Name";
    var CpuCredits;
    (function(CpuCredits2) {
      CpuCredits2["STANDARD"] = "standard";
      CpuCredits2["UNLIMITED"] = "unlimited";
    })(CpuCredits = exports2.CpuCredits || (exports2.CpuCredits = {}));
    var InstanceInitiatedShutdownBehavior;
    (function(InstanceInitiatedShutdownBehavior2) {
      InstanceInitiatedShutdownBehavior2["STOP"] = "stop";
      InstanceInitiatedShutdownBehavior2["TERMINATE"] = "terminate";
    })(InstanceInitiatedShutdownBehavior = exports2.InstanceInitiatedShutdownBehavior || (exports2.InstanceInitiatedShutdownBehavior = {}));
    var SpotInstanceInterruption;
    (function(SpotInstanceInterruption2) {
      SpotInstanceInterruption2["STOP"] = "stop";
      SpotInstanceInterruption2["TERMINATE"] = "terminate";
      SpotInstanceInterruption2["HIBERNATE"] = "hibernate";
    })(SpotInstanceInterruption = exports2.SpotInstanceInterruption || (exports2.SpotInstanceInterruption = {}));
    var SpotRequestType;
    (function(SpotRequestType2) {
      SpotRequestType2["ONE_TIME"] = "one-time";
      SpotRequestType2["PERSISTENT"] = "persistent";
    })(SpotRequestType = exports2.SpotRequestType || (exports2.SpotRequestType = {}));
    var LaunchTemplateSpecialVersions = class {
    };
    exports2.LaunchTemplateSpecialVersions = LaunchTemplateSpecialVersions;
    _a = JSII_RTTI_SYMBOL_1;
    LaunchTemplateSpecialVersions[_a] = { fqn: "@aws-cdk/aws-ec2.LaunchTemplateSpecialVersions", version: "1.132.0" };
    LaunchTemplateSpecialVersions.LATEST_VERSION = "$Latest";
    LaunchTemplateSpecialVersions.DEFAULT_VERSION = "$Default";
    var LaunchTemplate = class extends core_1.Resource {
      constructor(scope, id, props = {}) {
        var _c, _d, _e, _f, _g, _h;
        super(scope, id);
        const spotDuration = (_d = (_c = props === null || props === void 0 ? void 0 : props.spotOptions) === null || _c === void 0 ? void 0 : _c.blockDuration) === null || _d === void 0 ? void 0 : _d.toHours({ integral: true });
        if (spotDuration !== void 0 && (spotDuration < 1 || spotDuration > 6)) {
          core_1.Annotations.of(this).addError("Spot block duration must be exactly 1, 2, 3, 4, 5, or 6 hours.");
        }
        this.role = props.role;
        this._grantPrincipal = this.role;
        const iamProfile = this.role ? new iam.CfnInstanceProfile(this, "Profile", {
          roles: [this.role.roleName]
        }) : void 0;
        if (props.securityGroup) {
          this._connections = new connections_1.Connections({ securityGroups: [props.securityGroup] });
        }
        const securityGroupsToken = core_1.Lazy.list({
          produce: () => {
            if (this._connections && this._connections.securityGroups.length > 0) {
              return this._connections.securityGroups.map((sg) => sg.securityGroupId);
            }
            return void 0;
          }
        });
        if (props.userData) {
          this.userData = props.userData;
        }
        const userDataToken = core_1.Lazy.string({
          produce: () => {
            if (this.userData) {
              return core_1.Fn.base64(this.userData.render());
            }
            return void 0;
          }
        });
        const imageConfig = (_e = props.machineImage) === null || _e === void 0 ? void 0 : _e.getImage(this);
        if (imageConfig) {
          this.osType = imageConfig.osType;
        }
        let marketOptions = void 0;
        if (props === null || props === void 0 ? void 0 : props.spotOptions) {
          marketOptions = {
            marketType: "spot",
            spotOptions: {
              blockDurationMinutes: spotDuration !== void 0 ? spotDuration * 60 : void 0,
              instanceInterruptionBehavior: props.spotOptions.interruptionBehavior,
              maxPrice: (_f = props.spotOptions.maxPrice) === null || _f === void 0 ? void 0 : _f.toString(),
              spotInstanceType: props.spotOptions.requestType,
              validUntil: (_g = props.spotOptions.validUntil) === null || _g === void 0 ? void 0 : _g.date.toUTCString()
            }
          };
          if (Object.keys(marketOptions.spotOptions).filter((k) => marketOptions.spotOptions[k]).length == 0) {
            marketOptions.spotOptions = void 0;
          }
        }
        this.tags = new core_1.TagManager(core_1.TagType.KEY_VALUE, "AWS::EC2::LaunchTemplate");
        const tagsToken = core_1.Lazy.any({
          produce: () => {
            if (this.tags.hasTags()) {
              const renderedTags = this.tags.renderTags();
              const lowerCaseRenderedTags = renderedTags.map((tag) => {
                return {
                  key: tag.Key,
                  value: tag.Value
                };
              });
              return [
                {
                  resourceType: "instance",
                  tags: lowerCaseRenderedTags
                },
                {
                  resourceType: "volume",
                  tags: lowerCaseRenderedTags
                }
              ];
            }
            return void 0;
          }
        });
        const resource = new ec2_generated_1.CfnLaunchTemplate(this, "Resource", {
          launchTemplateName: props === null || props === void 0 ? void 0 : props.launchTemplateName,
          launchTemplateData: {
            blockDeviceMappings: (props === null || props === void 0 ? void 0 : props.blockDevices) !== void 0 ? ebs_util_1.launchTemplateBlockDeviceMappings(this, props.blockDevices) : void 0,
            creditSpecification: (props === null || props === void 0 ? void 0 : props.cpuCredits) !== void 0 ? {
              cpuCredits: props.cpuCredits
            } : void 0,
            disableApiTermination: props === null || props === void 0 ? void 0 : props.disableApiTermination,
            ebsOptimized: props === null || props === void 0 ? void 0 : props.ebsOptimized,
            enclaveOptions: (props === null || props === void 0 ? void 0 : props.nitroEnclaveEnabled) !== void 0 ? {
              enabled: props.nitroEnclaveEnabled
            } : void 0,
            hibernationOptions: (props === null || props === void 0 ? void 0 : props.hibernationConfigured) !== void 0 ? {
              configured: props.hibernationConfigured
            } : void 0,
            iamInstanceProfile: iamProfile !== void 0 ? {
              arn: iamProfile.getAtt("Arn").toString()
            } : void 0,
            imageId: imageConfig === null || imageConfig === void 0 ? void 0 : imageConfig.imageId,
            instanceType: (_h = props === null || props === void 0 ? void 0 : props.instanceType) === null || _h === void 0 ? void 0 : _h.toString(),
            instanceInitiatedShutdownBehavior: props === null || props === void 0 ? void 0 : props.instanceInitiatedShutdownBehavior,
            instanceMarketOptions: marketOptions,
            keyName: props === null || props === void 0 ? void 0 : props.keyName,
            monitoring: (props === null || props === void 0 ? void 0 : props.detailedMonitoring) !== void 0 ? {
              enabled: props.detailedMonitoring
            } : void 0,
            securityGroupIds: securityGroupsToken,
            tagSpecifications: tagsToken,
            userData: userDataToken
          }
        });
        core_1.Tags.of(this).add(NAME_TAG, this.node.path);
        this.defaultVersionNumber = resource.attrDefaultVersionNumber;
        this.latestVersionNumber = resource.attrLatestVersionNumber;
        this.launchTemplateId = resource.ref;
        this.versionNumber = core_1.Token.asString(resource.getAtt("LatestVersionNumber"));
        if (props.requireImdsv2) {
          core_1.Aspects.of(this).add(new _1.LaunchTemplateRequireImdsv2Aspect());
        }
      }
      static fromLaunchTemplateAttributes(scope, id, attrs) {
        const haveId = Boolean(attrs.launchTemplateId);
        const haveName = Boolean(attrs.launchTemplateName);
        if (haveId == haveName) {
          throw new Error("LaunchTemplate.fromLaunchTemplateAttributes() requires exactly one of launchTemplateId or launchTemplateName be provided.");
        }
        class Import extends core_1.Resource {
          constructor() {
            var _c;
            super(...arguments);
            this.versionNumber = (_c = attrs.versionNumber) !== null && _c !== void 0 ? _c : LaunchTemplateSpecialVersions.DEFAULT_VERSION;
            this.launchTemplateId = attrs.launchTemplateId;
            this.launchTemplateName = attrs.launchTemplateName;
          }
        }
        return new Import(scope, id);
      }
      get connections() {
        if (!this._connections) {
          throw new Error("LaunchTemplate can only be used as IConnectable if a securityGroup is provided when constructing it.");
        }
        return this._connections;
      }
      get grantPrincipal() {
        if (!this._grantPrincipal) {
          throw new Error("LaunchTemplate can only be used as IGrantable if a role is provided when constructing it.");
        }
        return this._grantPrincipal;
      }
    };
    exports2.LaunchTemplate = LaunchTemplate;
    _b = JSII_RTTI_SYMBOL_1;
    LaunchTemplate[_b] = { fqn: "@aws-cdk/aws-ec2.LaunchTemplate", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/aspects/require-imdsv2-aspect.js
var require_require_imdsv2_aspect = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/aspects/require-imdsv2-aspect.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LaunchTemplateRequireImdsv2Aspect = exports2.InstanceRequireImdsv2Aspect = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var ec2_generated_1 = require_ec2_generated();
    var instance_1 = require_instance();
    var launch_template_1 = require_launch_template();
    var RequireImdsv2Aspect = class {
      constructor(props) {
        var _c;
        this.suppressWarnings = (_c = props === null || props === void 0 ? void 0 : props.suppressWarnings) !== null && _c !== void 0 ? _c : false;
      }
      warn(node, message) {
        if (this.suppressWarnings !== true) {
          cdk.Annotations.of(node).addWarning(`${RequireImdsv2Aspect.name} failed on node ${node.node.id}: ${message}`);
        }
      }
    };
    var InstanceRequireImdsv2Aspect = class extends RequireImdsv2Aspect {
      constructor(props) {
        var _c;
        super(props);
        this.suppressLaunchTemplateWarning = (_c = props === null || props === void 0 ? void 0 : props.suppressLaunchTemplateWarning) !== null && _c !== void 0 ? _c : false;
      }
      visit(node) {
        if (!(node instanceof instance_1.Instance)) {
          return;
        }
        if (node.instance.launchTemplate !== void 0) {
          this.warn(node, "Cannot toggle IMDSv1 because this Instance is associated with an existing Launch Template.");
          return;
        }
        const name = `${node.node.id}LaunchTemplate`;
        const launchTemplate = new ec2_generated_1.CfnLaunchTemplate(node, "LaunchTemplate", {
          launchTemplateData: {
            metadataOptions: {
              httpTokens: "required"
            }
          },
          launchTemplateName: name
        });
        node.instance.launchTemplate = {
          launchTemplateName: name,
          version: launchTemplate.getAtt("LatestVersionNumber").toString()
        };
      }
      warn(node, message) {
        if (this.suppressLaunchTemplateWarning !== true) {
          super.warn(node, message);
        }
      }
    };
    exports2.InstanceRequireImdsv2Aspect = InstanceRequireImdsv2Aspect;
    _a = JSII_RTTI_SYMBOL_1;
    InstanceRequireImdsv2Aspect[_a] = { fqn: "@aws-cdk/aws-ec2.InstanceRequireImdsv2Aspect", version: "1.132.0" };
    var LaunchTemplateRequireImdsv2Aspect = class extends RequireImdsv2Aspect {
      constructor(props) {
        super(props);
      }
      visit(node) {
        if (!(node instanceof launch_template_1.LaunchTemplate)) {
          return;
        }
        const launchTemplate = node.node.tryFindChild("Resource");
        const data = launchTemplate.launchTemplateData;
        if (cdk.isResolvableObject(data)) {
          this.warn(node, "LaunchTemplateData is a CDK token.");
          return;
        }
        const metadataOptions = data.metadataOptions;
        if (cdk.isResolvableObject(metadataOptions)) {
          this.warn(node, "LaunchTemplateData.MetadataOptions is a CDK token.");
          return;
        }
        const newData = __spreadProps(__spreadValues({}, data), {
          metadataOptions: __spreadProps(__spreadValues({}, metadataOptions), {
            httpTokens: "required"
          })
        });
        launchTemplate.launchTemplateData = newData;
      }
    };
    exports2.LaunchTemplateRequireImdsv2Aspect = LaunchTemplateRequireImdsv2Aspect;
    _b = JSII_RTTI_SYMBOL_1;
    LaunchTemplateRequireImdsv2Aspect[_b] = { fqn: "@aws-cdk/aws-ec2.LaunchTemplateRequireImdsv2Aspect", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/aspects/index.js
var require_aspects = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/aspects/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_require_imdsv2_aspect(), exports2);
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/bastion-host.js
var require_bastion_host = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/bastion-host.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BastionHostLinux = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var aws_iam_1 = require_lib9();
    var core_1 = require_lib8();
    var _1 = require_lib21();
    var instance_1 = require_instance();
    var machine_image_1 = require_machine_image();
    var port_1 = require_port();
    var BastionHostLinux = class extends core_1.Resource {
      constructor(scope, id, props) {
        var _b, _c, _d, _e, _f;
        super(scope, id);
        this.stack = core_1.Stack.of(scope);
        const instanceType = (_b = props.instanceType) !== null && _b !== void 0 ? _b : _1.InstanceType.of(_1.InstanceClass.T3, _1.InstanceSize.NANO);
        this.instance = new instance_1.Instance(this, "Resource", {
          vpc: props.vpc,
          availabilityZone: props.availabilityZone,
          securityGroup: props.securityGroup,
          instanceName: (_c = props.instanceName) !== null && _c !== void 0 ? _c : "BastionHost",
          instanceType,
          machineImage: (_d = props.machineImage) !== null && _d !== void 0 ? _d : machine_image_1.MachineImage.latestAmazonLinux({
            generation: _1.AmazonLinuxGeneration.AMAZON_LINUX_2,
            cpuType: this.toAmazonLinuxCpuType(instanceType.architecture)
          }),
          vpcSubnets: (_e = props.subnetSelection) !== null && _e !== void 0 ? _e : {},
          blockDevices: (_f = props.blockDevices) !== null && _f !== void 0 ? _f : void 0
        });
        this.instance.addToRolePolicy(new aws_iam_1.PolicyStatement({
          actions: [
            "ssmmessages:*",
            "ssm:UpdateInstanceInformation",
            "ec2messages:*"
          ],
          resources: ["*"]
        }));
        this.connections = this.instance.connections;
        this.role = this.instance.role;
        this.grantPrincipal = this.instance.role;
        this.instanceId = this.instance.instanceId;
        this.instancePrivateIp = this.instance.instancePrivateIp;
        this.instanceAvailabilityZone = this.instance.instanceAvailabilityZone;
        this.instancePrivateDnsName = this.instance.instancePrivateDnsName;
        this.instancePublicIp = this.instance.instancePublicIp;
        this.instancePublicDnsName = this.instance.instancePublicDnsName;
        new core_1.CfnOutput(this, "BastionHostId", {
          description: "Instance ID of the bastion host. Use this to connect via SSM Session Manager",
          value: this.instanceId
        });
      }
      toAmazonLinuxCpuType(architecture) {
        if (architecture === _1.InstanceArchitecture.ARM_64) {
          return machine_image_1.AmazonLinuxCpuType.ARM_64;
        } else if (architecture === _1.InstanceArchitecture.X86_64) {
          return machine_image_1.AmazonLinuxCpuType.X86_64;
        }
        throw new Error(`Unsupported instance architecture '${architecture}'`);
      }
      allowSshAccessFrom(...peer) {
        peer.forEach((p) => {
          this.connections.allowFrom(p, port_1.Port.tcp(22), "SSH access");
        });
      }
    };
    exports2.BastionHostLinux = BastionHostLinux;
    _a = JSII_RTTI_SYMBOL_1;
    BastionHostLinux[_a] = { fqn: "@aws-cdk/aws-ec2.BastionHostLinux", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/private/cfn-init-internal.js
var require_cfn_init_internal = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/private/cfn-init-internal.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InitPlatform = exports2.InitElementType = void 0;
    var InitElementType;
    (function(InitElementType2) {
      InitElementType2["PACKAGE"] = "PACKAGE";
      InitElementType2["GROUP"] = "GROUP";
      InitElementType2["USER"] = "USER";
      InitElementType2["SOURCE"] = "SOURCE";
      InitElementType2["FILE"] = "FILE";
      InitElementType2["COMMAND"] = "COMMAND";
      InitElementType2["SERVICE"] = "SERVICE";
    })(InitElementType = exports2.InitElementType || (exports2.InitElementType = {}));
    var InitPlatform;
    (function(InitPlatform2) {
      InitPlatform2["WINDOWS"] = "WINDOWS";
      InitPlatform2["LINUX"] = "LINUX";
    })(InitPlatform = exports2.InitPlatform || (exports2.InitPlatform = {}));
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/cfn-init.js
var require_cfn_init = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/cfn-init.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InitConfig = exports2.CloudFormationInit = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var crypto = require("crypto");
    var iam = require_lib9();
    var core_1 = require_lib8();
    var machine_image_1 = require_machine_image();
    var cfn_init_internal_1 = require_cfn_init_internal();
    var CloudFormationInit = class {
      constructor(configSets, configs) {
        this._configSets = {};
        this._configs = {};
        Object.assign(this._configSets, configSets);
        Object.assign(this._configs, configs);
      }
      static fromElements(...elements) {
        return CloudFormationInit.fromConfig(new InitConfig(elements));
      }
      static fromConfig(config) {
        return CloudFormationInit.fromConfigSets({
          configSets: {
            default: ["config"]
          },
          configs: { config }
        });
      }
      static fromConfigSets(props) {
        return new CloudFormationInit(props.configSets, props.configs);
      }
      addConfig(configName, config) {
        if (this._configs[configName]) {
          throw new Error(`CloudFormationInit already contains a config named '${configName}'`);
        }
        this._configs[configName] = config;
      }
      addConfigSet(configSetName, configNames = []) {
        if (this._configSets[configSetName]) {
          throw new Error(`CloudFormationInit already contains a configSet named '${configSetName}'`);
        }
        const unk = configNames.filter((c) => !this._configs[c]);
        if (unk.length > 0) {
          throw new Error(`Unknown configs referenced in definition of '${configSetName}': ${unk}`);
        }
        this._configSets[configSetName] = [...configNames];
      }
      attach(attachedResource, attachOptions) {
        var _c, _d, _e, _f, _g;
        if (attachOptions.platform === machine_image_1.OperatingSystemType.UNKNOWN) {
          throw new Error("Cannot attach CloudFormationInit to an unknown OS type");
        }
        const CFN_INIT_METADATA_KEY = "AWS::CloudFormation::Init";
        if (attachedResource.getMetadata(CFN_INIT_METADATA_KEY) !== void 0) {
          throw new Error(`Cannot bind CfnInit: resource '${attachedResource.node.path}' already has '${CFN_INIT_METADATA_KEY}' attached`);
        }
        const bindResult = this.bind(attachedResource.stack, attachOptions);
        attachedResource.addMetadata(CFN_INIT_METADATA_KEY, bindResult.configData);
        const resolvedConfig = attachedResource.stack.resolve(bindResult.configData);
        const fingerprintInput = { config: resolvedConfig, assetHash: bindResult.assetHash };
        const fingerprint = contentHash(JSON.stringify(fingerprintInput)).substr(0, 16);
        attachOptions.instanceRole.addToPrincipalPolicy(new iam.PolicyStatement({
          actions: ["cloudformation:DescribeStackResource", "cloudformation:SignalResource"],
          resources: [core_1.Aws.STACK_ID]
        }));
        if (bindResult.authData) {
          attachedResource.addMetadata("AWS::CloudFormation::Authentication", bindResult.authData);
        }
        let resourceLocator = `--region ${core_1.Aws.REGION} --stack ${core_1.Aws.STACK_NAME} --resource ${attachedResource.logicalId}`;
        const signalResource = (_d = (_c = attachOptions.signalResource) === null || _c === void 0 ? void 0 : _c.logicalId) !== null && _d !== void 0 ? _d : attachedResource.logicalId;
        let notifyResourceLocator = `--region ${core_1.Aws.REGION} --stack ${core_1.Aws.STACK_NAME} --resource ${signalResource}`;
        if (attachOptions.includeUrl) {
          resourceLocator = `${resourceLocator} --url https://cloudformation.${core_1.Aws.REGION}.${core_1.Aws.URL_SUFFIX}`;
          notifyResourceLocator = `${notifyResourceLocator} --url https://cloudformation.${core_1.Aws.REGION}.${core_1.Aws.URL_SUFFIX}`;
        }
        if (attachOptions.includeRole) {
          resourceLocator = `${resourceLocator} --role ${attachOptions.instanceRole.roleName}`;
          notifyResourceLocator = `${notifyResourceLocator} --role ${attachOptions.instanceRole.roleName}`;
        }
        const configSets = ((_e = attachOptions.configSets) !== null && _e !== void 0 ? _e : ["default"]).join(",");
        const printLog = (_f = attachOptions.printLog) !== null && _f !== void 0 ? _f : true;
        if ((_g = attachOptions.embedFingerprint) !== null && _g !== void 0 ? _g : true) {
          attachOptions.userData.addCommands(`# fingerprint: ${fingerprint}`);
        }
        if (attachOptions.platform === machine_image_1.OperatingSystemType.WINDOWS) {
          const errCode = attachOptions.ignoreFailures ? "0" : "$LASTEXITCODE";
          attachOptions.userData.addCommands(...[
            `cfn-init.exe -v ${resourceLocator} -c ${configSets}`,
            `cfn-signal.exe -e ${errCode} ${notifyResourceLocator}`,
            ...printLog ? ["type C:\\cfn\\log\\cfn-init.log"] : []
          ]);
        } else {
          const errCode = attachOptions.ignoreFailures ? "0" : "$?";
          attachOptions.userData.addCommands(...[
            "(",
            "  set +e",
            `  /opt/aws/bin/cfn-init -v ${resourceLocator} -c ${configSets}`,
            `  /opt/aws/bin/cfn-signal -e ${errCode} ${notifyResourceLocator}`,
            ...printLog ? ["  cat /var/log/cfn-init.log >&2"] : [],
            ")"
          ]);
        }
      }
      bind(scope, options) {
        const nonEmptyConfigs = mapValues(this._configs, (c) => c.isEmpty() ? void 0 : c);
        const configNameToBindResult = mapValues(nonEmptyConfigs, (c) => c._bind(scope, options));
        return {
          configData: __spreadValues({
            configSets: mapValues(this._configSets, (configNames) => configNames.filter((name) => nonEmptyConfigs[name] !== void 0))
          }, mapValues(configNameToBindResult, (c) => c.config)),
          authData: Object.values(configNameToBindResult).map((c) => c.authentication).reduce(deepMerge, void 0),
          assetHash: combineAssetHashesOrUndefined(Object.values(configNameToBindResult).map((c) => c.assetHash))
        };
      }
    };
    exports2.CloudFormationInit = CloudFormationInit;
    _a = JSII_RTTI_SYMBOL_1;
    CloudFormationInit[_a] = { fqn: "@aws-cdk/aws-ec2.CloudFormationInit", version: "1.132.0" };
    var InitConfig = class {
      constructor(elements) {
        this.elements = new Array();
        this.add(...elements);
      }
      isEmpty() {
        return this.elements.length === 0;
      }
      add(...elements) {
        this.elements.push(...elements);
      }
      _bind(scope, options) {
        const bindOptions = {
          instanceRole: options.instanceRole,
          platform: this.initPlatformFromOSType(options.platform),
          scope
        };
        const packageConfig = this.bindForType(cfn_init_internal_1.InitElementType.PACKAGE, bindOptions);
        const groupsConfig = this.bindForType(cfn_init_internal_1.InitElementType.GROUP, bindOptions);
        const usersConfig = this.bindForType(cfn_init_internal_1.InitElementType.USER, bindOptions);
        const sourcesConfig = this.bindForType(cfn_init_internal_1.InitElementType.SOURCE, bindOptions);
        const filesConfig = this.bindForType(cfn_init_internal_1.InitElementType.FILE, bindOptions);
        const commandsConfig = this.bindForType(cfn_init_internal_1.InitElementType.COMMAND, bindOptions);
        const servicesConfig = this.bindForType(cfn_init_internal_1.InitElementType.SERVICE, bindOptions);
        const allConfig = [packageConfig, groupsConfig, usersConfig, sourcesConfig, filesConfig, commandsConfig, servicesConfig];
        const authentication = allConfig.map((c) => c === null || c === void 0 ? void 0 : c.authentication).reduce(deepMerge, void 0);
        const assetHash = combineAssetHashesOrUndefined(allConfig.map((c) => c === null || c === void 0 ? void 0 : c.assetHash));
        return {
          config: {
            packages: packageConfig === null || packageConfig === void 0 ? void 0 : packageConfig.config,
            groups: groupsConfig === null || groupsConfig === void 0 ? void 0 : groupsConfig.config,
            users: usersConfig === null || usersConfig === void 0 ? void 0 : usersConfig.config,
            sources: sourcesConfig === null || sourcesConfig === void 0 ? void 0 : sourcesConfig.config,
            files: filesConfig === null || filesConfig === void 0 ? void 0 : filesConfig.config,
            commands: commandsConfig === null || commandsConfig === void 0 ? void 0 : commandsConfig.config,
            services: servicesConfig === null || servicesConfig === void 0 ? void 0 : servicesConfig.config
          },
          authentication,
          assetHash
        };
      }
      bindForType(elementType, renderOptions) {
        var _c;
        const elements = this.elements.filter((elem) => elem.elementType === elementType);
        if (elements.length === 0) {
          return void 0;
        }
        const bindResults = elements.map((e, index) => e._bind(__spreadValues({ index }, renderOptions)));
        return {
          config: (_c = bindResults.map((r) => r.config).reduce(deepMerge, void 0)) !== null && _c !== void 0 ? _c : {},
          authentication: bindResults.map((r) => r.authentication).reduce(deepMerge, void 0),
          assetHash: combineAssetHashesOrUndefined(bindResults.map((r) => r.assetHash))
        };
      }
      initPlatformFromOSType(osType) {
        switch (osType) {
          case machine_image_1.OperatingSystemType.LINUX: {
            return cfn_init_internal_1.InitPlatform.LINUX;
          }
          case machine_image_1.OperatingSystemType.WINDOWS: {
            return cfn_init_internal_1.InitPlatform.WINDOWS;
          }
          default: {
            throw new Error("Cannot attach CloudFormationInit to an unknown OS type");
          }
        }
      }
    };
    exports2.InitConfig = InitConfig;
    _b = JSII_RTTI_SYMBOL_1;
    InitConfig[_b] = { fqn: "@aws-cdk/aws-ec2.InitConfig", version: "1.132.0" };
    function deepMerge(target, src) {
      var _c, _d;
      if (target == null) {
        return src;
      }
      if (src == null) {
        return target;
      }
      for (const [key, value] of Object.entries(src)) {
        if (Array.isArray(value)) {
          if (target[key] && !Array.isArray(target[key])) {
            throw new Error(`Trying to merge array [${value}] into a non-array '${target[key]}'`);
          }
          target[key] = Array.from(new Set([
            ...(_c = target[key]) !== null && _c !== void 0 ? _c : [],
            ...value
          ]));
          continue;
        }
        if (typeof value === "object" && value) {
          target[key] = deepMerge((_d = target[key]) !== null && _d !== void 0 ? _d : {}, value);
          continue;
        }
        if (value !== void 0) {
          target[key] = value;
        }
      }
      return target;
    }
    function mapValues(xs, fn) {
      const ret = {};
      for (const [k, v] of Object.entries(xs)) {
        const mapped = fn(v);
        if (mapped !== void 0) {
          ret[k] = mapped;
        }
      }
      return ret;
    }
    function combineAssetHashesOrUndefined(hashes) {
      const hashArray = hashes.filter((x) => x !== void 0);
      return hashArray.length > 0 ? hashArray.join("") : void 0;
    }
    function contentHash(content) {
      return crypto.createHash("sha256").update(content).digest("hex");
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/cfn-init-elements.js
var require_cfn_init_elements = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/cfn-init-elements.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    var _d;
    var _e;
    var _f;
    var _g;
    var _h;
    var _j;
    var _k;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InitSource = exports2.InitService = exports2.InitPackage = exports2.InitUser = exports2.InitGroup = exports2.InitFile = exports2.InitCommand = exports2.InitCommandWaitDuration = exports2.InitElement = exports2.InitServiceRestartHandle = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var fs = require("fs");
    var s3_assets = require_lib18();
    var core_1 = require_lib8();
    var cfn_init_internal_1 = require_cfn_init_internal();
    var InitServiceRestartHandle = class {
      constructor() {
        this.commands = new Array();
        this.files = new Array();
        this.sources = new Array();
        this.packages = {};
      }
      _addCommand(key) {
        return this.commands.push(key);
      }
      _addFile(key) {
        return this.files.push(key);
      }
      _addSource(key) {
        return this.sources.push(key);
      }
      _addPackage(packageType, key) {
        if (!this.packages[packageType]) {
          this.packages[packageType] = [];
        }
        this.packages[packageType].push(key);
      }
      _renderRestartHandles() {
        const nonEmpty = (x) => x.length > 0 ? x : void 0;
        return {
          commands: nonEmpty(this.commands),
          files: nonEmpty(this.files),
          packages: Object.keys(this.packages).length > 0 ? this.packages : void 0,
          sources: nonEmpty(this.sources)
        };
      }
    };
    exports2.InitServiceRestartHandle = InitServiceRestartHandle;
    _a = JSII_RTTI_SYMBOL_1;
    InitServiceRestartHandle[_a] = { fqn: "@aws-cdk/aws-ec2.InitServiceRestartHandle", version: "1.132.0" };
    var InitElement = class {
    };
    exports2.InitElement = InitElement;
    _b = JSII_RTTI_SYMBOL_1;
    InitElement[_b] = { fqn: "@aws-cdk/aws-ec2.InitElement", version: "1.132.0" };
    var InitCommandWaitDuration = class {
      static of(duration) {
        return new class extends InitCommandWaitDuration {
          _render() {
            return duration.toSeconds();
          }
        }();
      }
      static none() {
        return InitCommandWaitDuration.of(core_1.Duration.seconds(0));
      }
      static forever() {
        return new class extends InitCommandWaitDuration {
          _render() {
            return "forever";
          }
        }();
      }
    };
    exports2.InitCommandWaitDuration = InitCommandWaitDuration;
    _c = JSII_RTTI_SYMBOL_1;
    InitCommandWaitDuration[_c] = { fqn: "@aws-cdk/aws-ec2.InitCommandWaitDuration", version: "1.132.0" };
    var InitCommand = class extends InitElement {
      constructor(command, options) {
        super();
        this.command = command;
        this.options = options;
        this.elementType = cfn_init_internal_1.InitElementType.COMMAND.toString();
      }
      static shellCommand(shellCommand, options = {}) {
        return new InitCommand(shellCommand, options);
      }
      static argvCommand(argv, options = {}) {
        if (argv.length === 0) {
          throw new Error("Cannot define argvCommand with an empty arguments");
        }
        return new InitCommand(argv, options);
      }
      _bind(options) {
        var _l, _m;
        const commandKey = this.options.key || `${options.index}`.padStart(3, "0");
        if (options.platform !== cfn_init_internal_1.InitPlatform.WINDOWS && this.options.waitAfterCompletion !== void 0) {
          throw new Error(`Command '${this.command}': 'waitAfterCompletion' is only valid for Windows systems.`);
        }
        for (const handle of (_l = this.options.serviceRestartHandles) !== null && _l !== void 0 ? _l : []) {
          handle._addCommand(commandKey);
        }
        return {
          config: {
            [commandKey]: {
              command: this.command,
              env: this.options.env,
              cwd: this.options.cwd,
              test: this.options.testCmd,
              ignoreErrors: this.options.ignoreErrors,
              waitAfterCompletion: (_m = this.options.waitAfterCompletion) === null || _m === void 0 ? void 0 : _m._render()
            }
          }
        };
      }
    };
    exports2.InitCommand = InitCommand;
    _d = JSII_RTTI_SYMBOL_1;
    InitCommand[_d] = { fqn: "@aws-cdk/aws-ec2.InitCommand", version: "1.132.0" };
    var InitFile = class extends InitElement {
      constructor(fileName, options) {
        super();
        this.fileName = fileName;
        this.options = options;
        this.elementType = cfn_init_internal_1.InitElementType.FILE.toString();
      }
      static fromString(fileName, content, options = {}) {
        if (!content) {
          throw new Error(`InitFile ${fileName}: cannot create empty file. Please supply at least one character of content.`);
        }
        return new class extends InitFile {
          _doBind(bindOptions) {
            return {
              config: this._standardConfig(options, bindOptions.platform, {
                content,
                encoding: this.options.base64Encoded ? "base64" : "plain"
              })
            };
          }
        }(fileName, options);
      }
      static symlink(fileName, target, options = {}) {
        const _a2 = options, { mode } = _a2, otherOptions = __objRest(_a2, ["mode"]);
        if (mode && mode.slice(0, 3) !== "120") {
          throw new Error("File mode for symlinks must begin with 120XXX");
        }
        return InitFile.fromString(fileName, target, __spreadValues({ mode: mode || "120644" }, otherOptions));
      }
      static fromObject(fileName, obj, options = {}) {
        return new class extends InitFile {
          _doBind(bindOptions) {
            return {
              config: this._standardConfig(options, bindOptions.platform, {
                content: obj
              })
            };
          }
        }(fileName, options);
      }
      static fromFileInline(targetFileName, sourceFileName, options = {}) {
        const encoding = options.base64Encoded ? "base64" : "utf8";
        const fileContents = fs.readFileSync(sourceFileName).toString(encoding);
        return InitFile.fromString(targetFileName, fileContents, options);
      }
      static fromUrl(fileName, url, options = {}) {
        return new class extends InitFile {
          _doBind(bindOptions) {
            return {
              config: this._standardConfig(options, bindOptions.platform, {
                source: url
              })
            };
          }
        }(fileName, options);
      }
      static fromS3Object(fileName, bucket, key, options = {}) {
        return new class extends InitFile {
          _doBind(bindOptions) {
            bucket.grantRead(bindOptions.instanceRole, key);
            return {
              config: this._standardConfig(options, bindOptions.platform, {
                source: bucket.urlForObject(key)
              }),
              authentication: standardS3Auth(bindOptions.instanceRole, bucket.bucketName)
            };
          }
        }(fileName, options);
      }
      static fromAsset(targetFileName, path, options = {}) {
        return new class extends InitFile {
          _doBind(bindOptions) {
            const asset = new s3_assets.Asset(bindOptions.scope, `${targetFileName}Asset`, __spreadValues({
              path
            }, options));
            asset.grantRead(bindOptions.instanceRole);
            return {
              config: this._standardConfig(options, bindOptions.platform, {
                source: asset.httpUrl
              }),
              authentication: standardS3Auth(bindOptions.instanceRole, asset.s3BucketName),
              assetHash: asset.assetHash
            };
          }
        }(targetFileName, options);
      }
      static fromExistingAsset(targetFileName, asset, options = {}) {
        return new class extends InitFile {
          _doBind(bindOptions) {
            asset.grantRead(bindOptions.instanceRole);
            return {
              config: this._standardConfig(options, bindOptions.platform, {
                source: asset.httpUrl
              }),
              authentication: standardS3Auth(bindOptions.instanceRole, asset.s3BucketName),
              assetHash: asset.assetHash
            };
          }
        }(targetFileName, options);
      }
      _bind(bindOptions) {
        var _l;
        for (const handle of (_l = this.options.serviceRestartHandles) !== null && _l !== void 0 ? _l : []) {
          handle._addFile(this.fileName);
        }
        return this._doBind(bindOptions);
      }
      _standardConfig(fileOptions, platform, contentVars) {
        if (platform === cfn_init_internal_1.InitPlatform.WINDOWS) {
          if (fileOptions.group || fileOptions.owner || fileOptions.mode) {
            throw new Error("Owner, group, and mode options not supported for Windows.");
          }
          return {
            [this.fileName]: __spreadValues({}, contentVars)
          };
        }
        return {
          [this.fileName]: __spreadProps(__spreadValues({}, contentVars), {
            mode: fileOptions.mode || "000644",
            owner: fileOptions.owner || "root",
            group: fileOptions.group || "root"
          })
        };
      }
    };
    exports2.InitFile = InitFile;
    _e = JSII_RTTI_SYMBOL_1;
    InitFile[_e] = { fqn: "@aws-cdk/aws-ec2.InitFile", version: "1.132.0" };
    var InitGroup = class extends InitElement {
      constructor(groupName, groupId) {
        super();
        this.groupName = groupName;
        this.groupId = groupId;
        this.elementType = cfn_init_internal_1.InitElementType.GROUP.toString();
      }
      static fromName(groupName, groupId) {
        return new InitGroup(groupName, groupId);
      }
      _bind(options) {
        if (options.platform === cfn_init_internal_1.InitPlatform.WINDOWS) {
          throw new Error("Init groups are not supported on Windows");
        }
        return {
          config: {
            [this.groupName]: this.groupId !== void 0 ? { gid: this.groupId } : {}
          }
        };
      }
    };
    exports2.InitGroup = InitGroup;
    _f = JSII_RTTI_SYMBOL_1;
    InitGroup[_f] = { fqn: "@aws-cdk/aws-ec2.InitGroup", version: "1.132.0" };
    var InitUser = class extends InitElement {
      constructor(userName, userOptions) {
        super();
        this.userName = userName;
        this.userOptions = userOptions;
        this.elementType = cfn_init_internal_1.InitElementType.USER.toString();
      }
      static fromName(userName, options = {}) {
        return new InitUser(userName, options);
      }
      _bind(options) {
        if (options.platform === cfn_init_internal_1.InitPlatform.WINDOWS) {
          throw new Error("Init users are not supported on Windows");
        }
        return {
          config: {
            [this.userName]: {
              uid: this.userOptions.userId,
              groups: this.userOptions.groups,
              homeDir: this.userOptions.homeDir
            }
          }
        };
      }
    };
    exports2.InitUser = InitUser;
    _g = JSII_RTTI_SYMBOL_1;
    InitUser[_g] = { fqn: "@aws-cdk/aws-ec2.InitUser", version: "1.132.0" };
    var InitPackage = class extends InitElement {
      constructor(type, versions, packageName, serviceHandles) {
        super();
        this.type = type;
        this.versions = versions;
        this.packageName = packageName;
        this.serviceHandles = serviceHandles;
        this.elementType = cfn_init_internal_1.InitElementType.PACKAGE.toString();
      }
      static rpm(location, options = {}) {
        return new InitPackage("rpm", [location], options.key, options.serviceRestartHandles);
      }
      static yum(packageName, options = {}) {
        var _l;
        return new InitPackage("yum", (_l = options.version) !== null && _l !== void 0 ? _l : [], packageName, options.serviceRestartHandles);
      }
      static rubyGem(gemName, options = {}) {
        var _l;
        return new InitPackage("rubygems", (_l = options.version) !== null && _l !== void 0 ? _l : [], gemName, options.serviceRestartHandles);
      }
      static python(packageName, options = {}) {
        var _l;
        return new InitPackage("python", (_l = options.version) !== null && _l !== void 0 ? _l : [], packageName, options.serviceRestartHandles);
      }
      static apt(packageName, options = {}) {
        var _l;
        return new InitPackage("apt", (_l = options.version) !== null && _l !== void 0 ? _l : [], packageName, options.serviceRestartHandles);
      }
      static msi(location, options = {}) {
        return new class extends InitPackage {
          renderPackageVersions() {
            return location;
          }
        }("msi", [location], options.key, options.serviceRestartHandles);
      }
      _bind(options) {
        var _l;
        if (this.type === "msi" !== (options.platform === cfn_init_internal_1.InitPlatform.WINDOWS)) {
          if (this.type === "msi") {
            throw new Error("MSI installers are only supported on Windows systems.");
          } else {
            throw new Error("Windows only supports the MSI package type");
          }
        }
        if (!this.packageName && !["rpm", "msi"].includes(this.type)) {
          throw new Error("Package name must be specified for all package types besides RPM and MSI.");
        }
        const packageName = this.packageName || `${options.index}`.padStart(3, "0");
        for (const handle of (_l = this.serviceHandles) !== null && _l !== void 0 ? _l : []) {
          handle._addPackage(this.type, packageName);
        }
        return {
          config: {
            [this.type]: {
              [packageName]: this.renderPackageVersions()
            }
          }
        };
      }
      renderPackageVersions() {
        return this.versions;
      }
    };
    exports2.InitPackage = InitPackage;
    _h = JSII_RTTI_SYMBOL_1;
    InitPackage[_h] = { fqn: "@aws-cdk/aws-ec2.InitPackage", version: "1.132.0" };
    var InitService = class extends InitElement {
      constructor(serviceName, serviceOptions) {
        super();
        this.serviceName = serviceName;
        this.serviceOptions = serviceOptions;
        this.elementType = cfn_init_internal_1.InitElementType.SERVICE.toString();
      }
      static enable(serviceName, options = {}) {
        var _l;
        const _a2 = options, { enabled, ensureRunning } = _a2, otherOptions = __objRest(_a2, ["enabled", "ensureRunning"]);
        return new InitService(serviceName, __spreadValues({
          enabled: enabled !== null && enabled !== void 0 ? enabled : true,
          ensureRunning: (_l = ensureRunning !== null && ensureRunning !== void 0 ? ensureRunning : enabled) !== null && _l !== void 0 ? _l : true
        }, otherOptions));
      }
      static disable(serviceName) {
        return new InitService(serviceName, { enabled: false, ensureRunning: false });
      }
      _bind(options) {
        var _l;
        const serviceManager = options.platform === cfn_init_internal_1.InitPlatform.LINUX ? "sysvinit" : "windows";
        return {
          config: {
            [serviceManager]: {
              [this.serviceName]: __spreadValues({
                enabled: this.serviceOptions.enabled,
                ensureRunning: this.serviceOptions.ensureRunning
              }, (_l = this.serviceOptions.serviceRestartHandle) === null || _l === void 0 ? void 0 : _l._renderRestartHandles())
            }
          }
        };
      }
    };
    exports2.InitService = InitService;
    _j = JSII_RTTI_SYMBOL_1;
    InitService[_j] = { fqn: "@aws-cdk/aws-ec2.InitService", version: "1.132.0" };
    var InitSource = class extends InitElement {
      constructor(targetDirectory, serviceHandles) {
        super();
        this.targetDirectory = targetDirectory;
        this.serviceHandles = serviceHandles;
        this.elementType = cfn_init_internal_1.InitElementType.SOURCE.toString();
      }
      static fromUrl(targetDirectory, url, options = {}) {
        return new class extends InitSource {
          _doBind() {
            return {
              config: { [this.targetDirectory]: url }
            };
          }
        }(targetDirectory, options.serviceRestartHandles);
      }
      static fromGitHub(targetDirectory, owner, repo, refSpec, options = {}) {
        return InitSource.fromUrl(targetDirectory, `https://github.com/${owner}/${repo}/tarball/${refSpec !== null && refSpec !== void 0 ? refSpec : "master"}`, options);
      }
      static fromS3Object(targetDirectory, bucket, key, options = {}) {
        return new class extends InitSource {
          _doBind(bindOptions) {
            bucket.grantRead(bindOptions.instanceRole, key);
            return {
              config: { [this.targetDirectory]: bucket.urlForObject(key) },
              authentication: standardS3Auth(bindOptions.instanceRole, bucket.bucketName)
            };
          }
        }(targetDirectory, options.serviceRestartHandles);
      }
      static fromAsset(targetDirectory, path, options = {}) {
        return new class extends InitSource {
          _doBind(bindOptions) {
            const asset = new s3_assets.Asset(bindOptions.scope, `${targetDirectory}Asset`, __spreadValues({
              path
            }, bindOptions));
            asset.grantRead(bindOptions.instanceRole);
            return {
              config: { [this.targetDirectory]: asset.httpUrl },
              authentication: standardS3Auth(bindOptions.instanceRole, asset.s3BucketName),
              assetHash: asset.assetHash
            };
          }
        }(targetDirectory, options.serviceRestartHandles);
      }
      static fromExistingAsset(targetDirectory, asset, options = {}) {
        return new class extends InitSource {
          _doBind(bindOptions) {
            asset.grantRead(bindOptions.instanceRole);
            return {
              config: { [this.targetDirectory]: asset.httpUrl },
              authentication: standardS3Auth(bindOptions.instanceRole, asset.s3BucketName),
              assetHash: asset.assetHash
            };
          }
        }(targetDirectory, options.serviceRestartHandles);
      }
      _bind(options) {
        var _l;
        for (const handle of (_l = this.serviceHandles) !== null && _l !== void 0 ? _l : []) {
          handle._addSource(this.targetDirectory);
        }
        return this._doBind(options);
      }
    };
    exports2.InitSource = InitSource;
    _k = JSII_RTTI_SYMBOL_1;
    InitSource[_k] = { fqn: "@aws-cdk/aws-ec2.InitSource", version: "1.132.0" };
    function standardS3Auth(role, bucketName) {
      return {
        S3AccessCreds: {
          type: "S3",
          roleName: role.roleName,
          buckets: [bucketName]
        }
      };
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/instance-types.js
var require_instance_types = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/instance-types.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InstanceType = exports2.InstanceSize = exports2.InstanceArchitecture = exports2.InstanceClass = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var InstanceClass;
    (function(InstanceClass2) {
      InstanceClass2["STANDARD3"] = "m3";
      InstanceClass2["M3"] = "m3";
      InstanceClass2["STANDARD4"] = "m4";
      InstanceClass2["M4"] = "m4";
      InstanceClass2["STANDARD5"] = "m5";
      InstanceClass2["M5"] = "m5";
      InstanceClass2["STANDARD5_NVME_DRIVE"] = "m5d";
      InstanceClass2["M5D"] = "m5d";
      InstanceClass2["STANDARD5_AMD"] = "m5a";
      InstanceClass2["M5A"] = "m5a";
      InstanceClass2["STANDARD5_AMD_NVME_DRIVE"] = "m5ad";
      InstanceClass2["M5AD"] = "m5ad";
      InstanceClass2["MEMORY3"] = "r3";
      InstanceClass2["R3"] = "r3";
      InstanceClass2["MEMORY4"] = "r4";
      InstanceClass2["R4"] = "r4";
      InstanceClass2["MEMORY5"] = "r5";
      InstanceClass2["R5"] = "r5";
      InstanceClass2["MEMORY5_HIGH_PERFORMANCE"] = "r5n";
      InstanceClass2["R5N"] = "r5n";
      InstanceClass2["MEMORY5_NVME_DRIVE"] = "r5d";
      InstanceClass2["R5D"] = "r5d";
      InstanceClass2["MEMORY5_NVME_DRIVE_HIGH_PERFORMANCE"] = "r5dn";
      InstanceClass2["R5DN"] = "r5dn";
      InstanceClass2["MEMORY5_AMD"] = "r5a";
      InstanceClass2["R5A"] = "r5a";
      InstanceClass2["MEMORY5_AMD_NVME_DRIVE"] = "r5ad";
      InstanceClass2["R5AD"] = "r5ad";
      InstanceClass2["MEMORY5_EBS_OPTIMIZED"] = "r5b";
      InstanceClass2["R5B"] = "r5b";
      InstanceClass2["MEMORY6_GRAVITON"] = "r6g";
      InstanceClass2["R6G"] = "r6g";
      InstanceClass2["MEMORY6_GRAVITON2_NVME_DRIVE"] = "r6gd";
      InstanceClass2["R6GD"] = "r6gd";
      InstanceClass2["COMPUTE3"] = "c3";
      InstanceClass2["C3"] = "c3";
      InstanceClass2["COMPUTE4"] = "c4";
      InstanceClass2["C4"] = "c4";
      InstanceClass2["COMPUTE5"] = "c5";
      InstanceClass2["C5"] = "c5";
      InstanceClass2["COMPUTE6_INTEL"] = "c6i";
      InstanceClass2["C6I"] = "c6i";
      InstanceClass2["COMPUTE5_NVME_DRIVE"] = "c5d";
      InstanceClass2["C5D"] = "c5d";
      InstanceClass2["COMPUTE5_AMD"] = "c5a";
      InstanceClass2["C5A"] = "c5a";
      InstanceClass2["COMPUTE5_AMD_NVME_DRIVE"] = "c5ad";
      InstanceClass2["C5AD"] = "c5ad";
      InstanceClass2["COMPUTE5_HIGH_PERFORMANCE"] = "c5n";
      InstanceClass2["C5N"] = "c5n";
      InstanceClass2["COMPUTE6_GRAVITON2"] = "c6g";
      InstanceClass2["C6G"] = "c6g";
      InstanceClass2["COMPUTE6_GRAVITON2_NVME_DRIVE"] = "c6gd";
      InstanceClass2["C6GD"] = "c6gd";
      InstanceClass2["COMPUTE6_GRAVITON2_HIGH_NETWORK_BANDWITH"] = "c6gn";
      InstanceClass2["C6GN"] = "c6gn";
      InstanceClass2["STORAGE2"] = "d2";
      InstanceClass2["D2"] = "d2";
      InstanceClass2["STORAGE_COMPUTE_1"] = "h1";
      InstanceClass2["H1"] = "h1";
      InstanceClass2["IO3"] = "i3";
      InstanceClass2["I3"] = "i3";
      InstanceClass2["IO3_DENSE_NVME_DRIVE"] = "i3en";
      InstanceClass2["I3EN"] = "i3en";
      InstanceClass2["BURSTABLE2"] = "t2";
      InstanceClass2["T2"] = "t2";
      InstanceClass2["BURSTABLE3"] = "t3";
      InstanceClass2["T3"] = "t3";
      InstanceClass2["BURSTABLE3_AMD"] = "t3a";
      InstanceClass2["T3A"] = "t3a";
      InstanceClass2["BURSTABLE4_GRAVITON"] = "t4g";
      InstanceClass2["T4G"] = "t4g";
      InstanceClass2["MEMORY_INTENSIVE_1"] = "x1";
      InstanceClass2["X1"] = "x1";
      InstanceClass2["MEMORY_INTENSIVE_1_EXTENDED"] = "x1e";
      InstanceClass2["X1E"] = "x1e";
      InstanceClass2["MEMORY_INTENSIVE_2_GRAVITON2"] = "x2g";
      InstanceClass2["X2G"] = "x2g";
      InstanceClass2["MEMORY_INTENSIVE_2_GRAVITON2_NVME_DRIVE"] = "x2gd";
      InstanceClass2["X2GD"] = "x2gd";
      InstanceClass2["FPGA1"] = "f1";
      InstanceClass2["F1"] = "f1";
      InstanceClass2["GRAPHICS3"] = "g3";
      InstanceClass2["G3"] = "g3";
      InstanceClass2["GRAPHICS4_NVME_DRIVE_HIGH_PERFORMANCE"] = "g4dn";
      InstanceClass2["G4DN"] = "g4dn";
      InstanceClass2["PARALLEL2"] = "p2";
      InstanceClass2["P2"] = "p2";
      InstanceClass2["PARALLEL3"] = "p3";
      InstanceClass2["P3"] = "p3";
      InstanceClass2["PARALLEL4"] = "p4d";
      InstanceClass2["P4D"] = "p4d";
      InstanceClass2["ARM1"] = "a1";
      InstanceClass2["A1"] = "a1";
      InstanceClass2["STANDARD6_GRAVITON"] = "m6g";
      InstanceClass2["M6G"] = "m6g";
      InstanceClass2["STANDARD6_INTEL"] = "m6i";
      InstanceClass2["M6I"] = "m6i";
      InstanceClass2["STANDARD6_GRAVITON2_NVME_DRIVE"] = "m6gd";
      InstanceClass2["M6GD"] = "m6gd";
      InstanceClass2["HIGH_COMPUTE_MEMORY1"] = "z1d";
      InstanceClass2["Z1D"] = "z1d";
      InstanceClass2["INFERENCE1"] = "inf1";
      InstanceClass2["INF1"] = "inf1";
    })(InstanceClass = exports2.InstanceClass || (exports2.InstanceClass = {}));
    var InstanceArchitecture;
    (function(InstanceArchitecture2) {
      InstanceArchitecture2["ARM_64"] = "arm64";
      InstanceArchitecture2["X86_64"] = "x86_64";
    })(InstanceArchitecture = exports2.InstanceArchitecture || (exports2.InstanceArchitecture = {}));
    var InstanceSize;
    (function(InstanceSize2) {
      InstanceSize2["NANO"] = "nano";
      InstanceSize2["MICRO"] = "micro";
      InstanceSize2["SMALL"] = "small";
      InstanceSize2["MEDIUM"] = "medium";
      InstanceSize2["LARGE"] = "large";
      InstanceSize2["XLARGE"] = "xlarge";
      InstanceSize2["XLARGE2"] = "2xlarge";
      InstanceSize2["XLARGE3"] = "3xlarge";
      InstanceSize2["XLARGE4"] = "4xlarge";
      InstanceSize2["XLARGE6"] = "6xlarge";
      InstanceSize2["XLARGE8"] = "8xlarge";
      InstanceSize2["XLARGE9"] = "9xlarge";
      InstanceSize2["XLARGE10"] = "10xlarge";
      InstanceSize2["XLARGE12"] = "12xlarge";
      InstanceSize2["XLARGE16"] = "16xlarge";
      InstanceSize2["XLARGE18"] = "18xlarge";
      InstanceSize2["XLARGE24"] = "24xlarge";
      InstanceSize2["XLARGE32"] = "32xlarge";
      InstanceSize2["METAL"] = "metal";
    })(InstanceSize = exports2.InstanceSize || (exports2.InstanceSize = {}));
    var InstanceType = class {
      constructor(instanceTypeIdentifier) {
        this.instanceTypeIdentifier = instanceTypeIdentifier;
      }
      static of(instanceClass, instanceSize) {
        return new InstanceType(`${instanceClass}.${instanceSize}`);
      }
      toString() {
        return this.instanceTypeIdentifier;
      }
      get architecture() {
        const instanceTypeComponents = this.instanceTypeIdentifier.match(/^([a-z]+)(\d{1,2})([a-z]*)\.([a-z0-9]+)$/);
        if (instanceTypeComponents == null) {
          throw new Error("Malformed instance type identifier");
        }
        const family = instanceTypeComponents[1];
        const capabilities = instanceTypeComponents[3];
        if (family === "a" || capabilities.includes("g")) {
          return InstanceArchitecture.ARM_64;
        }
        return InstanceArchitecture.X86_64;
      }
    };
    exports2.InstanceType = InstanceType;
    _a = JSII_RTTI_SYMBOL_1;
    InstanceType[_a] = { fqn: "@aws-cdk/aws-ec2.InstanceType", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/network-acl-types.js
var require_network_acl_types = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/network-acl-types.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AclTraffic = exports2.AclCidr = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var AclCidr = class {
      static ipv4(ipv4Cidr) {
        return new AclCidrImpl({
          cidrBlock: ipv4Cidr
        });
      }
      static anyIpv4() {
        return AclCidr.ipv4("0.0.0.0/0");
      }
      static ipv6(ipv6Cidr) {
        return new AclCidrImpl({
          ipv6CidrBlock: ipv6Cidr
        });
      }
      static anyIpv6() {
        return AclCidr.ipv6("::/0");
      }
    };
    exports2.AclCidr = AclCidr;
    _a = JSII_RTTI_SYMBOL_1;
    AclCidr[_a] = { fqn: "@aws-cdk/aws-ec2.AclCidr", version: "1.132.0" };
    var AclCidrImpl = class extends AclCidr {
      constructor(config) {
        super();
        this.config = config;
      }
      toCidrConfig() {
        return this.config;
      }
    };
    var AclTraffic = class {
      static allTraffic() {
        return new AclTrafficImpl({
          protocol: -1
        });
      }
      static icmp(props) {
        return new AclTrafficImpl({
          protocol: 1,
          icmp: props
        });
      }
      static icmpv6(props) {
        return new AclTrafficImpl({
          protocol: 58,
          icmp: props
        });
      }
      static tcpPort(port) {
        return new AclTrafficImpl({
          protocol: 6,
          portRange: {
            from: port,
            to: port
          }
        });
      }
      static tcpPortRange(startPort, endPort) {
        return new AclTrafficImpl({
          protocol: 6,
          portRange: {
            from: startPort,
            to: endPort
          }
        });
      }
      static udpPort(port) {
        return new AclTrafficImpl({
          protocol: 17,
          portRange: {
            from: port,
            to: port
          }
        });
      }
      static udpPortRange(startPort, endPort) {
        return new AclTrafficImpl({
          protocol: 17,
          portRange: {
            from: startPort,
            to: endPort
          }
        });
      }
    };
    exports2.AclTraffic = AclTraffic;
    _b = JSII_RTTI_SYMBOL_1;
    AclTraffic[_b] = { fqn: "@aws-cdk/aws-ec2.AclTraffic", version: "1.132.0" };
    var AclTrafficImpl = class extends AclTraffic {
      constructor(config) {
        super();
        this.config = config;
      }
      toTrafficConfig() {
        return this.config;
      }
    };
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/vpc-lookup.js
var require_vpc_lookup = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/vpc-lookup.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/vpc-endpoint-service.js
var require_vpc_endpoint_service = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/vpc-endpoint-service.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.VpcEndpointService = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var region_info_1 = require_lib7();
    var ec2_generated_1 = require_ec2_generated();
    var VpcEndpointService = class extends core_1.Resource {
      constructor(scope, id, props) {
        var _b, _c, _d, _e;
        super(scope, id);
        if (props.vpcEndpointServiceLoadBalancers === void 0 || props.vpcEndpointServiceLoadBalancers.length === 0) {
          throw new Error("VPC Endpoint Service must have at least one load balancer specified.");
        }
        this.vpcEndpointServiceLoadBalancers = props.vpcEndpointServiceLoadBalancers;
        this.acceptanceRequired = (_b = props.acceptanceRequired) !== null && _b !== void 0 ? _b : true;
        if (props.allowedPrincipals && props.whitelistedPrincipals) {
          throw new Error("`whitelistedPrincipals` is deprecated; please use `allowedPrincipals` instead");
        }
        this.allowedPrincipals = (_d = (_c = props.allowedPrincipals) !== null && _c !== void 0 ? _c : props.whitelistedPrincipals) !== null && _d !== void 0 ? _d : [];
        this.whitelistedPrincipals = this.allowedPrincipals;
        this.endpointService = new ec2_generated_1.CfnVPCEndpointService(this, id, {
          networkLoadBalancerArns: this.vpcEndpointServiceLoadBalancers.map((lb) => lb.loadBalancerArn),
          acceptanceRequired: this.acceptanceRequired
        });
        this.vpcEndpointServiceId = this.endpointService.ref;
        const { region } = core_1.Stack.of(this);
        const serviceNamePrefix = !core_1.Token.isUnresolved(region) ? (_e = region_info_1.RegionInfo.get(region).vpcEndpointServiceNamePrefix) !== null && _e !== void 0 ? _e : region_info_1.Default.VPC_ENDPOINT_SERVICE_NAME_PREFIX : region_info_1.Default.VPC_ENDPOINT_SERVICE_NAME_PREFIX;
        this.vpcEndpointServiceName = core_1.Fn.join(".", [serviceNamePrefix, core_1.Aws.REGION, this.vpcEndpointServiceId]);
        if (this.allowedPrincipals.length > 0) {
          new ec2_generated_1.CfnVPCEndpointServicePermissions(this, "Permissions", {
            serviceId: this.endpointService.ref,
            allowedPrincipals: this.allowedPrincipals.map((x) => x.arn)
          });
        }
      }
    };
    exports2.VpcEndpointService = VpcEndpointService;
    _a = JSII_RTTI_SYMBOL_1;
    VpcEndpointService[_a] = { fqn: "@aws-cdk/aws-ec2.VpcEndpointService", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/windows-versions.js
var require_windows_versions = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/windows-versions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WindowsVersion = void 0;
    var WindowsVersion;
    (function(WindowsVersion2) {
      WindowsVersion2["WINDOWS_SERVER_2008_SP2_ENGLISH_64BIT_SQL_2008_SP4_EXPRESS"] = "Windows_Server-2008-SP2-English-64Bit-SQL_2008_SP4_Express";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_CHINESE_SIMPLIFIED_64BIT_BASE"] = "Windows_Server-2012-R2_RTM-Chinese_Simplified-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_CHINESE_TRADITIONAL_64BIT_BASE"] = "Windows_Server-2012-R2_RTM-Chinese_Traditional-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_DUTCH_64BIT_BASE"] = "Windows_Server-2012-R2_RTM-Dutch-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_ENGLISH_64BIT_SQL_2014_SP2_ENTERPRISE"] = "Windows_Server-2012-R2_RTM-English-64Bit-SQL_2014_SP2_Enterprise";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_HUNGARIAN_64BIT_BASE"] = "Windows_Server-2012-R2_RTM-Hungarian-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_JAPANESE_64BIT_BASE"] = "Windows_Server-2012-R2_RTM-Japanese-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_CORE_CONTAINERS"] = "Windows_Server-2016-English-Core-Containers";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_CORE_SQL_2016_SP1_WEB"] = "Windows_Server-2016-English-Core-SQL_2016_SP1_Web";
      WindowsVersion2["WINDOWS_SERVER_2016_GERMAL_FULL_BASE"] = "Windows_Server-2016-German-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2016_GERMAN_FULL_BASE"] = "Windows_Server-2016-German-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2003_R2_SP2_LANGUAGE_PACKS_32BIT_BASE"] = "Windows_Server-2003-R2_SP2-Language_Packs-32Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2008_R2_SP1_ENGLISH_64BIT_SQL_2008_R2_SP3_WEB"] = "Windows_Server-2008-R2_SP1-English-64Bit-SQL_2008_R2_SP3_Web";
      WindowsVersion2["WINDOWS_SERVER_2008_R2_SP1_ENGLISH_64BIT_SQL_2012_SP4_EXPRESS"] = "Windows_Server-2008-R2_SP1-English-64Bit-SQL_2012_SP4_Express";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_SP1_PORTUGESE_BRAZIL_64BIT_CORE"] = "Windows_Server-2008-R2_SP1-Portuguese_Brazil-64Bit-Core";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_SP1_PORTUGUESE_BRAZIL_64BIT_CORE"] = "Windows_Server-2008-R2_SP1-Portuguese_Brazil-64Bit-Core";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_ENGLISH_64BIT_SQL_2016_SP2_STANDARD"] = "Windows_Server-2012-R2_RTM-English-64Bit-SQL_2016_SP2_Standard";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_ENGLISH_64BIT_SQL_2014_SP2_EXPRESS"] = "Windows_Server-2012-RTM-English-64Bit-SQL_2014_SP2_Express";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_ITALIAN_64BIT_BASE"] = "Windows_Server-2012-RTM-Italian-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_CORE_SQL_2016_SP1_EXPRESS"] = "Windows_Server-2016-English-Core-SQL_2016_SP1_Express";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_DEEP_LEARNING"] = "Windows_Server-2016-English-Deep-Learning";
      WindowsVersion2["WINDOWS_SERVER_2019_ITALIAN_FULL_BASE"] = "Windows_Server-2019-Italian-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2008_R2_SP1_KOREAN_64BIT_BASE"] = "Windows_Server-2008-R2_SP1-Korean-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_ENGLISH_64BIT_SQL_2016_SP1_EXPRESS"] = "Windows_Server-2012-R2_RTM-English-64Bit-SQL_2016_SP1_Express";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_JAPANESE_64BIT_SQL_2016_SP2_WEB"] = "Windows_Server-2012-R2_RTM-Japanese-64Bit-SQL_2016_SP2_Web";
      WindowsVersion2["WINDOWS_SERVER_2016_JAPANESE_FULL_FQL_2016_SP2_WEB"] = "Windows_Server-2016-Japanese-Full-SQL_2016_SP2_Web";
      WindowsVersion2["WINDOWS_SERVER_2016_KOREAN_FULL_BASE"] = "Windows_Server-2016-Korean-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2016_KOREAN_FULL_SQL_2016_SP2_STANDARD"] = "Windows_Server-2016-Korean-Full-SQL_2016_SP2_Standard";
      WindowsVersion2["WINDOWS_SERVER_2016_PORTUGESE_PORTUGAL_FULL_BASE"] = "Windows_Server-2016-Portuguese_Portugal-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2016_PORTUGUESE_PORTUGAL_FULL_BASE"] = "Windows_Server-2016-Portuguese_Portugal-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2019_ENGLISH_FULL_SQL_2017_WEB"] = "Windows_Server-2019-English-Full-SQL_2017_Web";
      WindowsVersion2["WINDOWS_SERVER_2019_FRENCH_FULL_BASE"] = "Windows_Server-2019-French-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2019_KOREAN_FULL_BASE"] = "Windows_Server-2019-Korean-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2008_R2_SP1_CHINESE_HONG_KONG_SAR_64BIT_BASE"] = "Windows_Server-2008-R2_SP1-Chinese_Hong_Kong_SAR-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2008_R2_SP1_CHINESE_PRC_64BIT_BASE"] = "Windows_Server-2008-R2_SP1-Chinese_PRC-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_FRENCH_64BIT_BASE"] = "Windows_Server-2012-RTM-French-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_FULL_CONTAINERS"] = "Windows_Server-2016-English-Full-Containers";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_FULL_SQL_2016_SP1_STANDARD"] = "Windows_Server-2016-English-Full-SQL_2016_SP1_Standard";
      WindowsVersion2["WINDOWS_SERVER_2016_RUSSIAN_FULL_BASE"] = "Windows_Server-2016-Russian-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2019_CHINESE_SIMPLIFIED_FULL_BASE"] = "Windows_Server-2019-Chinese_Simplified-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2019_ENGLISH_FULL_SQL_2016_SP2_STANDARD"] = "Windows_Server-2019-English-Full-SQL_2016_SP2_Standard";
      WindowsVersion2["WINDOWS_SERVER_2019_HUNGARIAN_FULL_BASE"] = "Windows_Server-2019-Hungarian-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2008_R2_SP1_ENGLISH_64BIT_SQL_2008_R2_SP3_EXPRESS"] = "Windows_Server-2008-R2_SP1-English-64Bit-SQL_2008_R2_SP3_Express";
      WindowsVersion2["WINDOWS_SERVER_2007_R2_SP1_LANGUAGE_PACKS_64BIT_BASE"] = "Windows_Server-2008-R2_SP1-Language_Packs-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2008_SP2_ENGLISH_32BIT_BASE"] = "Windows_Server-2008-SP2-English-32Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_ENGLISH_64BIT_SQL_2012_SP4_ENTERPRISE"] = "Windows_Server-2012-R2_RTM-English-64Bit-SQL_2012_SP4_Enterprise";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_CHINESE_TRADITIONAL_64BIT_BASE"] = "Windows_Server-2012-RTM-Chinese_Traditional-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_ENGLISH_64BIT_SQL_2008_R2_SP3_EXPRESS"] = "Windows_Server-2012-RTM-English-64Bit-SQL_2008_R2_SP3_Express";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_ENGLISH_64BIT_SQL_2014_SP2_STANDARD"] = "Windows_Server-2012-RTM-English-64Bit-SQL_2014_SP2_Standard";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_JAPANESE_64BIT_SQL_2014_SP2_EXPRESS"] = "Windows_Server-2012-RTM-Japanese-64Bit-SQL_2014_SP2_Express";
      WindowsVersion2["WINDOWS_SERVER_2016_POLISH_FULL_BASE"] = "Windows_Server-2016-Polish-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2019_ENGLISH_FULL_SQL_2016_SP2_WEB"] = "Windows_Server-2019-English-Full-SQL_2016_SP2_Web";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_ENGLISH_64BIT_SQL_2014_SP3_STANDARD"] = "Windows_Server-2012-R2_RTM-English-64Bit-SQL_2014_SP3_Standard";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_ENGLISH_64BIT_SQL_2016_SP2_EXPRESS"] = "Windows_Server-2012-R2_RTM-English-64Bit-SQL_2016_SP2_Express";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_ENGLISH_DEEP_LEARNING"] = "Windows_Server-2012-R2_RTM-English-Deep-Learning";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_GERMAN_64BIT_BASE"] = "Windows_Server-2012-R2_RTM-German-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_JAPANESE_64BIT_SQL_2016_SP1_EXPRESS"] = "Windows_Server-2012-R2_RTM-Japanese-64Bit-SQL_2016_SP1_Express";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_RUSSIAN_64BIT_BASE"] = "Windows_Server-2012-R2_RTM-Russian-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_CHINESE_TRADITIONAL_HONG_KONG_SAR_64BIT_BASE"] = "Windows_Server-2012-RTM-Chinese_Traditional_Hong_Kong_SAR-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_HUNGARIAN_64BIT_BASE"] = "Windows_Server-2012-RTM-Hungarian-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_JAPANESE_64BIT_SQL_2014_SP3_STANDARD"] = "Windows_Server-2012-RTM-Japanese-64Bit-SQL_2014_SP3_Standard";
      WindowsVersion2["WINDOWS_SERVER_2019_ENGLISH_FULL_HYPERV"] = "Windows_Server-2019-English-Full-HyperV";
      WindowsVersion2["WINDOWS_SERVER_2003_R2_SP2_ENGLISH_64BIT_SQL_2005_SP4_EXPRESS"] = "Windows_Server-2003-R2_SP2-English-64Bit-SQL_2005_SP4_Express";
      WindowsVersion2["WINDOWS_SERVER_2008_R2_SP1_JAPANESE_64BIT_SQL_2012_SP4_EXPRESS"] = "Windows_Server-2008-R2_SP1-Japanese-64Bit-SQL_2012_SP4_Express";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_GERMAN_64BIT_BASE"] = "Windows_Server-2012-RTM-German-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_JAPANESE_64BIT_SQL_2008_R2_SP3_STANDARD"] = "Windows_Server-2012-RTM-Japanese-64Bit-SQL_2008_R2_SP3_Standard";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_FULL_SQL_2016_SP2_STANDARD"] = "Windows_Server-2016-English-Full-SQL_2016_SP2_Standard";
      WindowsVersion2["WINDOWS_SERVER_2019_ENGLISH_FULL_SQL_2017_EXPRESS"] = "Windows_Server-2019-English-Full-SQL_2017_Express";
      WindowsVersion2["WINDOWS_SERVER_2019_JAPANESE_FULL_BASE"] = "Windows_Server-2019-Japanese-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2019_RUSSIAN_FULL_BASE"] = "Windows_Server-2019-Russian-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_ENGLISH_64BIT_SQL_2014_SP2_STANDARD"] = "Windows_Server-2012-R2_RTM-English-64Bit-SQL_2014_SP2_Standard";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_ITALIAN_64BIT_BASE"] = "Windows_Server-2012-R2_RTM-Italian-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_ENGLISH_64BIT_BASE"] = "Windows_Server-2012-RTM-English-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_ENGLISH_64BIT_SQL_2008_R2_SP3_STANDARD"] = "Windows_Server-2012-RTM-English-64Bit-SQL_2008_R2_SP3_Standard";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_FULL_HYPERV"] = "Windows_Server-2016-English-Full-HyperV";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_FULL_SQL_2016_SP2_ENTERPRISE"] = "Windows_Server-2016-English-Full-SQL_2016_SP2_Enterprise";
      WindowsVersion2["WINDOWS_SERVER_2019_CHINESE_TRADITIONAL_FULL_BASE"] = "Windows_Server-2019-Chinese_Traditional-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2019_ENGLISH_CORE_BASE"] = "Windows_Server-2019-English-Core-Base";
      WindowsVersion2["WINDOWS_SERVER_2019_ENGLISH_CORE_CONTAINERSLATEST"] = "Windows_Server-2019-English-Core-ContainersLatest";
      WindowsVersion2["WINDOWS_SERVER_2008_SP2_ENGLISH_64BIT_BASE"] = "Windows_Server-2008-SP2-English-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_FRENCH_64BIT_BASE"] = "Windows_Server-2012-R2_RTM-French-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_POLISH_64BIT_BASE"] = "Windows_Server-2012-R2_RTM-Polish-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_ENGLISH_64BIT_SQL_2012_SP4_EXPRESS"] = "Windows_Server-2012-RTM-English-64Bit-SQL_2012_SP4_Express";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_ENGLISH_64BIT_SQL_2014_SP3_STANDARD"] = "Windows_Server-2012-RTM-English-64Bit-SQL_2014_SP3_Standard";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_JAPANESE_64BIT_2012_SP4_STANDARD"] = "Windows_Server-2012-RTM-Japanese-64Bit-SQL_2012_SP4_Standard";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_CORE_CONTAINERSLATEST"] = "Windows_Server-2016-English-Core-ContainersLatest";
      WindowsVersion2["WINDOWS_SERVER_2019_ENGLISH_FULL_SQL_2016_SP2_EXPRESS"] = "Windows_Server-2019-English-Full-SQL_2016_SP2_Express";
      WindowsVersion2["WINDOWS_SERVER_2019_TURKISH_FULL_BASE"] = "Windows_Server-2019-Turkish-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_ENGLISH_64BIT_SQL_2014_SP2_EXPRESS"] = "Windows_Server-2012-R2_RTM-English-64Bit-SQL_2014_SP2_Express";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_ENGLISH_64BIT_SQL_2014_SP3_WEB"] = "Windows_Server-2012-R2_RTM-English-64Bit-SQL_2014_SP3_Web";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_JAPANESE_64BIT_SQL_2016_SP1_WEB"] = "Windows_Server-2012-R2_RTM-Japanese-64Bit-SQL_2016_SP1_Web";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_PORTUGESE_BRAZIL_64BIT_BASE"] = "Windows_Server-2012-R2_RTM-Portuguese_Brazil-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_PORTUGUESE_BRAZIL_64BIT_BASE"] = "Windows_Server-2012-R2_RTM-Portuguese_Brazil-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_PORTUGESE_PORTUGAL_64BIT_BASE"] = "Windows_Server-2012-R2_RTM-Portuguese_Portugal-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_PORTUGUESE_PORTUGAL_64BIT_BASE"] = "Windows_Server-2012-R2_RTM-Portuguese_Portugal-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_SWEDISH_64BIT_BASE"] = "Windows_Server-2012-R2_RTM-Swedish-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_FULL_SQL_2016_SP1_EXPRESS"] = "Windows_Server-2016-English-Full-SQL_2016_SP1_Express";
      WindowsVersion2["WINDOWS_SERVER_2016_ITALIAN_FULL_BASE"] = "Windows_Server-2016-Italian-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2016_SPANISH_FULL_BASE"] = "Windows_Server-2016-Spanish-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2019_ENGLISH_FULL_SQL_2017_STANDARD"] = "Windows_Server-2019-English-Full-SQL_2017_Standard";
      WindowsVersion2["WINDOWS_SERVER_2003_R2_SP2_LANGUAGE_PACKS_64BIT_SQL_2005_SP4_STANDARD"] = "Windows_Server-2003-R2_SP2-Language_Packs-64Bit-SQL_2005_SP4_Standard";
      WindowsVersion2["WINDOWS_SERVER_2008_R2_SP1_JAPANESE_64BIT_SQL_2008_R2_SP3_STANDARD"] = "Windows_Server-2008-R2_SP1-Japanese-64Bit-SQL_2008_R2_SP3_Standard";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_JAPANESE_64BIT_SQL_2016_SP1_STANDARD"] = "Windows_Server-2012-R2_RTM-Japanese-64Bit-SQL_2016_SP1_Standard";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_ENGLISH_64BIT_SQL_2007_R2_SP3_WEB"] = "Windows_Server-2012-RTM-English-64Bit-SQL_2008_R2_SP3_Web";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_JAPANESE_64BIT_SQL_2014_SP2_WEB"] = "Windows_Server-2012-RTM-Japanese-64Bit-SQL_2014_SP2_Web";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_CORE_SQL_2016_SP2_ENTERPRISE"] = "Windows_Server-2016-English-Core-SQL_2016_SP2_Enterprise";
      WindowsVersion2["WINDOWS_SERVER_2016_PORTUGESE_BRAZIL_FULL_BASE"] = "Windows_Server-2016-Portuguese_Brazil-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2016_PORTUGUESE_BRAZIL_FULL_BASE"] = "Windows_Server-2016-Portuguese_Brazil-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2019_ENGLISH_FULL_BASE"] = "Windows_Server-2019-English-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2003_R2_SP2_ENGLISH_32BIT_BASE"] = "Windows_Server-2003-R2_SP2-English-32Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_CZECH_64BIT_BASE"] = "Windows_Server-2012-R2_RTM-Czech-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_ENGLISH_64BIT_SQL_2016_SP1_STANDARD"] = "Windows_Server-2012-R2_RTM-English-64Bit-SQL_2016_SP1_Standard";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_JAPANESE_64BIT_SQL_2014_SP2_EXPRESS"] = "Windows_Server-2012-R2_RTM-Japanese-64Bit-SQL_2014_SP2_Express";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_ENGLISH_64BIT_SQL_2012_SP4_STANDARD"] = "Windows_Server-2012-RTM-English-64Bit-SQL_2012_SP4_Standard";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_CORE_SQL_2016_SP1_ENTERPRISE"] = "Windows_Server-2016-English-Core-SQL_2016_SP1_Enterprise";
      WindowsVersion2["WINDOWS_SERVER_2016_JAPANESE_FULL_SQL_2016_SP1_WEB"] = "Windows_Server-2016-Japanese-Full-SQL_2016_SP1_Web";
      WindowsVersion2["WINDOWS_SERVER_2016_SWEDISH_FULL_BASE"] = "Windows_Server-2016-Swedish-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2016_TURKISH_FULL_BASE"] = "Windows_Server-2016-Turkish-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2008_R2_SP1_ENGLISH_64BIT_CORE_SQL_2012_SP4_STANDARD"] = "Windows_Server-2008-R2_SP1-English-64Bit-Core_SQL_2012_SP4_Standard";
      WindowsVersion2["WINDOWS_SERVER_2008_R2_SP1_LANGUAGE_PACKS_64BIT_SQL_2008_R2_SP3_STANDARD"] = "Windows_Server-2008-R2_SP1-Language_Packs-64Bit-SQL_2008_R2_SP3_Standard";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_CZECH_64BIT_BASE"] = "Windows_Server-2012-RTM-Czech-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_TURKISH_64BIT_BASE"] = "Windows_Server-2012-RTM-Turkish-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2016_DUTCH_FULL_BASE"] = "Windows_Server-2016-Dutch-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_FULL_SQL_2016_SP2_EXPRESS"] = "Windows_Server-2016-English-Full-SQL_2016_SP2_Express";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_FULL_SQL_2017_ENTERPRISE"] = "Windows_Server-2016-English-Full-SQL_2017_Enterprise";
      WindowsVersion2["WINDOWS_SERVER_2016_HUNGARIAN_FULL_BASE"] = "Windows_Server-2016-Hungarian-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2016_KOREAN_FULL_SQL_2016_SP1_STANDARD"] = "Windows_Server-2016-Korean-Full-SQL_2016_SP1_Standard";
      WindowsVersion2["WINDOWS_SERVER_2019_SPANISH_FULL_BASE"] = "Windows_Server-2019-Spanish-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2003_R2_SP2_ENGLISH_64BIT_BASE"] = "Windows_Server-2003-R2_SP2-English-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2008_R2_SP1_ENGLISH_64BIT_BASE"] = "Windows_Server-2008-R2_SP1-English-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2008_R2_SP1_LANGUAGE_PACKS_64BIT_SQL_2008_R2_SP3_EXPRESS"] = "Windows_Server-2008-R2_SP1-Language_Packs-64Bit-SQL_2008_R2_SP3_Express";
      WindowsVersion2["WINDOWS_SERVER_2012_SP2_PORTUGESE_BRAZIL_64BIT_BASE"] = "Windows_Server-2008-SP2-Portuguese_Brazil-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_SP2_PORTUGUESE_BRAZIL_64BIT_BASE"] = "Windows_Server-2008-SP2-Portuguese_Brazil-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_ENGLISH_64BIT_SQL_2016_SP1_WEB"] = "Windows_Server-2012-R2_RTM-English-64Bit-SQL_2016_SP1_Web";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_JAPANESE_64BIT_SQL_2014_SP3_EXPRESS"] = "Windows_Server-2012-R2_RTM-Japanese-64Bit-SQL_2014_SP3_Express";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_JAPANESE_64BIT_SQL_2016_SP2_ENTERPRISE"] = "Windows_Server-2012-R2_RTM-Japanese-64Bit-SQL_2016_SP2_Enterprise";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_JAPANESE_64BIT_BASE"] = "Windows_Server-2012-RTM-Japanese-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2019_ENGLISH_FULL_CONTAINERSLATEST"] = "Windows_Server-2019-English-Full-ContainersLatest";
      WindowsVersion2["WINDOWS_SERVER_2019_ENGLISH_FULL_SQL_2017_ENTERPRISE"] = "Windows_Server-2019-English-Full-SQL_2017_Enterprise";
      WindowsVersion2["WINDOWS_SERVER_1709_ENGLISH_CORE_CONTAINERSLATEST"] = "Windows_Server-1709-English-Core-ContainersLatest";
      WindowsVersion2["WINDOWS_SERVER_1803_ENGLISH_CORE_BASE"] = "Windows_Server-1803-English-Core-Base";
      WindowsVersion2["WINDOWS_SERVER_2008_R2_SP1_ENGLISH_64BIT_SQL_2012_SP4_WEB"] = "Windows_Server-2008-R2_SP1-English-64Bit-SQL_2012_SP4_Web";
      WindowsVersion2["WINDOWS_SERVER_2008_R2_SP1_JAPANESE_64BIT_BASE"] = "Windows_Server-2008-R2_SP1-Japanese-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2008_SP2_ENGLISH_64BIT_SQL_2008_SP4_STANDARD"] = "Windows_Server-2008-SP2-English-64Bit-SQL_2008_SP4_Standard";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_ENGLISH_64BIT_BASE"] = "Windows_Server-2012-R2_RTM-English-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_PORTUGESE_BRAZIL_64BIT_BASE"] = "Windows_Server-2012-RTM-Portuguese_Brazil-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_PORTUGUESE_BRAZIL_64BIT_BASE"] = "Windows_Server-2012-RTM-Portuguese_Brazil-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_FULL_SQL_2016_SP1_WEB"] = "Windows_Server-2016-English-Full-SQL_2016_SP1_Web";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_P3"] = "Windows_Server-2016-English-P3";
      WindowsVersion2["WINDOWS_SERVER_2016_JAPANESE_FULL_SQL_2016_SP1_ENTERPRISE"] = "Windows_Server-2016-Japanese-Full-SQL_2016_SP1_Enterprise";
      WindowsVersion2["WINDOWS_SERVER_2003_R2_SP2_LANGUAGE_PACKS_64BIT_BASE"] = "Windows_Server-2003-R2_SP2-Language_Packs-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_CHINESE_TRADITIONAL_HONG_KONG_64BIT_BASE"] = "Windows_Server-2012-R2_RTM-Chinese_Traditional_Hong_Kong-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_ENGLISH_64BIT_SQL_2014_SP3_EXPRESS"] = "Windows_Server-2012-R2_RTM-English-64Bit-SQL_2014_SP3_Express";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_ENGLISH_64BIT_SQL_2016_SP2_ENTERPRISE"] = "Windows_Server-2012-R2_RTM-English-64Bit-SQL_2016_SP2_Enterprise";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_CHINESE_SIMPLIFIED_64BIT_BASE"] = "Windows_Server-2012-RTM-Chinese_Simplified-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_ENGLISH_64BIT_SQL_2012_SP4_WEB"] = "Windows_Server-2012-RTM-English-64Bit-SQL_2012_SP4_Web";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_JAPANESE_64BIT_SQL_2014_SP3_WEB"] = "Windows_Server-2012-RTM-Japanese-64Bit-SQL_2014_SP3_Web";
      WindowsVersion2["WINDOWS_SERVER_2016_JAPANESE_FULL_BASE"] = "Windows_Server-2016-Japanese-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2016_JAPANESE_FULL_SQL_2016_SP1_EXPRESS"] = "Windows_Server-2016-Japanese-Full-SQL_2016_SP1_Express";
      WindowsVersion2["WINDOWS_SERVER_1803_ENGLISH_CORE_CONTAINERSLATEST"] = "Windows_Server-1803-English-Core-ContainersLatest";
      WindowsVersion2["WINDOWS_SERVER_2008_R2_SP1_JAPANESE_64BIT_SQL_2012_SP4_STANDARD"] = "Windows_Server-2008-R2_SP1-Japanese-64Bit-SQL_2012_SP4_Standard";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_ENGLISH_64BIT_CORE"] = "Windows_Server-2012-R2_RTM-English-64Bit-Core";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_ENGLISH_64BIT_SQL_2014_SP2_WEB"] = "Windows_Server-2012-R2_RTM-English-64Bit-SQL_2014_SP2_Web";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_ENGLISH_64BIT_SQL_2014_SP3_ENTERPRISE"] = "Windows_Server-2012-R2_RTM-English-64Bit-SQL_2014_SP3_Enterprise";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_JAPANESE_64BIT_SQL_2016_SP2_STANDARD"] = "Windows_Server-2012-R2_RTM-Japanese-64Bit-SQL_2016_SP2_Standard";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_ENGLISH_64BIT_2014_SP3_WEB"] = "Windows_Server-2012-RTM-English-64Bit-SQL_2014_SP3_Web";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_SWEDISH_64BIT_BASE"] = "Windows_Server-2012-RTM-Swedish-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2016_CHINESE_SIMPLIFIED_FULL_BASE"] = "Windows_Server-2016-Chinese_Simplified-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2019_POLISH_FULL_BASE"] = "Windows_Server-2019-Polish-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2008_R2_SP1_JAPANESE_64BIT_SQL_2008_R2_SP3_WEB"] = "Windows_Server-2008-R2_SP1-Japanese-64Bit-SQL_2008_R2_SP3_Web";
      WindowsVersion2["WINDOWS_SERVER_2008_R2_SP1_PORTUGESE_BRAZIL_64BIT_BASE"] = "Windows_Server-2008-R2_SP1-Portuguese_Brazil-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2008_R2_SP1_PORTUGUESE_BRAZIL_64BIT_BASE"] = "Windows_Server-2008-R2_SP1-Portuguese_Brazil-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_JAPANESE_64BIT_SQL_2016_SP1_ENTERPRISE"] = "Windows_Server-2012-R2_RTM-Japanese-64Bit-SQL_2016_SP1_Enterprise";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_JAPANESE_64BIT_SQL_2016_SP2_EXPRESS"] = "Windows_Server-2012-R2_RTM-Japanese-64Bit-SQL_2016_SP2_Express";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_ENGLISH_64BIT_SQL_2014_SP3_EXPRESS"] = "Windows_Server-2012-RTM-English-64Bit-SQL_2014_SP3_Express";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_JAPANESE_64BIT_SQL_2014_SP2_STANDARD"] = "Windows_Server-2012-RTM-Japanese-64Bit-SQL_2014_SP2_Standard";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_CORE_BASE"] = "Windows_Server-2016-English-Core-Base";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_FULL_BASE"] = "Windows_Server-2016-English-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_FULL_SQL_2017_WEB"] = "Windows_Server-2016-English-Full-SQL_2017_Web";
      WindowsVersion2["WINDOWS_SERVER_2019_GERMAN_FULL_BASE"] = "Windows_Server-2019-German-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2003_R2_SP2_ENGLISH_64BIT_SQL_2005_SP4_STANDARD"] = "Windows_Server-2003-R2_SP2-English-64Bit-SQL_2005_SP4_Standard";
      WindowsVersion2["WINDOWS_SERVER_2008_R2_SP1_ENGLISH_64BIT_SQL_2012_SP4_ENTERPRISE"] = "Windows_Server-2008-R2_SP1-English-64Bit-SQL_2012_SP4_Enterprise";
      WindowsVersion2["WINDOWS_SERVER_2008_R2_SP1_JAPANESE_64BIT_SQL_2008_R2_SP3_EXPRESS"] = "Windows_Server-2008-R2_SP1-Japanese-64Bit-SQL_2008_R2_SP3_Express";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_ENGLISH_64BIT_SQL_2016_SP1_ENTERPRISE"] = "Windows_Server-2012-R2_RTM-English-64Bit-SQL_2016_SP1_Enterprise";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_ENGLISH_64BIT_SQL_2014_SP2_WEB"] = "Windows_Server-2012-RTM-English-64Bit-SQL_2014_SP2_Web";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_JAPANESE_64BIT_SQL_2008_R2_SP3_EXPRESS"] = "Windows_Server-2012-RTM-Japanese-64Bit-SQL_2008_R2_SP3_Express";
      WindowsVersion2["WINDOWS_SERVER_2016_FRENCH_FULL_BASE"] = "Windows_Server-2016-French-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2016_JAPANESE_FULL_SQL_2016_SP2_ENTERPRISE"] = "Windows_Server-2016-Japanese-Full-SQL_2016_SP2_Enterprise";
      WindowsVersion2["WINDOWS_SERVER_2019_CZECH_FULL_BASE"] = "Windows_Server-2019-Czech-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_1809_ENGLISH_CORE_BASE"] = "Windows_Server-1809-English-Core-Base";
      WindowsVersion2["WINDOWS_SERVER_1809_ENGLISH_CORE_CONTAINERSLATEST"] = "Windows_Server-1809-English-Core-ContainersLatest";
      WindowsVersion2["WINDOWS_SERVER_2003_R2_SP2_LANGUAGE_PACKS_64BIT_SQL_2005_SP4_EXPRESS"] = "Windows_Server-2003-R2_SP2-Language_Packs-64Bit-SQL_2005_SP4_Express";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_TURKISH_64BIT_BASE"] = "Windows_Server-2012-R2_RTM-Turkish-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_JAPANESE_64BIT_SQL_2012_SP4_WEB"] = "Windows_Server-2012-RTM-Japanese-64Bit-SQL_2012_SP4_Web";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_POLISH_64BIT_BASE"] = "Windows_Server-2012-RTM-Polish-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_SPANISH_64BIT_BASE"] = "Windows_Server-2012-RTM-Spanish-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_FULL_SQL_2016_SP1_ENTERPRISE"] = "Windows_Server-2016-English-Full-SQL_2016_SP1_Enterprise";
      WindowsVersion2["WINDOWS_SERVER_2016_JAPANESE_FULL_SQL_2016_SP2_EXPRESS"] = "Windows_Server-2016-Japanese-Full-SQL_2016_SP2_Express";
      WindowsVersion2["WINDOWS_SERVER_2019_ENGLISH_FULL_SQL_2016_SP2_ENTERPRISE"] = "Windows_Server-2019-English-Full-SQL_2016_SP2_Enterprise";
      WindowsVersion2["WINDOWS_SERVER_1709_ENGLISH_CORE_BASE"] = "Windows_Server-1709-English-Core-Base";
      WindowsVersion2["WINDOWS_SERVER_2008_R2_SP1_ENGLISH_61BIT_SQL_2012_RTM_SP2_ENTERPRISE"] = "Windows_Server-2008-R2_SP1-English-64Bit-SQL_2012_RTM_SP2_Enterprise";
      WindowsVersion2["WINDOWS_SERVER_2008_R2_SP1_ENGLISH_64BIT_SQL_2012_SP4_STANDARD"] = "Windows_Server-2008-R2_SP1-English-64Bit-SQL_2012_SP4_Standard";
      WindowsVersion2["WINDOWS_SERVER_2008_SP2_PORTUGESE_BRAZIL_32BIT_BASE"] = "Windows_Server-2008-SP2-Portuguese_Brazil-32Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2008_SP2_PORTUGUESE_BRAZIL_32BIT_BASE"] = "Windows_Server-2008-SP2-Portuguese_Brazil-32Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_JAPANESE_64BIT_SQL_2014_SP2_STANDARD"] = "Windows_Server-2012-R2_RTM-Japanese-64Bit-SQL_2014_SP2_Standard";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_JAPANESE_64BIT_SQL_2012_SP4_EXPRESS"] = "Windows_Server-2012-RTM-Japanese-64Bit-SQL_2012_SP4_Express";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_PORTUGESE_PORTUGAL_64BIT_BASE"] = "Windows_Server-2012-RTM-Portuguese_Portugal-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_PORTUGUESE_PORTUGAL_64BIT_BASE"] = "Windows_Server-2012-RTM-Portuguese_Portugal-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2016_CZECH_FULL_BASE"] = "Windows_Server-2016-Czech-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2016_JAPANESE_FULL_SQL_2016_SP1_STANDARD"] = "Windows_Server-2016-Japanese-Full-SQL_2016_SP1_Standard";
      WindowsVersion2["WINDOWS_SERVER_2019_DUTCH_FULL_BASE"] = "Windows_Server-2019-Dutch-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2008_R2_SP1_ENGLISH_64BIT_CORE"] = "Windows_Server-2008-R2_SP1-English-64Bit-Core";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_ENGLISH_64BIT_SQL_2016_SP2_WEB"] = "Windows_Server-2012-R2_RTM-English-64Bit-SQL_2016_SP2_Web";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_KOREAN_64BIT_BASE"] = "Windows_Server-2012-R2_RTM-Korean-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_DUTCH_64BIT_BASE"] = "Windows_Server-2012-RTM-Dutch-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_64BIT_SQL_2012_SP4_ENTERPRISE"] = "Windows_Server-2016-English-64Bit-SQL_2012_SP4_Enterprise";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_CORE_SQL_2016_SP1_STANDARD"] = "Windows_Server-2016-English-Core-SQL_2016_SP1_Standard";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_CORE_SQL_2016_SP2_EXPRESS"] = "Windows_Server-2016-English-Core-SQL_2016_SP2_Express";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_CORE_SQL_2016_SP2_WEB"] = "Windows_Server-2016-English-Core-SQL_2016_SP2_Web";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_FULL_SQL_2017_STANDARD"] = "Windows_Server-2016-English-Full-SQL_2017_Standard";
      WindowsVersion2["WINDOWS_SERVER_2019_PORTUGESE_BRAZIL_FULL_BASE"] = "Windows_Server-2019-Portuguese_Brazil-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2019_PORTUGUESE_BRAZIL_FULL_BASE"] = "Windows_Server-2019-Portuguese_Brazil-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2008_R2_SP1_ENGLISH_64BIT_SQL_2008_R2_SP3_STANDARD"] = "Windows_Server-2008-R2_SP1-English-64Bit-SQL_2008_R2_SP3_Standard";
      WindowsVersion2["WINDOWS_SERVER_2008_R2_SP1_ENGLISH_64BIT_SHAREPOINT_2010_SP2_FOUNDATION"] = "Windows_Server-2008-R2_SP1-English-64Bit-SharePoint_2010_SP2_Foundation";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_ENGLISH_P3"] = "Windows_Server-2012-R2_RTM-English-P3";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_JAPANESE_64BIT_SQL_2014_SP3_STANDARD"] = "Windows_Server-2012-R2_RTM-Japanese-64Bit-SQL_2014_SP3_Standard";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_SPANISH_64BIT_BASE"] = "Windows_Server-2012-R2_RTM-Spanish-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_JAPANESE_64BIT_SQL_2014_SP3_EXPRESS"] = "Windows_Server-2012-RTM-Japanese-64Bit-SQL_2014_SP3_Express";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_CORE_SQL_2016_SP2_STANDARD"] = "Windows_Server-2016-English-Core-SQL_2016_SP2_Standard";
      WindowsVersion2["WINDOWS_SERVER_2016_JAPANESE_FULL_SQL_2016_SP2_STANDARD"] = "Windows_Server-2016-Japanese-Full-SQL_2016_SP2_Standard";
      WindowsVersion2["WINDOWS_SERVER_2019_PORTUGESE_PORTUGAL_FULL_BASE"] = "Windows_Server-2019-Portuguese_Portugal-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2019_PORTUGUESE_PORTUGAL_FULL_BASE"] = "Windows_Server-2019-Portuguese_Portugal-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2019_SWEDISH_FULL_BASE"] = "Windows_Server-2019-Swedish-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_R2_RTM_ENGLISH_64BIT_HYPERV"] = "Windows_Server-2012-R2_RTM-English-64Bit-HyperV";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_KOREAN_64BIT_BASE"] = "Windows_Server-2012-RTM-Korean-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2012_RTM_RUSSIAN_64BIT_BASE"] = "Windows_Server-2012-RTM-Russian-64Bit-Base";
      WindowsVersion2["WINDOWS_SERVER_2016_CHINESE_TRADITIONAL_FULL_BASE"] = "Windows_Server-2016-Chinese_Traditional-Full-Base";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_FULL_SQL_2016_SP2_WEB"] = "Windows_Server-2016-English-Full-SQL_2016_SP2_Web";
      WindowsVersion2["WINDOWS_SERVER_2016_ENGLISH_FULL_SQL_2017_EXPRESS"] = "Windows_Server-2016-English-Full-SQL_2017_Express";
    })(WindowsVersion = exports2.WindowsVersion || (exports2.WindowsVersion = {}));
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/client-vpn-endpoint-types.js
var require_client_vpn_endpoint_types = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/client-vpn-endpoint-types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.VpnPort = exports2.TransportProtocol = void 0;
    var TransportProtocol;
    (function(TransportProtocol2) {
      TransportProtocol2["TCP"] = "tcp";
      TransportProtocol2["UDP"] = "udp";
    })(TransportProtocol = exports2.TransportProtocol || (exports2.TransportProtocol = {}));
    var VpnPort;
    (function(VpnPort2) {
      VpnPort2[VpnPort2["HTTPS"] = 443] = "HTTPS";
      VpnPort2[VpnPort2["OPENVPN"] = 1194] = "OPENVPN";
    })(VpnPort = exports2.VpnPort || (exports2.VpnPort = {}));
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/ec2-augmentations.generated.js
var require_ec2_augmentations_generated = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/ec2-augmentations.generated.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var cloudwatch = require_lib10();
    var vpn_1 = require_vpn();
    vpn_1.VpnConnection.prototype.metric = function(metricName, props) {
      return new cloudwatch.Metric(__spreadValues({
        namespace: "AWS/VPN",
        metricName,
        dimensions: { VpnId: this.vpnId }
      }, props)).attachTo(this);
    };
    vpn_1.VpnConnection.prototype.metricTunnelState = function(props) {
      return this.metric("TunnelState", __spreadValues({ statistic: "Average" }, props));
    };
    vpn_1.VpnConnection.prototype.metricTunnelDataIn = function(props) {
      return this.metric("TunnelDataIn", __spreadValues({ statistic: "Sum" }, props));
    };
    vpn_1.VpnConnection.prototype.metricTunnelDataOut = function(props) {
      return this.metric("TunnelDataOut", __spreadValues({ statistic: "Sum" }, props));
    };
  }
});

// asset-input/node_modules/@aws-cdk/aws-ec2/lib/index.js
var require_lib21 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ec2/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_aspects(), exports2);
    __exportStar(require_bastion_host(), exports2);
    __exportStar(require_connections(), exports2);
    __exportStar(require_cfn_init(), exports2);
    __exportStar(require_cfn_init_elements(), exports2);
    __exportStar(require_instance_types(), exports2);
    __exportStar(require_instance(), exports2);
    __exportStar(require_launch_template(), exports2);
    __exportStar(require_machine_image(), exports2);
    __exportStar(require_nat(), exports2);
    __exportStar(require_network_acl(), exports2);
    __exportStar(require_network_acl_types(), exports2);
    __exportStar(require_port(), exports2);
    __exportStar(require_security_group2(), exports2);
    __exportStar(require_subnet(), exports2);
    __exportStar(require_peer(), exports2);
    __exportStar(require_volume(), exports2);
    __exportStar(require_vpc2(), exports2);
    __exportStar(require_vpc_lookup(), exports2);
    __exportStar(require_vpn(), exports2);
    __exportStar(require_vpc_endpoint(), exports2);
    __exportStar(require_vpc_endpoint_service(), exports2);
    __exportStar(require_user_data(), exports2);
    __exportStar(require_windows_versions(), exports2);
    __exportStar(require_vpc_flow_logs(), exports2);
    __exportStar(require_client_vpn_endpoint_types(), exports2);
    __exportStar(require_client_vpn_endpoint(), exports2);
    __exportStar(require_client_vpn_authorization_rule(), exports2);
    __exportStar(require_client_vpn_route(), exports2);
    __exportStar(require_ec2_generated(), exports2);
    require_ec2_augmentations_generated();
  }
});

// asset-input/node_modules/@aws-cdk/aws-sqs/lib/sqs.generated.js
var require_sqs_generated = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-sqs/lib/sqs.generated.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnQueuePolicy = exports2.CfnQueue = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var cfn_parse = require_cfn_parse();
    function CfnQueuePropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("contentBasedDeduplication", cdk.validateBoolean)(properties.contentBasedDeduplication));
      errors.collect(cdk.propertyValidator("deduplicationScope", cdk.validateString)(properties.deduplicationScope));
      errors.collect(cdk.propertyValidator("delaySeconds", cdk.validateNumber)(properties.delaySeconds));
      errors.collect(cdk.propertyValidator("fifoQueue", cdk.validateBoolean)(properties.fifoQueue));
      errors.collect(cdk.propertyValidator("fifoThroughputLimit", cdk.validateString)(properties.fifoThroughputLimit));
      errors.collect(cdk.propertyValidator("kmsDataKeyReusePeriodSeconds", cdk.validateNumber)(properties.kmsDataKeyReusePeriodSeconds));
      errors.collect(cdk.propertyValidator("kmsMasterKeyId", cdk.validateString)(properties.kmsMasterKeyId));
      errors.collect(cdk.propertyValidator("maximumMessageSize", cdk.validateNumber)(properties.maximumMessageSize));
      errors.collect(cdk.propertyValidator("messageRetentionPeriod", cdk.validateNumber)(properties.messageRetentionPeriod));
      errors.collect(cdk.propertyValidator("queueName", cdk.validateString)(properties.queueName));
      errors.collect(cdk.propertyValidator("receiveMessageWaitTimeSeconds", cdk.validateNumber)(properties.receiveMessageWaitTimeSeconds));
      errors.collect(cdk.propertyValidator("redriveAllowPolicy", cdk.validateObject)(properties.redriveAllowPolicy));
      errors.collect(cdk.propertyValidator("redrivePolicy", cdk.validateObject)(properties.redrivePolicy));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      errors.collect(cdk.propertyValidator("visibilityTimeout", cdk.validateNumber)(properties.visibilityTimeout));
      return errors.wrap('supplied properties not correct for "CfnQueueProps"');
    }
    function cfnQueuePropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnQueuePropsValidator(properties).assertSuccess();
      return {
        ContentBasedDeduplication: cdk.booleanToCloudFormation(properties.contentBasedDeduplication),
        DeduplicationScope: cdk.stringToCloudFormation(properties.deduplicationScope),
        DelaySeconds: cdk.numberToCloudFormation(properties.delaySeconds),
        FifoQueue: cdk.booleanToCloudFormation(properties.fifoQueue),
        FifoThroughputLimit: cdk.stringToCloudFormation(properties.fifoThroughputLimit),
        KmsDataKeyReusePeriodSeconds: cdk.numberToCloudFormation(properties.kmsDataKeyReusePeriodSeconds),
        KmsMasterKeyId: cdk.stringToCloudFormation(properties.kmsMasterKeyId),
        MaximumMessageSize: cdk.numberToCloudFormation(properties.maximumMessageSize),
        MessageRetentionPeriod: cdk.numberToCloudFormation(properties.messageRetentionPeriod),
        QueueName: cdk.stringToCloudFormation(properties.queueName),
        ReceiveMessageWaitTimeSeconds: cdk.numberToCloudFormation(properties.receiveMessageWaitTimeSeconds),
        RedriveAllowPolicy: cdk.objectToCloudFormation(properties.redriveAllowPolicy),
        RedrivePolicy: cdk.objectToCloudFormation(properties.redrivePolicy),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
        VisibilityTimeout: cdk.numberToCloudFormation(properties.visibilityTimeout)
      };
    }
    function CfnQueuePropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("contentBasedDeduplication", "ContentBasedDeduplication", properties.ContentBasedDeduplication != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ContentBasedDeduplication) : void 0);
      ret.addPropertyResult("deduplicationScope", "DeduplicationScope", properties.DeduplicationScope != null ? cfn_parse.FromCloudFormation.getString(properties.DeduplicationScope) : void 0);
      ret.addPropertyResult("delaySeconds", "DelaySeconds", properties.DelaySeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.DelaySeconds) : void 0);
      ret.addPropertyResult("fifoQueue", "FifoQueue", properties.FifoQueue != null ? cfn_parse.FromCloudFormation.getBoolean(properties.FifoQueue) : void 0);
      ret.addPropertyResult("fifoThroughputLimit", "FifoThroughputLimit", properties.FifoThroughputLimit != null ? cfn_parse.FromCloudFormation.getString(properties.FifoThroughputLimit) : void 0);
      ret.addPropertyResult("kmsDataKeyReusePeriodSeconds", "KmsDataKeyReusePeriodSeconds", properties.KmsDataKeyReusePeriodSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.KmsDataKeyReusePeriodSeconds) : void 0);
      ret.addPropertyResult("kmsMasterKeyId", "KmsMasterKeyId", properties.KmsMasterKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsMasterKeyId) : void 0);
      ret.addPropertyResult("maximumMessageSize", "MaximumMessageSize", properties.MaximumMessageSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaximumMessageSize) : void 0);
      ret.addPropertyResult("messageRetentionPeriod", "MessageRetentionPeriod", properties.MessageRetentionPeriod != null ? cfn_parse.FromCloudFormation.getNumber(properties.MessageRetentionPeriod) : void 0);
      ret.addPropertyResult("queueName", "QueueName", properties.QueueName != null ? cfn_parse.FromCloudFormation.getString(properties.QueueName) : void 0);
      ret.addPropertyResult("receiveMessageWaitTimeSeconds", "ReceiveMessageWaitTimeSeconds", properties.ReceiveMessageWaitTimeSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.ReceiveMessageWaitTimeSeconds) : void 0);
      ret.addPropertyResult("redriveAllowPolicy", "RedriveAllowPolicy", properties.RedriveAllowPolicy != null ? cfn_parse.FromCloudFormation.getAny(properties.RedriveAllowPolicy) : void 0);
      ret.addPropertyResult("redrivePolicy", "RedrivePolicy", properties.RedrivePolicy != null ? cfn_parse.FromCloudFormation.getAny(properties.RedrivePolicy) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addPropertyResult("visibilityTimeout", "VisibilityTimeout", properties.VisibilityTimeout != null ? cfn_parse.FromCloudFormation.getNumber(properties.VisibilityTimeout) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnQueue = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnQueue.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.attrQueueName = cdk.Token.asString(this.getAtt("QueueName"));
        this.contentBasedDeduplication = props.contentBasedDeduplication;
        this.deduplicationScope = props.deduplicationScope;
        this.delaySeconds = props.delaySeconds;
        this.fifoQueue = props.fifoQueue;
        this.fifoThroughputLimit = props.fifoThroughputLimit;
        this.kmsDataKeyReusePeriodSeconds = props.kmsDataKeyReusePeriodSeconds;
        this.kmsMasterKeyId = props.kmsMasterKeyId;
        this.maximumMessageSize = props.maximumMessageSize;
        this.messageRetentionPeriod = props.messageRetentionPeriod;
        this.queueName = props.queueName;
        this.receiveMessageWaitTimeSeconds = props.receiveMessageWaitTimeSeconds;
        this.redriveAllowPolicy = props.redriveAllowPolicy;
        this.redrivePolicy = props.redrivePolicy;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SQS::Queue", props.tags, { tagPropertyName: "tags" });
        this.visibilityTimeout = props.visibilityTimeout;
        if (this.node.scope && cdk.Resource.isResource(this.node.scope)) {
          this.node.addValidation({ validate: () => this.cfnOptions.deletionPolicy === void 0 ? ["'AWS::SQS::Queue' is a stateful resource type, and you must specify a Removal Policy for it. Call 'resource.applyRemovalPolicy()'."] : [] });
        }
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnQueuePropsFromCloudFormation(resourceProperties);
        const ret = new CfnQueue(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnQueue.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          contentBasedDeduplication: this.contentBasedDeduplication,
          deduplicationScope: this.deduplicationScope,
          delaySeconds: this.delaySeconds,
          fifoQueue: this.fifoQueue,
          fifoThroughputLimit: this.fifoThroughputLimit,
          kmsDataKeyReusePeriodSeconds: this.kmsDataKeyReusePeriodSeconds,
          kmsMasterKeyId: this.kmsMasterKeyId,
          maximumMessageSize: this.maximumMessageSize,
          messageRetentionPeriod: this.messageRetentionPeriod,
          queueName: this.queueName,
          receiveMessageWaitTimeSeconds: this.receiveMessageWaitTimeSeconds,
          redriveAllowPolicy: this.redriveAllowPolicy,
          redrivePolicy: this.redrivePolicy,
          tags: this.tags.renderTags(),
          visibilityTimeout: this.visibilityTimeout
        };
      }
      renderProperties(props) {
        return cfnQueuePropsToCloudFormation(props);
      }
    };
    exports2.CfnQueue = CfnQueue;
    _a = JSII_RTTI_SYMBOL_1;
    CfnQueue[_a] = { fqn: "@aws-cdk/aws-sqs.CfnQueue", version: "1.132.0" };
    CfnQueue.CFN_RESOURCE_TYPE_NAME = "AWS::SQS::Queue";
    function CfnQueuePolicyPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("policyDocument", cdk.requiredValidator)(properties.policyDocument));
      errors.collect(cdk.propertyValidator("policyDocument", cdk.validateObject)(properties.policyDocument));
      errors.collect(cdk.propertyValidator("queues", cdk.requiredValidator)(properties.queues));
      errors.collect(cdk.propertyValidator("queues", cdk.listValidator(cdk.validateString))(properties.queues));
      return errors.wrap('supplied properties not correct for "CfnQueuePolicyProps"');
    }
    function cfnQueuePolicyPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnQueuePolicyPropsValidator(properties).assertSuccess();
      return {
        PolicyDocument: cdk.objectToCloudFormation(properties.policyDocument),
        Queues: cdk.listMapper(cdk.stringToCloudFormation)(properties.queues)
      };
    }
    function CfnQueuePolicyPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("policyDocument", "PolicyDocument", cfn_parse.FromCloudFormation.getAny(properties.PolicyDocument));
      ret.addPropertyResult("queues", "Queues", cfn_parse.FromCloudFormation.getStringArray(properties.Queues));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnQueuePolicy = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnQueuePolicy.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "policyDocument", this);
        cdk.requireProperty(props, "queues", this);
        this.attrId = cdk.Token.asString(this.getAtt("Id"));
        this.policyDocument = props.policyDocument;
        this.queues = props.queues;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnQueuePolicyPropsFromCloudFormation(resourceProperties);
        const ret = new CfnQueuePolicy(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnQueuePolicy.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          policyDocument: this.policyDocument,
          queues: this.queues
        };
      }
      renderProperties(props) {
        return cfnQueuePolicyPropsToCloudFormation(props);
      }
    };
    exports2.CfnQueuePolicy = CfnQueuePolicy;
    _b = JSII_RTTI_SYMBOL_1;
    CfnQueuePolicy[_b] = { fqn: "@aws-cdk/aws-sqs.CfnQueuePolicy", version: "1.132.0" };
    CfnQueuePolicy.CFN_RESOURCE_TYPE_NAME = "AWS::SQS::QueuePolicy";
  }
});

// asset-input/node_modules/@aws-cdk/aws-sqs/lib/policy.js
var require_policy3 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-sqs/lib/policy.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.QueuePolicy = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var aws_iam_1 = require_lib9();
    var core_1 = require_lib8();
    var sqs_generated_1 = require_sqs_generated();
    var QueuePolicy = class extends core_1.Resource {
      constructor(scope, id, props) {
        super(scope, id);
        this.document = new aws_iam_1.PolicyDocument();
        const resource = new sqs_generated_1.CfnQueuePolicy(this, "Resource", {
          policyDocument: this.document,
          queues: props.queues.map((q) => q.queueUrl)
        });
        this.queuePolicyId = resource.attrId;
      }
    };
    exports2.QueuePolicy = QueuePolicy;
    _a = JSII_RTTI_SYMBOL_1;
    QueuePolicy[_a] = { fqn: "@aws-cdk/aws-sqs.QueuePolicy", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-sqs/lib/queue-base.js
var require_queue_base = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-sqs/lib/queue-base.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.QueueBase = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var iam = require_lib9();
    var core_1 = require_lib8();
    var policy_1 = require_policy3();
    var QueueBase = class extends core_1.Resource {
      addToResourcePolicy(statement) {
        if (!this.policy && this.autoCreatePolicy) {
          this.policy = new policy_1.QueuePolicy(this, "Policy", { queues: [this] });
        }
        if (this.policy) {
          this.policy.document.addStatements(statement);
          return { statementAdded: true, policyDependable: this.policy };
        }
        return { statementAdded: false };
      }
      validate() {
        var _b;
        const errors = super.validate();
        errors.push(...((_b = this.policy) === null || _b === void 0 ? void 0 : _b.document.validateForResourcePolicy()) || []);
        return errors;
      }
      grantConsumeMessages(grantee) {
        const ret = this.grant(grantee, "sqs:ReceiveMessage", "sqs:ChangeMessageVisibility", "sqs:GetQueueUrl", "sqs:DeleteMessage", "sqs:GetQueueAttributes");
        if (this.encryptionMasterKey) {
          this.encryptionMasterKey.grantDecrypt(grantee);
        }
        return ret;
      }
      grantSendMessages(grantee) {
        const ret = this.grant(grantee, "sqs:SendMessage", "sqs:GetQueueAttributes", "sqs:GetQueueUrl");
        if (this.encryptionMasterKey) {
          this.encryptionMasterKey.grantEncryptDecrypt(grantee);
        }
        return ret;
      }
      grantPurge(grantee) {
        return this.grant(grantee, "sqs:PurgeQueue", "sqs:GetQueueAttributes", "sqs:GetQueueUrl");
      }
      grant(grantee, ...actions) {
        return iam.Grant.addToPrincipalOrResource({
          grantee,
          actions,
          resourceArns: [this.queueArn],
          resource: this
        });
      }
    };
    exports2.QueueBase = QueueBase;
    _a = JSII_RTTI_SYMBOL_1;
    QueueBase[_a] = { fqn: "@aws-cdk/aws-sqs.QueueBase", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-sqs/lib/validate-props.js
var require_validate_props = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-sqs/lib/validate-props.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateProps = void 0;
    var core_1 = require_lib8();
    function validateProps(props) {
      validateRange("delivery delay", props.deliveryDelay && props.deliveryDelay.toSeconds(), 0, 900, "seconds");
      validateRange("maximum message size", props.maxMessageSizeBytes, 1024, 262144, "bytes");
      validateRange("message retention period", props.retentionPeriod && props.retentionPeriod.toSeconds(), 60, 1209600, "seconds");
      validateRange("receive wait time", props.receiveMessageWaitTime && props.receiveMessageWaitTime.toSeconds(), 0, 20, "seconds");
      validateRange("visibility timeout", props.visibilityTimeout && props.visibilityTimeout.toSeconds(), 0, 43200, "seconds");
      validateRange("dead letter target maximum receive count", props.deadLetterQueue && props.deadLetterQueue.maxReceiveCount, 1, Infinity);
    }
    exports2.validateProps = validateProps;
    function validateRange(label, value, minValue, maxValue, unit) {
      if (value === void 0 || core_1.Token.isUnresolved(value)) {
        return;
      }
      const unitSuffix = unit ? ` ${unit}` : "";
      if (value < minValue) {
        throw new Error(`${label} must be ${minValue}${unitSuffix} or more, but ${value} was provided`);
      }
      if (value > maxValue) {
        throw new Error(`${label} must be ${maxValue}${unitSuffix} or less, but ${value} was provided`);
      }
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-sqs/lib/queue.js
var require_queue = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-sqs/lib/queue.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Queue = exports2.FifoThroughputLimit = exports2.DeduplicationScope = exports2.QueueEncryption = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var kms = require_lib14();
    var core_1 = require_lib8();
    var queue_base_1 = require_queue_base();
    var sqs_generated_1 = require_sqs_generated();
    var validate_props_1 = require_validate_props();
    var QueueEncryption;
    (function(QueueEncryption2) {
      QueueEncryption2["UNENCRYPTED"] = "NONE";
      QueueEncryption2["KMS_MANAGED"] = "MANAGED";
      QueueEncryption2["KMS"] = "KMS";
    })(QueueEncryption = exports2.QueueEncryption || (exports2.QueueEncryption = {}));
    var DeduplicationScope;
    (function(DeduplicationScope2) {
      DeduplicationScope2["MESSAGE_GROUP"] = "messageGroup";
      DeduplicationScope2["QUEUE"] = "queue";
    })(DeduplicationScope = exports2.DeduplicationScope || (exports2.DeduplicationScope = {}));
    var FifoThroughputLimit;
    (function(FifoThroughputLimit2) {
      FifoThroughputLimit2["PER_QUEUE"] = "perQueue";
      FifoThroughputLimit2["PER_MESSAGE_GROUP_ID"] = "perMessageGroupId";
    })(FifoThroughputLimit = exports2.FifoThroughputLimit || (exports2.FifoThroughputLimit = {}));
    var Queue = class extends queue_base_1.QueueBase {
      constructor(scope, id, props = {}) {
        var _b;
        super(scope, id, {
          physicalName: props.queueName
        });
        this.autoCreatePolicy = true;
        validate_props_1.validateProps(props);
        const redrivePolicy = props.deadLetterQueue ? {
          deadLetterTargetArn: props.deadLetterQueue.queue.queueArn,
          maxReceiveCount: props.deadLetterQueue.maxReceiveCount
        } : void 0;
        const { encryptionMasterKey, encryptionProps } = _determineEncryptionProps.call(this);
        const fifoProps = this.determineFifoProps(props);
        this.fifo = fifoProps.fifoQueue || false;
        const queue = new sqs_generated_1.CfnQueue(this, "Resource", __spreadProps(__spreadValues(__spreadValues({
          queueName: this.physicalName
        }, fifoProps), encryptionProps), {
          redrivePolicy,
          delaySeconds: props.deliveryDelay && props.deliveryDelay.toSeconds(),
          maximumMessageSize: props.maxMessageSizeBytes,
          messageRetentionPeriod: props.retentionPeriod && props.retentionPeriod.toSeconds(),
          receiveMessageWaitTimeSeconds: props.receiveMessageWaitTime && props.receiveMessageWaitTime.toSeconds(),
          visibilityTimeout: props.visibilityTimeout && props.visibilityTimeout.toSeconds()
        }));
        queue.applyRemovalPolicy((_b = props.removalPolicy) !== null && _b !== void 0 ? _b : core_1.RemovalPolicy.DESTROY);
        this.queueArn = this.getResourceArnAttribute(queue.attrArn, {
          service: "sqs",
          resource: this.physicalName
        });
        this.queueName = this.getResourceNameAttribute(queue.attrQueueName);
        this.encryptionMasterKey = encryptionMasterKey;
        this.queueUrl = queue.ref;
        function _determineEncryptionProps() {
          let encryption = props.encryption || QueueEncryption.UNENCRYPTED;
          if (encryption !== QueueEncryption.KMS && props.encryptionMasterKey) {
            encryption = QueueEncryption.KMS;
          }
          if (encryption === QueueEncryption.UNENCRYPTED) {
            return { encryptionProps: {} };
          }
          if (encryption === QueueEncryption.KMS_MANAGED) {
            return {
              encryptionProps: {
                kmsMasterKeyId: "alias/aws/sqs",
                kmsDataKeyReusePeriodSeconds: props.dataKeyReuse && props.dataKeyReuse.toSeconds()
              }
            };
          }
          if (encryption === QueueEncryption.KMS) {
            const masterKey = props.encryptionMasterKey || new kms.Key(this, "Key", {
              description: `Created by ${this.node.path}`
            });
            return {
              encryptionMasterKey: masterKey,
              encryptionProps: {
                kmsMasterKeyId: masterKey.keyArn,
                kmsDataKeyReusePeriodSeconds: props.dataKeyReuse && props.dataKeyReuse.toSeconds()
              }
            };
          }
          throw new Error(`Unexpected 'encryptionType': ${encryption}`);
        }
      }
      static fromQueueArn(scope, id, queueArn) {
        return Queue.fromQueueAttributes(scope, id, { queueArn });
      }
      static fromQueueAttributes(scope, id, attrs) {
        const stack = core_1.Stack.of(scope);
        const parsedArn = stack.splitArn(attrs.queueArn, core_1.ArnFormat.NO_RESOURCE_NAME);
        const queueName = attrs.queueName || parsedArn.resource;
        const queueUrl = attrs.queueUrl || `https://sqs.${parsedArn.region}.${stack.urlSuffix}/${parsedArn.account}/${queueName}`;
        class Import extends queue_base_1.QueueBase {
          constructor() {
            super(...arguments);
            this.queueArn = attrs.queueArn;
            this.queueUrl = queueUrl;
            this.queueName = queueName;
            this.encryptionMasterKey = attrs.keyArn ? kms.Key.fromKeyArn(this, "Key", attrs.keyArn) : void 0;
            this.fifo = this.determineFifo();
            this.autoCreatePolicy = false;
          }
          determineFifo() {
            if (core_1.Token.isUnresolved(this.queueArn)) {
              return attrs.fifo || false;
            } else {
              if (typeof attrs.fifo !== "undefined") {
                if (attrs.fifo && !queueName.endsWith(".fifo")) {
                  throw new Error("FIFO queue names must end in '.fifo'");
                }
                if (!attrs.fifo && queueName.endsWith(".fifo")) {
                  throw new Error("Non-FIFO queue name may not end in '.fifo'");
                }
              }
              return queueName.endsWith(".fifo") ? true : false;
            }
          }
        }
        return new Import(scope, id);
      }
      determineFifoProps(props) {
        let fifoQueue = props.fifo;
        const queueName = props.queueName;
        if (typeof fifoQueue === "undefined" && queueName && !core_1.Token.isUnresolved(queueName) && queueName.endsWith(".fifo")) {
          fifoQueue = true;
        }
        if (typeof fifoQueue === "undefined" && props.contentBasedDeduplication) {
          fifoQueue = true;
        }
        if (typeof fifoQueue === "undefined" && props.deduplicationScope) {
          fifoQueue = true;
        }
        if (typeof fifoQueue === "undefined" && props.fifoThroughputLimit) {
          fifoQueue = true;
        }
        if (typeof queueName === "string") {
          if (fifoQueue && !queueName.endsWith(".fifo")) {
            throw new Error("FIFO queue names must end in '.fifo'");
          }
          if (!fifoQueue && queueName.endsWith(".fifo")) {
            throw new Error("Non-FIFO queue name may not end in '.fifo'");
          }
        }
        if (props.contentBasedDeduplication && !fifoQueue) {
          throw new Error("Content-based deduplication can only be defined for FIFO queues");
        }
        if (props.deduplicationScope && !fifoQueue) {
          throw new Error("Deduplication scope can only be defined for FIFO queues");
        }
        if (props.fifoThroughputLimit && !fifoQueue) {
          throw new Error("FIFO throughput limit can only be defined for FIFO queues");
        }
        return {
          contentBasedDeduplication: props.contentBasedDeduplication,
          deduplicationScope: props.deduplicationScope,
          fifoThroughputLimit: props.fifoThroughputLimit,
          fifoQueue
        };
      }
    };
    exports2.Queue = Queue;
    _a = JSII_RTTI_SYMBOL_1;
    Queue[_a] = { fqn: "@aws-cdk/aws-sqs.Queue", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-sqs/lib/sqs-augmentations.generated.js
var require_sqs_augmentations_generated = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-sqs/lib/sqs-augmentations.generated.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var cloudwatch = require_lib10();
    var queue_base_1 = require_queue_base();
    queue_base_1.QueueBase.prototype.metric = function(metricName, props) {
      return new cloudwatch.Metric(__spreadValues({
        namespace: "AWS/SQS",
        metricName,
        dimensions: { QueueName: this.queueName }
      }, props)).attachTo(this);
    };
    queue_base_1.QueueBase.prototype.metricApproximateAgeOfOldestMessage = function(props) {
      return this.metric("ApproximateAgeOfOldestMessage", __spreadValues({ statistic: "Maximum" }, props));
    };
    queue_base_1.QueueBase.prototype.metricApproximateNumberOfMessagesDelayed = function(props) {
      return this.metric("ApproximateNumberOfMessagesDelayed", __spreadValues({ statistic: "Maximum" }, props));
    };
    queue_base_1.QueueBase.prototype.metricApproximateNumberOfMessagesNotVisible = function(props) {
      return this.metric("ApproximateNumberOfMessagesNotVisible", __spreadValues({ statistic: "Maximum" }, props));
    };
    queue_base_1.QueueBase.prototype.metricApproximateNumberOfMessagesVisible = function(props) {
      return this.metric("ApproximateNumberOfMessagesVisible", __spreadValues({ statistic: "Maximum" }, props));
    };
    queue_base_1.QueueBase.prototype.metricNumberOfEmptyReceives = function(props) {
      return this.metric("NumberOfEmptyReceives", __spreadValues({ statistic: "Sum" }, props));
    };
    queue_base_1.QueueBase.prototype.metricNumberOfMessagesDeleted = function(props) {
      return this.metric("NumberOfMessagesDeleted", __spreadValues({ statistic: "Sum" }, props));
    };
    queue_base_1.QueueBase.prototype.metricNumberOfMessagesReceived = function(props) {
      return this.metric("NumberOfMessagesReceived", __spreadValues({ statistic: "Sum" }, props));
    };
    queue_base_1.QueueBase.prototype.metricNumberOfMessagesSent = function(props) {
      return this.metric("NumberOfMessagesSent", __spreadValues({ statistic: "Sum" }, props));
    };
    queue_base_1.QueueBase.prototype.metricSentMessageSize = function(props) {
      return this.metric("SentMessageSize", __spreadValues({ statistic: "Average" }, props));
    };
  }
});

// asset-input/node_modules/@aws-cdk/aws-sqs/lib/index.js
var require_lib22 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-sqs/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_policy3(), exports2);
    __exportStar(require_queue(), exports2);
    __exportStar(require_queue_base(), exports2);
    __exportStar(require_sqs_generated(), exports2);
    require_sqs_augmentations_generated();
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/function-hash.js
var require_function_hash = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/function-hash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.VERSION_LOCKED = exports2.trimFromStart = exports2.calculateFunctionHash = void 0;
    var crypto = require("crypto");
    var core_1 = require_lib8();
    var cx_api_1 = require_lib5();
    var function_1 = require_function();
    function calculateFunctionHash(fn) {
      const stack = core_1.Stack.of(fn);
      const functionResource = fn.node.defaultChild;
      const config = stack.resolve(functionResource._toCloudFormation());
      const resources = config.Resources;
      const resourceKeys = Object.keys(resources);
      if (resourceKeys.length !== 1) {
        throw new Error(`Expected one rendered CloudFormation resource but found ${resourceKeys.length}`);
      }
      const logicalId = resourceKeys[0];
      const properties = resources[logicalId].Properties;
      let stringifiedConfig;
      if (core_1.FeatureFlags.of(fn).isEnabled(cx_api_1.LAMBDA_RECOGNIZE_VERSION_PROPS)) {
        const updatedProps = sortProperties(filterUsefulKeys(properties));
        stringifiedConfig = JSON.stringify(updatedProps);
      } else {
        const sorted = sortProperties(properties);
        config.Resources[logicalId].Properties = sorted;
        stringifiedConfig = JSON.stringify(config);
      }
      const hash = crypto.createHash("md5");
      hash.update(stringifiedConfig);
      return hash.digest("hex");
    }
    exports2.calculateFunctionHash = calculateFunctionHash;
    function trimFromStart(s, maxLength) {
      const desiredLength = Math.min(maxLength, s.length);
      const newStart = s.length - desiredLength;
      return s.substring(newStart);
    }
    exports2.trimFromStart = trimFromStart;
    exports2.VERSION_LOCKED = {
      Architectures: true,
      Code: true,
      DeadLetterConfig: true,
      Description: true,
      Environment: true,
      FileSystemConfigs: true,
      FunctionName: true,
      Handler: true,
      ImageConfig: true,
      KmsKeyArn: true,
      Layers: true,
      MemorySize: true,
      PackageType: true,
      Role: true,
      Runtime: true,
      Timeout: true,
      TracingConfig: true,
      VpcConfig: true,
      CodeSigningConfigArn: false,
      ReservedConcurrentExecutions: false,
      Tags: false
    };
    function filterUsefulKeys(properties) {
      const versionProps = __spreadValues(__spreadValues({}, exports2.VERSION_LOCKED), function_1.Function._VER_PROPS);
      const unclassified = Object.entries(properties).filter(([k, v]) => v != null && !Object.keys(versionProps).includes(k)).map(([k, _]) => k);
      if (unclassified.length > 0) {
        throw new Error(`The following properties are not recognized as version properties: [${unclassified}]. See the README of the aws-lambda module to learn more about this and to fix it.`);
      }
      const notLocked = Object.entries(versionProps).filter(([_, v]) => !v).map(([k, _]) => k);
      notLocked.forEach((p) => delete properties[p]);
      const ret = {};
      Object.entries(properties).filter(([k, _]) => versionProps[k]).forEach(([k, v]) => ret[k] = v);
      return ret;
    }
    function sortProperties(properties) {
      const ret = {};
      const requiredProperties = ["Code", "Handler", "Role", "Runtime"];
      for (const requiredProperty of requiredProperties) {
        ret[requiredProperty] = properties[requiredProperty];
      }
      for (const property of Object.keys(properties)) {
        if (requiredProperties.indexOf(property) === -1) {
          ret[property] = properties[property];
        }
      }
      return ret;
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/handler.js
var require_handler = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/handler.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Handler = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var Handler = class {
      constructor() {
      }
    };
    exports2.Handler = Handler;
    _a = JSII_RTTI_SYMBOL_1;
    Handler[_a] = { fqn: "@aws-cdk/aws-lambda.Handler", version: "1.132.0" };
    Handler.FROM_IMAGE = "FROM_IMAGE";
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/runtime.js
var require_runtime2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/runtime.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Runtime = exports2.RuntimeFamily = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var RuntimeFamily;
    (function(RuntimeFamily2) {
      RuntimeFamily2[RuntimeFamily2["NODEJS"] = 0] = "NODEJS";
      RuntimeFamily2[RuntimeFamily2["JAVA"] = 1] = "JAVA";
      RuntimeFamily2[RuntimeFamily2["PYTHON"] = 2] = "PYTHON";
      RuntimeFamily2[RuntimeFamily2["DOTNET_CORE"] = 3] = "DOTNET_CORE";
      RuntimeFamily2[RuntimeFamily2["GO"] = 4] = "GO";
      RuntimeFamily2[RuntimeFamily2["RUBY"] = 5] = "RUBY";
      RuntimeFamily2[RuntimeFamily2["OTHER"] = 6] = "OTHER";
    })(RuntimeFamily = exports2.RuntimeFamily || (exports2.RuntimeFamily = {}));
    var Runtime = class {
      constructor(name, family, props = {}) {
        var _b, _c;
        this.name = name;
        this.supportsInlineCode = !!props.supportsInlineCode;
        this.family = family;
        const imageName = (_b = props.bundlingDockerImage) !== null && _b !== void 0 ? _b : `public.ecr.aws/sam/build-${name}`;
        this.bundlingDockerImage = core_1.DockerImage.fromRegistry(imageName);
        this.bundlingImage = this.bundlingDockerImage;
        this.supportsCodeGuruProfiling = (_c = props.supportsCodeGuruProfiling) !== null && _c !== void 0 ? _c : false;
        Runtime.ALL.push(this);
      }
      toString() {
        return this.name;
      }
      runtimeEquals(other) {
        return other.name === this.name && other.family === this.family && other.supportsInlineCode === this.supportsInlineCode;
      }
    };
    exports2.Runtime = Runtime;
    _a = JSII_RTTI_SYMBOL_1;
    Runtime[_a] = { fqn: "@aws-cdk/aws-lambda.Runtime", version: "1.132.0" };
    Runtime.ALL = new Array();
    Runtime.NODEJS = new Runtime("nodejs", RuntimeFamily.NODEJS, { supportsInlineCode: true });
    Runtime.NODEJS_4_3 = new Runtime("nodejs4.3", RuntimeFamily.NODEJS, { supportsInlineCode: true });
    Runtime.NODEJS_6_10 = new Runtime("nodejs6.10", RuntimeFamily.NODEJS, { supportsInlineCode: true });
    Runtime.NODEJS_8_10 = new Runtime("nodejs8.10", RuntimeFamily.NODEJS, { supportsInlineCode: true });
    Runtime.NODEJS_10_X = new Runtime("nodejs10.x", RuntimeFamily.NODEJS, { supportsInlineCode: true });
    Runtime.NODEJS_12_X = new Runtime("nodejs12.x", RuntimeFamily.NODEJS, { supportsInlineCode: true });
    Runtime.NODEJS_14_X = new Runtime("nodejs14.x", RuntimeFamily.NODEJS, { supportsInlineCode: true });
    Runtime.PYTHON_2_7 = new Runtime("python2.7", RuntimeFamily.PYTHON, { supportsInlineCode: true });
    Runtime.PYTHON_3_6 = new Runtime("python3.6", RuntimeFamily.PYTHON, {
      supportsInlineCode: true,
      supportsCodeGuruProfiling: true
    });
    Runtime.PYTHON_3_7 = new Runtime("python3.7", RuntimeFamily.PYTHON, {
      supportsInlineCode: true,
      supportsCodeGuruProfiling: true
    });
    Runtime.PYTHON_3_8 = new Runtime("python3.8", RuntimeFamily.PYTHON, {
      supportsInlineCode: true,
      supportsCodeGuruProfiling: true
    });
    Runtime.PYTHON_3_9 = new Runtime("python3.9", RuntimeFamily.PYTHON, {
      supportsInlineCode: true,
      supportsCodeGuruProfiling: true
    });
    Runtime.JAVA_8 = new Runtime("java8", RuntimeFamily.JAVA, {
      supportsCodeGuruProfiling: true
    });
    Runtime.JAVA_8_CORRETTO = new Runtime("java8.al2", RuntimeFamily.JAVA, {
      supportsCodeGuruProfiling: true
    });
    Runtime.JAVA_11 = new Runtime("java11", RuntimeFamily.JAVA, {
      supportsCodeGuruProfiling: true
    });
    Runtime.DOTNET_CORE_1 = new Runtime("dotnetcore1.0", RuntimeFamily.DOTNET_CORE);
    Runtime.DOTNET_CORE_2 = new Runtime("dotnetcore2.0", RuntimeFamily.DOTNET_CORE);
    Runtime.DOTNET_CORE_2_1 = new Runtime("dotnetcore2.1", RuntimeFamily.DOTNET_CORE);
    Runtime.DOTNET_CORE_3_1 = new Runtime("dotnetcore3.1", RuntimeFamily.DOTNET_CORE);
    Runtime.GO_1_X = new Runtime("go1.x", RuntimeFamily.GO);
    Runtime.RUBY_2_5 = new Runtime("ruby2.5", RuntimeFamily.RUBY);
    Runtime.RUBY_2_7 = new Runtime("ruby2.7", RuntimeFamily.RUBY);
    Runtime.PROVIDED = new Runtime("provided", RuntimeFamily.OTHER);
    Runtime.PROVIDED_AL2 = new Runtime("provided.al2", RuntimeFamily.OTHER);
    Runtime.FROM_IMAGE = new Runtime("FROM_IMAGE");
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/layers.js
var require_layers = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/layers.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LayerVersion = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var lambda_generated_1 = require_lambda_generated();
    var runtime_1 = require_runtime2();
    var LayerVersionBase = class extends core_1.Resource {
      addPermission(id, permission) {
        if (permission.organizationId != null && permission.accountId !== "*") {
          throw new Error(`OrganizationId can only be specified if AwsAccountId is '*', but it is ${permission.accountId}`);
        }
        new lambda_generated_1.CfnLayerVersionPermission(this, id, {
          action: "lambda:GetLayerVersion",
          layerVersionArn: this.layerVersionArn,
          principal: permission.accountId,
          organizationId: permission.organizationId
        });
      }
    };
    var LayerVersion = class extends LayerVersionBase {
      constructor(scope, id, props) {
        var _b;
        super(scope, id, {
          physicalName: props.layerVersionName
        });
        if (props.compatibleRuntimes && props.compatibleRuntimes.length === 0) {
          throw new Error("Attempted to define a Lambda layer that supports no runtime!");
        }
        if (props.code.isInline) {
          throw new Error("Lambda layers cannot be created from inline code");
        }
        const code = props.code.bind(this);
        if (code.inlineCode) {
          throw new Error("Inline code is not supported for AWS Lambda layers");
        }
        if (!code.s3Location) {
          throw new Error("Code must define an S3 location");
        }
        const resource = new lambda_generated_1.CfnLayerVersion(this, "Resource", {
          compatibleRuntimes: props.compatibleRuntimes && props.compatibleRuntimes.map((r) => r.name),
          compatibleArchitectures: (_b = props.compatibleArchitectures) === null || _b === void 0 ? void 0 : _b.map((a) => a.name),
          content: {
            s3Bucket: code.s3Location.bucketName,
            s3Key: code.s3Location.objectKey,
            s3ObjectVersion: code.s3Location.objectVersion
          },
          description: props.description,
          layerName: this.physicalName,
          licenseInfo: props.license
        });
        if (props.removalPolicy) {
          resource.applyRemovalPolicy(props.removalPolicy);
        }
        props.code.bindToResource(resource, {
          resourceProperty: "Content"
        });
        this.layerVersionArn = resource.ref;
        this.compatibleRuntimes = props.compatibleRuntimes;
      }
      static fromLayerVersionArn(scope, id, layerVersionArn) {
        return LayerVersion.fromLayerVersionAttributes(scope, id, {
          layerVersionArn,
          compatibleRuntimes: runtime_1.Runtime.ALL
        });
      }
      static fromLayerVersionAttributes(scope, id, attrs) {
        if (attrs.compatibleRuntimes && attrs.compatibleRuntimes.length === 0) {
          throw new Error("Attempted to import a Lambda layer that supports no runtime!");
        }
        class Import extends LayerVersionBase {
          constructor() {
            super(...arguments);
            this.layerVersionArn = attrs.layerVersionArn;
            this.compatibleRuntimes = attrs.compatibleRuntimes;
          }
        }
        return new Import(scope, id);
      }
    };
    exports2.LayerVersion = LayerVersion;
    _a = JSII_RTTI_SYMBOL_1;
    LayerVersion[_a] = { fqn: "@aws-cdk/aws-lambda.LayerVersion", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/function.js
var require_function = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/function.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.verifyCodeConfig = exports2.Function = exports2.Tracing = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cloudwatch = require_lib10();
    var aws_codeguruprofiler_1 = require_lib13();
    var ec2 = require_lib21();
    var iam = require_lib9();
    var logs = require_lib19();
    var sqs = require_lib22();
    var core_1 = require_lib8();
    var function_base_1 = require_function_base();
    var function_hash_1 = require_function_hash();
    var handler_1 = require_handler();
    var lambda_version_1 = require_lambda_version();
    var lambda_generated_1 = require_lambda_generated();
    var layers_1 = require_layers();
    var runtime_1 = require_runtime2();
    var Tracing;
    (function(Tracing2) {
      Tracing2["ACTIVE"] = "Active";
      Tracing2["PASS_THROUGH"] = "PassThrough";
      Tracing2["DISABLED"] = "Disabled";
    })(Tracing = exports2.Tracing || (exports2.Tracing = {}));
    var Function2 = class extends function_base_1.FunctionBase {
      constructor(scope, id, props) {
        var _b, _c, _d, _e, _f, _g, _h, _j;
        super(scope, id, {
          physicalName: props.functionName
        });
        this.permissionsNode = this.node;
        this.canCreatePermissions = true;
        this.layers = [];
        this.environment = {};
        const managedPolicies = new Array();
        managedPolicies.push(iam.ManagedPolicy.fromAwsManagedPolicyName("service-role/AWSLambdaBasicExecutionRole"));
        if (props.vpc) {
          managedPolicies.push(iam.ManagedPolicy.fromAwsManagedPolicyName("service-role/AWSLambdaVPCAccessExecutionRole"));
        }
        this.role = props.role || new iam.Role(this, "ServiceRole", {
          assumedBy: new iam.ServicePrincipal("lambda.amazonaws.com"),
          managedPolicies
        });
        this.grantPrincipal = this.role;
        if (props.filesystem) {
          const config = props.filesystem.config;
          if (config.policies) {
            config.policies.forEach((p) => {
              var _b2;
              (_b2 = this.role) === null || _b2 === void 0 ? void 0 : _b2.addToPrincipalPolicy(p);
            });
          }
        }
        for (const statement of props.initialPolicy || []) {
          this.role.addToPrincipalPolicy(statement);
        }
        const code = props.code.bind(this);
        verifyCodeConfig(code, props);
        let profilingGroupEnvironmentVariables = {};
        if (props.profilingGroup && props.profiling !== false) {
          this.validateProfiling(props);
          props.profilingGroup.grantPublish(this.role);
          profilingGroupEnvironmentVariables = {
            AWS_CODEGURU_PROFILER_GROUP_ARN: core_1.Stack.of(scope).formatArn({
              service: "codeguru-profiler",
              resource: "profilingGroup",
              resourceName: props.profilingGroup.profilingGroupName
            }),
            AWS_CODEGURU_PROFILER_ENABLED: "TRUE"
          };
        } else if (props.profiling) {
          this.validateProfiling(props);
          const profilingGroup = new aws_codeguruprofiler_1.ProfilingGroup(this, "ProfilingGroup", {
            computePlatform: aws_codeguruprofiler_1.ComputePlatform.AWS_LAMBDA
          });
          profilingGroup.grantPublish(this.role);
          profilingGroupEnvironmentVariables = {
            AWS_CODEGURU_PROFILER_GROUP_ARN: profilingGroup.profilingGroupArn,
            AWS_CODEGURU_PROFILER_ENABLED: "TRUE"
          };
        }
        const env = __spreadValues(__spreadValues({}, profilingGroupEnvironmentVariables), props.environment);
        for (const [key, value] of Object.entries(env)) {
          this.addEnvironment(key, value);
        }
        this.deadLetterQueue = this.buildDeadLetterQueue(props);
        let fileSystemConfigs = void 0;
        if (props.filesystem) {
          fileSystemConfigs = [{
            arn: props.filesystem.config.arn,
            localMountPath: props.filesystem.config.localMountPath
          }];
        }
        if (props.architecture && props.architectures !== void 0) {
          throw new Error("Either architecture or architectures must be specified but not both.");
        }
        if (props.architectures && props.architectures.length > 1) {
          throw new Error("Only one architecture must be specified.");
        }
        const architecture = (_b = props.architecture) !== null && _b !== void 0 ? _b : props.architectures && props.architectures[0];
        const resource = new lambda_generated_1.CfnFunction(this, "Resource", {
          functionName: this.physicalName,
          description: props.description,
          code: {
            s3Bucket: code.s3Location && code.s3Location.bucketName,
            s3Key: code.s3Location && code.s3Location.objectKey,
            s3ObjectVersion: code.s3Location && code.s3Location.objectVersion,
            zipFile: code.inlineCode,
            imageUri: (_c = code.image) === null || _c === void 0 ? void 0 : _c.imageUri
          },
          layers: core_1.Lazy.list({ produce: () => this.layers.map((layer) => layer.layerVersionArn) }, { omitEmpty: true }),
          handler: props.handler === handler_1.Handler.FROM_IMAGE ? void 0 : props.handler,
          timeout: props.timeout && props.timeout.toSeconds(),
          packageType: props.runtime === runtime_1.Runtime.FROM_IMAGE ? "Image" : void 0,
          runtime: props.runtime === runtime_1.Runtime.FROM_IMAGE ? void 0 : props.runtime.name,
          role: this.role.roleArn,
          environment: core_1.Lazy.uncachedAny({ produce: () => this.renderEnvironment() }),
          memorySize: props.memorySize,
          vpcConfig: this.configureVpc(props),
          deadLetterConfig: this.buildDeadLetterConfig(this.deadLetterQueue),
          tracingConfig: this.buildTracingConfig(props),
          reservedConcurrentExecutions: props.reservedConcurrentExecutions,
          imageConfig: undefinedIfNoKeys({
            command: (_d = code.image) === null || _d === void 0 ? void 0 : _d.cmd,
            entryPoint: (_e = code.image) === null || _e === void 0 ? void 0 : _e.entrypoint,
            workingDirectory: (_f = code.image) === null || _f === void 0 ? void 0 : _f.workingDirectory
          }),
          kmsKeyArn: (_g = props.environmentEncryption) === null || _g === void 0 ? void 0 : _g.keyArn,
          fileSystemConfigs,
          codeSigningConfigArn: (_h = props.codeSigningConfig) === null || _h === void 0 ? void 0 : _h.codeSigningConfigArn,
          architectures: architecture ? [architecture.name] : void 0
        });
        resource.node.addDependency(this.role);
        this.functionName = this.getResourceNameAttribute(resource.ref);
        this.functionArn = this.getResourceArnAttribute(resource.attrArn, {
          service: "lambda",
          resource: "function",
          resourceName: this.physicalName,
          sep: ":"
        });
        this.runtime = props.runtime;
        if (props.layers) {
          if (props.runtime === runtime_1.Runtime.FROM_IMAGE) {
            throw new Error("Layers are not supported for container image functions");
          }
          this.addLayers(...props.layers);
        }
        for (const event of props.events || []) {
          this.addEventSource(event);
        }
        if (props.logRetention) {
          const logRetention = new logs.LogRetention(this, "LogRetention", {
            logGroupName: `/aws/lambda/${this.functionName}`,
            retention: props.logRetention,
            role: props.logRetentionRole,
            logRetentionRetryOptions: props.logRetentionRetryOptions
          });
          this._logGroup = logs.LogGroup.fromLogGroupArn(this, "LogGroup", logRetention.logGroupArn);
        }
        props.code.bindToResource(resource);
        if (props.onFailure || props.onSuccess || props.maxEventAge || props.retryAttempts !== void 0) {
          this.configureAsyncInvoke({
            onFailure: props.onFailure,
            onSuccess: props.onSuccess,
            maxEventAge: props.maxEventAge,
            retryAttempts: props.retryAttempts
          });
        }
        this.currentVersionOptions = props.currentVersionOptions;
        if (props.filesystem) {
          if (!props.vpc) {
            throw new Error("Cannot configure 'filesystem' without configuring a VPC.");
          }
          const config = props.filesystem.config;
          if (config.dependency) {
            this.node.addDependency(...config.dependency);
          }
          this.connections.securityGroups.forEach((sg) => {
            sg.node.findAll().forEach((child) => {
              if (child instanceof core_1.CfnResource && child.cfnResourceType === "AWS::EC2::SecurityGroupEgress") {
                resource.node.addDependency(child);
              }
            });
          });
          (_j = config.connections) === null || _j === void 0 ? void 0 : _j.securityGroups.forEach((sg) => {
            sg.node.findAll().forEach((child) => {
              if (child instanceof core_1.CfnResource && child.cfnResourceType === "AWS::EC2::SecurityGroupIngress") {
                resource.node.addDependency(child);
              }
            });
          });
        }
        this.configureLambdaInsights(props);
      }
      get currentVersion() {
        if (this._currentVersion) {
          return this._currentVersion;
        }
        this._currentVersion = new lambda_version_1.Version(this, "CurrentVersion", __spreadValues({
          lambda: this
        }, this.currentVersionOptions));
        const cfn = this._currentVersion.node.defaultChild;
        const originalLogicalId = this.stack.resolve(cfn.logicalId);
        cfn.overrideLogicalId(core_1.Lazy.uncachedString({
          produce: () => {
            const hash = function_hash_1.calculateFunctionHash(this);
            const logicalId = function_hash_1.trimFromStart(originalLogicalId, 255 - 32);
            return `${logicalId}${hash}`;
          }
        }));
        return this._currentVersion;
      }
      static classifyVersionProperty(propertyName, locked) {
        this._VER_PROPS[propertyName] = locked;
      }
      static fromFunctionArn(scope, id, functionArn) {
        return Function2.fromFunctionAttributes(scope, id, { functionArn });
      }
      static fromFunctionAttributes(scope, id, attrs) {
        const functionArn = attrs.functionArn;
        const functionName = extractNameFromArn(attrs.functionArn);
        const role = attrs.role;
        class Import extends function_base_1.FunctionBase {
          constructor(s, i) {
            var _b;
            super(s, i);
            this.functionName = functionName;
            this.functionArn = functionArn;
            this.role = role;
            this.permissionsNode = this.node;
            this.canCreatePermissions = (_b = attrs.sameEnvironment) !== null && _b !== void 0 ? _b : this._isStackAccount();
            this.grantPrincipal = role || new iam.UnknownPrincipal({ resource: this });
            if (attrs.securityGroup) {
              this._connections = new ec2.Connections({
                securityGroups: [attrs.securityGroup]
              });
            } else if (attrs.securityGroupId) {
              this._connections = new ec2.Connections({
                securityGroups: [ec2.SecurityGroup.fromSecurityGroupId(scope, "SecurityGroup", attrs.securityGroupId)]
              });
            }
          }
        }
        return new Import(scope, id);
      }
      static metricAll(metricName, props) {
        return new cloudwatch.Metric(__spreadValues({
          namespace: "AWS/Lambda",
          metricName
        }, props));
      }
      static metricAllErrors(props) {
        return this.metricAll("Errors", __spreadValues({ statistic: "sum" }, props));
      }
      static metricAllDuration(props) {
        return this.metricAll("Duration", props);
      }
      static metricAllInvocations(props) {
        return this.metricAll("Invocations", __spreadValues({ statistic: "sum" }, props));
      }
      static metricAllThrottles(props) {
        return this.metricAll("Throttles", __spreadValues({ statistic: "sum" }, props));
      }
      static metricAllConcurrentExecutions(props) {
        return this.metricAll("ConcurrentExecutions", __spreadValues({ statistic: "max" }, props));
      }
      static metricAllUnreservedConcurrentExecutions(props) {
        return this.metricAll("UnreservedConcurrentExecutions", __spreadValues({ statistic: "max" }, props));
      }
      addEnvironment(key, value, options) {
        this.environment[key] = __spreadValues({ value }, options);
        return this;
      }
      addLayers(...layers) {
        for (const layer of layers) {
          if (this.layers.length === 5) {
            throw new Error("Unable to add layer: this lambda function already uses 5 layers.");
          }
          if (layer.compatibleRuntimes && !layer.compatibleRuntimes.find((runtime) => runtime.runtimeEquals(this.runtime))) {
            const runtimes = layer.compatibleRuntimes.map((runtime) => runtime.name).join(", ");
            throw new Error(`This lambda function uses a runtime that is incompatible with this layer (${this.runtime.name} is not in [${runtimes}])`);
          }
          this.layers.push(layer);
        }
      }
      addVersion(name, codeSha256, description, provisionedExecutions, asyncInvokeConfig = {}) {
        return new lambda_version_1.Version(this, "Version" + name, __spreadValues({
          lambda: this,
          codeSha256,
          description,
          provisionedConcurrentExecutions: provisionedExecutions
        }, asyncInvokeConfig));
      }
      get logGroup() {
        if (!this._logGroup) {
          const logRetention = new logs.LogRetention(this, "LogRetention", {
            logGroupName: `/aws/lambda/${this.functionName}`,
            retention: logs.RetentionDays.INFINITE
          });
          this._logGroup = logs.LogGroup.fromLogGroupArn(this, `${this.node.id}-LogGroup`, logRetention.logGroupArn);
        }
        return this._logGroup;
      }
      _checkEdgeCompatibility() {
        const envEntries = Object.entries(this.environment);
        for (const [key, config] of envEntries) {
          if (config.removeInEdge) {
            delete this.environment[key];
            core_1.Annotations.of(this).addInfo(`Removed ${key} environment variable for Lambda@Edge compatibility`);
          }
        }
        const envKeys = Object.keys(this.environment);
        if (envKeys.length !== 0) {
          throw new Error(`The function ${this.node.path} contains environment variables [${envKeys}] and is not compatible with Lambda@Edge. Environment variables can be marked for removal when used in Lambda@Edge by setting the 'removeInEdge' property in the 'addEnvironment()' API.`);
        }
        return;
      }
      configureLambdaInsights(props) {
        var _b;
        if (props.insightsVersion === void 0) {
          return;
        }
        if (props.runtime !== runtime_1.Runtime.FROM_IMAGE) {
          this.addLayers(layers_1.LayerVersion.fromLayerVersionArn(this, "LambdaInsightsLayer", props.insightsVersion.layerVersionArn));
        }
        (_b = this.role) === null || _b === void 0 ? void 0 : _b.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName("CloudWatchLambdaInsightsExecutionRolePolicy"));
      }
      renderEnvironment() {
        if (!this.environment || Object.keys(this.environment).length === 0) {
          return void 0;
        }
        const variables = {};
        const keys = this._currentVersion ? Object.keys(this.environment).sort() : Object.keys(this.environment);
        for (const key of keys) {
          variables[key] = this.environment[key].value;
        }
        return { variables };
      }
      configureVpc(props) {
        var _b;
        if ((props.securityGroup || props.allowAllOutbound !== void 0) && !props.vpc) {
          throw new Error("Cannot configure 'securityGroup' or 'allowAllOutbound' without configuring a VPC");
        }
        if (!props.vpc) {
          return void 0;
        }
        if (props.securityGroup && props.allowAllOutbound !== void 0) {
          throw new Error("Configure 'allowAllOutbound' directly on the supplied SecurityGroup.");
        }
        let securityGroups;
        if (props.securityGroup && props.securityGroups) {
          throw new Error("Only one of the function props, securityGroup or securityGroups, is allowed");
        }
        if (props.securityGroups) {
          securityGroups = props.securityGroups;
        } else {
          const securityGroup = props.securityGroup || new ec2.SecurityGroup(this, "SecurityGroup", {
            vpc: props.vpc,
            description: "Automatic security group for Lambda Function " + core_1.Names.uniqueId(this),
            allowAllOutbound: props.allowAllOutbound
          });
          securityGroups = [securityGroup];
        }
        this._connections = new ec2.Connections({ securityGroups });
        if (props.filesystem) {
          if (props.filesystem.config.connections) {
            props.filesystem.config.connections.allowDefaultPortFrom(this);
          }
        }
        const allowPublicSubnet = (_b = props.allowPublicSubnet) !== null && _b !== void 0 ? _b : false;
        const { subnetIds } = props.vpc.selectSubnets(props.vpcSubnets);
        const publicSubnetIds = new Set(props.vpc.publicSubnets.map((s) => s.subnetId));
        for (const subnetId of subnetIds) {
          if (publicSubnetIds.has(subnetId) && !allowPublicSubnet) {
            throw new Error("Lambda Functions in a public subnet can NOT access the internet. If you are aware of this limitation and would still like to place the function int a public subnet, set `allowPublicSubnet` to true");
          }
        }
        return {
          subnetIds,
          securityGroupIds: securityGroups.map((sg) => sg.securityGroupId)
        };
      }
      buildDeadLetterQueue(props) {
        if (props.deadLetterQueue && props.deadLetterQueueEnabled === false) {
          throw Error("deadLetterQueue defined but deadLetterQueueEnabled explicitly set to false");
        }
        if (!props.deadLetterQueue && !props.deadLetterQueueEnabled) {
          return void 0;
        }
        const deadLetterQueue = props.deadLetterQueue || new sqs.Queue(this, "DeadLetterQueue", {
          retentionPeriod: core_1.Duration.days(14)
        });
        this.addToRolePolicy(new iam.PolicyStatement({
          actions: ["sqs:SendMessage"],
          resources: [deadLetterQueue.queueArn]
        }));
        return deadLetterQueue;
      }
      buildDeadLetterConfig(deadLetterQueue) {
        if (deadLetterQueue) {
          return {
            targetArn: deadLetterQueue.queueArn
          };
        } else {
          return void 0;
        }
      }
      buildTracingConfig(props) {
        if (props.tracing === void 0 || props.tracing === Tracing.DISABLED) {
          return void 0;
        }
        this.addToRolePolicy(new iam.PolicyStatement({
          actions: ["xray:PutTraceSegments", "xray:PutTelemetryRecords"],
          resources: ["*"]
        }));
        return {
          mode: props.tracing
        };
      }
      validateProfiling(props) {
        if (!props.runtime.supportsCodeGuruProfiling) {
          throw new Error(`CodeGuru profiling is not supported by runtime ${props.runtime.name}`);
        }
        if (props.environment && (props.environment.AWS_CODEGURU_PROFILER_GROUP_ARN || props.environment.AWS_CODEGURU_PROFILER_ENABLED)) {
          throw new Error("AWS_CODEGURU_PROFILER_GROUP_ARN and AWS_CODEGURU_PROFILER_ENABLED must not be set when profiling options enabled");
        }
      }
    };
    exports2.Function = Function2;
    _a = JSII_RTTI_SYMBOL_1;
    Function2[_a] = { fqn: "@aws-cdk/aws-lambda.Function", version: "1.132.0" };
    Function2._VER_PROPS = {};
    function extractNameFromArn(arn) {
      return core_1.Fn.select(6, core_1.Fn.split(":", arn));
    }
    function verifyCodeConfig(code, props) {
      const codeType = [code.inlineCode, code.s3Location, code.image];
      if (codeType.filter((x) => !!x).length !== 1) {
        throw new Error('lambda.Code must specify exactly one of: "inlineCode", "s3Location", or "image"');
      }
      if (!!code.image === (props.handler !== handler_1.Handler.FROM_IMAGE)) {
        throw new Error("handler must be `Handler.FROM_IMAGE` when using image asset for Lambda function");
      }
      if (!!code.image === (props.runtime !== runtime_1.Runtime.FROM_IMAGE)) {
        throw new Error("runtime must be `Runtime.FROM_IMAGE` when using image asset for Lambda function");
      }
      if (code.inlineCode && !props.runtime.supportsInlineCode) {
        throw new Error(`Inline source not allowed for ${props.runtime.name}`);
      }
    }
    exports2.verifyCodeConfig = verifyCodeConfig;
    function undefinedIfNoKeys(struct) {
      const allUndefined = Object.values(struct).every((val) => val === void 0);
      return allUndefined ? void 0 : struct;
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/lambda-version.js
var require_lambda_version = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/lambda-version.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.extractQualifierFromArn = exports2.Version = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var function_1 = require_function();
    var function_base_1 = require_function_base();
    var lambda_generated_1 = require_lambda_generated();
    var util_1 = require_util4();
    var Version = class extends function_base_1.QualifiedFunctionBase {
      constructor(scope, id, props) {
        super(scope, id);
        this.canCreatePermissions = true;
        this.lambda = props.lambda;
        const version = new lambda_generated_1.CfnVersion(this, "Resource", {
          codeSha256: props.codeSha256,
          description: props.description,
          functionName: props.lambda.functionName,
          provisionedConcurrencyConfig: this.determineProvisionedConcurrency(props)
        });
        if (props.removalPolicy) {
          version.applyRemovalPolicy(props.removalPolicy, {
            default: core_1.RemovalPolicy.DESTROY
          });
        }
        this.version = version.attrVersion;
        this.functionArn = version.ref;
        this.functionName = `${this.lambda.functionName}:${this.version}`;
        this.qualifier = version.attrVersion;
        if (props.onFailure || props.onSuccess || props.maxEventAge || props.retryAttempts !== void 0) {
          this.configureAsyncInvoke({
            onFailure: props.onFailure,
            onSuccess: props.onSuccess,
            maxEventAge: props.maxEventAge,
            retryAttempts: props.retryAttempts
          });
        }
      }
      static fromVersionArn(scope, id, versionArn) {
        const version = extractQualifierFromArn(versionArn);
        const lambda = function_1.Function.fromFunctionArn(scope, `${id}Function`, versionArn);
        class Import extends function_base_1.QualifiedFunctionBase {
          constructor() {
            super(...arguments);
            this.version = version;
            this.lambda = lambda;
            this.functionName = `${lambda.functionName}:${version}`;
            this.functionArn = versionArn;
            this.grantPrincipal = lambda.grantPrincipal;
            this.role = lambda.role;
            this.qualifier = version;
            this.canCreatePermissions = this._isStackAccount();
          }
          addAlias(name, opts = {}) {
            return util_1.addAlias(this, this, name, opts);
          }
          get edgeArn() {
            if (version === "$LATEST") {
              throw new Error("$LATEST function version cannot be used for Lambda@Edge");
            }
            return this.functionArn;
          }
        }
        return new Import(scope, id);
      }
      static fromVersionAttributes(scope, id, attrs) {
        class Import extends function_base_1.QualifiedFunctionBase {
          constructor() {
            super(...arguments);
            this.version = attrs.version;
            this.lambda = attrs.lambda;
            this.functionName = `${attrs.lambda.functionName}:${attrs.version}`;
            this.functionArn = `${attrs.lambda.functionArn}:${attrs.version}`;
            this.grantPrincipal = attrs.lambda.grantPrincipal;
            this.role = attrs.lambda.role;
            this.qualifier = attrs.version;
            this.canCreatePermissions = this._isStackAccount();
          }
          addAlias(name, opts = {}) {
            return util_1.addAlias(this, this, name, opts);
          }
          get edgeArn() {
            if (attrs.version === "$LATEST") {
              throw new Error("$LATEST function version cannot be used for Lambda@Edge");
            }
            return this.functionArn;
          }
        }
        return new Import(scope, id);
      }
      get grantPrincipal() {
        return this.lambda.grantPrincipal;
      }
      get role() {
        return this.lambda.role;
      }
      metric(metricName, props = {}) {
        return super.metric(metricName, __spreadValues({
          dimensions: {
            FunctionName: this.lambda.functionName,
            Resource: `${this.lambda.functionArn}:${this.version}`
          }
        }, props));
      }
      addAlias(aliasName, options = {}) {
        return util_1.addAlias(this, this, aliasName, options);
      }
      get edgeArn() {
        if (this.version === "$LATEST") {
          throw new Error("$LATEST function version cannot be used for Lambda@Edge");
        }
        return core_1.Lazy.string({
          produce: () => {
            if (this.lambda instanceof function_1.Function) {
              this.lambda._checkEdgeCompatibility();
            }
            return this.functionArn;
          }
        });
      }
      determineProvisionedConcurrency(props) {
        if (!props.provisionedConcurrentExecutions) {
          return void 0;
        }
        if (props.provisionedConcurrentExecutions <= 0) {
          throw new Error("provisionedConcurrentExecutions must have value greater than or equal to 1");
        }
        return { provisionedConcurrentExecutions: props.provisionedConcurrentExecutions };
      }
    };
    exports2.Version = Version;
    _a = JSII_RTTI_SYMBOL_1;
    Version[_a] = { fqn: "@aws-cdk/aws-lambda.Version", version: "1.132.0" };
    function extractQualifierFromArn(arn) {
      return core_1.Fn.select(7, core_1.Fn.split(":", arn));
    }
    exports2.extractQualifierFromArn = extractQualifierFromArn;
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/private/scalable-function-attribute.js
var require_scalable_function_attribute = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/private/scalable-function-attribute.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ScalableFunctionAttribute = void 0;
    var appscaling = require_lib12();
    var core_1 = require_lib8();
    var ScalableFunctionAttribute = class extends appscaling.BaseScalableAttribute {
      constructor(scope, id, props) {
        super(scope, id, props);
      }
      scaleOnUtilization(options) {
        if (!core_1.Token.isUnresolved(options.utilizationTarget) && (options.utilizationTarget < 0.1 || options.utilizationTarget > 0.9)) {
          throw new Error(`Utilization Target should be between 0.1 and 0.9. Found ${options.utilizationTarget}.`);
        }
        super.doScaleToTrackMetric("Tracking", __spreadValues({
          targetValue: options.utilizationTarget,
          predefinedMetric: appscaling.PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION
        }, options));
      }
      scaleOnSchedule(id, action) {
        super.doScaleOnSchedule(id, action);
      }
    };
    exports2.ScalableFunctionAttribute = ScalableFunctionAttribute;
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/alias.js
var require_alias2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/alias.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Alias = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var appscaling = require_lib12();
    var iam = require_lib9();
    var function_base_1 = require_function_base();
    var lambda_version_1 = require_lambda_version();
    var lambda_generated_1 = require_lambda_generated();
    var scalable_function_attribute_1 = require_scalable_function_attribute();
    var Alias = class extends function_base_1.QualifiedFunctionBase {
      constructor(scope, id, props) {
        super(scope, id, {
          physicalName: props.aliasName
        });
        this.canCreatePermissions = true;
        this.lambda = props.version.lambda;
        this.aliasName = this.physicalName;
        this.version = props.version;
        const alias = new lambda_generated_1.CfnAlias(this, "Resource", {
          name: this.aliasName,
          description: props.description,
          functionName: this.version.lambda.functionName,
          functionVersion: props.version.version,
          routingConfig: this.determineRoutingConfig(props),
          provisionedConcurrencyConfig: this.determineProvisionedConcurrency(props)
        });
        this.scalingRole = iam.Role.fromRoleArn(this, "ScalingRole", this.stack.formatArn({
          service: "iam",
          region: "",
          resource: "role/aws-service-role/lambda.application-autoscaling.amazonaws.com",
          resourceName: "AWSServiceRoleForApplicationAutoScaling_LambdaConcurrency"
        }));
        this.functionArn = this.getResourceArnAttribute(alias.ref, {
          service: "lambda",
          resource: "function",
          resourceName: `${this.lambda.functionName}:${this.physicalName}`,
          sep: ":"
        });
        this.qualifier = lambda_version_1.extractQualifierFromArn(alias.ref);
        if (props.onFailure || props.onSuccess || props.maxEventAge || props.retryAttempts !== void 0) {
          this.configureAsyncInvoke({
            onFailure: props.onFailure,
            onSuccess: props.onSuccess,
            maxEventAge: props.maxEventAge,
            retryAttempts: props.retryAttempts
          });
        }
        this.functionName = `${this.stack.parseArn(this.functionArn, ":").resourceName}:${this.aliasName}`;
      }
      static fromAliasAttributes(scope, id, attrs) {
        class Imported extends function_base_1.QualifiedFunctionBase {
          constructor() {
            super(...arguments);
            this.aliasName = attrs.aliasName;
            this.version = attrs.aliasVersion;
            this.lambda = attrs.aliasVersion.lambda;
            this.functionArn = `${attrs.aliasVersion.lambda.functionArn}:${attrs.aliasName}`;
            this.functionName = `${attrs.aliasVersion.lambda.functionName}:${attrs.aliasName}`;
            this.grantPrincipal = attrs.aliasVersion.grantPrincipal;
            this.role = attrs.aliasVersion.role;
            this.canCreatePermissions = this._isStackAccount();
            this.qualifier = attrs.aliasName;
          }
        }
        return new Imported(scope, id);
      }
      get grantPrincipal() {
        return this.version.grantPrincipal;
      }
      get role() {
        return this.version.role;
      }
      metric(metricName, props = {}) {
        return super.metric(metricName, __spreadValues({
          dimensions: {
            FunctionName: this.lambda.functionName,
            Resource: `${this.lambda.functionName}:${this.aliasName}`
          }
        }, props));
      }
      addAutoScaling(options) {
        var _b;
        if (this.scalableAlias) {
          throw new Error("AutoScaling already enabled for this alias");
        }
        return this.scalableAlias = new scalable_function_attribute_1.ScalableFunctionAttribute(this, "AliasScaling", {
          minCapacity: (_b = options.minCapacity) !== null && _b !== void 0 ? _b : 1,
          maxCapacity: options.maxCapacity,
          resourceId: `function:${this.functionName}`,
          dimension: "lambda:function:ProvisionedConcurrency",
          serviceNamespace: appscaling.ServiceNamespace.LAMBDA,
          role: this.scalingRole
        });
      }
      determineRoutingConfig(props) {
        if (!props.additionalVersions || props.additionalVersions.length === 0) {
          return void 0;
        }
        this.validateAdditionalWeights(props.additionalVersions);
        return {
          additionalVersionWeights: props.additionalVersions.map((vw) => {
            return {
              functionVersion: vw.version.version,
              functionWeight: vw.weight
            };
          })
        };
      }
      validateAdditionalWeights(weights) {
        const total = weights.map((w) => {
          if (w.weight < 0 || w.weight > 1) {
            throw new Error(`Additional version weight must be between 0 and 1, got: ${w.weight}`);
          }
          return w.weight;
        }).reduce((a, x) => a + x);
        if (total > 1) {
          throw new Error(`Sum of additional version weights must not exceed 1, got: ${total}`);
        }
      }
      determineProvisionedConcurrency(props) {
        if (!props.provisionedConcurrentExecutions) {
          return void 0;
        }
        if (props.provisionedConcurrentExecutions <= 0) {
          throw new Error("provisionedConcurrentExecutions must have value greater than or equal to 1");
        }
        return { provisionedConcurrentExecutions: props.provisionedConcurrentExecutions };
      }
    };
    exports2.Alias = Alias;
    _a = JSII_RTTI_SYMBOL_1;
    Alias[_a] = { fqn: "@aws-cdk/aws-lambda.Alias", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/dlq.js
var require_dlq = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/dlq.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/@aws-cdk/aws-ecr/lib/ecr.generated.js
var require_ecr_generated = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ecr/lib/ecr.generated.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    var _d;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnRepository = exports2.CfnReplicationConfiguration = exports2.CfnRegistryPolicy = exports2.CfnPublicRepository = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var cfn_parse = require_cfn_parse();
    function CfnPublicRepositoryPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("repositoryCatalogData", cdk.validateObject)(properties.repositoryCatalogData));
      errors.collect(cdk.propertyValidator("repositoryName", cdk.validateString)(properties.repositoryName));
      errors.collect(cdk.propertyValidator("repositoryPolicyText", cdk.validateObject)(properties.repositoryPolicyText));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnPublicRepositoryProps"');
    }
    function cfnPublicRepositoryPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnPublicRepositoryPropsValidator(properties).assertSuccess();
      return {
        RepositoryCatalogData: cdk.objectToCloudFormation(properties.repositoryCatalogData),
        RepositoryName: cdk.stringToCloudFormation(properties.repositoryName),
        RepositoryPolicyText: cdk.objectToCloudFormation(properties.repositoryPolicyText),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnPublicRepositoryPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("repositoryCatalogData", "RepositoryCatalogData", properties.RepositoryCatalogData != null ? cfn_parse.FromCloudFormation.getAny(properties.RepositoryCatalogData) : void 0);
      ret.addPropertyResult("repositoryName", "RepositoryName", properties.RepositoryName != null ? cfn_parse.FromCloudFormation.getString(properties.RepositoryName) : void 0);
      ret.addPropertyResult("repositoryPolicyText", "RepositoryPolicyText", properties.RepositoryPolicyText != null ? cfn_parse.FromCloudFormation.getAny(properties.RepositoryPolicyText) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnPublicRepository = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnPublicRepository.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.repositoryCatalogData = props.repositoryCatalogData;
        this.repositoryName = props.repositoryName;
        this.repositoryPolicyText = props.repositoryPolicyText;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::ECR::PublicRepository", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnPublicRepositoryPropsFromCloudFormation(resourceProperties);
        const ret = new CfnPublicRepository(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnPublicRepository.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          repositoryCatalogData: this.repositoryCatalogData,
          repositoryName: this.repositoryName,
          repositoryPolicyText: this.repositoryPolicyText,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnPublicRepositoryPropsToCloudFormation(props);
      }
    };
    exports2.CfnPublicRepository = CfnPublicRepository;
    _a = JSII_RTTI_SYMBOL_1;
    CfnPublicRepository[_a] = { fqn: "@aws-cdk/aws-ecr.CfnPublicRepository", version: "1.132.0" };
    CfnPublicRepository.CFN_RESOURCE_TYPE_NAME = "AWS::ECR::PublicRepository";
    function CfnRegistryPolicyPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("policyText", cdk.requiredValidator)(properties.policyText));
      errors.collect(cdk.propertyValidator("policyText", cdk.validateObject)(properties.policyText));
      return errors.wrap('supplied properties not correct for "CfnRegistryPolicyProps"');
    }
    function cfnRegistryPolicyPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRegistryPolicyPropsValidator(properties).assertSuccess();
      return {
        PolicyText: cdk.objectToCloudFormation(properties.policyText)
      };
    }
    function CfnRegistryPolicyPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("policyText", "PolicyText", cfn_parse.FromCloudFormation.getAny(properties.PolicyText));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnRegistryPolicy = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnRegistryPolicy.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "policyText", this);
        this.attrRegistryId = cdk.Token.asString(this.getAtt("RegistryId"));
        this.policyText = props.policyText;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnRegistryPolicyPropsFromCloudFormation(resourceProperties);
        const ret = new CfnRegistryPolicy(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnRegistryPolicy.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          policyText: this.policyText
        };
      }
      renderProperties(props) {
        return cfnRegistryPolicyPropsToCloudFormation(props);
      }
    };
    exports2.CfnRegistryPolicy = CfnRegistryPolicy;
    _b = JSII_RTTI_SYMBOL_1;
    CfnRegistryPolicy[_b] = { fqn: "@aws-cdk/aws-ecr.CfnRegistryPolicy", version: "1.132.0" };
    CfnRegistryPolicy.CFN_RESOURCE_TYPE_NAME = "AWS::ECR::RegistryPolicy";
    function CfnReplicationConfigurationPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("replicationConfiguration", cdk.requiredValidator)(properties.replicationConfiguration));
      errors.collect(cdk.propertyValidator("replicationConfiguration", CfnReplicationConfiguration_ReplicationConfigurationPropertyValidator)(properties.replicationConfiguration));
      return errors.wrap('supplied properties not correct for "CfnReplicationConfigurationProps"');
    }
    function cfnReplicationConfigurationPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnReplicationConfigurationPropsValidator(properties).assertSuccess();
      return {
        ReplicationConfiguration: cfnReplicationConfigurationReplicationConfigurationPropertyToCloudFormation(properties.replicationConfiguration)
      };
    }
    function CfnReplicationConfigurationPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("replicationConfiguration", "ReplicationConfiguration", CfnReplicationConfigurationReplicationConfigurationPropertyFromCloudFormation(properties.ReplicationConfiguration));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnReplicationConfiguration = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnReplicationConfiguration.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "replicationConfiguration", this);
        this.attrRegistryId = cdk.Token.asString(this.getAtt("RegistryId"));
        this.replicationConfiguration = props.replicationConfiguration;
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnReplicationConfigurationPropsFromCloudFormation(resourceProperties);
        const ret = new CfnReplicationConfiguration(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnReplicationConfiguration.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          replicationConfiguration: this.replicationConfiguration
        };
      }
      renderProperties(props) {
        return cfnReplicationConfigurationPropsToCloudFormation(props);
      }
    };
    exports2.CfnReplicationConfiguration = CfnReplicationConfiguration;
    _c = JSII_RTTI_SYMBOL_1;
    CfnReplicationConfiguration[_c] = { fqn: "@aws-cdk/aws-ecr.CfnReplicationConfiguration", version: "1.132.0" };
    CfnReplicationConfiguration.CFN_RESOURCE_TYPE_NAME = "AWS::ECR::ReplicationConfiguration";
    function CfnReplicationConfiguration_ReplicationConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("rules", cdk.requiredValidator)(properties.rules));
      errors.collect(cdk.propertyValidator("rules", cdk.listValidator(CfnReplicationConfiguration_ReplicationRulePropertyValidator))(properties.rules));
      return errors.wrap('supplied properties not correct for "ReplicationConfigurationProperty"');
    }
    function cfnReplicationConfigurationReplicationConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnReplicationConfiguration_ReplicationConfigurationPropertyValidator(properties).assertSuccess();
      return {
        Rules: cdk.listMapper(cfnReplicationConfigurationReplicationRulePropertyToCloudFormation)(properties.rules)
      };
    }
    function CfnReplicationConfigurationReplicationConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("rules", "Rules", cfn_parse.FromCloudFormation.getArray(CfnReplicationConfigurationReplicationRulePropertyFromCloudFormation)(properties.Rules));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnReplicationConfiguration_ReplicationDestinationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("region", cdk.requiredValidator)(properties.region));
      errors.collect(cdk.propertyValidator("region", cdk.validateString)(properties.region));
      errors.collect(cdk.propertyValidator("registryId", cdk.requiredValidator)(properties.registryId));
      errors.collect(cdk.propertyValidator("registryId", cdk.validateString)(properties.registryId));
      return errors.wrap('supplied properties not correct for "ReplicationDestinationProperty"');
    }
    function cfnReplicationConfigurationReplicationDestinationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnReplicationConfiguration_ReplicationDestinationPropertyValidator(properties).assertSuccess();
      return {
        Region: cdk.stringToCloudFormation(properties.region),
        RegistryId: cdk.stringToCloudFormation(properties.registryId)
      };
    }
    function CfnReplicationConfigurationReplicationDestinationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("region", "Region", cfn_parse.FromCloudFormation.getString(properties.Region));
      ret.addPropertyResult("registryId", "RegistryId", cfn_parse.FromCloudFormation.getString(properties.RegistryId));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnReplicationConfiguration_ReplicationRulePropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("destinations", cdk.requiredValidator)(properties.destinations));
      errors.collect(cdk.propertyValidator("destinations", cdk.listValidator(CfnReplicationConfiguration_ReplicationDestinationPropertyValidator))(properties.destinations));
      errors.collect(cdk.propertyValidator("repositoryFilters", cdk.listValidator(CfnReplicationConfiguration_RepositoryFilterPropertyValidator))(properties.repositoryFilters));
      return errors.wrap('supplied properties not correct for "ReplicationRuleProperty"');
    }
    function cfnReplicationConfigurationReplicationRulePropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnReplicationConfiguration_ReplicationRulePropertyValidator(properties).assertSuccess();
      return {
        Destinations: cdk.listMapper(cfnReplicationConfigurationReplicationDestinationPropertyToCloudFormation)(properties.destinations),
        RepositoryFilters: cdk.listMapper(cfnReplicationConfigurationRepositoryFilterPropertyToCloudFormation)(properties.repositoryFilters)
      };
    }
    function CfnReplicationConfigurationReplicationRulePropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("destinations", "Destinations", cfn_parse.FromCloudFormation.getArray(CfnReplicationConfigurationReplicationDestinationPropertyFromCloudFormation)(properties.Destinations));
      ret.addPropertyResult("repositoryFilters", "RepositoryFilters", properties.RepositoryFilters != null ? cfn_parse.FromCloudFormation.getArray(CfnReplicationConfigurationRepositoryFilterPropertyFromCloudFormation)(properties.RepositoryFilters) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnReplicationConfiguration_RepositoryFilterPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("filter", cdk.requiredValidator)(properties.filter));
      errors.collect(cdk.propertyValidator("filter", cdk.validateString)(properties.filter));
      errors.collect(cdk.propertyValidator("filterType", cdk.requiredValidator)(properties.filterType));
      errors.collect(cdk.propertyValidator("filterType", cdk.validateString)(properties.filterType));
      return errors.wrap('supplied properties not correct for "RepositoryFilterProperty"');
    }
    function cfnReplicationConfigurationRepositoryFilterPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnReplicationConfiguration_RepositoryFilterPropertyValidator(properties).assertSuccess();
      return {
        Filter: cdk.stringToCloudFormation(properties.filter),
        FilterType: cdk.stringToCloudFormation(properties.filterType)
      };
    }
    function CfnReplicationConfigurationRepositoryFilterPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("filter", "Filter", cfn_parse.FromCloudFormation.getString(properties.Filter));
      ret.addPropertyResult("filterType", "FilterType", cfn_parse.FromCloudFormation.getString(properties.FilterType));
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnRepositoryPropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("encryptionConfiguration", CfnRepository_EncryptionConfigurationPropertyValidator)(properties.encryptionConfiguration));
      errors.collect(cdk.propertyValidator("imageScanningConfiguration", CfnRepository_ImageScanningConfigurationPropertyValidator)(properties.imageScanningConfiguration));
      errors.collect(cdk.propertyValidator("imageTagMutability", cdk.validateString)(properties.imageTagMutability));
      errors.collect(cdk.propertyValidator("lifecyclePolicy", CfnRepository_LifecyclePolicyPropertyValidator)(properties.lifecyclePolicy));
      errors.collect(cdk.propertyValidator("repositoryName", cdk.validateString)(properties.repositoryName));
      errors.collect(cdk.propertyValidator("repositoryPolicyText", cdk.validateObject)(properties.repositoryPolicyText));
      errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnRepositoryProps"');
    }
    function cfnRepositoryPropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRepositoryPropsValidator(properties).assertSuccess();
      return {
        EncryptionConfiguration: cfnRepositoryEncryptionConfigurationPropertyToCloudFormation(properties.encryptionConfiguration),
        ImageScanningConfiguration: cfnRepositoryImageScanningConfigurationPropertyToCloudFormation(properties.imageScanningConfiguration),
        ImageTagMutability: cdk.stringToCloudFormation(properties.imageTagMutability),
        LifecyclePolicy: cfnRepositoryLifecyclePolicyPropertyToCloudFormation(properties.lifecyclePolicy),
        RepositoryName: cdk.stringToCloudFormation(properties.repositoryName),
        RepositoryPolicyText: cdk.objectToCloudFormation(properties.repositoryPolicyText),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
      };
    }
    function CfnRepositoryPropsFromCloudFormation(properties) {
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("encryptionConfiguration", "EncryptionConfiguration", properties.EncryptionConfiguration != null ? CfnRepositoryEncryptionConfigurationPropertyFromCloudFormation(properties.EncryptionConfiguration) : void 0);
      ret.addPropertyResult("imageScanningConfiguration", "ImageScanningConfiguration", properties.ImageScanningConfiguration != null ? CfnRepositoryImageScanningConfigurationPropertyFromCloudFormation(properties.ImageScanningConfiguration) : void 0);
      ret.addPropertyResult("imageTagMutability", "ImageTagMutability", properties.ImageTagMutability != null ? cfn_parse.FromCloudFormation.getString(properties.ImageTagMutability) : void 0);
      ret.addPropertyResult("lifecyclePolicy", "LifecyclePolicy", properties.LifecyclePolicy != null ? CfnRepositoryLifecyclePolicyPropertyFromCloudFormation(properties.LifecyclePolicy) : void 0);
      ret.addPropertyResult("repositoryName", "RepositoryName", properties.RepositoryName != null ? cfn_parse.FromCloudFormation.getString(properties.RepositoryName) : void 0);
      ret.addPropertyResult("repositoryPolicyText", "RepositoryPolicyText", properties.RepositoryPolicyText != null ? cfn_parse.FromCloudFormation.getAny(properties.RepositoryPolicyText) : void 0);
      ret.addPropertyResult("tags", "Tags", properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    var CfnRepository = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnRepository.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.attrArn = cdk.Token.asString(this.getAtt("Arn"));
        this.attrRepositoryUri = cdk.Token.asString(this.getAtt("RepositoryUri"));
        this.encryptionConfiguration = props.encryptionConfiguration;
        this.imageScanningConfiguration = props.imageScanningConfiguration;
        this.imageTagMutability = props.imageTagMutability;
        this.lifecyclePolicy = props.lifecyclePolicy;
        this.repositoryName = props.repositoryName;
        this.repositoryPolicyText = props.repositoryPolicyText;
        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::ECR::Repository", props.tags, { tagPropertyName: "tags" });
      }
      static _fromCloudFormation(scope, id, resourceAttributes, options) {
        resourceAttributes = resourceAttributes || {};
        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
        const propsResult = CfnRepositoryPropsFromCloudFormation(resourceProperties);
        const ret = new CfnRepository(scope, id, propsResult.value);
        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
          ret.addPropertyOverride(propKey, propVal);
        }
        options.parser.handleAttributes(ret, resourceAttributes, id);
        return ret;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnRepository.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          encryptionConfiguration: this.encryptionConfiguration,
          imageScanningConfiguration: this.imageScanningConfiguration,
          imageTagMutability: this.imageTagMutability,
          lifecyclePolicy: this.lifecyclePolicy,
          repositoryName: this.repositoryName,
          repositoryPolicyText: this.repositoryPolicyText,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnRepositoryPropsToCloudFormation(props);
      }
    };
    exports2.CfnRepository = CfnRepository;
    _d = JSII_RTTI_SYMBOL_1;
    CfnRepository[_d] = { fqn: "@aws-cdk/aws-ecr.CfnRepository", version: "1.132.0" };
    CfnRepository.CFN_RESOURCE_TYPE_NAME = "AWS::ECR::Repository";
    function CfnRepository_EncryptionConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("encryptionType", cdk.requiredValidator)(properties.encryptionType));
      errors.collect(cdk.propertyValidator("encryptionType", cdk.validateString)(properties.encryptionType));
      errors.collect(cdk.propertyValidator("kmsKey", cdk.validateString)(properties.kmsKey));
      return errors.wrap('supplied properties not correct for "EncryptionConfigurationProperty"');
    }
    function cfnRepositoryEncryptionConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRepository_EncryptionConfigurationPropertyValidator(properties).assertSuccess();
      return {
        EncryptionType: cdk.stringToCloudFormation(properties.encryptionType),
        KmsKey: cdk.stringToCloudFormation(properties.kmsKey)
      };
    }
    function CfnRepositoryEncryptionConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("encryptionType", "EncryptionType", cfn_parse.FromCloudFormation.getString(properties.EncryptionType));
      ret.addPropertyResult("kmsKey", "KmsKey", properties.KmsKey != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKey) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnRepository_ImageScanningConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("scanOnPush", cdk.validateBoolean)(properties.scanOnPush));
      return errors.wrap('supplied properties not correct for "ImageScanningConfigurationProperty"');
    }
    function cfnRepositoryImageScanningConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRepository_ImageScanningConfigurationPropertyValidator(properties).assertSuccess();
      return {
        ScanOnPush: cdk.booleanToCloudFormation(properties.scanOnPush)
      };
    }
    function CfnRepositoryImageScanningConfigurationPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("scanOnPush", "ScanOnPush", properties.ScanOnPush != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ScanOnPush) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
    function CfnRepository_LifecyclePolicyPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      if (typeof properties !== "object") {
        errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
      }
      errors.collect(cdk.propertyValidator("lifecyclePolicyText", cdk.validateString)(properties.lifecyclePolicyText));
      errors.collect(cdk.propertyValidator("registryId", cdk.validateString)(properties.registryId));
      return errors.wrap('supplied properties not correct for "LifecyclePolicyProperty"');
    }
    function cfnRepositoryLifecyclePolicyPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRepository_LifecyclePolicyPropertyValidator(properties).assertSuccess();
      return {
        LifecyclePolicyText: cdk.stringToCloudFormation(properties.lifecyclePolicyText),
        RegistryId: cdk.stringToCloudFormation(properties.registryId)
      };
    }
    function CfnRepositoryLifecyclePolicyPropertyFromCloudFormation(properties) {
      if (cdk.isResolvableObject(properties)) {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      properties = properties == null ? {} : properties;
      if (typeof properties !== "object") {
        return new cfn_parse.FromCloudFormationResult(properties);
      }
      const ret = new cfn_parse.FromCloudFormationPropertyObject();
      ret.addPropertyResult("lifecyclePolicyText", "LifecyclePolicyText", properties.LifecyclePolicyText != null ? cfn_parse.FromCloudFormation.getString(properties.LifecyclePolicyText) : void 0);
      ret.addPropertyResult("registryId", "RegistryId", properties.RegistryId != null ? cfn_parse.FromCloudFormation.getString(properties.RegistryId) : void 0);
      ret.addUnrecognizedPropertiesAsExtra(properties);
      return ret;
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-ecr/lib/lifecycle.js
var require_lifecycle = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ecr/lib/lifecycle.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TagStatus = void 0;
    var TagStatus;
    (function(TagStatus2) {
      TagStatus2["ANY"] = "any";
      TagStatus2["TAGGED"] = "tagged";
      TagStatus2["UNTAGGED"] = "untagged";
    })(TagStatus = exports2.TagStatus || (exports2.TagStatus = {}));
  }
});

// asset-input/node_modules/@aws-cdk/aws-ecr/lib/repository.js
var require_repository = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ecr/lib/repository.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TagMutability = exports2.Repository = exports2.RepositoryBase = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var os_1 = require("os");
    var events = require_lib15();
    var iam = require_lib9();
    var core_1 = require_lib8();
    var ecr_generated_1 = require_ecr_generated();
    var lifecycle_1 = require_lifecycle();
    var RepositoryBase = class extends core_1.Resource {
      get repositoryUri() {
        return this.repositoryUriForTag();
      }
      repositoryUriForTag(tag) {
        const tagSuffix = tag ? `:${tag}` : "";
        return this.repositoryUriWithSuffix(tagSuffix);
      }
      repositoryUriForDigest(digest) {
        const digestSuffix = digest ? `@${digest}` : "";
        return this.repositoryUriWithSuffix(digestSuffix);
      }
      repositoryUriWithSuffix(suffix) {
        const parts = this.stack.parseArn(this.repositoryArn);
        return `${parts.account}.dkr.ecr.${parts.region}.${this.stack.urlSuffix}/${this.repositoryName}${suffix}`;
      }
      onCloudTrailEvent(id, options = {}) {
        const rule = new events.Rule(this, id, options);
        rule.addTarget(options.target);
        rule.addEventPattern({
          source: ["aws.ecr"],
          detailType: ["AWS API Call via CloudTrail"],
          detail: {
            requestParameters: {
              repositoryName: [this.repositoryName]
            }
          }
        });
        return rule;
      }
      onCloudTrailImagePushed(id, options = {}) {
        const rule = this.onCloudTrailEvent(id, options);
        rule.addEventPattern({
          detail: {
            eventName: ["PutImage"],
            requestParameters: {
              imageTag: options.imageTag ? [options.imageTag] : void 0
            }
          }
        });
        return rule;
      }
      onImageScanCompleted(id, options = {}) {
        var _c;
        const rule = new events.Rule(this, id, options);
        rule.addTarget(options.target);
        rule.addEventPattern({
          source: ["aws.ecr"],
          detailType: ["ECR Image Scan"],
          detail: {
            "repository-name": [this.repositoryName],
            "scan-status": ["COMPLETE"],
            "image-tags": (_c = options.imageTags) !== null && _c !== void 0 ? _c : void 0
          }
        });
        return rule;
      }
      onEvent(id, options = {}) {
        const rule = new events.Rule(this, id, options);
        rule.addEventPattern({
          source: ["aws.ecr"],
          resources: [this.repositoryArn]
        });
        rule.addTarget(options.target);
        return rule;
      }
      grant(grantee, ...actions) {
        return iam.Grant.addToPrincipalOrResource({
          grantee,
          actions,
          resourceArns: [this.repositoryArn],
          resourceSelfArns: [],
          resource: this
        });
      }
      grantPull(grantee) {
        const ret = this.grant(grantee, "ecr:BatchCheckLayerAvailability", "ecr:GetDownloadUrlForLayer", "ecr:BatchGetImage");
        iam.Grant.addToPrincipal({
          grantee,
          actions: ["ecr:GetAuthorizationToken"],
          resourceArns: ["*"],
          scope: this
        });
        return ret;
      }
      grantPullPush(grantee) {
        this.grantPull(grantee);
        return this.grant(grantee, "ecr:PutImage", "ecr:InitiateLayerUpload", "ecr:UploadLayerPart", "ecr:CompleteLayerUpload");
      }
    };
    exports2.RepositoryBase = RepositoryBase;
    _a = JSII_RTTI_SYMBOL_1;
    RepositoryBase[_a] = { fqn: "@aws-cdk/aws-ecr.RepositoryBase", version: "1.132.0" };
    var Repository = class extends RepositoryBase {
      constructor(scope, id, props = {}) {
        super(scope, id, {
          physicalName: props.repositoryName
        });
        this.lifecycleRules = new Array();
        Repository.validateRepositoryName(this.physicalName);
        const resource = new ecr_generated_1.CfnRepository(this, "Resource", {
          repositoryName: this.physicalName,
          repositoryPolicyText: core_1.Lazy.any({ produce: () => this.policyDocument }),
          lifecyclePolicy: core_1.Lazy.any({ produce: () => this.renderLifecyclePolicy() }),
          imageScanningConfiguration: !props.imageScanOnPush ? void 0 : {
            scanOnPush: true
          },
          imageTagMutability: props.imageTagMutability || void 0
        });
        resource.applyRemovalPolicy(props.removalPolicy);
        this.registryId = props.lifecycleRegistryId;
        if (props.lifecycleRules) {
          props.lifecycleRules.forEach(this.addLifecycleRule.bind(this));
        }
        this.repositoryName = this.getResourceNameAttribute(resource.ref);
        this.repositoryArn = this.getResourceArnAttribute(resource.attrArn, {
          service: "ecr",
          resource: "repository",
          resourceName: this.physicalName
        });
      }
      static fromRepositoryAttributes(scope, id, attrs) {
        class Import extends RepositoryBase {
          constructor() {
            super(...arguments);
            this.repositoryName = attrs.repositoryName;
            this.repositoryArn = attrs.repositoryArn;
          }
          addToResourcePolicy(_statement) {
            return { statementAdded: false };
          }
        }
        return new Import(scope, id);
      }
      static fromRepositoryArn(scope, id, repositoryArn) {
        if (core_1.Token.isUnresolved(repositoryArn)) {
          throw new Error('"repositoryArn" is a late-bound value, and therefore "repositoryName" is required. Use `fromRepositoryAttributes` instead');
        }
        const repositoryName = repositoryArn.split("/").slice(1).join("/");
        class Import extends RepositoryBase {
          constructor() {
            super(...arguments);
            this.repositoryName = repositoryName;
            this.repositoryArn = repositoryArn;
          }
          addToResourcePolicy(_statement) {
            return { statementAdded: false };
          }
        }
        return new Import(scope, id, {
          environmentFromArn: repositoryArn
        });
      }
      static fromRepositoryName(scope, id, repositoryName) {
        class Import extends RepositoryBase {
          constructor() {
            super(...arguments);
            this.repositoryName = repositoryName;
            this.repositoryArn = Repository.arnForLocalRepository(repositoryName, scope);
          }
          addToResourcePolicy(_statement) {
            return { statementAdded: false };
          }
        }
        return new Import(scope, id);
      }
      static arnForLocalRepository(repositoryName, scope, account) {
        return core_1.Stack.of(scope).formatArn({
          account,
          service: "ecr",
          resource: "repository",
          resourceName: repositoryName
        });
      }
      static validateRepositoryName(physicalName) {
        const repositoryName = physicalName;
        if (!repositoryName || core_1.Token.isUnresolved(repositoryName)) {
          return;
        }
        const errors = [];
        if (repositoryName.length < 2 || repositoryName.length > 256) {
          errors.push("Repository name must be at least 2 and no more than 256 characters");
        }
        const isPatternMatch = /^(?:[a-z0-9]+(?:[._-][a-z0-9]+)*\/)*[a-z0-9]+(?:[._-][a-z0-9]+)*$/.test(repositoryName);
        if (!isPatternMatch) {
          errors.push("Repository name must follow the specified pattern: (?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*");
        }
        if (errors.length > 0) {
          throw new Error(`Invalid ECR repository name (value: ${repositoryName})${os_1.EOL}${errors.join(os_1.EOL)}`);
        }
      }
      addToResourcePolicy(statement) {
        if (this.policyDocument === void 0) {
          this.policyDocument = new iam.PolicyDocument();
        }
        this.policyDocument.addStatements(statement);
        return { statementAdded: false, policyDependable: this.policyDocument };
      }
      validate() {
        var _c;
        const errors = super.validate();
        errors.push(...((_c = this.policyDocument) === null || _c === void 0 ? void 0 : _c.validateForResourcePolicy()) || []);
        return errors;
      }
      addLifecycleRule(rule) {
        if (rule.tagStatus === void 0) {
          rule = __spreadProps(__spreadValues({}, rule), { tagStatus: rule.tagPrefixList === void 0 ? lifecycle_1.TagStatus.ANY : lifecycle_1.TagStatus.TAGGED });
        }
        if (rule.tagStatus === lifecycle_1.TagStatus.TAGGED && (rule.tagPrefixList === void 0 || rule.tagPrefixList.length === 0)) {
          throw new Error("TagStatus.Tagged requires the specification of a tagPrefixList");
        }
        if (rule.tagStatus !== lifecycle_1.TagStatus.TAGGED && rule.tagPrefixList !== void 0) {
          throw new Error("tagPrefixList can only be specified when tagStatus is set to Tagged");
        }
        if (rule.maxImageAge !== void 0 === (rule.maxImageCount !== void 0)) {
          throw new Error(`Life cycle rule must contain exactly one of 'maxImageAge' and 'maxImageCount', got: ${JSON.stringify(rule)}`);
        }
        if (rule.tagStatus === lifecycle_1.TagStatus.ANY && this.lifecycleRules.filter((r) => r.tagStatus === lifecycle_1.TagStatus.ANY).length > 0) {
          throw new Error("Life cycle can only have one TagStatus.Any rule");
        }
        this.lifecycleRules.push(__spreadValues({}, rule));
      }
      renderLifecyclePolicy() {
        const stack = core_1.Stack.of(this);
        let lifecyclePolicyText;
        if (this.lifecycleRules.length === 0 && !this.registryId) {
          return void 0;
        }
        if (this.lifecycleRules.length > 0) {
          lifecyclePolicyText = JSON.stringify(stack.resolve({
            rules: this.orderedLifecycleRules().map(renderLifecycleRule)
          }));
        }
        return {
          lifecyclePolicyText,
          registryId: this.registryId
        };
      }
      orderedLifecycleRules() {
        var _c;
        if (this.lifecycleRules.length === 0) {
          return [];
        }
        const prioritizedRules = this.lifecycleRules.filter((r) => r.rulePriority !== void 0 && r.tagStatus !== lifecycle_1.TagStatus.ANY);
        const autoPrioritizedRules = this.lifecycleRules.filter((r) => r.rulePriority === void 0 && r.tagStatus !== lifecycle_1.TagStatus.ANY);
        const anyRules = this.lifecycleRules.filter((r) => r.tagStatus === lifecycle_1.TagStatus.ANY);
        if (anyRules.length > 0 && anyRules[0].rulePriority !== void 0 && autoPrioritizedRules.length > 0) {
          throw new Error("Cannot combine prioritized TagStatus.Any rule with unprioritized rules. Remove rulePriority from the 'Any' rule.");
        }
        const prios = prioritizedRules.map((r) => r.rulePriority);
        let autoPrio = (prios.length > 0 ? Math.max(...prios) : 0) + 1;
        const ret = new Array();
        for (const rule of prioritizedRules.concat(autoPrioritizedRules).concat(anyRules)) {
          ret.push(__spreadProps(__spreadValues({}, rule), {
            rulePriority: (_c = rule.rulePriority) !== null && _c !== void 0 ? _c : autoPrio++
          }));
        }
        validateAnyRuleLast(ret);
        return ret;
      }
    };
    exports2.Repository = Repository;
    _b = JSII_RTTI_SYMBOL_1;
    Repository[_b] = { fqn: "@aws-cdk/aws-ecr.Repository", version: "1.132.0" };
    function validateAnyRuleLast(rules) {
      const anyRules = rules.filter((r) => r.tagStatus === lifecycle_1.TagStatus.ANY);
      if (anyRules.length === 1) {
        const maxPrio = Math.max(...rules.map((r) => r.rulePriority));
        if (anyRules[0].rulePriority !== maxPrio) {
          throw new Error(`TagStatus.Any rule must have highest priority, has ${anyRules[0].rulePriority} which is smaller than ${maxPrio}`);
        }
      }
    }
    function renderLifecycleRule(rule) {
      var _c, _d;
      return {
        rulePriority: rule.rulePriority,
        description: rule.description,
        selection: {
          tagStatus: rule.tagStatus || lifecycle_1.TagStatus.ANY,
          tagPrefixList: rule.tagPrefixList,
          countType: rule.maxImageAge !== void 0 ? "sinceImagePushed" : "imageCountMoreThan",
          countNumber: (_d = (_c = rule.maxImageAge) === null || _c === void 0 ? void 0 : _c.toDays()) !== null && _d !== void 0 ? _d : rule.maxImageCount,
          countUnit: rule.maxImageAge !== void 0 ? "days" : void 0
        },
        action: {
          type: "expire"
        }
      };
    }
    var TagMutability;
    (function(TagMutability2) {
      TagMutability2["MUTABLE"] = "MUTABLE";
      TagMutability2["IMMUTABLE"] = "IMMUTABLE";
    })(TagMutability = exports2.TagMutability || (exports2.TagMutability = {}));
  }
});

// asset-input/node_modules/@aws-cdk/aws-ecr/lib/auth-token.js
var require_auth_token = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ecr/lib/auth-token.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PublicGalleryAuthorizationToken = exports2.AuthorizationToken = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var iam = require_lib9();
    var AuthorizationToken = class {
      constructor() {
      }
      static grantRead(grantee) {
        grantee.grantPrincipal.addToPrincipalPolicy(new iam.PolicyStatement({
          actions: ["ecr:GetAuthorizationToken"],
          resources: ["*"]
        }));
      }
    };
    exports2.AuthorizationToken = AuthorizationToken;
    _a = JSII_RTTI_SYMBOL_1;
    AuthorizationToken[_a] = { fqn: "@aws-cdk/aws-ecr.AuthorizationToken", version: "1.132.0" };
    var PublicGalleryAuthorizationToken = class {
      constructor() {
      }
      static grantRead(grantee) {
        grantee.grantPrincipal.addToPrincipalPolicy(new iam.PolicyStatement({
          actions: ["ecr-public:GetAuthorizationToken", "sts:GetServiceBearerToken"],
          resources: ["*"]
        }));
      }
    };
    exports2.PublicGalleryAuthorizationToken = PublicGalleryAuthorizationToken;
    _b = JSII_RTTI_SYMBOL_1;
    PublicGalleryAuthorizationToken[_b] = { fqn: "@aws-cdk/aws-ecr.PublicGalleryAuthorizationToken", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-ecr/lib/index.js
var require_lib23 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ecr/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_ecr_generated(), exports2);
    __exportStar(require_repository(), exports2);
    __exportStar(require_lifecycle(), exports2);
    __exportStar(require_auth_token(), exports2);
  }
});

// asset-input/node_modules/@aws-cdk/aws-ecr-assets/lib/image-asset.js
var require_image_asset = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ecr-assets/lib/image-asset.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DockerImageAsset = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var fs = require("fs");
    var path = require("path");
    var ecr = require_lib23();
    var core_1 = require_lib8();
    var cxapi = require_lib5();
    var assets_1 = require_lib17();
    var core_2 = require_lib8();
    var DockerImageAsset = class extends core_2.Construct {
      constructor(scope, id, props) {
        var _b, _c, _d, _e, _f, _g, _h, _j, _k;
        super(scope, id);
        validateProps(props);
        const dir = path.resolve(props.directory);
        if (!fs.existsSync(dir)) {
          throw new Error(`Cannot find image directory at ${dir}`);
        }
        const file = path.join(dir, props.file || "Dockerfile");
        if (!fs.existsSync(file)) {
          throw new Error(`Cannot find file at ${file}`);
        }
        const defaultIgnoreMode = core_1.FeatureFlags.of(this).isEnabled(cxapi.DOCKER_IGNORE_SUPPORT) ? core_1.IgnoreMode.DOCKER : core_1.IgnoreMode.GLOB;
        let ignoreMode = (_b = props.ignoreMode) !== null && _b !== void 0 ? _b : defaultIgnoreMode;
        let exclude = props.exclude || [];
        const ignore = path.join(dir, ".dockerignore");
        if (fs.existsSync(ignore)) {
          const dockerIgnorePatterns = fs.readFileSync(ignore).toString().split("\n").filter((e) => !!e);
          exclude = [
            ...dockerIgnorePatterns,
            ...exclude,
            "!.dockerignore"
          ];
        }
        exclude.push("!" + path.basename(file));
        const cdkout = (_d = (_c = core_1.Stage.of(this)) === null || _c === void 0 ? void 0 : _c.outdir) !== null && _d !== void 0 ? _d : "cdk.out";
        exclude.push(cdkout);
        if (props.repositoryName) {
          core_1.Annotations.of(this).addWarning('DockerImageAsset.repositoryName is deprecated. Override "core.Stack.addDockerImageAsset" to control asset locations');
        }
        const extraHash = {};
        if (((_e = props.invalidation) === null || _e === void 0 ? void 0 : _e.extraHash) !== false && props.extraHash) {
          extraHash.user = props.extraHash;
        }
        if (((_f = props.invalidation) === null || _f === void 0 ? void 0 : _f.buildArgs) !== false && props.buildArgs) {
          extraHash.buildArgs = props.buildArgs;
        }
        if (((_g = props.invalidation) === null || _g === void 0 ? void 0 : _g.target) !== false && props.target) {
          extraHash.target = props.target;
        }
        if (((_h = props.invalidation) === null || _h === void 0 ? void 0 : _h.file) !== false && props.file) {
          extraHash.file = props.file;
        }
        if (((_j = props.invalidation) === null || _j === void 0 ? void 0 : _j.repositoryName) !== false && props.repositoryName) {
          extraHash.repositoryName = props.repositoryName;
        }
        extraHash.version = "1.21.0";
        const staging = new core_1.AssetStaging(this, "Staging", __spreadProps(__spreadValues({}, props), {
          follow: (_k = props.followSymlinks) !== null && _k !== void 0 ? _k : toSymlinkFollow(props.follow),
          exclude,
          ignoreMode,
          sourcePath: dir,
          extraHash: Object.keys(extraHash).length === 0 ? void 0 : JSON.stringify(extraHash)
        }));
        this.sourceHash = staging.assetHash;
        this.assetHash = staging.assetHash;
        const stack = core_1.Stack.of(this);
        const location = stack.synthesizer.addDockerImageAsset({
          directoryName: staging.relativeStagedPath(stack),
          dockerBuildArgs: props.buildArgs,
          dockerBuildTarget: props.target,
          dockerFile: props.file,
          sourceHash: staging.assetHash
        });
        this.repository = ecr.Repository.fromRepositoryName(this, "Repository", location.repositoryName);
        this.imageUri = location.imageUri;
      }
    };
    exports2.DockerImageAsset = DockerImageAsset;
    _a = JSII_RTTI_SYMBOL_1;
    DockerImageAsset[_a] = { fqn: "@aws-cdk/aws-ecr-assets.DockerImageAsset", version: "1.132.0" };
    function validateProps(props) {
      for (const [key, value] of Object.entries(props)) {
        if (core_1.Token.isUnresolved(value)) {
          throw new Error(`Cannot use Token as value of '${key}': this value is used before deployment starts`);
        }
      }
      validateBuildArgs(props.buildArgs);
    }
    function validateBuildArgs(buildArgs) {
      for (const [key, value] of Object.entries(buildArgs || {})) {
        if (core_1.Token.isUnresolved(key) || core_1.Token.isUnresolved(value)) {
          throw new Error('Cannot use tokens in keys or values of "buildArgs" since they are needed before deployment');
        }
      }
    }
    function toSymlinkFollow(follow) {
      switch (follow) {
        case void 0:
          return void 0;
        case assets_1.FollowMode.NEVER:
          return core_1.SymlinkFollowMode.NEVER;
        case assets_1.FollowMode.ALWAYS:
          return core_1.SymlinkFollowMode.ALWAYS;
        case assets_1.FollowMode.BLOCK_EXTERNAL:
          return core_1.SymlinkFollowMode.BLOCK_EXTERNAL;
        case assets_1.FollowMode.EXTERNAL:
          return core_1.SymlinkFollowMode.EXTERNAL;
      }
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-ecr-assets/lib/tarball-asset.js
var require_tarball_asset = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ecr-assets/lib/tarball-asset.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TarballImageAsset = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var fs = require("fs");
    var path = require("path");
    var ecr = require_lib23();
    var core_1 = require_lib8();
    var core_2 = require_lib8();
    var TarballImageAsset = class extends core_2.Construct {
      constructor(scope, id, props) {
        super(scope, id);
        if (!fs.existsSync(props.tarballFile)) {
          throw new Error(`Cannot find file at ${props.tarballFile}`);
        }
        const stagedTarball = new core_1.AssetStaging(this, "Staging", { sourcePath: props.tarballFile });
        this.sourceHash = stagedTarball.assetHash;
        this.assetHash = stagedTarball.assetHash;
        const stage = core_1.Stage.of(this);
        const relativePathInOutDir = stage ? path.relative(stage.assetOutdir, stagedTarball.absoluteStagedPath) : stagedTarball.absoluteStagedPath;
        const stack = core_1.Stack.of(this);
        const location = stack.synthesizer.addDockerImageAsset({
          sourceHash: stagedTarball.assetHash,
          executable: [
            "sh",
            "-c",
            `docker load -i ${relativePathInOutDir} | sed "s/Loaded image: //g"`
          ]
        });
        this.repository = ecr.Repository.fromRepositoryName(this, "Repository", location.repositoryName);
        this.imageUri = location.imageUri;
      }
    };
    exports2.TarballImageAsset = TarballImageAsset;
    _a = JSII_RTTI_SYMBOL_1;
    TarballImageAsset[_a] = { fqn: "@aws-cdk/aws-ecr-assets.TarballImageAsset", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-ecr-assets/lib/index.js
var require_lib24 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-ecr-assets/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_image_asset(), exports2);
    __exportStar(require_tarball_asset(), exports2);
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/code.js
var require_code = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/code.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    var _d;
    var _e;
    var _f;
    var _g;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AssetImageCode = exports2.EcrImageCode = exports2.CfnParametersCode = exports2.AssetCode = exports2.InlineCode = exports2.S3Code = exports2.Code = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var ecr_assets = require_lib24();
    var iam = require_lib9();
    var s3_assets = require_lib18();
    var cdk = require_lib8();
    var Code = class {
      static fromBucket(bucket, key, objectVersion) {
        return new S3Code(bucket, key, objectVersion);
      }
      static bucket(bucket, key, objectVersion) {
        return this.fromBucket(bucket, key, objectVersion);
      }
      static fromInline(code) {
        return new InlineCode(code);
      }
      static inline(code) {
        return this.fromInline(code);
      }
      static fromAsset(path, options) {
        return new AssetCode(path, options);
      }
      static fromDockerBuild(path, options = {}) {
        var _h;
        let imagePath = (_h = options.imagePath) !== null && _h !== void 0 ? _h : "/asset/.";
        if (imagePath.endsWith("/")) {
          imagePath = `${imagePath}.`;
        } else if (!imagePath.endsWith("/.")) {
          imagePath = `${imagePath}/.`;
        }
        const assetPath = cdk.DockerImage.fromBuild(path, options).cp(imagePath, options.outputPath);
        return new AssetCode(assetPath);
      }
      static asset(path) {
        return this.fromAsset(path);
      }
      static fromCfnParameters(props) {
        return new CfnParametersCode(props);
      }
      static cfnParameters(props) {
        return this.fromCfnParameters(props);
      }
      static fromEcrImage(repository, props) {
        return new EcrImageCode(repository, props);
      }
      static fromAssetImage(directory, props = {}) {
        return new AssetImageCode(directory, props);
      }
      bindToResource(_resource, _options) {
        return;
      }
    };
    exports2.Code = Code;
    _a = JSII_RTTI_SYMBOL_1;
    Code[_a] = { fqn: "@aws-cdk/aws-lambda.Code", version: "1.132.0" };
    var S3Code = class extends Code {
      constructor(bucket, key, objectVersion) {
        super();
        this.key = key;
        this.objectVersion = objectVersion;
        this.isInline = false;
        if (!bucket.bucketName) {
          throw new Error("bucketName is undefined for the provided bucket");
        }
        this.bucketName = bucket.bucketName;
      }
      bind(_scope) {
        return {
          s3Location: {
            bucketName: this.bucketName,
            objectKey: this.key,
            objectVersion: this.objectVersion
          }
        };
      }
    };
    exports2.S3Code = S3Code;
    _b = JSII_RTTI_SYMBOL_1;
    S3Code[_b] = { fqn: "@aws-cdk/aws-lambda.S3Code", version: "1.132.0" };
    var InlineCode = class extends Code {
      constructor(code) {
        super();
        this.code = code;
        this.isInline = true;
        if (code.length === 0) {
          throw new Error("Lambda inline code cannot be empty");
        }
        if (code.length > 4096) {
          throw new Error("Lambda source is too large, must be <= 4096 but is " + code.length);
        }
      }
      bind(_scope) {
        return {
          inlineCode: this.code
        };
      }
    };
    exports2.InlineCode = InlineCode;
    _c = JSII_RTTI_SYMBOL_1;
    InlineCode[_c] = { fqn: "@aws-cdk/aws-lambda.InlineCode", version: "1.132.0" };
    var AssetCode = class extends Code {
      constructor(path, options = {}) {
        super();
        this.path = path;
        this.options = options;
        this.isInline = false;
      }
      bind(scope) {
        if (!this.asset) {
          this.asset = new s3_assets.Asset(scope, "Code", __spreadValues({
            path: this.path
          }, this.options));
        } else if (cdk.Stack.of(this.asset) !== cdk.Stack.of(scope)) {
          throw new Error(`Asset is already associated with another stack '${cdk.Stack.of(this.asset).stackName}'. Create a new Code instance for every stack.`);
        }
        if (!this.asset.isZipArchive) {
          throw new Error(`Asset must be a .zip file or a directory (${this.path})`);
        }
        return {
          s3Location: {
            bucketName: this.asset.s3BucketName,
            objectKey: this.asset.s3ObjectKey
          }
        };
      }
      bindToResource(resource, options = {}) {
        if (!this.asset) {
          throw new Error("bindToResource() must be called after bind()");
        }
        const resourceProperty = options.resourceProperty || "Code";
        this.asset.addResourceMetadata(resource, resourceProperty);
      }
    };
    exports2.AssetCode = AssetCode;
    _d = JSII_RTTI_SYMBOL_1;
    AssetCode[_d] = { fqn: "@aws-cdk/aws-lambda.AssetCode", version: "1.132.0" };
    var CfnParametersCode = class extends Code {
      constructor(props = {}) {
        super();
        this.isInline = false;
        this._bucketNameParam = props.bucketNameParam;
        this._objectKeyParam = props.objectKeyParam;
      }
      bind(scope) {
        if (!this._bucketNameParam) {
          this._bucketNameParam = new cdk.CfnParameter(scope, "LambdaSourceBucketNameParameter", {
            type: "String"
          });
        }
        if (!this._objectKeyParam) {
          this._objectKeyParam = new cdk.CfnParameter(scope, "LambdaSourceObjectKeyParameter", {
            type: "String"
          });
        }
        return {
          s3Location: {
            bucketName: this._bucketNameParam.valueAsString,
            objectKey: this._objectKeyParam.valueAsString
          }
        };
      }
      assign(location) {
        const ret = {};
        ret[this.bucketNameParam] = location.bucketName;
        ret[this.objectKeyParam] = location.objectKey;
        return ret;
      }
      get bucketNameParam() {
        if (this._bucketNameParam) {
          return this._bucketNameParam.logicalId;
        } else {
          throw new Error("Pass CfnParametersCode to a Lambda Function before accessing the bucketNameParam property");
        }
      }
      get objectKeyParam() {
        if (this._objectKeyParam) {
          return this._objectKeyParam.logicalId;
        } else {
          throw new Error("Pass CfnParametersCode to a Lambda Function before accessing the objectKeyParam property");
        }
      }
    };
    exports2.CfnParametersCode = CfnParametersCode;
    _e = JSII_RTTI_SYMBOL_1;
    CfnParametersCode[_e] = { fqn: "@aws-cdk/aws-lambda.CfnParametersCode", version: "1.132.0" };
    var EcrImageCode = class extends Code {
      constructor(repository, props = {}) {
        super();
        this.repository = repository;
        this.props = props;
        this.isInline = false;
      }
      bind(_) {
        var _h, _j;
        this.repository.grantPull(new iam.ServicePrincipal("lambda.amazonaws.com"));
        return {
          image: {
            imageUri: this.repository.repositoryUriForTag((_j = (_h = this.props) === null || _h === void 0 ? void 0 : _h.tag) !== null && _j !== void 0 ? _j : "latest"),
            cmd: this.props.cmd,
            entrypoint: this.props.entrypoint,
            workingDirectory: this.props.workingDirectory
          }
        };
      }
    };
    exports2.EcrImageCode = EcrImageCode;
    _f = JSII_RTTI_SYMBOL_1;
    EcrImageCode[_f] = { fqn: "@aws-cdk/aws-lambda.EcrImageCode", version: "1.132.0" };
    var AssetImageCode = class extends Code {
      constructor(directory, props) {
        super();
        this.directory = directory;
        this.props = props;
        this.isInline = false;
      }
      bind(scope) {
        const asset = new ecr_assets.DockerImageAsset(scope, "AssetImage", __spreadValues({
          directory: this.directory
        }, this.props));
        asset.repository.grantPull(new iam.ServicePrincipal("lambda.amazonaws.com"));
        return {
          image: {
            imageUri: asset.imageUri,
            entrypoint: this.props.entrypoint,
            cmd: this.props.cmd,
            workingDirectory: this.props.workingDirectory
          }
        };
      }
    };
    exports2.AssetImageCode = AssetImageCode;
    _g = JSII_RTTI_SYMBOL_1;
    AssetImageCode[_g] = { fqn: "@aws-cdk/aws-lambda.AssetImageCode", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/image-function.js
var require_image_function = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/image-function.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DockerImageFunction = exports2.DockerImageCode = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var code_1 = require_code();
    var function_1 = require_function();
    var handler_1 = require_handler();
    var runtime_1 = require_runtime2();
    var DockerImageCode = class {
      static fromEcr(repository, props) {
        return {
          _bind() {
            return new code_1.EcrImageCode(repository, props);
          }
        };
      }
      static fromImageAsset(directory, props = {}) {
        return {
          _bind() {
            return new code_1.AssetImageCode(directory, props);
          }
        };
      }
    };
    exports2.DockerImageCode = DockerImageCode;
    _a = JSII_RTTI_SYMBOL_1;
    DockerImageCode[_a] = { fqn: "@aws-cdk/aws-lambda.DockerImageCode", version: "1.132.0" };
    var DockerImageFunction = class extends function_1.Function {
      constructor(scope, id, props) {
        super(scope, id, __spreadProps(__spreadValues({}, props), {
          handler: handler_1.Handler.FROM_IMAGE,
          runtime: runtime_1.Runtime.FROM_IMAGE,
          code: props.code._bind()
        }));
      }
    };
    exports2.DockerImageFunction = DockerImageFunction;
    _b = JSII_RTTI_SYMBOL_1;
    DockerImageFunction[_b] = { fqn: "@aws-cdk/aws-lambda.DockerImageFunction", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/permission.js
var require_permission = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/permission.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/filesystem.js
var require_filesystem = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/filesystem.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FileSystem = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var iam = require_lib9();
    var core_1 = require_lib8();
    var FileSystem = class {
      constructor(config) {
        this.config = config;
      }
      static fromEfsAccessPoint(ap, mountPath) {
        return new FileSystem({
          localMountPath: mountPath,
          arn: ap.accessPointArn,
          dependency: [ap.fileSystem.mountTargetsAvailable],
          connections: ap.fileSystem.connections,
          policies: [
            new iam.PolicyStatement({
              actions: ["elasticfilesystem:ClientMount"],
              resources: ["*"],
              conditions: {
                StringEquals: {
                  "elasticfilesystem:AccessPointArn": ap.accessPointArn
                }
              }
            }),
            new iam.PolicyStatement({
              actions: ["elasticfilesystem:ClientWrite"],
              resources: [core_1.Stack.of(ap).formatArn({
                service: "elasticfilesystem",
                resource: "file-system",
                resourceName: ap.fileSystem.fileSystemId
              })]
            })
          ]
        });
      }
    };
    exports2.FileSystem = FileSystem;
    _a = JSII_RTTI_SYMBOL_1;
    FileSystem[_a] = { fqn: "@aws-cdk/aws-lambda.FileSystem", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/singleton-lambda.js
var require_singleton_lambda = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/singleton-lambda.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SingletonFunction = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    var function_1 = require_function();
    var function_base_1 = require_function_base();
    var SingletonFunction = class extends function_base_1.FunctionBase {
      constructor(scope, id, props) {
        super(scope, id);
        this.lambdaFunction = this.ensureLambda(props);
        this.permissionsNode = this.lambdaFunction.node;
        this.functionArn = this.lambdaFunction.functionArn;
        this.functionName = this.lambdaFunction.functionName;
        this.role = this.lambdaFunction.role;
        this.grantPrincipal = this.lambdaFunction.grantPrincipal;
        this.canCreatePermissions = true;
      }
      get isBoundToVpc() {
        return this.lambdaFunction.isBoundToVpc;
      }
      get connections() {
        return this.lambdaFunction.connections;
      }
      get currentVersion() {
        return this.lambdaFunction.currentVersion;
      }
      addPermission(name, permission) {
        return this.lambdaFunction.addPermission(name, permission);
      }
      addDependency(...up) {
        this.lambdaFunction.node.addDependency(...up);
      }
      dependOn(down) {
        down.node.addDependency(this.lambdaFunction);
      }
      _checkEdgeCompatibility() {
        return this.lambdaFunction._checkEdgeCompatibility();
      }
      _functionNode() {
        return this.lambdaFunction.node;
      }
      ensureLambda(props) {
        const constructName = (props.lambdaPurpose || "SingletonLambda") + slugify(props.uuid);
        const existing = cdk.Stack.of(this).node.tryFindChild(constructName);
        if (existing) {
          return existing;
        }
        return new function_1.Function(cdk.Stack.of(this), constructName, props);
      }
    };
    exports2.SingletonFunction = SingletonFunction;
    _a = JSII_RTTI_SYMBOL_1;
    SingletonFunction[_a] = { fqn: "@aws-cdk/aws-lambda.SingletonFunction", version: "1.132.0" };
    function slugify(x) {
      return x.replace(/[^a-zA-Z0-9]/g, "");
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/event-source.js
var require_event_source = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/event-source.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/scalable-attribute-api.js
var require_scalable_attribute_api = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/scalable-attribute-api.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/code-signing-config.js
var require_code_signing_config = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/code-signing-config.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CodeSigningConfig = exports2.UntrustedArtifactOnDeployment = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var lambda_generated_1 = require_lambda_generated();
    var UntrustedArtifactOnDeployment;
    (function(UntrustedArtifactOnDeployment2) {
      UntrustedArtifactOnDeployment2["ENFORCE"] = "Enforce";
      UntrustedArtifactOnDeployment2["WARN"] = "Warn";
    })(UntrustedArtifactOnDeployment = exports2.UntrustedArtifactOnDeployment || (exports2.UntrustedArtifactOnDeployment = {}));
    var CodeSigningConfig = class extends core_1.Resource {
      constructor(scope, id, props) {
        var _b;
        super(scope, id);
        const signingProfileVersionArns = props.signingProfiles.map((signingProfile) => {
          return signingProfile.signingProfileVersionArn;
        });
        const resource = new lambda_generated_1.CfnCodeSigningConfig(this, "Resource", {
          allowedPublishers: {
            signingProfileVersionArns
          },
          codeSigningPolicies: {
            untrustedArtifactOnDeployment: (_b = props.untrustedArtifactOnDeployment) !== null && _b !== void 0 ? _b : UntrustedArtifactOnDeployment.WARN
          },
          description: props.description
        });
        this.codeSigningConfigArn = resource.attrCodeSigningConfigArn;
        this.codeSigningConfigId = resource.attrCodeSigningConfigId;
      }
      static fromCodeSigningConfigArn(scope, id, codeSigningConfigArn) {
        const codeSigningProfileId = core_1.Stack.of(scope).parseArn(codeSigningConfigArn).resourceName;
        if (!codeSigningProfileId) {
          throw new Error(`Code signing config ARN must be in the format 'arn:aws:lambda:<region>:<account>:code-signing-config:<codeSigningConfigArn>', got: '${codeSigningConfigArn}'`);
        }
        const assertedCodeSigningProfileId = codeSigningProfileId;
        class Import extends core_1.Resource {
          constructor() {
            super(scope, id);
            this.codeSigningConfigArn = codeSigningConfigArn;
            this.codeSigningConfigId = assertedCodeSigningProfileId;
          }
        }
        return new Import();
      }
    };
    exports2.CodeSigningConfig = CodeSigningConfig;
    _a = JSII_RTTI_SYMBOL_1;
    CodeSigningConfig[_a] = { fqn: "@aws-cdk/aws-lambda.CodeSigningConfig", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/lambda-insights.js
var require_lambda_insights = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/lambda-insights.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LambdaInsightsVersion = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var region_info_1 = require_lib7();
    var DEFAULT_MAPPING_PREFIX = "LambdaInsightsVersions";
    var LambdaInsightsVersion = class {
      constructor() {
        this.layerVersionArn = "";
      }
      static fromInsightVersionArn(arn) {
        class InsightsArn extends LambdaInsightsVersion {
          constructor() {
            super(...arguments);
            this.layerVersionArn = arn;
          }
        }
        return new InsightsArn();
      }
      static fromInsightsVersion(insightsVersion) {
        const versionExists = region_info_1.RegionInfo.regions.some((regionInfo) => regionInfo.cloudwatchLambdaInsightsArn(insightsVersion));
        if (!versionExists) {
          throw new Error(`Insights version ${insightsVersion} does not exist.`);
        }
        class InsightsVersion extends LambdaInsightsVersion {
          constructor() {
            super(...arguments);
            this.layerVersionArn = core_1.Lazy.uncachedString({
              produce: (context) => getVersionArn(context, insightsVersion)
            });
          }
        }
        return new InsightsVersion();
      }
    };
    exports2.LambdaInsightsVersion = LambdaInsightsVersion;
    _a = JSII_RTTI_SYMBOL_1;
    LambdaInsightsVersion[_a] = { fqn: "@aws-cdk/aws-lambda.LambdaInsightsVersion", version: "1.132.0" };
    LambdaInsightsVersion.VERSION_1_0_54_0 = LambdaInsightsVersion.fromInsightsVersion("1.0.54.0");
    LambdaInsightsVersion.VERSION_1_0_86_0 = LambdaInsightsVersion.fromInsightsVersion("1.0.86.0");
    LambdaInsightsVersion.VERSION_1_0_89_0 = LambdaInsightsVersion.fromInsightsVersion("1.0.89.0");
    LambdaInsightsVersion.VERSION_1_0_98_0 = LambdaInsightsVersion.fromInsightsVersion("1.0.98.0");
    function getVersionArn(context, insightsVersion) {
      const scopeStack = core_1.Stack.of(context.scope);
      const region = scopeStack.region;
      if (region !== void 0 && !core_1.Token.isUnresolved(region)) {
        const arn = region_info_1.RegionInfo.get(region).cloudwatchLambdaInsightsArn(insightsVersion);
        if (arn === void 0) {
          throw new Error(`Insights version ${insightsVersion} is not supported in region ${region}`);
        }
        return arn;
      }
      const mapName = DEFAULT_MAPPING_PREFIX + insightsVersion.split(".").join("");
      const mapping = {};
      const region2arns = region_info_1.RegionInfo.regionMap(region_info_1.FactName.cloudwatchLambdaInsightsVersion(insightsVersion));
      for (const [reg, arn] of Object.entries(region2arns)) {
        mapping[reg] = { arn };
      }
      if (!scopeStack.node.tryFindChild(mapName)) {
        new core_1.CfnMapping(scopeStack, mapName, { mapping });
      }
      return core_1.Fn.findInMap(mapName, core_1.Aws.REGION, "arn");
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/log-retention.js
var require_log_retention2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/log-retention.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LogRetention = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var logs = require_lib19();
    var LogRetention = class extends logs.LogRetention {
      constructor(scope, id, props) {
        super(scope, id, __spreadValues({}, props));
      }
    };
    exports2.LogRetention = LogRetention;
    _a = JSII_RTTI_SYMBOL_1;
    LogRetention[_a] = { fqn: "@aws-cdk/aws-lambda.LogRetention", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/architecture.js
var require_architecture = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/architecture.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Architecture = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var Architecture = class {
      constructor(archName, dockerPlatform) {
        this.name = archName;
        this.dockerPlatform = dockerPlatform;
      }
      static custom(name, dockerPlatform) {
        return new Architecture(name, dockerPlatform !== null && dockerPlatform !== void 0 ? dockerPlatform : "linux/amd64");
      }
    };
    exports2.Architecture = Architecture;
    _a = JSII_RTTI_SYMBOL_1;
    Architecture[_a] = { fqn: "@aws-cdk/aws-lambda.Architecture", version: "1.132.0" };
    Architecture.X86_64 = new Architecture("x86_64", "linux/amd64");
    Architecture.ARM_64 = new Architecture("arm64", "linux/arm64");
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/lambda-augmentations.generated.js
var require_lambda_augmentations_generated = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/lambda-augmentations.generated.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var cloudwatch = require_lib10();
    var function_base_1 = require_function_base();
    function_base_1.FunctionBase.prototype.metric = function(metricName, props) {
      return new cloudwatch.Metric(__spreadValues({
        namespace: "AWS/Lambda",
        metricName,
        dimensions: { FunctionName: this.functionName }
      }, props)).attachTo(this);
    };
    function_base_1.FunctionBase.prototype.metricThrottles = function(props) {
      return this.metric("Throttles", __spreadValues({ statistic: "Sum" }, props));
    };
    function_base_1.FunctionBase.prototype.metricInvocations = function(props) {
      return this.metric("Invocations", __spreadValues({ statistic: "Sum" }, props));
    };
    function_base_1.FunctionBase.prototype.metricErrors = function(props) {
      return this.metric("Errors", __spreadValues({ statistic: "Sum" }, props));
    };
    function_base_1.FunctionBase.prototype.metricDuration = function(props) {
      return this.metric("Duration", __spreadValues({ statistic: "Average" }, props));
    };
  }
});

// asset-input/node_modules/@aws-cdk/aws-lambda/lib/index.js
var require_lib25 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-lambda/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_alias2(), exports2);
    __exportStar(require_dlq(), exports2);
    __exportStar(require_function_base(), exports2);
    __exportStar(require_function(), exports2);
    __exportStar(require_handler(), exports2);
    __exportStar(require_image_function(), exports2);
    __exportStar(require_layers(), exports2);
    __exportStar(require_permission(), exports2);
    __exportStar(require_runtime2(), exports2);
    __exportStar(require_code(), exports2);
    __exportStar(require_filesystem(), exports2);
    __exportStar(require_lambda_version(), exports2);
    __exportStar(require_singleton_lambda(), exports2);
    __exportStar(require_event_source(), exports2);
    __exportStar(require_event_source_mapping(), exports2);
    __exportStar(require_destination(), exports2);
    __exportStar(require_event_invoke_config(), exports2);
    __exportStar(require_scalable_attribute_api(), exports2);
    __exportStar(require_code_signing_config(), exports2);
    __exportStar(require_lambda_insights(), exports2);
    __exportStar(require_log_retention2(), exports2);
    __exportStar(require_architecture(), exports2);
    __exportStar(require_lambda_generated(), exports2);
    require_lambda_augmentations_generated();
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/integrations/lambda.js
var require_lambda = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/integrations/lambda.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LambdaIntegration = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var iam = require_lib9();
    var lambda = require_lib25();
    var core_1 = require_lib8();
    var aws_1 = require_aws2();
    var LambdaIntegration = class extends aws_1.AwsIntegration {
      constructor(handler, options = {}) {
        var _b, _c;
        const proxy = (_b = options.proxy) !== null && _b !== void 0 ? _b : true;
        super({
          proxy,
          service: "lambda",
          path: `2015-03-31/functions/${handler.functionArn}/invocations`,
          options
        });
        this.handler = handler;
        this.enableTest = (_c = options.allowTestInvoke) !== null && _c !== void 0 ? _c : true;
      }
      bind(method) {
        const bindResult = super.bind(method);
        const principal = new iam.ServicePrincipal("apigateway.amazonaws.com");
        const desc = `${core_1.Names.nodeUniqueId(method.api.node)}.${method.httpMethod}.${method.resource.path.replace(/\//g, ".")}`;
        this.handler.addPermission(`ApiPermission.${desc}`, {
          principal,
          scope: method,
          sourceArn: core_1.Lazy.string({ produce: () => method.methodArn })
        });
        if (this.enableTest) {
          this.handler.addPermission(`ApiPermission.Test.${desc}`, {
            principal,
            scope: method,
            sourceArn: method.testMethodArn
          });
        }
        let functionName;
        if (this.handler instanceof lambda.Function) {
          functionName = this.handler.node.defaultChild.functionName;
        } else {
          functionName = this.handler.functionName;
        }
        let deploymentToken;
        if (!core_1.Token.isUnresolved(functionName)) {
          deploymentToken = JSON.stringify({ functionName });
        }
        return __spreadProps(__spreadValues({}, bindResult), {
          deploymentToken
        });
      }
    };
    exports2.LambdaIntegration = LambdaIntegration;
    _a = JSII_RTTI_SYMBOL_1;
    LambdaIntegration[_a] = { fqn: "@aws-cdk/aws-apigateway.LambdaIntegration", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/integrations/http.js
var require_http = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/integrations/http.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HttpIntegration = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var integration_1 = require_integration();
    var HttpIntegration = class extends integration_1.Integration {
      constructor(url, props = {}) {
        var _b;
        const proxy = (_b = props.proxy) !== null && _b !== void 0 ? _b : true;
        const method = props.httpMethod || "GET";
        super({
          type: proxy ? integration_1.IntegrationType.HTTP_PROXY : integration_1.IntegrationType.HTTP,
          integrationHttpMethod: method,
          uri: url,
          options: props.options
        });
      }
    };
    exports2.HttpIntegration = HttpIntegration;
    _a = JSII_RTTI_SYMBOL_1;
    HttpIntegration[_a] = { fqn: "@aws-cdk/aws-apigateway.HttpIntegration", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/integrations/mock.js
var require_mock = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/integrations/mock.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MockIntegration = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var integration_1 = require_integration();
    var MockIntegration = class extends integration_1.Integration {
      constructor(options) {
        super({
          type: integration_1.IntegrationType.MOCK,
          options
        });
      }
    };
    exports2.MockIntegration = MockIntegration;
    _a = JSII_RTTI_SYMBOL_1;
    MockIntegration[_a] = { fqn: "@aws-cdk/aws-apigateway.MockIntegration", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/integrations/index.js
var require_integrations = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/integrations/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_aws2(), exports2);
    __exportStar(require_lambda(), exports2);
    __exportStar(require_http(), exports2);
    __exportStar(require_mock(), exports2);
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/authorizer.js
var require_authorizer = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/authorizer.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Authorizer = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var method_1 = require_method();
    var AUTHORIZER_SYMBOL = Symbol.for("@aws-cdk/aws-apigateway.Authorizer");
    var Authorizer = class extends core_1.Resource {
      constructor(scope, id, props) {
        super(scope, id, props);
        this.authorizationType = method_1.AuthorizationType.CUSTOM;
        Object.defineProperty(this, AUTHORIZER_SYMBOL, { value: true });
      }
      static isAuthorizer(x) {
        return x !== null && typeof x === "object" && AUTHORIZER_SYMBOL in x;
      }
    };
    exports2.Authorizer = Authorizer;
    _a = JSII_RTTI_SYMBOL_1;
    Authorizer[_a] = { fqn: "@aws-cdk/aws-apigateway.Authorizer", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/method.js
var require_method = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/method.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AuthorizationType = exports2.Method = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var apigateway_generated_1 = require_apigateway_generated();
    var authorizer_1 = require_authorizer();
    var mock_1 = require_mock();
    var restapi_1 = require_restapi();
    var util_1 = require_util3();
    var Method = class extends core_1.Resource {
      constructor(scope, id, props) {
        var _b, _c, _d;
        super(scope, id);
        this.resource = props.resource;
        this.api = props.resource.api;
        this.httpMethod = props.httpMethod.toUpperCase();
        util_1.validateHttpMethod(this.httpMethod);
        const options = props.options || {};
        const defaultMethodOptions = props.resource.defaultMethodOptions || {};
        const authorizer = options.authorizer || defaultMethodOptions.authorizer;
        const authorizerId = authorizer === null || authorizer === void 0 ? void 0 : authorizer.authorizerId;
        const authorizationTypeOption = options.authorizationType || defaultMethodOptions.authorizationType;
        const authorizationType = (authorizer === null || authorizer === void 0 ? void 0 : authorizer.authorizationType) || authorizationTypeOption || AuthorizationType.NONE;
        if ((authorizer === null || authorizer === void 0 ? void 0 : authorizer.authorizationType) && authorizationTypeOption && (authorizer === null || authorizer === void 0 ? void 0 : authorizer.authorizationType) !== authorizationTypeOption) {
          throw new Error(`${this.resource}/${this.httpMethod} - Authorization type is set to ${authorizationTypeOption} which is different from what is required by the authorizer [${authorizer.authorizationType}]`);
        }
        if (authorizer_1.Authorizer.isAuthorizer(authorizer)) {
          authorizer._attachToApi(this.api);
        }
        const integration = (_c = (_b = props.integration) !== null && _b !== void 0 ? _b : this.resource.defaultIntegration) !== null && _c !== void 0 ? _c : new mock_1.MockIntegration();
        const bindResult = integration.bind(this);
        const methodProps = {
          resourceId: props.resource.resourceId,
          restApiId: this.api.restApiId,
          httpMethod: this.httpMethod,
          operationName: options.operationName || defaultMethodOptions.operationName,
          apiKeyRequired: options.apiKeyRequired || defaultMethodOptions.apiKeyRequired,
          authorizationType,
          authorizerId,
          requestParameters: options.requestParameters || defaultMethodOptions.requestParameters,
          integration: this.renderIntegration(bindResult),
          methodResponses: this.renderMethodResponses(options.methodResponses),
          requestModels: this.renderRequestModels(options.requestModels),
          requestValidatorId: this.requestValidatorId(options),
          authorizationScopes: (_d = options.authorizationScopes) !== null && _d !== void 0 ? _d : defaultMethodOptions.authorizationScopes
        };
        const resource = new apigateway_generated_1.CfnMethod(this, "Resource", methodProps);
        this.methodId = resource.ref;
        if (restapi_1.RestApiBase._isRestApiBase(props.resource.api)) {
          props.resource.api._attachMethod(this);
        }
        const deployment = props.resource.api.latestDeployment;
        if (deployment) {
          deployment.node.addDependency(resource);
          deployment.addToLogicalId({
            method: __spreadProps(__spreadValues({}, methodProps), {
              integrationToken: bindResult === null || bindResult === void 0 ? void 0 : bindResult.deploymentToken
            })
          });
        }
      }
      get restApi() {
        return this.resource.restApi;
      }
      get methodArn() {
        var _b;
        const stage = (_b = this.api.deploymentStage) === null || _b === void 0 ? void 0 : _b.stageName;
        return this.api.arnForExecuteApi(this.httpMethod, pathForArn(this.resource.path), stage);
      }
      get testMethodArn() {
        return this.api.arnForExecuteApi(this.httpMethod, pathForArn(this.resource.path), "test-invoke-stage");
      }
      renderIntegration(bindResult) {
        var _b, _c;
        const options = (_b = bindResult.options) !== null && _b !== void 0 ? _b : {};
        let credentials;
        if (options.credentialsRole) {
          credentials = options.credentialsRole.roleArn;
        } else if (options.credentialsPassthrough) {
          credentials = core_1.Stack.of(this).formatArn({ service: "iam", region: "", account: "*", resource: "user", sep: "/", resourceName: "*" });
        }
        return {
          type: bindResult.type,
          uri: bindResult.uri,
          cacheKeyParameters: options.cacheKeyParameters,
          cacheNamespace: options.cacheNamespace,
          contentHandling: options.contentHandling,
          integrationHttpMethod: bindResult.integrationHttpMethod,
          requestParameters: options.requestParameters,
          requestTemplates: options.requestTemplates,
          passthroughBehavior: options.passthroughBehavior,
          integrationResponses: options.integrationResponses,
          connectionType: options.connectionType,
          connectionId: options.vpcLink ? options.vpcLink.vpcLinkId : void 0,
          credentials,
          timeoutInMillis: (_c = options.timeout) === null || _c === void 0 ? void 0 : _c.toMilliseconds()
        };
      }
      renderMethodResponses(methodResponses) {
        if (!methodResponses) {
          return void 0;
        }
        return methodResponses.map((mr) => {
          let responseModels;
          if (mr.responseModels) {
            responseModels = {};
            for (const contentType in mr.responseModels) {
              if (mr.responseModels.hasOwnProperty(contentType)) {
                responseModels[contentType] = mr.responseModels[contentType].modelId;
              }
            }
          }
          const methodResponseProp = {
            statusCode: mr.statusCode,
            responseParameters: mr.responseParameters,
            responseModels
          };
          return methodResponseProp;
        });
      }
      renderRequestModels(requestModels) {
        if (!requestModels) {
          return void 0;
        }
        const models = {};
        for (const contentType in requestModels) {
          if (requestModels.hasOwnProperty(contentType)) {
            models[contentType] = requestModels[contentType].modelId;
          }
        }
        return models;
      }
      requestValidatorId(options) {
        var _b;
        if (options.requestValidator && options.requestValidatorOptions) {
          throw new Error("Only one of 'requestValidator' or 'requestValidatorOptions' must be specified.");
        }
        if (options.requestValidatorOptions) {
          const validator = this.restApi.addRequestValidator("validator", options.requestValidatorOptions);
          return validator.requestValidatorId;
        }
        return (_b = options.requestValidator) === null || _b === void 0 ? void 0 : _b.requestValidatorId;
      }
    };
    exports2.Method = Method;
    _a = JSII_RTTI_SYMBOL_1;
    Method[_a] = { fqn: "@aws-cdk/aws-apigateway.Method", version: "1.132.0" };
    var AuthorizationType;
    (function(AuthorizationType2) {
      AuthorizationType2["NONE"] = "NONE";
      AuthorizationType2["IAM"] = "AWS_IAM";
      AuthorizationType2["CUSTOM"] = "CUSTOM";
      AuthorizationType2["COGNITO"] = "COGNITO_USER_POOLS";
    })(AuthorizationType = exports2.AuthorizationType || (exports2.AuthorizationType = {}));
    function pathForArn(path) {
      return path.replace(/\{[^\}]*\}/g, "*");
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/resource.js
var require_resource2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/resource.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProxyResource = exports2.Resource = exports2.ResourceBase = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var apigateway_generated_1 = require_apigateway_generated();
    var cors_1 = require_cors();
    var integrations_1 = require_integrations();
    var method_1 = require_method();
    var ResourceBase = class extends core_1.Resource {
      constructor(scope, id) {
        super(scope, id);
        this.children = {};
      }
      addResource(pathPart, options) {
        return new Resource(this, pathPart, __spreadValues({ parent: this, pathPart }, options));
      }
      addMethod(httpMethod, integration, options) {
        return new method_1.Method(this, httpMethod, { resource: this, httpMethod, integration, options });
      }
      addProxy(options) {
        return new ProxyResource(this, "{proxy+}", __spreadValues({ parent: this }, options));
      }
      addCorsPreflight(options) {
        var _d;
        const headers = {};
        const allowHeaders = options.allowHeaders || cors_1.Cors.DEFAULT_HEADERS;
        headers["Access-Control-Allow-Headers"] = `'${allowHeaders.join(",")}'`;
        if (options.allowOrigins.length === 0) {
          throw new Error("allowOrigins must contain at least one origin");
        }
        if (options.allowOrigins.includes("*") && options.allowOrigins.length > 1) {
          throw new Error(`Invalid "allowOrigins" - cannot mix "*" with specific origins: ${options.allowOrigins.join(",")}`);
        }
        const initialOrigin = options.allowOrigins[0];
        headers["Access-Control-Allow-Origin"] = `'${initialOrigin}'`;
        if (initialOrigin !== "*") {
          headers.Vary = "'Origin'";
        }
        let allowMethods = options.allowMethods || cors_1.Cors.ALL_METHODS;
        if (allowMethods.includes("ANY")) {
          if (allowMethods.length > 1) {
            throw new Error(`ANY cannot be used with any other method. Received: ${allowMethods.join(",")}`);
          }
          allowMethods = cors_1.Cors.ALL_METHODS;
        }
        headers["Access-Control-Allow-Methods"] = `'${allowMethods.join(",")}'`;
        if (options.allowCredentials) {
          headers["Access-Control-Allow-Credentials"] = "'true'";
        }
        let maxAgeSeconds;
        if (options.maxAge && options.disableCache) {
          throw new Error('The options "maxAge" and "disableCache" are mutually exclusive');
        }
        if (options.maxAge) {
          maxAgeSeconds = options.maxAge.toSeconds();
        }
        if (options.disableCache) {
          maxAgeSeconds = -1;
        }
        if (maxAgeSeconds) {
          headers["Access-Control-Max-Age"] = `'${maxAgeSeconds}'`;
        }
        if (options.exposeHeaders) {
          headers["Access-Control-Expose-Headers"] = `'${options.exposeHeaders.join(",")}'`;
        }
        const statusCode = (_d = options.statusCode) !== null && _d !== void 0 ? _d : 204;
        const integrationResponseParams = {};
        const methodResponseParams = {};
        for (const [name, value] of Object.entries(headers)) {
          const key = `method.response.header.${name}`;
          integrationResponseParams[key] = value;
          methodResponseParams[key] = true;
        }
        return this.addMethod("OPTIONS", new integrations_1.MockIntegration({
          requestTemplates: { "application/json": "{ statusCode: 200 }" },
          integrationResponses: [
            { statusCode: `${statusCode}`, responseParameters: integrationResponseParams, responseTemplates: renderResponseTemplate() }
          ]
        }), {
          methodResponses: [
            { statusCode: `${statusCode}`, responseParameters: methodResponseParams }
          ]
        });
        function renderResponseTemplate() {
          const origins = options.allowOrigins.slice(1);
          if (origins.length === 0) {
            return void 0;
          }
          const template = new Array();
          template.push('#set($origin = $input.params("Origin"))');
          template.push('#if($origin == "") #set($origin = $input.params("origin")) #end');
          const condition = origins.map((o) => `$origin.matches("${o}")`).join(" || ");
          template.push(`#if(${condition})`);
          template.push("  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)");
          template.push("#end");
          return {
            "application/json": template.join("\n")
          };
        }
      }
      getResource(pathPart) {
        return this.children[pathPart];
      }
      _trackChild(pathPart, resource) {
        this.children[pathPart] = resource;
      }
      resourceForPath(path) {
        if (!path) {
          return this;
        }
        if (path.startsWith("/")) {
          if (this.path !== "/") {
            throw new Error(`Path may start with "/" only for the resource, but we are at: ${this.path}`);
          }
          return this.resourceForPath(path.substr(1));
        }
        const parts = path.split("/");
        const next = parts.shift();
        if (!next || next === "") {
          throw new Error("resourceForPath cannot be called with an empty path");
        }
        let resource = this.getResource(next);
        if (!resource) {
          resource = this.addResource(next);
        }
        return resource.resourceForPath(parts.join("/"));
      }
      get url() {
        return this.restApi.urlForPath(this.path);
      }
    };
    exports2.ResourceBase = ResourceBase;
    _a = JSII_RTTI_SYMBOL_1;
    ResourceBase[_a] = { fqn: "@aws-cdk/aws-apigateway.ResourceBase", version: "1.132.0" };
    var Resource = class extends ResourceBase {
      constructor(scope, id, props) {
        super(scope, id);
        validateResourcePathPart(props.pathPart);
        this.parentResource = props.parent;
        if (props.parent instanceof ResourceBase) {
          props.parent._trackChild(props.pathPart, this);
        }
        const resourceProps = {
          restApiId: props.parent.api.restApiId,
          parentId: props.parent.resourceId,
          pathPart: props.pathPart
        };
        const resource = new apigateway_generated_1.CfnResource(this, "Resource", resourceProps);
        this.resourceId = resource.ref;
        this.api = props.parent.api;
        this.path = props.parent.path;
        if (!this.path.endsWith("/")) {
          this.path += "/";
        }
        this.path += props.pathPart;
        const deployment = props.parent.api.latestDeployment;
        if (deployment) {
          deployment.node.addDependency(resource);
          deployment.addToLogicalId({ resource: resourceProps });
        }
        this.defaultIntegration = props.defaultIntegration || props.parent.defaultIntegration;
        this.defaultMethodOptions = __spreadValues(__spreadValues({}, props.parent.defaultMethodOptions), props.defaultMethodOptions);
        this.defaultCorsPreflightOptions = props.defaultCorsPreflightOptions || props.parent.defaultCorsPreflightOptions;
        if (this.defaultCorsPreflightOptions) {
          this.addCorsPreflight(this.defaultCorsPreflightOptions);
        }
      }
      static fromResourceAttributes(scope, id, attrs) {
        class Import extends ResourceBase {
          constructor() {
            super(...arguments);
            this.api = attrs.restApi;
            this.resourceId = attrs.resourceId;
            this.path = attrs.path;
            this.defaultIntegration = void 0;
            this.defaultMethodOptions = void 0;
            this.defaultCorsPreflightOptions = void 0;
          }
          get parentResource() {
            throw new Error("parentResource is not configured for imported resource.");
          }
          get restApi() {
            throw new Error("restApi is not configured for imported resource.");
          }
        }
        return new Import(scope, id);
      }
      get restApi() {
        if (!this.parentResource) {
          throw new Error("parentResource was unexpectedly not defined");
        }
        return this.parentResource.restApi;
      }
    };
    exports2.Resource = Resource;
    _b = JSII_RTTI_SYMBOL_1;
    Resource[_b] = { fqn: "@aws-cdk/aws-apigateway.Resource", version: "1.132.0" };
    var ProxyResource = class extends Resource {
      constructor(scope, id, props) {
        var _d;
        super(scope, id, {
          parent: props.parent,
          pathPart: "{proxy+}",
          defaultIntegration: props.defaultIntegration,
          defaultMethodOptions: props.defaultMethodOptions
        });
        const anyMethod = (_d = props.anyMethod) !== null && _d !== void 0 ? _d : true;
        if (anyMethod) {
          this.anyMethod = this.addMethod("ANY");
        }
      }
      addMethod(httpMethod, integration, options) {
        if (this.parentResource && this.parentResource.path === "/") {
          if (!(this.parentResource.node.tryFindChild(httpMethod) instanceof method_1.Method)) {
            this.parentResource.addMethod(httpMethod, integration, options);
          }
        }
        return super.addMethod(httpMethod, integration, options);
      }
    };
    exports2.ProxyResource = ProxyResource;
    _c = JSII_RTTI_SYMBOL_1;
    ProxyResource[_c] = { fqn: "@aws-cdk/aws-apigateway.ProxyResource", version: "1.132.0" };
    function validateResourcePathPart(part) {
      if (part.startsWith("{") && part.endsWith("}")) {
        part = part.substr(1, part.length - 2);
        if (part.endsWith("+")) {
          part = part.substr(0, part.length - 1);
        }
      }
      if (!/^[a-zA-Z0-9\.\_\-]+$/.test(part)) {
        throw new Error(`Resource's path part only allow [a-zA-Z0-9._-], an optional trailing '+'
      and curly braces at the beginning and the end: ${part}`);
      }
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/access-log.js
var require_access_log = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/access-log.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AccessLogFormat = exports2.AccessLogField = exports2.LogGroupLogDestination = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var LogGroupLogDestination = class {
      constructor(logGroup) {
        this.logGroup = logGroup;
      }
      bind(_stage) {
        return {
          destinationArn: this.logGroup.logGroupArn
        };
      }
    };
    exports2.LogGroupLogDestination = LogGroupLogDestination;
    _a = JSII_RTTI_SYMBOL_1;
    LogGroupLogDestination[_a] = { fqn: "@aws-cdk/aws-apigateway.LogGroupLogDestination", version: "1.132.0" };
    var AccessLogField = class {
      static contextAccountId() {
        return "$context.identity.accountId";
      }
      static contextApiId() {
        return "$context.apiId";
      }
      static contextAuthorizerClaims(property) {
        return `$context.authorizer.claims.${property}`;
      }
      static contextAuthorizerPrincipalId() {
        return "$context.authorizer.principalId";
      }
      static contextAuthorizer(property) {
        return `$context.authorizer.${property}`;
      }
      static contextAwsEndpointRequestId() {
        return "$context.awsEndpointRequestId";
      }
      static contextDomainName() {
        return "$context.domainName";
      }
      static contextDomainPrefix() {
        return "$context.domainPrefix";
      }
      static contextErrorMessage() {
        return "$context.error.message";
      }
      static contextErrorMessageString() {
        return "$context.error.messageString";
      }
      static contextErrorResponseType() {
        return "$context.error.responseType";
      }
      static contextErrorValidationErrorString() {
        return "$context.error.validationErrorString";
      }
      static contextExtendedRequestId() {
        return "$context.extendedRequestId";
      }
      static contextHttpMethod() {
        return "$context.httpMethod";
      }
      static contextIdentityAccountId() {
        return "$context.identity.accountId";
      }
      static contextIdentityApiKey() {
        return "$context.identity.apiKey";
      }
      static contextIdentityApiKeyId() {
        return "$context.identity.apiKeyId";
      }
      static contextIdentityCaller() {
        return "$context.identity.caller";
      }
      static contextIdentityCognitoAuthenticationProvider() {
        return "$context.identity.cognitoAuthenticationProvider";
      }
      static contextIdentityCognitoAuthenticationType() {
        return "$context.identity.cognitoAuthenticationType";
      }
      static contextIdentityCognitoIdentityId() {
        return "$context.identity.cognitoIdentityId";
      }
      static contextIdentityCognitoIdentityPoolId() {
        return "$context.identity.cognitoIdentityPoolId";
      }
      static contextIdentityPrincipalOrgId() {
        return "$context.identity.principalOrgId";
      }
      static contextIdentitySourceIp() {
        return "$context.identity.sourceIp";
      }
      static contextIdentityUser() {
        return "$context.identity.user";
      }
      static contextIdentityUserAgent() {
        return "$context.identity.userAgent";
      }
      static contextIdentityUserArn() {
        return "$context.identity.userArn";
      }
      static contextPath() {
        return "$context.path";
      }
      static contextProtocol() {
        return "$context.protocol";
      }
      static contextRequestId() {
        return "$context.requestId";
      }
      static contextRequestOverrideHeader(headerName) {
        return `$context.requestOverride.header.${headerName}`;
      }
      static contextRequestOverridePath(pathName) {
        return `$context.requestOverride.path.${pathName}`;
      }
      static contextRequestOverrideQuerystring(querystringName) {
        return `$context.requestOverride.querystring.${querystringName}`;
      }
      static contextResponseOverrideHeader(headerName) {
        return `$context.responseOverride.header.${headerName}`;
      }
      static contextResponseOverrideStatus() {
        return "$context.responseOverride.status";
      }
      static contextRequestTime() {
        return "$context.requestTime";
      }
      static contextRequestTimeEpoch() {
        return "$context.requestTimeEpoch";
      }
      static contextResourceId() {
        return "$context.resourceId";
      }
      static contextResourcePath() {
        return "$context.resourcePath";
      }
      static contextStage() {
        return "$context.stage";
      }
      static contextWafResponseCode() {
        return "$context.wafResponseCode";
      }
      static contextWebaclArn() {
        return "$context.webaclArn";
      }
      static contextXrayTraceId() {
        return "$context.xrayTraceId";
      }
      static contextAuthorizerIntegrationLatency() {
        return "$context.authorizer.integrationLatency";
      }
      static contextIntegrationLatency() {
        return "$context.integrationLatency";
      }
      static contextIntegrationStatus() {
        return "$context.integrationStatus";
      }
      static contextResponseLatency() {
        return "$context.responseLatency";
      }
      static contextResponseLength() {
        return "$context.responseLength";
      }
      static contextStatus() {
        return "$context.status";
      }
    };
    exports2.AccessLogField = AccessLogField;
    _b = JSII_RTTI_SYMBOL_1;
    AccessLogField[_b] = { fqn: "@aws-cdk/aws-apigateway.AccessLogField", version: "1.132.0" };
    var AccessLogFormat = class {
      constructor(format) {
        this.format = format;
      }
      static custom(format) {
        return new AccessLogFormat(format);
      }
      static clf() {
        const requester = [AccessLogField.contextIdentitySourceIp(), AccessLogField.contextIdentityCaller(), AccessLogField.contextIdentityUser()].join(" ");
        const requestTime = AccessLogField.contextRequestTime();
        const request = [AccessLogField.contextHttpMethod(), AccessLogField.contextResourcePath(), AccessLogField.contextProtocol()].join(" ");
        const status = [AccessLogField.contextStatus(), AccessLogField.contextResponseLength(), AccessLogField.contextRequestId()].join(" ");
        return new AccessLogFormat(`${requester} [${requestTime}] "${request}" ${status}`);
      }
      static jsonWithStandardFields(fields = {
        ip: true,
        user: true,
        caller: true,
        requestTime: true,
        httpMethod: true,
        resourcePath: true,
        status: true,
        protocol: true,
        responseLength: true
      }) {
        return this.custom(JSON.stringify({
          requestId: AccessLogField.contextRequestId(),
          ip: fields.ip ? AccessLogField.contextIdentitySourceIp() : void 0,
          user: fields.user ? AccessLogField.contextIdentityUser() : void 0,
          caller: fields.caller ? AccessLogField.contextIdentityCaller() : void 0,
          requestTime: fields.requestTime ? AccessLogField.contextRequestTime() : void 0,
          httpMethod: fields.httpMethod ? AccessLogField.contextHttpMethod() : void 0,
          resourcePath: fields.resourcePath ? AccessLogField.contextResourcePath() : void 0,
          status: fields.status ? AccessLogField.contextStatus() : void 0,
          protocol: fields.protocol ? AccessLogField.contextProtocol() : void 0,
          responseLength: fields.responseLength ? AccessLogField.contextResponseLength() : void 0
        }));
      }
      toString() {
        return this.format;
      }
    };
    exports2.AccessLogFormat = AccessLogFormat;
    _c = JSII_RTTI_SYMBOL_1;
    AccessLogFormat[_c] = { fqn: "@aws-cdk/aws-apigateway.AccessLogFormat", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/stage.js
var require_stage2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/stage.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Stage = exports2.MethodLoggingLevel = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var access_log_1 = require_access_log();
    var apigateway_generated_1 = require_apigateway_generated();
    var util_1 = require_util3();
    var MethodLoggingLevel;
    (function(MethodLoggingLevel2) {
      MethodLoggingLevel2["OFF"] = "OFF";
      MethodLoggingLevel2["ERROR"] = "ERROR";
      MethodLoggingLevel2["INFO"] = "INFO";
    })(MethodLoggingLevel = exports2.MethodLoggingLevel || (exports2.MethodLoggingLevel = {}));
    var Stage = class extends core_1.Resource {
      constructor(scope, id, props) {
        super(scope, id);
        this.enableCacheCluster = props.cacheClusterEnabled;
        const methodSettings = this.renderMethodSettings(props);
        let accessLogSetting;
        const accessLogDestination = props.accessLogDestination;
        const accessLogFormat = props.accessLogFormat;
        if (!accessLogDestination && !accessLogFormat) {
          accessLogSetting = void 0;
        } else {
          if (accessLogFormat !== void 0 && !core_1.Token.isUnresolved(accessLogFormat.toString()) && !/.*\$context.requestId.*/.test(accessLogFormat.toString())) {
            throw new Error("Access log must include at least `AccessLogFormat.contextRequestId()`");
          }
          if (accessLogFormat !== void 0 && accessLogDestination === void 0) {
            throw new Error("Access log format is specified without a destination");
          }
          accessLogSetting = {
            destinationArn: accessLogDestination === null || accessLogDestination === void 0 ? void 0 : accessLogDestination.bind(this).destinationArn,
            format: (accessLogFormat === null || accessLogFormat === void 0 ? void 0 : accessLogFormat.toString()) ? accessLogFormat === null || accessLogFormat === void 0 ? void 0 : accessLogFormat.toString() : access_log_1.AccessLogFormat.clf().toString()
          };
        }
        if (props.cacheClusterSize !== void 0) {
          if (this.enableCacheCluster === void 0) {
            this.enableCacheCluster = true;
          } else if (this.enableCacheCluster === false) {
            throw new Error(`Cannot set "cacheClusterSize" to ${props.cacheClusterSize} and "cacheClusterEnabled" to "false"`);
          }
        }
        const cacheClusterSize = this.enableCacheCluster ? props.cacheClusterSize || "0.5" : void 0;
        const resource = new apigateway_generated_1.CfnStage(this, "Resource", {
          stageName: props.stageName || "prod",
          accessLogSetting,
          cacheClusterEnabled: this.enableCacheCluster,
          cacheClusterSize,
          clientCertificateId: props.clientCertificateId,
          deploymentId: props.deployment.deploymentId,
          restApiId: props.deployment.api.restApiId,
          description: props.description,
          documentationVersion: props.documentationVersion,
          variables: props.variables,
          tracingEnabled: props.tracingEnabled,
          methodSettings
        });
        this.stageName = resource.ref;
        this.restApi = props.deployment.api;
      }
      urlForPath(path = "/") {
        if (!path.startsWith("/")) {
          throw new Error(`Path must begin with "/": ${path}`);
        }
        return `https://${this.restApi.restApiId}.execute-api.${core_1.Stack.of(this).region}.${core_1.Stack.of(this).urlSuffix}/${this.stageName}${path}`;
      }
      renderMethodSettings(props) {
        const settings = new Array();
        const self = this;
        const commonMethodOptions = {
          metricsEnabled: props.metricsEnabled,
          loggingLevel: props.loggingLevel,
          dataTraceEnabled: props.dataTraceEnabled,
          throttlingBurstLimit: props.throttlingBurstLimit,
          throttlingRateLimit: props.throttlingRateLimit,
          cachingEnabled: props.cachingEnabled,
          cacheTtl: props.cacheTtl,
          cacheDataEncrypted: props.cacheDataEncrypted
        };
        const hasCommonOptions = Object.keys(commonMethodOptions).map((v) => commonMethodOptions[v]).filter((x) => x).length > 0;
        if (hasCommonOptions) {
          settings.push(renderEntry("/*/*", commonMethodOptions));
        }
        if (props.methodOptions) {
          for (const path of Object.keys(props.methodOptions)) {
            settings.push(renderEntry(path, props.methodOptions[path]));
          }
        }
        return settings.length === 0 ? void 0 : settings;
        function renderEntry(path, options) {
          if (options.cachingEnabled) {
            if (self.enableCacheCluster === void 0) {
              self.enableCacheCluster = true;
            } else if (self.enableCacheCluster === false) {
              throw new Error(`Cannot enable caching for method ${path} since cache cluster is disabled on stage`);
            }
          }
          const { httpMethod, resourcePath } = util_1.parseMethodOptionsPath(path);
          return {
            httpMethod,
            resourcePath,
            cacheDataEncrypted: options.cacheDataEncrypted,
            cacheTtlInSeconds: options.cacheTtl && options.cacheTtl.toSeconds(),
            cachingEnabled: options.cachingEnabled,
            dataTraceEnabled: options.dataTraceEnabled,
            loggingLevel: options.loggingLevel,
            metricsEnabled: options.metricsEnabled,
            throttlingBurstLimit: options.throttlingBurstLimit,
            throttlingRateLimit: options.throttlingRateLimit
          };
        }
      }
    };
    exports2.Stage = Stage;
    _a = JSII_RTTI_SYMBOL_1;
    Stage[_a] = { fqn: "@aws-cdk/aws-apigateway.Stage", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/restapi.js
var require_restapi = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/restapi.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EndpointType = exports2.ApiKeySourceType = exports2.RestApi = exports2.SpecRestApi = exports2.RestApiBase = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cloudwatch = require_lib10();
    var iam = require_lib9();
    var core_1 = require_lib8();
    var api_key_1 = require_api_key();
    var apigateway_canned_metrics_generated_1 = require_apigateway_canned_metrics_generated();
    var apigateway_generated_1 = require_apigateway_generated();
    var deployment_1 = require_deployment();
    var domain_name_1 = require_domain_name();
    var gateway_response_1 = require_gateway_response();
    var model_1 = require_model();
    var requestvalidator_1 = require_requestvalidator();
    var resource_1 = require_resource2();
    var stage_1 = require_stage2();
    var usage_plan_1 = require_usage_plan();
    var RESTAPI_SYMBOL = Symbol.for("@aws-cdk/aws-apigateway.RestApiBase");
    var RestApiBase = class extends core_1.Resource {
      constructor(scope, id, props = {}) {
        var _d;
        super(scope, id);
        this.restApiName = (_d = props.restApiName) !== null && _d !== void 0 ? _d : id;
        Object.defineProperty(this, RESTAPI_SYMBOL, { value: true });
      }
      static _isRestApiBase(x) {
        return x !== null && typeof x === "object" && RESTAPI_SYMBOL in x;
      }
      get latestDeployment() {
        return this._latestDeployment;
      }
      get domainName() {
        return this._domainName;
      }
      urlForPath(path = "/") {
        if (!this.deploymentStage) {
          throw new Error('Cannot determine deployment stage for API from "deploymentStage". Use "deploy" or explicitly set "deploymentStage"');
        }
        return this.deploymentStage.urlForPath(path);
      }
      addDomainName(id, options) {
        const domainName = new domain_name_1.DomainName(this, id, __spreadProps(__spreadValues({}, options), {
          mapping: this
        }));
        if (!this._domainName) {
          this._domainName = domainName;
        }
        return domainName;
      }
      addUsagePlan(id, props = {}) {
        return new usage_plan_1.UsagePlan(this, id, props);
      }
      arnForExecuteApi(method = "*", path = "/*", stage = "*") {
        if (!path.startsWith("/")) {
          throw new Error(`"path" must begin with a "/": '${path}'`);
        }
        if (method.toUpperCase() === "ANY") {
          method = "*";
        }
        return core_1.Stack.of(this).formatArn({
          service: "execute-api",
          resource: this.restApiId,
          sep: "/",
          resourceName: `${stage}/${method}${path}`
        });
      }
      addGatewayResponse(id, options) {
        return new gateway_response_1.GatewayResponse(this, id, __spreadValues({
          restApi: this
        }, options));
      }
      addApiKey(id, options) {
        return new api_key_1.ApiKey(this, id, __spreadValues({
          resources: [this]
        }, options));
      }
      metric(metricName, props) {
        return new cloudwatch.Metric(__spreadValues({
          namespace: "AWS/ApiGateway",
          metricName,
          dimensions: { ApiName: this.restApiName }
        }, props)).attachTo(this);
      }
      metricClientError(props) {
        return this.cannedMetric(apigateway_canned_metrics_generated_1.ApiGatewayMetrics._4XxErrorSum, props);
      }
      metricServerError(props) {
        return this.cannedMetric(apigateway_canned_metrics_generated_1.ApiGatewayMetrics._5XxErrorSum, props);
      }
      metricCacheHitCount(props) {
        return this.cannedMetric(apigateway_canned_metrics_generated_1.ApiGatewayMetrics.cacheHitCountSum, props);
      }
      metricCacheMissCount(props) {
        return this.cannedMetric(apigateway_canned_metrics_generated_1.ApiGatewayMetrics.cacheMissCountSum, props);
      }
      metricCount(props) {
        return this.cannedMetric(apigateway_canned_metrics_generated_1.ApiGatewayMetrics.countSum, __spreadValues({
          statistic: "SampleCount"
        }, props));
      }
      metricIntegrationLatency(props) {
        return this.cannedMetric(apigateway_canned_metrics_generated_1.ApiGatewayMetrics.integrationLatencyAverage, props);
      }
      metricLatency(props) {
        return this.cannedMetric(apigateway_canned_metrics_generated_1.ApiGatewayMetrics.latencyAverage, props);
      }
      _attachMethod(method) {
        ignore(method);
      }
      _attachDeployment(deployment) {
        ignore(deployment);
      }
      _configureCloudWatchRole(apiResource) {
        const role = new iam.Role(this, "CloudWatchRole", {
          assumedBy: new iam.ServicePrincipal("apigateway.amazonaws.com"),
          managedPolicies: [iam.ManagedPolicy.fromAwsManagedPolicyName("service-role/AmazonAPIGatewayPushToCloudWatchLogs")]
        });
        const resource = new apigateway_generated_1.CfnAccount(this, "Account", {
          cloudWatchRoleArn: role.roleArn
        });
        resource.node.addDependency(apiResource);
      }
      configureCloudWatchRole(apiResource) {
        this._configureCloudWatchRole(apiResource);
      }
      configureDeployment(props) {
        this._configureDeployment(props);
      }
      _configureDeployment(props) {
        var _d;
        const deploy = (_d = props.deploy) !== null && _d !== void 0 ? _d : true;
        if (deploy) {
          this._latestDeployment = new deployment_1.Deployment(this, "Deployment", {
            description: "Automatically created by the RestApi construct",
            api: this,
            retainDeployments: props.retainDeployments
          });
          const stageName = props.deployOptions && props.deployOptions.stageName || "prod";
          this.deploymentStage = new stage_1.Stage(this, `DeploymentStage.${stageName}`, __spreadValues({
            deployment: this._latestDeployment
          }, props.deployOptions));
          new core_1.CfnOutput(this, "Endpoint", { exportName: props.endpointExportName, value: this.urlForPath() });
        } else {
          if (props.deployOptions) {
            throw new Error("Cannot set 'deployOptions' if 'deploy' is disabled");
          }
        }
      }
      _configureEndpoints(props) {
        var _d, _e;
        if (props.endpointTypes && props.endpointConfiguration) {
          throw new Error("Only one of the RestApi props, endpointTypes or endpointConfiguration, is allowed");
        }
        if (props.endpointConfiguration) {
          return {
            types: props.endpointConfiguration.types,
            vpcEndpointIds: (_e = (_d = props.endpointConfiguration) === null || _d === void 0 ? void 0 : _d.vpcEndpoints) === null || _e === void 0 ? void 0 : _e.map((vpcEndpoint) => vpcEndpoint.vpcEndpointId)
          };
        }
        if (props.endpointTypes) {
          return { types: props.endpointTypes };
        }
        return void 0;
      }
      cannedMetric(fn, props) {
        return new cloudwatch.Metric(__spreadValues(__spreadValues({}, fn({ ApiName: this.restApiName })), props)).attachTo(this);
      }
    };
    exports2.RestApiBase = RestApiBase;
    _a = JSII_RTTI_SYMBOL_1;
    RestApiBase[_a] = { fqn: "@aws-cdk/aws-apigateway.RestApiBase", version: "1.132.0" };
    var SpecRestApi = class extends RestApiBase {
      constructor(scope, id, props) {
        var _d, _e;
        super(scope, id, props);
        const apiDefConfig = props.apiDefinition.bind(this);
        const resource = new apigateway_generated_1.CfnRestApi(this, "Resource", {
          name: this.restApiName,
          policy: props.policy,
          failOnWarnings: props.failOnWarnings,
          body: (_d = apiDefConfig.inlineDefinition) !== null && _d !== void 0 ? _d : void 0,
          bodyS3Location: apiDefConfig.inlineDefinition ? void 0 : apiDefConfig.s3Location,
          endpointConfiguration: this._configureEndpoints(props),
          parameters: props.parameters
        });
        this.node.defaultChild = resource;
        this.restApiId = resource.ref;
        this.restApiRootResourceId = resource.attrRootResourceId;
        this.root = new RootResource(this, {}, this.restApiRootResourceId);
        this._configureDeployment(props);
        if (props.domainName) {
          this.addDomainName("CustomDomain", props.domainName);
        }
        const cloudWatchRole = (_e = props.cloudWatchRole) !== null && _e !== void 0 ? _e : true;
        if (cloudWatchRole) {
          this._configureCloudWatchRole(resource);
        }
      }
    };
    exports2.SpecRestApi = SpecRestApi;
    _b = JSII_RTTI_SYMBOL_1;
    SpecRestApi[_b] = { fqn: "@aws-cdk/aws-apigateway.SpecRestApi", version: "1.132.0" };
    var RestApi = class extends RestApiBase {
      constructor(scope, id, props = {}) {
        var _d, _e;
        super(scope, id, props);
        this.methods = new Array();
        this.deployments = new Array();
        const resource = new apigateway_generated_1.CfnRestApi(this, "Resource", {
          name: this.restApiName,
          description: props.description,
          policy: props.policy,
          failOnWarnings: props.failOnWarnings,
          minimumCompressionSize: props.minimumCompressionSize,
          binaryMediaTypes: props.binaryMediaTypes,
          endpointConfiguration: this._configureEndpoints(props),
          apiKeySourceType: props.apiKeySourceType,
          cloneFrom: (_d = props.cloneFrom) === null || _d === void 0 ? void 0 : _d.restApiId,
          parameters: props.parameters,
          disableExecuteApiEndpoint: props.disableExecuteApiEndpoint
        });
        this.node.defaultChild = resource;
        this.restApiId = resource.ref;
        const cloudWatchRole = (_e = props.cloudWatchRole) !== null && _e !== void 0 ? _e : true;
        if (cloudWatchRole) {
          this._configureCloudWatchRole(resource);
        }
        this._configureDeployment(props);
        if (props.domainName) {
          this.addDomainName("CustomDomain", props.domainName);
        }
        this.root = new RootResource(this, props, resource.attrRootResourceId);
        this.restApiRootResourceId = resource.attrRootResourceId;
      }
      static fromRestApiId(scope, id, restApiId) {
        class Import extends RestApiBase {
          constructor() {
            super(...arguments);
            this.restApiId = restApiId;
          }
          get root() {
            throw new Error("root is not configured when imported using `fromRestApiId()`. Use `fromRestApiAttributes()` API instead.");
          }
          get restApiRootResourceId() {
            throw new Error("restApiRootResourceId is not configured when imported using `fromRestApiId()`. Use `fromRestApiAttributes()` API instead.");
          }
        }
        return new Import(scope, id);
      }
      static fromRestApiAttributes(scope, id, attrs) {
        class Import extends RestApiBase {
          constructor() {
            super(...arguments);
            this.restApiId = attrs.restApiId;
            this.restApiRootResourceId = attrs.rootResourceId;
            this.root = new RootResource(this, {}, this.restApiRootResourceId);
          }
        }
        return new Import(scope, id);
      }
      get url() {
        return this.urlForPath();
      }
      addModel(id, props) {
        return new model_1.Model(this, id, __spreadProps(__spreadValues({}, props), {
          restApi: this
        }));
      }
      addRequestValidator(id, props) {
        return new requestvalidator_1.RequestValidator(this, id, __spreadProps(__spreadValues({}, props), {
          restApi: this
        }));
      }
      _attachMethod(method) {
        this.methods.push(method);
        for (const dep of this.deployments) {
          dep._addMethodDependency(method);
        }
      }
      _attachDeployment(deployment) {
        this.deployments.push(deployment);
        for (const method of this.methods) {
          deployment._addMethodDependency(method);
        }
      }
      validate() {
        if (this.methods.length === 0) {
          return ["The REST API doesn't contain any methods"];
        }
        return [];
      }
    };
    exports2.RestApi = RestApi;
    _c = JSII_RTTI_SYMBOL_1;
    RestApi[_c] = { fqn: "@aws-cdk/aws-apigateway.RestApi", version: "1.132.0" };
    var ApiKeySourceType;
    (function(ApiKeySourceType2) {
      ApiKeySourceType2["HEADER"] = "HEADER";
      ApiKeySourceType2["AUTHORIZER"] = "AUTHORIZER";
    })(ApiKeySourceType = exports2.ApiKeySourceType || (exports2.ApiKeySourceType = {}));
    var EndpointType;
    (function(EndpointType2) {
      EndpointType2["EDGE"] = "EDGE";
      EndpointType2["REGIONAL"] = "REGIONAL";
      EndpointType2["PRIVATE"] = "PRIVATE";
    })(EndpointType = exports2.EndpointType || (exports2.EndpointType = {}));
    var RootResource = class extends resource_1.ResourceBase {
      constructor(api, props, resourceId) {
        super(api, "Default");
        this.parentResource = void 0;
        this.defaultIntegration = props.defaultIntegration;
        this.defaultMethodOptions = props.defaultMethodOptions;
        this.defaultCorsPreflightOptions = props.defaultCorsPreflightOptions;
        this.api = api;
        this.resourceId = resourceId;
        this.path = "/";
        if (api instanceof RestApi) {
          this._restApi = api;
        }
        if (this.defaultCorsPreflightOptions) {
          this.addCorsPreflight(this.defaultCorsPreflightOptions);
        }
      }
      get restApi() {
        if (!this._restApi) {
          throw new Error("RestApi is not available on Resource not connected to an instance of RestApi. Use `api` instead");
        }
        return this._restApi;
      }
    };
    function ignore(_x) {
      return;
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/lambda-api.js
var require_lambda_api = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/lambda-api.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LambdaRestApi = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var integrations_1 = require_integrations();
    var restapi_1 = require_restapi();
    var LambdaRestApi = class extends restapi_1.RestApi {
      constructor(scope, id, props) {
        if (props.options && props.options.defaultIntegration || props.defaultIntegration) {
          throw new Error('Cannot specify "defaultIntegration" since Lambda integration is automatically defined');
        }
        super(scope, id, __spreadValues(__spreadValues({
          defaultIntegration: new integrations_1.LambdaIntegration(props.handler)
        }, props.options), props));
        if (props.proxy !== false) {
          this.root.addProxy();
          this.root.addResource = addResourceThrows;
          this.root.addMethod = addMethodThrows;
          this.root.addProxy = addProxyThrows;
        }
      }
    };
    exports2.LambdaRestApi = LambdaRestApi;
    _a = JSII_RTTI_SYMBOL_1;
    LambdaRestApi[_a] = { fqn: "@aws-cdk/aws-apigateway.LambdaRestApi", version: "1.132.0" };
    function addResourceThrows() {
      throw new Error("Cannot call 'addResource' on a proxying LambdaRestApi; set 'proxy' to false");
    }
    function addMethodThrows() {
      throw new Error("Cannot call 'addMethod' on a proxying LambdaRestApi; set 'proxy' to false");
    }
    function addProxyThrows() {
      throw new Error("Cannot call 'addProxy' on a proxying LambdaRestApi; set 'proxy' to false");
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/methodresponse.js
var require_methodresponse = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/methodresponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/authorizers/lambda.js
var require_lambda2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/authorizers/lambda.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RequestAuthorizer = exports2.TokenAuthorizer = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var iam = require_lib9();
    var core_1 = require_lib8();
    var apigateway_generated_1 = require_apigateway_generated();
    var authorizer_1 = require_authorizer();
    var LambdaAuthorizer = class extends authorizer_1.Authorizer {
      constructor(scope, id, props) {
        var _c;
        super(scope, id);
        this.handler = props.handler;
        this.role = props.assumeRole;
        if (props.resultsCacheTtl && ((_c = props.resultsCacheTtl) === null || _c === void 0 ? void 0 : _c.toSeconds()) > 3600) {
          throw new Error("Lambda authorizer property 'resultsCacheTtl' must not be greater than 3600 seconds (1 hour)");
        }
      }
      _attachToApi(restApi) {
        if (this.restApiId && this.restApiId !== restApi.restApiId) {
          throw new Error("Cannot attach authorizer to two different rest APIs");
        }
        this.restApiId = restApi.restApiId;
      }
      setupPermissions() {
        if (!this.role) {
          this.handler.addPermission(`${core_1.Names.uniqueId(this)}:Permissions`, {
            principal: new iam.ServicePrincipal("apigateway.amazonaws.com"),
            sourceArn: this.authorizerArn
          });
        } else if (this.role instanceof iam.Role) {
          this.role.attachInlinePolicy(new iam.Policy(this, "authorizerInvokePolicy", {
            statements: [
              new iam.PolicyStatement({
                resources: [this.handler.functionArn],
                actions: ["lambda:InvokeFunction"]
              })
            ]
          }));
        }
      }
      lazyRestApiId() {
        return core_1.Lazy.string({
          produce: () => {
            if (!this.restApiId) {
              throw new Error(`Authorizer (${this.node.path}) must be attached to a RestApi`);
            }
            return this.restApiId;
          }
        });
      }
    };
    var TokenAuthorizer = class extends LambdaAuthorizer {
      constructor(scope, id, props) {
        var _c, _d, _e;
        super(scope, id, props);
        const restApiId = this.lazyRestApiId();
        const resource = new apigateway_generated_1.CfnAuthorizer(this, "Resource", {
          name: (_c = props.authorizerName) !== null && _c !== void 0 ? _c : core_1.Names.uniqueId(this),
          restApiId,
          type: "TOKEN",
          authorizerUri: lambdaAuthorizerArn(props.handler),
          authorizerCredentials: (_d = props.assumeRole) === null || _d === void 0 ? void 0 : _d.roleArn,
          authorizerResultTtlInSeconds: (_e = props.resultsCacheTtl) === null || _e === void 0 ? void 0 : _e.toSeconds(),
          identitySource: props.identitySource || "method.request.header.Authorization",
          identityValidationExpression: props.validationRegex
        });
        this.authorizerId = resource.ref;
        this.authorizerArn = core_1.Stack.of(this).formatArn({
          service: "execute-api",
          resource: restApiId,
          resourceName: `authorizers/${this.authorizerId}`
        });
        this.setupPermissions();
      }
    };
    exports2.TokenAuthorizer = TokenAuthorizer;
    _a = JSII_RTTI_SYMBOL_1;
    TokenAuthorizer[_a] = { fqn: "@aws-cdk/aws-apigateway.TokenAuthorizer", version: "1.132.0" };
    var RequestAuthorizer = class extends LambdaAuthorizer {
      constructor(scope, id, props) {
        var _c, _d, _e;
        super(scope, id, props);
        if ((props.resultsCacheTtl === void 0 || props.resultsCacheTtl.toSeconds() !== 0) && props.identitySources.length === 0) {
          throw new Error("At least one Identity Source is required for a REQUEST-based Lambda authorizer if caching is enabled.");
        }
        const restApiId = this.lazyRestApiId();
        const resource = new apigateway_generated_1.CfnAuthorizer(this, "Resource", {
          name: (_c = props.authorizerName) !== null && _c !== void 0 ? _c : core_1.Names.uniqueId(this),
          restApiId,
          type: "REQUEST",
          authorizerUri: lambdaAuthorizerArn(props.handler),
          authorizerCredentials: (_d = props.assumeRole) === null || _d === void 0 ? void 0 : _d.roleArn,
          authorizerResultTtlInSeconds: (_e = props.resultsCacheTtl) === null || _e === void 0 ? void 0 : _e.toSeconds(),
          identitySource: props.identitySources.map((is) => is.toString()).join(",")
        });
        this.authorizerId = resource.ref;
        this.authorizerArn = core_1.Stack.of(this).formatArn({
          service: "execute-api",
          resource: restApiId,
          resourceName: `authorizers/${this.authorizerId}`
        });
        this.setupPermissions();
      }
    };
    exports2.RequestAuthorizer = RequestAuthorizer;
    _b = JSII_RTTI_SYMBOL_1;
    RequestAuthorizer[_b] = { fqn: "@aws-cdk/aws-apigateway.RequestAuthorizer", version: "1.132.0" };
    function lambdaAuthorizerArn(handler) {
      return `arn:${core_1.Stack.of(handler).partition}:apigateway:${core_1.Stack.of(handler).region}:lambda:path/2015-03-31/functions/${handler.functionArn}/invocations`;
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/authorizers/identity-source.js
var require_identity_source = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/authorizers/identity-source.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IdentitySource = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var IdentitySource = class {
      static header(headerName) {
        return IdentitySource.toString(headerName, "method.request.header");
      }
      static queryString(queryString) {
        return IdentitySource.toString(queryString, "method.request.querystring");
      }
      static stageVariable(stageVariable) {
        return IdentitySource.toString(stageVariable, "stageVariables");
      }
      static context(context) {
        return IdentitySource.toString(context, "context");
      }
      static toString(source, type) {
        if (!source.trim()) {
          throw new Error("IdentitySources must be a non-empty string.");
        }
        return `${type}.${source}`;
      }
    };
    exports2.IdentitySource = IdentitySource;
    _a = JSII_RTTI_SYMBOL_1;
    IdentitySource[_a] = { fqn: "@aws-cdk/aws-apigateway.IdentitySource", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/authorizers/cognito.js
var require_cognito = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/authorizers/cognito.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CognitoUserPoolsAuthorizer = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_lib8();
    var apigateway_generated_1 = require_apigateway_generated();
    var authorizer_1 = require_authorizer();
    var method_1 = require_method();
    var CognitoUserPoolsAuthorizer = class extends authorizer_1.Authorizer {
      constructor(scope, id, props) {
        var _b, _c;
        super(scope, id);
        const restApiId = this.lazyRestApiId();
        const resource = new apigateway_generated_1.CfnAuthorizer(this, "Resource", {
          name: (_b = props.authorizerName) !== null && _b !== void 0 ? _b : core_1.Names.uniqueId(this),
          restApiId,
          type: "COGNITO_USER_POOLS",
          providerArns: props.cognitoUserPools.map((userPool) => userPool.userPoolArn),
          authorizerResultTtlInSeconds: (_c = props.resultsCacheTtl) === null || _c === void 0 ? void 0 : _c.toSeconds(),
          identitySource: props.identitySource || "method.request.header.Authorization"
        });
        this.authorizerId = resource.ref;
        this.authorizerArn = core_1.Stack.of(this).formatArn({
          service: "execute-api",
          resource: restApiId,
          resourceName: `authorizers/${this.authorizerId}`
        });
        this.authorizationType = method_1.AuthorizationType.COGNITO;
      }
      _attachToApi(restApi) {
        if (this.restApiId && this.restApiId !== restApi.restApiId) {
          throw new Error("Cannot attach authorizer to two different rest APIs");
        }
        this.restApiId = restApi.restApiId;
      }
      lazyRestApiId() {
        return core_1.Lazy.string({
          produce: () => {
            if (!this.restApiId) {
              throw new Error(`Authorizer (${this.node.path}) must be attached to a RestApi`);
            }
            return this.restApiId;
          }
        });
      }
    };
    exports2.CognitoUserPoolsAuthorizer = CognitoUserPoolsAuthorizer;
    _a = JSII_RTTI_SYMBOL_1;
    CognitoUserPoolsAuthorizer[_a] = { fqn: "@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizer", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/authorizers/index.js
var require_authorizers = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/authorizers/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_lambda2(), exports2);
    __exportStar(require_identity_source(), exports2);
    __exportStar(require_cognito(), exports2);
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/api-definition.js
var require_api_definition = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/api-definition.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    var _d;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AssetApiDefinition = exports2.InlineApiDefinition = exports2.S3ApiDefinition = exports2.ApiDefinition = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var s3_assets = require_lib18();
    var ApiDefinition = class {
      static fromBucket(bucket, key, objectVersion) {
        return new S3ApiDefinition(bucket, key, objectVersion);
      }
      static fromInline(definition) {
        return new InlineApiDefinition(definition);
      }
      static fromAsset(file, options) {
        return new AssetApiDefinition(file, options);
      }
    };
    exports2.ApiDefinition = ApiDefinition;
    _a = JSII_RTTI_SYMBOL_1;
    ApiDefinition[_a] = { fqn: "@aws-cdk/aws-apigateway.ApiDefinition", version: "1.132.0" };
    var S3ApiDefinition = class extends ApiDefinition {
      constructor(bucket, key, objectVersion) {
        super();
        this.key = key;
        this.objectVersion = objectVersion;
        if (!bucket.bucketName) {
          throw new Error("bucketName is undefined for the provided bucket");
        }
        this.bucketName = bucket.bucketName;
      }
      bind(_scope) {
        return {
          s3Location: {
            bucket: this.bucketName,
            key: this.key,
            version: this.objectVersion
          }
        };
      }
    };
    exports2.S3ApiDefinition = S3ApiDefinition;
    _b = JSII_RTTI_SYMBOL_1;
    S3ApiDefinition[_b] = { fqn: "@aws-cdk/aws-apigateway.S3ApiDefinition", version: "1.132.0" };
    var InlineApiDefinition = class extends ApiDefinition {
      constructor(definition) {
        super();
        this.definition = definition;
        if (typeof definition !== "object") {
          throw new Error("definition should be of type object");
        }
        if (Object.keys(definition).length === 0) {
          throw new Error("JSON definition cannot be empty");
        }
      }
      bind(_scope) {
        return {
          inlineDefinition: this.definition
        };
      }
    };
    exports2.InlineApiDefinition = InlineApiDefinition;
    _c = JSII_RTTI_SYMBOL_1;
    InlineApiDefinition[_c] = { fqn: "@aws-cdk/aws-apigateway.InlineApiDefinition", version: "1.132.0" };
    var AssetApiDefinition = class extends ApiDefinition {
      constructor(path, options = {}) {
        super();
        this.path = path;
        this.options = options;
      }
      bind(scope) {
        if (this.asset === void 0) {
          this.asset = new s3_assets.Asset(scope, "APIDefinition", __spreadValues({
            path: this.path
          }, this.options));
        }
        if (this.asset.isZipArchive) {
          throw new Error(`Asset cannot be a .zip file or a directory (${this.path})`);
        }
        return {
          s3Location: {
            bucket: this.asset.s3BucketName,
            key: this.asset.s3ObjectKey
          }
        };
      }
    };
    exports2.AssetApiDefinition = AssetApiDefinition;
    _d = JSII_RTTI_SYMBOL_1;
    AssetApiDefinition[_d] = { fqn: "@aws-cdk/aws-apigateway.AssetApiDefinition", version: "1.132.0" };
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/apigatewayv2.js
var require_apigatewayv2 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/apigatewayv2.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    var _d;
    var _e;
    var _f;
    var _g;
    var _h;
    var _j;
    var _k;
    var _l;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CfnStageV2 = exports2.CfnRouteResponseV2 = exports2.CfnRouteV2 = exports2.CfnModelV2 = exports2.CfnIntegrationResponseV2 = exports2.CfnIntegrationV2 = exports2.CfnDomainNameV2 = exports2.CfnDeploymentV2 = exports2.CfnAuthorizerV2 = exports2.CfnApiMappingV2 = exports2.CfnApiV2 = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var cdk = require_lib8();
    function CfnApiV2PropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      errors.collect(cdk.propertyValidator("apiKeySelectionExpression", cdk.validateString)(properties.apiKeySelectionExpression));
      errors.collect(cdk.propertyValidator("basePath", cdk.validateString)(properties.basePath));
      errors.collect(cdk.propertyValidator("body", cdk.validateObject)(properties.body));
      errors.collect(cdk.propertyValidator("bodyS3Location", CfnApiV2_BodyS3LocationPropertyValidator)(properties.bodyS3Location));
      errors.collect(cdk.propertyValidator("corsConfiguration", CfnApiV2_CorsPropertyValidator)(properties.corsConfiguration));
      errors.collect(cdk.propertyValidator("credentialsArn", cdk.validateString)(properties.credentialsArn));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("disableSchemaValidation", cdk.validateBoolean)(properties.disableSchemaValidation));
      errors.collect(cdk.propertyValidator("failOnWarnings", cdk.validateBoolean)(properties.failOnWarnings));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("protocolType", cdk.validateString)(properties.protocolType));
      errors.collect(cdk.propertyValidator("routeKey", cdk.validateString)(properties.routeKey));
      errors.collect(cdk.propertyValidator("routeSelectionExpression", cdk.validateString)(properties.routeSelectionExpression));
      errors.collect(cdk.propertyValidator("tags", cdk.validateObject)(properties.tags));
      errors.collect(cdk.propertyValidator("target", cdk.validateString)(properties.target));
      errors.collect(cdk.propertyValidator("version", cdk.validateString)(properties.version));
      return errors.wrap('supplied properties not correct for "CfnApiV2Props"');
    }
    function cfnApiV2PropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnApiV2PropsValidator(properties).assertSuccess();
      return {
        ApiKeySelectionExpression: cdk.stringToCloudFormation(properties.apiKeySelectionExpression),
        BasePath: cdk.stringToCloudFormation(properties.basePath),
        Body: cdk.objectToCloudFormation(properties.body),
        BodyS3Location: cfnApiV2BodyS3LocationPropertyToCloudFormation(properties.bodyS3Location),
        CorsConfiguration: cfnApiV2CorsPropertyToCloudFormation(properties.corsConfiguration),
        CredentialsArn: cdk.stringToCloudFormation(properties.credentialsArn),
        Description: cdk.stringToCloudFormation(properties.description),
        DisableSchemaValidation: cdk.booleanToCloudFormation(properties.disableSchemaValidation),
        FailOnWarnings: cdk.booleanToCloudFormation(properties.failOnWarnings),
        Name: cdk.stringToCloudFormation(properties.name),
        ProtocolType: cdk.stringToCloudFormation(properties.protocolType),
        RouteKey: cdk.stringToCloudFormation(properties.routeKey),
        RouteSelectionExpression: cdk.stringToCloudFormation(properties.routeSelectionExpression),
        Tags: cdk.objectToCloudFormation(properties.tags),
        Target: cdk.stringToCloudFormation(properties.target),
        Version: cdk.stringToCloudFormation(properties.version)
      };
    }
    var CfnApiV2 = class extends cdk.CfnResource {
      constructor(scope, id, props = {}) {
        super(scope, id, { type: CfnApiV2.CFN_RESOURCE_TYPE_NAME, properties: props });
        this.apiKeySelectionExpression = props.apiKeySelectionExpression;
        this.basePath = props.basePath;
        this.body = props.body;
        this.bodyS3Location = props.bodyS3Location;
        this.corsConfiguration = props.corsConfiguration;
        this.credentialsArn = props.credentialsArn;
        this.description = props.description;
        this.disableSchemaValidation = props.disableSchemaValidation;
        this.failOnWarnings = props.failOnWarnings;
        this.name = props.name;
        this.protocolType = props.protocolType;
        this.routeKey = props.routeKey;
        this.routeSelectionExpression = props.routeSelectionExpression;
        this.tags = new cdk.TagManager(cdk.TagType.MAP, "AWS::ApiGatewayV2::Api", props.tags, { tagPropertyName: "tags" });
        this.target = props.target;
        this.version = props.version;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnApiV2.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          apiKeySelectionExpression: this.apiKeySelectionExpression,
          basePath: this.basePath,
          body: this.body,
          bodyS3Location: this.bodyS3Location,
          corsConfiguration: this.corsConfiguration,
          credentialsArn: this.credentialsArn,
          description: this.description,
          disableSchemaValidation: this.disableSchemaValidation,
          failOnWarnings: this.failOnWarnings,
          name: this.name,
          protocolType: this.protocolType,
          routeKey: this.routeKey,
          routeSelectionExpression: this.routeSelectionExpression,
          tags: this.tags.renderTags(),
          target: this.target,
          version: this.version
        };
      }
      renderProperties(props) {
        return cfnApiV2PropsToCloudFormation(props);
      }
    };
    exports2.CfnApiV2 = CfnApiV2;
    _a = JSII_RTTI_SYMBOL_1;
    CfnApiV2[_a] = { fqn: "@aws-cdk/aws-apigateway.CfnApiV2", version: "1.132.0" };
    CfnApiV2.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGatewayV2::Api";
    function CfnApiV2_BodyS3LocationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      errors.collect(cdk.propertyValidator("bucket", cdk.validateString)(properties.bucket));
      errors.collect(cdk.propertyValidator("etag", cdk.validateString)(properties.etag));
      errors.collect(cdk.propertyValidator("key", cdk.validateString)(properties.key));
      errors.collect(cdk.propertyValidator("version", cdk.validateString)(properties.version));
      return errors.wrap('supplied properties not correct for "BodyS3LocationProperty"');
    }
    function cfnApiV2BodyS3LocationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnApiV2_BodyS3LocationPropertyValidator(properties).assertSuccess();
      return {
        Bucket: cdk.stringToCloudFormation(properties.bucket),
        Etag: cdk.stringToCloudFormation(properties.etag),
        Key: cdk.stringToCloudFormation(properties.key),
        Version: cdk.stringToCloudFormation(properties.version)
      };
    }
    function CfnApiV2_CorsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      errors.collect(cdk.propertyValidator("allowCredentials", cdk.validateBoolean)(properties.allowCredentials));
      errors.collect(cdk.propertyValidator("allowHeaders", cdk.listValidator(cdk.validateString))(properties.allowHeaders));
      errors.collect(cdk.propertyValidator("allowMethods", cdk.listValidator(cdk.validateString))(properties.allowMethods));
      errors.collect(cdk.propertyValidator("allowOrigins", cdk.listValidator(cdk.validateString))(properties.allowOrigins));
      errors.collect(cdk.propertyValidator("exposeHeaders", cdk.listValidator(cdk.validateString))(properties.exposeHeaders));
      errors.collect(cdk.propertyValidator("maxAge", cdk.validateNumber)(properties.maxAge));
      return errors.wrap('supplied properties not correct for "CorsProperty"');
    }
    function cfnApiV2CorsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnApiV2_CorsPropertyValidator(properties).assertSuccess();
      return {
        AllowCredentials: cdk.booleanToCloudFormation(properties.allowCredentials),
        AllowHeaders: cdk.listMapper(cdk.stringToCloudFormation)(properties.allowHeaders),
        AllowMethods: cdk.listMapper(cdk.stringToCloudFormation)(properties.allowMethods),
        AllowOrigins: cdk.listMapper(cdk.stringToCloudFormation)(properties.allowOrigins),
        ExposeHeaders: cdk.listMapper(cdk.stringToCloudFormation)(properties.exposeHeaders),
        MaxAge: cdk.numberToCloudFormation(properties.maxAge)
      };
    }
    function CfnApiMappingV2PropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      errors.collect(cdk.propertyValidator("apiId", cdk.requiredValidator)(properties.apiId));
      errors.collect(cdk.propertyValidator("apiId", cdk.validateString)(properties.apiId));
      errors.collect(cdk.propertyValidator("apiMappingKey", cdk.validateString)(properties.apiMappingKey));
      errors.collect(cdk.propertyValidator("domainName", cdk.requiredValidator)(properties.domainName));
      errors.collect(cdk.propertyValidator("domainName", cdk.validateString)(properties.domainName));
      errors.collect(cdk.propertyValidator("stage", cdk.requiredValidator)(properties.stage));
      errors.collect(cdk.propertyValidator("stage", cdk.validateString)(properties.stage));
      return errors.wrap('supplied properties not correct for "CfnApiMappingV2Props"');
    }
    function cfnApiMappingV2PropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnApiMappingV2PropsValidator(properties).assertSuccess();
      return {
        ApiId: cdk.stringToCloudFormation(properties.apiId),
        DomainName: cdk.stringToCloudFormation(properties.domainName),
        Stage: cdk.stringToCloudFormation(properties.stage),
        ApiMappingKey: cdk.stringToCloudFormation(properties.apiMappingKey)
      };
    }
    var CfnApiMappingV2 = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnApiMappingV2.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "apiId", this);
        cdk.requireProperty(props, "domainName", this);
        cdk.requireProperty(props, "stage", this);
        this.apiId = props.apiId;
        this.domainName = props.domainName;
        this.stage = props.stage;
        this.apiMappingKey = props.apiMappingKey;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnApiMappingV2.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          apiId: this.apiId,
          domainName: this.domainName,
          stage: this.stage,
          apiMappingKey: this.apiMappingKey
        };
      }
      renderProperties(props) {
        return cfnApiMappingV2PropsToCloudFormation(props);
      }
    };
    exports2.CfnApiMappingV2 = CfnApiMappingV2;
    _b = JSII_RTTI_SYMBOL_1;
    CfnApiMappingV2[_b] = { fqn: "@aws-cdk/aws-apigateway.CfnApiMappingV2", version: "1.132.0" };
    CfnApiMappingV2.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGatewayV2::ApiMapping";
    function CfnAuthorizerV2PropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      errors.collect(cdk.propertyValidator("apiId", cdk.requiredValidator)(properties.apiId));
      errors.collect(cdk.propertyValidator("apiId", cdk.validateString)(properties.apiId));
      errors.collect(cdk.propertyValidator("authorizerCredentialsArn", cdk.validateString)(properties.authorizerCredentialsArn));
      errors.collect(cdk.propertyValidator("authorizerResultTtlInSeconds", cdk.validateNumber)(properties.authorizerResultTtlInSeconds));
      errors.collect(cdk.propertyValidator("authorizerType", cdk.requiredValidator)(properties.authorizerType));
      errors.collect(cdk.propertyValidator("authorizerType", cdk.validateString)(properties.authorizerType));
      errors.collect(cdk.propertyValidator("authorizerUri", cdk.validateString)(properties.authorizerUri));
      errors.collect(cdk.propertyValidator("identitySource", cdk.requiredValidator)(properties.identitySource));
      errors.collect(cdk.propertyValidator("identitySource", cdk.listValidator(cdk.validateString))(properties.identitySource));
      errors.collect(cdk.propertyValidator("identityValidationExpression", cdk.validateString)(properties.identityValidationExpression));
      errors.collect(cdk.propertyValidator("jwtConfiguration", CfnAuthorizerV2_JWTConfigurationPropertyValidator)(properties.jwtConfiguration));
      errors.collect(cdk.propertyValidator("name", cdk.requiredValidator)(properties.name));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      return errors.wrap('supplied properties not correct for "CfnAuthorizerV2Props"');
    }
    function cfnAuthorizerV2PropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnAuthorizerV2PropsValidator(properties).assertSuccess();
      return {
        ApiId: cdk.stringToCloudFormation(properties.apiId),
        AuthorizerType: cdk.stringToCloudFormation(properties.authorizerType),
        IdentitySource: cdk.listMapper(cdk.stringToCloudFormation)(properties.identitySource),
        Name: cdk.stringToCloudFormation(properties.name),
        AuthorizerCredentialsArn: cdk.stringToCloudFormation(properties.authorizerCredentialsArn),
        AuthorizerResultTtlInSeconds: cdk.numberToCloudFormation(properties.authorizerResultTtlInSeconds),
        AuthorizerUri: cdk.stringToCloudFormation(properties.authorizerUri),
        IdentityValidationExpression: cdk.stringToCloudFormation(properties.identityValidationExpression),
        JwtConfiguration: cfnAuthorizerV2JWTConfigurationPropertyToCloudFormation(properties.jwtConfiguration)
      };
    }
    var CfnAuthorizerV2 = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnAuthorizerV2.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "apiId", this);
        cdk.requireProperty(props, "authorizerType", this);
        cdk.requireProperty(props, "identitySource", this);
        cdk.requireProperty(props, "name", this);
        this.apiId = props.apiId;
        this.authorizerType = props.authorizerType;
        this.identitySource = props.identitySource;
        this.name = props.name;
        this.authorizerCredentialsArn = props.authorizerCredentialsArn;
        this.authorizerResultTtlInSeconds = props.authorizerResultTtlInSeconds;
        this.authorizerUri = props.authorizerUri;
        this.identityValidationExpression = props.identityValidationExpression;
        this.jwtConfiguration = props.jwtConfiguration;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnAuthorizerV2.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          apiId: this.apiId,
          authorizerType: this.authorizerType,
          identitySource: this.identitySource,
          name: this.name,
          authorizerCredentialsArn: this.authorizerCredentialsArn,
          authorizerResultTtlInSeconds: this.authorizerResultTtlInSeconds,
          authorizerUri: this.authorizerUri,
          identityValidationExpression: this.identityValidationExpression,
          jwtConfiguration: this.jwtConfiguration
        };
      }
      renderProperties(props) {
        return cfnAuthorizerV2PropsToCloudFormation(props);
      }
    };
    exports2.CfnAuthorizerV2 = CfnAuthorizerV2;
    _c = JSII_RTTI_SYMBOL_1;
    CfnAuthorizerV2[_c] = { fqn: "@aws-cdk/aws-apigateway.CfnAuthorizerV2", version: "1.132.0" };
    CfnAuthorizerV2.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGatewayV2::Authorizer";
    function CfnAuthorizerV2_JWTConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      errors.collect(cdk.propertyValidator("audience", cdk.listValidator(cdk.validateString))(properties.audience));
      errors.collect(cdk.propertyValidator("issuer", cdk.validateString)(properties.issuer));
      return errors.wrap('supplied properties not correct for "JWTConfigurationProperty"');
    }
    function cfnAuthorizerV2JWTConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnAuthorizerV2_JWTConfigurationPropertyValidator(properties).assertSuccess();
      return {
        Audience: cdk.listMapper(cdk.stringToCloudFormation)(properties.audience),
        Issuer: cdk.stringToCloudFormation(properties.issuer)
      };
    }
    function CfnDeploymentV2PropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      errors.collect(cdk.propertyValidator("apiId", cdk.requiredValidator)(properties.apiId));
      errors.collect(cdk.propertyValidator("apiId", cdk.validateString)(properties.apiId));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("stageName", cdk.validateString)(properties.stageName));
      return errors.wrap('supplied properties not correct for "CfnDeploymentV2Props"');
    }
    function cfnDeploymentV2PropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnDeploymentV2PropsValidator(properties).assertSuccess();
      return {
        ApiId: cdk.stringToCloudFormation(properties.apiId),
        Description: cdk.stringToCloudFormation(properties.description),
        StageName: cdk.stringToCloudFormation(properties.stageName)
      };
    }
    var CfnDeploymentV2 = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnDeploymentV2.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "apiId", this);
        this.apiId = props.apiId;
        this.description = props.description;
        this.stageName = props.stageName;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnDeploymentV2.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          apiId: this.apiId,
          description: this.description,
          stageName: this.stageName
        };
      }
      renderProperties(props) {
        return cfnDeploymentV2PropsToCloudFormation(props);
      }
    };
    exports2.CfnDeploymentV2 = CfnDeploymentV2;
    _d = JSII_RTTI_SYMBOL_1;
    CfnDeploymentV2[_d] = { fqn: "@aws-cdk/aws-apigateway.CfnDeploymentV2", version: "1.132.0" };
    CfnDeploymentV2.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGatewayV2::Deployment";
    function CfnDomainNameV2PropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      errors.collect(cdk.propertyValidator("domainName", cdk.requiredValidator)(properties.domainName));
      errors.collect(cdk.propertyValidator("domainName", cdk.validateString)(properties.domainName));
      errors.collect(cdk.propertyValidator("domainNameConfigurations", cdk.listValidator(CfnDomainNameV2_DomainNameConfigurationPropertyValidator))(properties.domainNameConfigurations));
      errors.collect(cdk.propertyValidator("tags", cdk.validateObject)(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnDomainNameV2Props"');
    }
    function cfnDomainNameV2PropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnDomainNameV2PropsValidator(properties).assertSuccess();
      return {
        DomainName: cdk.stringToCloudFormation(properties.domainName),
        DomainNameConfigurations: cdk.listMapper(cfnDomainNameV2DomainNameConfigurationPropertyToCloudFormation)(properties.domainNameConfigurations),
        Tags: cdk.objectToCloudFormation(properties.tags)
      };
    }
    var CfnDomainNameV2 = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnDomainNameV2.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "domainName", this);
        this.attrRegionalDomainName = cdk.Token.asString(this.getAtt("RegionalDomainName"));
        this.attrRegionalHostedZoneId = cdk.Token.asString(this.getAtt("RegionalHostedZoneId"));
        this.domainName = props.domainName;
        this.domainNameConfigurations = props.domainNameConfigurations;
        this.tags = new cdk.TagManager(cdk.TagType.MAP, "AWS::ApiGatewayV2::DomainName", props.tags, { tagPropertyName: "tags" });
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnDomainNameV2.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          domainName: this.domainName,
          domainNameConfigurations: this.domainNameConfigurations,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnDomainNameV2PropsToCloudFormation(props);
      }
    };
    exports2.CfnDomainNameV2 = CfnDomainNameV2;
    _e = JSII_RTTI_SYMBOL_1;
    CfnDomainNameV2[_e] = { fqn: "@aws-cdk/aws-apigateway.CfnDomainNameV2", version: "1.132.0" };
    CfnDomainNameV2.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGatewayV2::DomainName";
    function CfnDomainNameV2_DomainNameConfigurationPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      errors.collect(cdk.propertyValidator("certificateArn", cdk.validateString)(properties.certificateArn));
      errors.collect(cdk.propertyValidator("certificateName", cdk.validateString)(properties.certificateName));
      errors.collect(cdk.propertyValidator("endpointType", cdk.validateString)(properties.endpointType));
      return errors.wrap('supplied properties not correct for "DomainNameConfigurationProperty"');
    }
    function cfnDomainNameV2DomainNameConfigurationPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnDomainNameV2_DomainNameConfigurationPropertyValidator(properties).assertSuccess();
      return {
        CertificateArn: cdk.stringToCloudFormation(properties.certificateArn),
        CertificateName: cdk.stringToCloudFormation(properties.certificateName),
        EndpointType: cdk.stringToCloudFormation(properties.endpointType)
      };
    }
    function CfnIntegrationV2PropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      errors.collect(cdk.propertyValidator("apiId", cdk.requiredValidator)(properties.apiId));
      errors.collect(cdk.propertyValidator("apiId", cdk.validateString)(properties.apiId));
      errors.collect(cdk.propertyValidator("connectionType", cdk.validateString)(properties.connectionType));
      errors.collect(cdk.propertyValidator("contentHandlingStrategy", cdk.validateString)(properties.contentHandlingStrategy));
      errors.collect(cdk.propertyValidator("credentialsArn", cdk.validateString)(properties.credentialsArn));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("integrationMethod", cdk.validateString)(properties.integrationMethod));
      errors.collect(cdk.propertyValidator("integrationType", cdk.requiredValidator)(properties.integrationType));
      errors.collect(cdk.propertyValidator("integrationType", cdk.validateString)(properties.integrationType));
      errors.collect(cdk.propertyValidator("integrationUri", cdk.validateString)(properties.integrationUri));
      errors.collect(cdk.propertyValidator("passthroughBehavior", cdk.validateString)(properties.passthroughBehavior));
      errors.collect(cdk.propertyValidator("payloadFormatVersion", cdk.validateString)(properties.payloadFormatVersion));
      errors.collect(cdk.propertyValidator("requestParameters", cdk.validateObject)(properties.requestParameters));
      errors.collect(cdk.propertyValidator("requestTemplates", cdk.validateObject)(properties.requestTemplates));
      errors.collect(cdk.propertyValidator("templateSelectionExpression", cdk.validateString)(properties.templateSelectionExpression));
      errors.collect(cdk.propertyValidator("timeoutInMillis", cdk.validateNumber)(properties.timeoutInMillis));
      return errors.wrap('supplied properties not correct for "CfnIntegrationV2Props"');
    }
    function cfnIntegrationV2PropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnIntegrationV2PropsValidator(properties).assertSuccess();
      return {
        ApiId: cdk.stringToCloudFormation(properties.apiId),
        IntegrationType: cdk.stringToCloudFormation(properties.integrationType),
        ConnectionType: cdk.stringToCloudFormation(properties.connectionType),
        ContentHandlingStrategy: cdk.stringToCloudFormation(properties.contentHandlingStrategy),
        CredentialsArn: cdk.stringToCloudFormation(properties.credentialsArn),
        Description: cdk.stringToCloudFormation(properties.description),
        IntegrationMethod: cdk.stringToCloudFormation(properties.integrationMethod),
        IntegrationUri: cdk.stringToCloudFormation(properties.integrationUri),
        PassthroughBehavior: cdk.stringToCloudFormation(properties.passthroughBehavior),
        PayloadFormatVersion: cdk.stringToCloudFormation(properties.payloadFormatVersion),
        RequestParameters: cdk.objectToCloudFormation(properties.requestParameters),
        RequestTemplates: cdk.objectToCloudFormation(properties.requestTemplates),
        TemplateSelectionExpression: cdk.stringToCloudFormation(properties.templateSelectionExpression),
        TimeoutInMillis: cdk.numberToCloudFormation(properties.timeoutInMillis)
      };
    }
    var CfnIntegrationV2 = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnIntegrationV2.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "apiId", this);
        cdk.requireProperty(props, "integrationType", this);
        this.apiId = props.apiId;
        this.integrationType = props.integrationType;
        this.connectionType = props.connectionType;
        this.contentHandlingStrategy = props.contentHandlingStrategy;
        this.credentialsArn = props.credentialsArn;
        this.description = props.description;
        this.integrationMethod = props.integrationMethod;
        this.integrationUri = props.integrationUri;
        this.passthroughBehavior = props.passthroughBehavior;
        this.payloadFormatVersion = props.payloadFormatVersion;
        this.requestParameters = props.requestParameters;
        this.requestTemplates = props.requestTemplates;
        this.templateSelectionExpression = props.templateSelectionExpression;
        this.timeoutInMillis = props.timeoutInMillis;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnIntegrationV2.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          apiId: this.apiId,
          integrationType: this.integrationType,
          connectionType: this.connectionType,
          contentHandlingStrategy: this.contentHandlingStrategy,
          credentialsArn: this.credentialsArn,
          description: this.description,
          integrationMethod: this.integrationMethod,
          integrationUri: this.integrationUri,
          passthroughBehavior: this.passthroughBehavior,
          payloadFormatVersion: this.payloadFormatVersion,
          requestParameters: this.requestParameters,
          requestTemplates: this.requestTemplates,
          templateSelectionExpression: this.templateSelectionExpression,
          timeoutInMillis: this.timeoutInMillis
        };
      }
      renderProperties(props) {
        return cfnIntegrationV2PropsToCloudFormation(props);
      }
    };
    exports2.CfnIntegrationV2 = CfnIntegrationV2;
    _f = JSII_RTTI_SYMBOL_1;
    CfnIntegrationV2[_f] = { fqn: "@aws-cdk/aws-apigateway.CfnIntegrationV2", version: "1.132.0" };
    CfnIntegrationV2.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGatewayV2::Integration";
    function CfnIntegrationResponseV2PropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      errors.collect(cdk.propertyValidator("apiId", cdk.requiredValidator)(properties.apiId));
      errors.collect(cdk.propertyValidator("apiId", cdk.validateString)(properties.apiId));
      errors.collect(cdk.propertyValidator("contentHandlingStrategy", cdk.validateString)(properties.contentHandlingStrategy));
      errors.collect(cdk.propertyValidator("integrationId", cdk.requiredValidator)(properties.integrationId));
      errors.collect(cdk.propertyValidator("integrationId", cdk.validateString)(properties.integrationId));
      errors.collect(cdk.propertyValidator("integrationResponseKey", cdk.requiredValidator)(properties.integrationResponseKey));
      errors.collect(cdk.propertyValidator("integrationResponseKey", cdk.validateString)(properties.integrationResponseKey));
      errors.collect(cdk.propertyValidator("responseParameters", cdk.validateObject)(properties.responseParameters));
      errors.collect(cdk.propertyValidator("responseTemplates", cdk.validateObject)(properties.responseTemplates));
      errors.collect(cdk.propertyValidator("templateSelectionExpression", cdk.validateString)(properties.templateSelectionExpression));
      return errors.wrap('supplied properties not correct for "CfnIntegrationResponseV2Props"');
    }
    function cfnIntegrationResponseV2PropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnIntegrationResponseV2PropsValidator(properties).assertSuccess();
      return {
        ApiId: cdk.stringToCloudFormation(properties.apiId),
        IntegrationId: cdk.stringToCloudFormation(properties.integrationId),
        IntegrationResponseKey: cdk.stringToCloudFormation(properties.integrationResponseKey),
        ContentHandlingStrategy: cdk.stringToCloudFormation(properties.contentHandlingStrategy),
        ResponseParameters: cdk.objectToCloudFormation(properties.responseParameters),
        ResponseTemplates: cdk.objectToCloudFormation(properties.responseTemplates),
        TemplateSelectionExpression: cdk.stringToCloudFormation(properties.templateSelectionExpression)
      };
    }
    var CfnIntegrationResponseV2 = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnIntegrationResponseV2.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "apiId", this);
        cdk.requireProperty(props, "integrationId", this);
        cdk.requireProperty(props, "integrationResponseKey", this);
        this.apiId = props.apiId;
        this.integrationId = props.integrationId;
        this.integrationResponseKey = props.integrationResponseKey;
        this.contentHandlingStrategy = props.contentHandlingStrategy;
        this.responseParameters = props.responseParameters;
        this.responseTemplates = props.responseTemplates;
        this.templateSelectionExpression = props.templateSelectionExpression;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnIntegrationResponseV2.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          apiId: this.apiId,
          integrationId: this.integrationId,
          integrationResponseKey: this.integrationResponseKey,
          contentHandlingStrategy: this.contentHandlingStrategy,
          responseParameters: this.responseParameters,
          responseTemplates: this.responseTemplates,
          templateSelectionExpression: this.templateSelectionExpression
        };
      }
      renderProperties(props) {
        return cfnIntegrationResponseV2PropsToCloudFormation(props);
      }
    };
    exports2.CfnIntegrationResponseV2 = CfnIntegrationResponseV2;
    _g = JSII_RTTI_SYMBOL_1;
    CfnIntegrationResponseV2[_g] = { fqn: "@aws-cdk/aws-apigateway.CfnIntegrationResponseV2", version: "1.132.0" };
    CfnIntegrationResponseV2.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGatewayV2::IntegrationResponse";
    function CfnModelV2PropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      errors.collect(cdk.propertyValidator("apiId", cdk.requiredValidator)(properties.apiId));
      errors.collect(cdk.propertyValidator("apiId", cdk.validateString)(properties.apiId));
      errors.collect(cdk.propertyValidator("contentType", cdk.validateString)(properties.contentType));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("name", cdk.requiredValidator)(properties.name));
      errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
      errors.collect(cdk.propertyValidator("schema", cdk.requiredValidator)(properties.schema));
      errors.collect(cdk.propertyValidator("schema", cdk.validateObject)(properties.schema));
      return errors.wrap('supplied properties not correct for "CfnModelV2Props"');
    }
    function cfnModelV2PropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnModelV2PropsValidator(properties).assertSuccess();
      return {
        ApiId: cdk.stringToCloudFormation(properties.apiId),
        Name: cdk.stringToCloudFormation(properties.name),
        Schema: cdk.objectToCloudFormation(properties.schema),
        ContentType: cdk.stringToCloudFormation(properties.contentType),
        Description: cdk.stringToCloudFormation(properties.description)
      };
    }
    var CfnModelV2 = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnModelV2.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "apiId", this);
        cdk.requireProperty(props, "name", this);
        cdk.requireProperty(props, "schema", this);
        this.apiId = props.apiId;
        this.name = props.name;
        this.schema = props.schema;
        this.contentType = props.contentType;
        this.description = props.description;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnModelV2.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          apiId: this.apiId,
          name: this.name,
          schema: this.schema,
          contentType: this.contentType,
          description: this.description
        };
      }
      renderProperties(props) {
        return cfnModelV2PropsToCloudFormation(props);
      }
    };
    exports2.CfnModelV2 = CfnModelV2;
    _h = JSII_RTTI_SYMBOL_1;
    CfnModelV2[_h] = { fqn: "@aws-cdk/aws-apigateway.CfnModelV2", version: "1.132.0" };
    CfnModelV2.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGatewayV2::Model";
    function CfnRouteV2PropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      errors.collect(cdk.propertyValidator("apiId", cdk.requiredValidator)(properties.apiId));
      errors.collect(cdk.propertyValidator("apiId", cdk.validateString)(properties.apiId));
      errors.collect(cdk.propertyValidator("apiKeyRequired", cdk.validateBoolean)(properties.apiKeyRequired));
      errors.collect(cdk.propertyValidator("authorizationScopes", cdk.listValidator(cdk.validateString))(properties.authorizationScopes));
      errors.collect(cdk.propertyValidator("authorizationType", cdk.validateString)(properties.authorizationType));
      errors.collect(cdk.propertyValidator("authorizerId", cdk.validateString)(properties.authorizerId));
      errors.collect(cdk.propertyValidator("modelSelectionExpression", cdk.validateString)(properties.modelSelectionExpression));
      errors.collect(cdk.propertyValidator("operationName", cdk.validateString)(properties.operationName));
      errors.collect(cdk.propertyValidator("requestModels", cdk.validateObject)(properties.requestModels));
      errors.collect(cdk.propertyValidator("requestParameters", cdk.validateObject)(properties.requestParameters));
      errors.collect(cdk.propertyValidator("routeKey", cdk.requiredValidator)(properties.routeKey));
      errors.collect(cdk.propertyValidator("routeKey", cdk.validateString)(properties.routeKey));
      errors.collect(cdk.propertyValidator("routeResponseSelectionExpression", cdk.validateString)(properties.routeResponseSelectionExpression));
      errors.collect(cdk.propertyValidator("target", cdk.validateString)(properties.target));
      return errors.wrap('supplied properties not correct for "CfnRouteV2Props"');
    }
    function cfnRouteV2PropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRouteV2PropsValidator(properties).assertSuccess();
      return {
        ApiId: cdk.stringToCloudFormation(properties.apiId),
        RouteKey: cdk.stringToCloudFormation(properties.routeKey),
        ApiKeyRequired: cdk.booleanToCloudFormation(properties.apiKeyRequired),
        AuthorizationScopes: cdk.listMapper(cdk.stringToCloudFormation)(properties.authorizationScopes),
        AuthorizationType: cdk.stringToCloudFormation(properties.authorizationType),
        AuthorizerId: cdk.stringToCloudFormation(properties.authorizerId),
        ModelSelectionExpression: cdk.stringToCloudFormation(properties.modelSelectionExpression),
        OperationName: cdk.stringToCloudFormation(properties.operationName),
        RequestModels: cdk.objectToCloudFormation(properties.requestModels),
        RequestParameters: cdk.objectToCloudFormation(properties.requestParameters),
        RouteResponseSelectionExpression: cdk.stringToCloudFormation(properties.routeResponseSelectionExpression),
        Target: cdk.stringToCloudFormation(properties.target)
      };
    }
    var CfnRouteV2 = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnRouteV2.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "apiId", this);
        cdk.requireProperty(props, "routeKey", this);
        this.apiId = props.apiId;
        this.routeKey = props.routeKey;
        this.apiKeyRequired = props.apiKeyRequired;
        this.authorizationScopes = props.authorizationScopes;
        this.authorizationType = props.authorizationType;
        this.authorizerId = props.authorizerId;
        this.modelSelectionExpression = props.modelSelectionExpression;
        this.operationName = props.operationName;
        this.requestModels = props.requestModels;
        this.requestParameters = props.requestParameters;
        this.routeResponseSelectionExpression = props.routeResponseSelectionExpression;
        this.target = props.target;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnRouteV2.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          apiId: this.apiId,
          routeKey: this.routeKey,
          apiKeyRequired: this.apiKeyRequired,
          authorizationScopes: this.authorizationScopes,
          authorizationType: this.authorizationType,
          authorizerId: this.authorizerId,
          modelSelectionExpression: this.modelSelectionExpression,
          operationName: this.operationName,
          requestModels: this.requestModels,
          requestParameters: this.requestParameters,
          routeResponseSelectionExpression: this.routeResponseSelectionExpression,
          target: this.target
        };
      }
      renderProperties(props) {
        return cfnRouteV2PropsToCloudFormation(props);
      }
    };
    exports2.CfnRouteV2 = CfnRouteV2;
    _j = JSII_RTTI_SYMBOL_1;
    CfnRouteV2[_j] = { fqn: "@aws-cdk/aws-apigateway.CfnRouteV2", version: "1.132.0" };
    CfnRouteV2.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGatewayV2::Route";
    function CfnRouteResponseV2PropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      errors.collect(cdk.propertyValidator("apiId", cdk.requiredValidator)(properties.apiId));
      errors.collect(cdk.propertyValidator("apiId", cdk.validateString)(properties.apiId));
      errors.collect(cdk.propertyValidator("modelSelectionExpression", cdk.validateString)(properties.modelSelectionExpression));
      errors.collect(cdk.propertyValidator("responseModels", cdk.validateObject)(properties.responseModels));
      errors.collect(cdk.propertyValidator("responseParameters", cdk.validateObject)(properties.responseParameters));
      errors.collect(cdk.propertyValidator("routeId", cdk.requiredValidator)(properties.routeId));
      errors.collect(cdk.propertyValidator("routeId", cdk.validateString)(properties.routeId));
      errors.collect(cdk.propertyValidator("routeResponseKey", cdk.requiredValidator)(properties.routeResponseKey));
      errors.collect(cdk.propertyValidator("routeResponseKey", cdk.validateString)(properties.routeResponseKey));
      return errors.wrap('supplied properties not correct for "CfnRouteResponseV2Props"');
    }
    function cfnRouteResponseV2PropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnRouteResponseV2PropsValidator(properties).assertSuccess();
      return {
        ApiId: cdk.stringToCloudFormation(properties.apiId),
        RouteId: cdk.stringToCloudFormation(properties.routeId),
        RouteResponseKey: cdk.stringToCloudFormation(properties.routeResponseKey),
        ModelSelectionExpression: cdk.stringToCloudFormation(properties.modelSelectionExpression),
        ResponseModels: cdk.objectToCloudFormation(properties.responseModels),
        ResponseParameters: cdk.objectToCloudFormation(properties.responseParameters)
      };
    }
    var CfnRouteResponseV2 = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnRouteResponseV2.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "apiId", this);
        cdk.requireProperty(props, "routeId", this);
        cdk.requireProperty(props, "routeResponseKey", this);
        this.apiId = props.apiId;
        this.routeId = props.routeId;
        this.routeResponseKey = props.routeResponseKey;
        this.modelSelectionExpression = props.modelSelectionExpression;
        this.responseModels = props.responseModels;
        this.responseParameters = props.responseParameters;
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnRouteResponseV2.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          apiId: this.apiId,
          routeId: this.routeId,
          routeResponseKey: this.routeResponseKey,
          modelSelectionExpression: this.modelSelectionExpression,
          responseModels: this.responseModels,
          responseParameters: this.responseParameters
        };
      }
      renderProperties(props) {
        return cfnRouteResponseV2PropsToCloudFormation(props);
      }
    };
    exports2.CfnRouteResponseV2 = CfnRouteResponseV2;
    _k = JSII_RTTI_SYMBOL_1;
    CfnRouteResponseV2[_k] = { fqn: "@aws-cdk/aws-apigateway.CfnRouteResponseV2", version: "1.132.0" };
    CfnRouteResponseV2.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGatewayV2::RouteResponse";
    function CfnStageV2PropsValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      errors.collect(cdk.propertyValidator("accessLogSettings", CfnStageV2_AccessLogSettingsPropertyValidator)(properties.accessLogSettings));
      errors.collect(cdk.propertyValidator("apiId", cdk.requiredValidator)(properties.apiId));
      errors.collect(cdk.propertyValidator("apiId", cdk.validateString)(properties.apiId));
      errors.collect(cdk.propertyValidator("autoDeploy", cdk.validateBoolean)(properties.autoDeploy));
      errors.collect(cdk.propertyValidator("clientCertificateId", cdk.validateString)(properties.clientCertificateId));
      errors.collect(cdk.propertyValidator("defaultRouteSettings", CfnStageV2_RouteSettingsPropertyValidator)(properties.defaultRouteSettings));
      errors.collect(cdk.propertyValidator("deploymentId", cdk.validateString)(properties.deploymentId));
      errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
      errors.collect(cdk.propertyValidator("routeSettings", cdk.validateObject)(properties.routeSettings));
      errors.collect(cdk.propertyValidator("stageName", cdk.requiredValidator)(properties.stageName));
      errors.collect(cdk.propertyValidator("stageName", cdk.validateString)(properties.stageName));
      errors.collect(cdk.propertyValidator("stageVariables", cdk.validateObject)(properties.stageVariables));
      errors.collect(cdk.propertyValidator("tags", cdk.validateObject)(properties.tags));
      return errors.wrap('supplied properties not correct for "CfnStageV2Props"');
    }
    function cfnStageV2PropsToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnStageV2PropsValidator(properties).assertSuccess();
      return {
        ApiId: cdk.stringToCloudFormation(properties.apiId),
        StageName: cdk.stringToCloudFormation(properties.stageName),
        AccessLogSettings: cfnStageV2AccessLogSettingsPropertyToCloudFormation(properties.accessLogSettings),
        AutoDeploy: cdk.booleanToCloudFormation(properties.autoDeploy),
        ClientCertificateId: cdk.stringToCloudFormation(properties.clientCertificateId),
        DefaultRouteSettings: cfnStageV2RouteSettingsPropertyToCloudFormation(properties.defaultRouteSettings),
        DeploymentId: cdk.stringToCloudFormation(properties.deploymentId),
        Description: cdk.stringToCloudFormation(properties.description),
        RouteSettings: cdk.objectToCloudFormation(properties.routeSettings),
        StageVariables: cdk.objectToCloudFormation(properties.stageVariables),
        Tags: cdk.objectToCloudFormation(properties.tags)
      };
    }
    var CfnStageV2 = class extends cdk.CfnResource {
      constructor(scope, id, props) {
        super(scope, id, { type: CfnStageV2.CFN_RESOURCE_TYPE_NAME, properties: props });
        cdk.requireProperty(props, "apiId", this);
        cdk.requireProperty(props, "stageName", this);
        this.apiId = props.apiId;
        this.stageName = props.stageName;
        this.accessLogSettings = props.accessLogSettings;
        this.autoDeploy = props.autoDeploy;
        this.clientCertificateId = props.clientCertificateId;
        this.defaultRouteSettings = props.defaultRouteSettings;
        this.deploymentId = props.deploymentId;
        this.description = props.description;
        this.routeSettings = props.routeSettings;
        this.stageVariables = props.stageVariables;
        this.tags = new cdk.TagManager(cdk.TagType.MAP, "AWS::ApiGatewayV2::Stage", props.tags, { tagPropertyName: "tags" });
      }
      inspect(inspector) {
        inspector.addAttribute("aws:cdk:cloudformation:type", CfnStageV2.CFN_RESOURCE_TYPE_NAME);
        inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
      }
      get cfnProperties() {
        return {
          apiId: this.apiId,
          stageName: this.stageName,
          accessLogSettings: this.accessLogSettings,
          autoDeploy: this.autoDeploy,
          clientCertificateId: this.clientCertificateId,
          defaultRouteSettings: this.defaultRouteSettings,
          deploymentId: this.deploymentId,
          description: this.description,
          routeSettings: this.routeSettings,
          stageVariables: this.stageVariables,
          tags: this.tags.renderTags()
        };
      }
      renderProperties(props) {
        return cfnStageV2PropsToCloudFormation(props);
      }
    };
    exports2.CfnStageV2 = CfnStageV2;
    _l = JSII_RTTI_SYMBOL_1;
    CfnStageV2[_l] = { fqn: "@aws-cdk/aws-apigateway.CfnStageV2", version: "1.132.0" };
    CfnStageV2.CFN_RESOURCE_TYPE_NAME = "AWS::ApiGatewayV2::Stage";
    function CfnStageV2_AccessLogSettingsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      errors.collect(cdk.propertyValidator("destinationArn", cdk.validateString)(properties.destinationArn));
      errors.collect(cdk.propertyValidator("format", cdk.validateString)(properties.format));
      return errors.wrap('supplied properties not correct for "AccessLogSettingsProperty"');
    }
    function cfnStageV2AccessLogSettingsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnStageV2_AccessLogSettingsPropertyValidator(properties).assertSuccess();
      return {
        DestinationArn: cdk.stringToCloudFormation(properties.destinationArn),
        Format: cdk.stringToCloudFormation(properties.format)
      };
    }
    function CfnStageV2_RouteSettingsPropertyValidator(properties) {
      if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
      }
      const errors = new cdk.ValidationResults();
      errors.collect(cdk.propertyValidator("dataTraceEnabled", cdk.validateBoolean)(properties.dataTraceEnabled));
      errors.collect(cdk.propertyValidator("detailedMetricsEnabled", cdk.validateBoolean)(properties.detailedMetricsEnabled));
      errors.collect(cdk.propertyValidator("loggingLevel", cdk.validateString)(properties.loggingLevel));
      errors.collect(cdk.propertyValidator("throttlingBurstLimit", cdk.validateNumber)(properties.throttlingBurstLimit));
      errors.collect(cdk.propertyValidator("throttlingRateLimit", cdk.validateNumber)(properties.throttlingRateLimit));
      return errors.wrap('supplied properties not correct for "RouteSettingsProperty"');
    }
    function cfnStageV2RouteSettingsPropertyToCloudFormation(properties) {
      if (!cdk.canInspect(properties)) {
        return properties;
      }
      CfnStageV2_RouteSettingsPropertyValidator(properties).assertSuccess();
      return {
        DataTraceEnabled: cdk.booleanToCloudFormation(properties.dataTraceEnabled),
        DetailedMetricsEnabled: cdk.booleanToCloudFormation(properties.detailedMetricsEnabled),
        LoggingLevel: cdk.stringToCloudFormation(properties.loggingLevel),
        ThrottlingBurstLimit: cdk.numberToCloudFormation(properties.throttlingBurstLimit),
        ThrottlingRateLimit: cdk.numberToCloudFormation(properties.throttlingRateLimit)
      };
    }
  }
});

// asset-input/node_modules/@aws-cdk/aws-apigateway/lib/index.js
var require_lib26 = __commonJS({
  "asset-input/node_modules/@aws-cdk/aws-apigateway/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_restapi(), exports2);
    __exportStar(require_resource2(), exports2);
    __exportStar(require_method(), exports2);
    __exportStar(require_integration(), exports2);
    __exportStar(require_deployment(), exports2);
    __exportStar(require_stage2(), exports2);
    __exportStar(require_integrations(), exports2);
    __exportStar(require_lambda_api(), exports2);
    __exportStar(require_api_key(), exports2);
    __exportStar(require_usage_plan(), exports2);
    __exportStar(require_vpc_link(), exports2);
    __exportStar(require_methodresponse(), exports2);
    __exportStar(require_model(), exports2);
    __exportStar(require_requestvalidator(), exports2);
    __exportStar(require_authorizer(), exports2);
    __exportStar(require_json_schema(), exports2);
    __exportStar(require_domain_name(), exports2);
    __exportStar(require_base_path_mapping(), exports2);
    __exportStar(require_cors(), exports2);
    __exportStar(require_authorizers(), exports2);
    __exportStar(require_access_log(), exports2);
    __exportStar(require_api_definition(), exports2);
    __exportStar(require_gateway_response(), exports2);
    __exportStar(require_apigateway_generated(), exports2);
    __exportStar(require_apigatewayv2(), exports2);
  }
});

// asset-input/lambda/products/productsFunction.js
var AWSXRay = require_lib();
var xRay = AWSXRay.captureAWS(require("aws-sdk"));
var AWS = require("aws-sdk");
var uuid = require_dist();
var { JsonSchemaType } = require_lib26();
var productsDdb = process.env.PRODUCTS_DDB;
var productEventsFunctionName = process.env.PRODUCT_EVENTS_FUNCTION_NAME;
var awsRegion = process.env.AWS_REGION;
AWS.config.update({
  region: awsRegion
});
var ddbClient = new AWS.DynamoDB.DocumentClient();
var lamdbdaClient = new AWS.Lambda();
exports.handler = async function(event, context) {
  const method = event.httpMethod;
  console.log(event);
  const apiRequestId = event.requestContext.requestId;
  const lambdaRequestId = context.awsRequestId;
  console.log(`API Gateway RequestId: ${apiRequestId} - Lambda RequestId: ${lambdaRequestId}`);
  if (event.resource === "/products") {
    if (method === "GET") {
      console.log("Get /products");
      const data = await getAllProducts();
      return {
        statusCode: 200,
        headers: {},
        body: JSON.stringify(data.Items)
      };
    } else if (method === "POST") {
      console.log("Post /products");
      const product = JSON.parse(event.body);
      product.id = uuid.v4();
      await createProduct(product);
      const result = await createProductEvent(product, "PRODUCT_CREATED", "josias@inatel.br", lambdaRequestId);
      console.log(result);
      return {
        statusCode: 201,
        body: JSON.stringify(product)
      };
    }
  } else if (event.resource === "/products/{id}") {
    const productId = event.pathParameters.id;
    if (method === "GET") {
      const data = await getProductById(productId);
      console.log(data);
      if (data.Item) {
        return {
          statusCode: 200,
          body: JSON.stringify(data.Item)
        };
      } else {
        return {
          statusCode: 404,
          body: JSON.stringify(`Product with ID ${productId} not found`)
        };
      }
    } else if (method === "PUT") {
      console.log("PUT {id}");
      const data = await getProductById(productId);
      if (data.Item) {
        const product = JSON.parse(event.body);
        await updateProduct(productId, product);
        const result = await createProductEvent(product, "PRODUCT_UPDATED", "noa@inatel.br", lambdaRequestId);
        console.log(result);
        return {
          statusCode: 200,
          body: JSON.stringify(product)
        };
      } else {
        return {
          statusCode: 404,
          body: JSON.stringify(`Product with ID ${productId} not found`)
        };
      }
    } else if (method === "DELETE") {
      console.log("DELETE {id}");
      const data = await getProductById(productId);
      if (data.Item) {
        await deleteProduct(productId);
        const result = await createProductEvent(date.item, "PRODUCT_DELETED", "josias@inatel.br", lambdaRequestId);
        console.log(result);
        return {
          statusCode: 200,
          body: JSON.stringify(data.Item)
        };
      } else {
        return {
          statusCode: 404,
          body: JSON.stringify(`Product with ID ${productId} not found`)
        };
      }
    }
  }
  return {
    statusCode: 400,
    headers: {},
    body: JSON.stringify("Bad request")
  };
};
function createProductEvent(product, event, email, lambdaRequestId) {
  const params = {
    FunctionName: productEventsFunctionName,
    InvocationType: "Event",
    Payload: JSON.stringify({
      productEvent: {
        requestId: lambdaRequestId,
        eventType: event,
        productId: product.id,
        productCode: product.code,
        productPrice: product.price,
        email
      }
    })
  };
  return lamdbdaClient.invoke(params).promise();
}
function getAllProducts() {
  return ddbClient.scan({
    TableName: productsDdb
  }).promise();
}
function getProductById(productId) {
  return ddbClient.get({
    TableName: productsDdb,
    Key: {
      id: productId
    }
  }).promise();
}
function createProduct(product) {
  return ddbClient.put({
    TableName: productsDdb,
    Item: {
      id: product.id,
      productName: product.productName,
      code: product.code,
      price: product.price,
      model: product.model,
      productUrl: product.productUrl
    }
  }).promise();
}
function updateProduct(productId, product) {
  return ddbClient.update({
    TableName: productsDdb,
    Key: {
      id: productId
    },
    UpdateExpression: "set productName = :n, code = :c, price = :p, model = :m, productUrl = :u",
    ExpressionAttributeValues: {
      ":n": product.productName,
      ":c": product.code,
      ":p": product.price,
      ":m": product.model,
      ":u": product.productUrl
    },
    ReturnValues: "UPDATED_NEW"
  }).promise();
}
function deleteProduct(productId) {
  return ddbClient.delete({
    TableName: productsDdb,
    Key: {
      id: productId
    }
  }).promise();
}
/**
 * @license
 * Copyright 2020 Balena Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * ------------------------------------------------------------------------
 *
 * Copyright 2018 Zeit, Inc.
 * Licensed under the MIT License. See file LICENSE.md for a full copy.
 *
 * ------------------------------------------------------------------------
 */
